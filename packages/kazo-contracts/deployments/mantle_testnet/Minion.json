{
  "address": "0x5E330912A43FCB9C6F976685cd8a56728634648a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply_",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_publicMaxMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistMaxMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistMintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicMintPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMoreTokenIds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongFrom",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "blacklisted",
          "type": "bool"
        }
      ],
      "name": "MarketplaceBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "MarketplaceWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAt",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approvedContract",
          "type": "address"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approvedContract",
          "type": "address"
        }
      ],
      "name": "TokenUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedAt",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_SIGNER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklistedMarketplaces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStakeTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "freeId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "giveawayWithAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMinionStaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isUnlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leader",
      "outputs": [
        {
          "internalType": "contract ILeader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "lockId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockMap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockMapIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceRestriction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "moderators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "nftOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_canStake",
          "type": "bool"
        }
      ],
      "name": "setCanStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_canStakeTransfer",
          "type": "bool"
        }
      ],
      "name": "setCanStakeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setLeader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setModerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setPublicMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newStage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "setStake",
          "type": "bool"
        }
      ],
      "name": "setTokensStakeStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stakeExternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeTransferAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensLastStakedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "unlockId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_values",
          "type": "bool[]"
        }
      ],
      "name": "updateApprovedContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedMarketplaces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f3c0749f84fbd80c055db05dfb576b15dd8ca1be9d7233d29f3ba5962499eee",
  "receipt": {
    "to": null,
    "from": "0x6A8f07700CaF7d76BA3Ef4E8C8d0674894587877",
    "contractAddress": "0x5E330912A43FCB9C6F976685cd8a56728634648a",
    "transactionIndex": 0,
    "gasUsed": "3995177",
    "logsBloom": "0x
    "blockHash": "0x63edf9a52259726c6d8009bc2a2e49e2523ad581ddab95927ef96349b29e6d9f",
    "transactionHash": "0x1f3c0749f84fbd80c055db05dfb576b15dd8ca1be9d7233d29f3ba5962499eee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15418075,
        "transactionHash": "0x1f3c0749f84fbd80c055db05dfb576b15dd8ca1be9d7233d29f3ba5962499eee",
        "address": "0x5E330912A43FCB9C6F976685cd8a56728634648a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a8f07700caf7d76ba3ef4e8c8d0674894587877"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x63edf9a52259726c6d8009bc2a2e49e2523ad581ddab95927ef96349b29e6d9f"
      }
    ],
    "blockNumber": 15418075,
    "cumulativeGasUsed": "3995177",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Mock Minion",
    "Minion",
    "backendAPI",
    1000,
    "0x6A8f07700CaF7d76BA3Ef4E8C8d0674894587877",
    "0xBDfAAD57daecf05786a5Fca0dB9BB0c7Ea2c04E0",
    10000,
    20,
    "10000000000000000",
    "20000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "083924f91c7c7bc6edf0567c60bb9181",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_publicMaxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistMaxMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistMintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicMintPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreTokenIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongFrom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"MarketplaceBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"MarketplaceWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedContract\",\"type\":\"address\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedContract\",\"type\":\"address\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAt\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_SIGNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedMarketplaces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStakeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"freeId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"giveawayWithAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMinionStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"internalType\":\"contract ILeader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"lockId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockMapIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nftOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"}],\"name\":\"setCanStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canStakeTransfer\",\"type\":\"bool\"}],\"name\":\"setCanStakeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newStage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"setStake\",\"type\":\"bool\"}],\"name\":\"setTokensStakeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistMintPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeTransferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensLastStakedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlockId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateApprovedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedMarketplaces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OperatorNotAllowed(address)\":[{\"details\":\"Emitted when an operator is not allowed.\"}]},\"kind\":\"dev\",\"methods\":{\"freeId(uint256,address)\":{\"details\":\"Unlocks a token from a given contract if the contract is no longer approved.\"},\"isUnlocked(uint256)\":{\"details\":\"Returns if the token is locked (non-transferrable) or not.\"},\"lockId(uint256)\":{\"details\":\"Locks a token, preventing it from being transferrable\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockId(uint256)\":{\"details\":\"Unlocks a token.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotMinted()\":[{\"notice\":\"----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------\"}]},\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------\"},\"getApproved(uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------\"},\"name()\":{\"notice\":\"----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Minion.sol\":\"Minion\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC721Template.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./common/ERC721x.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\nerror InvalidTokenId();\\r\\nerror NoMoreTokenIds();\\r\\nerror WithdrawFailed();\\r\\n\\r\\n// Cred: Elementals contract -> learning from the best!\\r\\ncontract ERC721Template is ERC721x, ERC2981 {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    uint16 public immutable MAX_SUPPLY;\\r\\n    uint16 internal _numAvailableRemainingTokens;\\r\\n    uint16[65536] internal _availableRemainingTokens;\\r\\n    uint256 public immutable PUBLIC_MAX_MINT;\\r\\n    uint256 public immutable WHITELIST_MAX_MINT;\\r\\n    address public immutable WITHDRAW_ADDRESS;\\r\\n    address public immutable WHITELIST_SIGNER_ADDRESS;\\r\\n    mapping(address => uint256) public whitelistMintCount;\\r\\n    mapping(address => uint256) public publicMintCount;\\r\\n    uint256 public whitelistMintPrice;\\r\\n    uint256 public publicMintPrice;\\r\\n    uint8 public stage;\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseURI,\\r\\n        uint16 maxSupply_,\\r\\n        address withdrawAddress,\\r\\n        address _whitelistSignerAddress,\\r\\n        uint256 _publicMaxMint,\\r\\n        uint256 _whitelistMaxMint,\\r\\n        uint256 _whitelistMintPrice,\\r\\n        uint256 _publicMintPrice\\r\\n    ) ERC721x(_name, _symbol) {\\r\\n        MAX_SUPPLY = maxSupply_;\\r\\n        _numAvailableRemainingTokens = maxSupply_;\\r\\n        setBaseURI(_baseURI);\\r\\n        WITHDRAW_ADDRESS = withdrawAddress;\\r\\n        WHITELIST_SIGNER_ADDRESS = _whitelistSignerAddress;\\r\\n        PUBLIC_MAX_MINT = _publicMaxMint;\\r\\n        WHITELIST_MAX_MINT = _whitelistMaxMint;\\r\\n        whitelistMintPrice = _whitelistMintPrice;\\r\\n        publicMintPrice = _publicMintPrice;\\r\\n    }\\r\\n\\r\\n    // ---------------\\r\\n    // Name and symbol\\r\\n    // ---------------\\r\\n    function setNameAndSymbol(string calldata _newName, string calldata _newSymbol) external onlyOwner {\\r\\n        name = _newName;\\r\\n        symbol = _newSymbol;\\r\\n    }\\r\\n\\r\\n    function _useRandomAvailableTokenId() internal returns (uint256) {\\r\\n        uint256 numAvailableRemainingTokens = _numAvailableRemainingTokens;\\r\\n        if (numAvailableRemainingTokens == 0) {\\r\\n            revert NoMoreTokenIds();\\r\\n        }\\r\\n\\r\\n        uint256 randomNum = _getRandomNum(numAvailableRemainingTokens);\\r\\n        uint256 randomIndex = randomNum % numAvailableRemainingTokens;\\r\\n        uint256 valAtIndex = _availableRemainingTokens[randomIndex];\\r\\n\\r\\n        uint256 result;\\r\\n        if (valAtIndex == 0) {\\r\\n            // This means the index itself is still an available token\\r\\n            result = randomIndex;\\r\\n        } else {\\r\\n            // This means the index itself is not an available token, but the val at that index is.\\r\\n            result = valAtIndex;\\r\\n        }\\r\\n\\r\\n        uint256 lastIndex = numAvailableRemainingTokens - 1;\\r\\n        if (randomIndex != lastIndex) {\\r\\n            // Replace the value at randomIndex, now that it's been used.\\r\\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\\r\\n            uint256 lastValInArray = _availableRemainingTokens[lastIndex];\\r\\n            if (lastValInArray == 0) {\\r\\n                // This means the index itself is still an available token\\r\\n                // Cast is safe as we know that lastIndex cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastIndex);\\r\\n            } else {\\r\\n                // This means the index itself is not an available token, but the val at that index is.\\r\\n                // Cast is safe as we know that lastValInArray cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastValInArray);\\r\\n                delete _availableRemainingTokens[lastIndex];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        --_numAvailableRemainingTokens;\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _getRandomNum(uint256 numAvailableRemainingTokens) internal view returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        block.prevrandao,\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(this),\\r\\n                        numAvailableRemainingTokens\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function whitelistMint(\\r\\n        uint256 _amount,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature\\r\\n    ) external payable {\\r\\n        // Check if user is whitelisted\\r\\n        require(whitelistSigned(msg.sender, nonce, signature, stage), \\\"Invalid Signature!\\\");\\r\\n\\r\\n        // Check if whitelist sale is open\\r\\n        require(stage == 1, \\\"Whitelist Mint is not open\\\");\\r\\n\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * whitelistMintPrice, \\\"Insufficient ETH!\\\");\\r\\n\\r\\n        // Check if mints does not exceed MAX_SUPPLY\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"Exceeded Max Supply!\\\");\\r\\n\\r\\n        // Check if mints does not exceed max wallet allowance for public sale\\r\\n        require(\\r\\n            whitelistMintCount[msg.sender] + _amount <= WHITELIST_MAX_MINT,\\r\\n            \\\"Wallet has already minted Max Amount for Whitelist Mint!\\\"\\r\\n        );\\r\\n\\r\\n        whitelistMintCount[msg.sender] += _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = _useRandomAvailableTokenId();\\r\\n            _safeMint(msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function publicMint(uint256 _amount) external payable {\\r\\n        // Check if public sale is open\\r\\n        require(stage == 2, \\\"Public Sale Closed!\\\");\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * publicMintPrice, \\\"Insufficient ETH\\\");\\r\\n\\r\\n        // Check if mints does not exceed total max supply\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"Max Supply Reached!\\\");\\r\\n        // Check if mints does not exceed max wallet allowance for public sale\\r\\n        require(\\r\\n            publicMintCount[msg.sender] + _amount <= PUBLIC_MAX_MINT,\\r\\n            \\\"Wallet has already minted Max Amount for Public Mint!\\\"\\r\\n        );\\r\\n        publicMintCount[msg.sender] += _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = _useRandomAvailableTokenId();\\r\\n            _safeMint(msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature,\\r\\n        uint8 _stage\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce, _stage));\\r\\n        return WHITELIST_SIGNER_ADDRESS == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{ value: address(this).balance }(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Mint\\r\\n    // ------------\\r\\n\\r\\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\\r\\n        publicMintPrice = _publicMintPrice;\\r\\n    }\\r\\n\\r\\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\\r\\n        whitelistMintPrice = _whitelistMintPrice;\\r\\n    }\\r\\n\\r\\n    function setStage(uint8 _newStage) public onlyOwner {\\r\\n        stage = _newStage;\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Total Supply\\r\\n    // ------------\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        unchecked {\\r\\n            // Does not need to account for burns as they aren't supported.\\r\\n            return MAX_SUPPLY - _numAvailableRemainingTokens;\\r\\n        }\\r\\n    }\\r\\n\\r\\n     // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n\\r\\n    function setBaseURI(string memory _baseURI_) public onlyOwner {\\r\\n        baseURI = _baseURI_;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // -------\\r\\n    // EIP-165\\r\\n    // -------\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721x, ERC2981) returns (bool) {\\r\\n        return ERC721.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4cb0be9aa697cc0f90052e0b210f4e9ffeb4f6ff01773c969d31b3217e68295c\",\"license\":\"MIT\"},\"contracts/Minion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./interfaces/IMinion.sol\\\";\\r\\nimport \\\"./interfaces/ILeader.sol\\\";\\r\\nimport \\\"./ERC721Template.sol\\\";\\r\\nimport \\\"./common/DefaultOperatorFilterer.sol\\\";\\r\\n\\r\\ncontract Minion is\\r\\n    ERC721Template,\\r\\n    ReentrancyGuard,\\r\\n    DefaultOperatorFilterer,\\r\\n    IMinion\\r\\n{\\r\\n\\r\\n    mapping(uint256 => uint256) public tokensLastStakedAt; // tokenId => timestamp\\r\\n     bool public canStake;\\r\\n        bool public canStakeTransfer;\\r\\n        uint8 public marketplaceRestriction;\\r\\n    event Stake(uint256 tokenId, address by, uint256 stakedAt);\\r\\n    event Unstake(\\r\\n        uint256 tokenId,\\r\\n        address by,\\r\\n        uint256 stakedAt,\\r\\n        uint256 unstakedAt\\r\\n    );\\r\\n\\r\\n    mapping(address => bool) public whitelistedMarketplaces;\\r\\n    mapping(address => bool) public blacklistedMarketplaces;\\r\\n    event MarketplaceWhitelisted(address indexed market, bool whitelisted);\\r\\n    event MarketplaceBlacklisted(address indexed market, bool blacklisted);\\r\\n\\r\\n    ILeader public leader;\\r\\n    mapping(address => bool) public moderators;\\r\\n\\r\\n\\r\\n      constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseURI,\\r\\n        uint16 maxSupply_,\\r\\n        address withdrawAddress,\\r\\n        address _whitelistSignerAddress,\\r\\n        uint256 _publicMaxMint,\\r\\n        uint256 _whitelistMaxMint,\\r\\n        uint256 _whitelistMintPrice,\\r\\n        uint256 _publicMintPrice\\r\\n    ) ERC721Template(_name, _symbol, _baseURI, maxSupply_, withdrawAddress, _whitelistSignerAddress, _publicMaxMint, _whitelistMaxMint, _whitelistMintPrice, _publicMintPrice) {\\r\\n       \\r\\n    }\\r\\n\\r\\n    // =============== Airdrop ===============\\r\\n\\r\\n    function giveawayWithAmounts(\\r\\n        address[] memory receivers,\\r\\n        uint256[] memory amounts\\r\\n    ) external onlyOwner {\\r\\n        require(receivers.length >= 1, \\\"at least 1 receiver\\\");\\r\\n        for (uint256 i; i < receivers.length; i++) {\\r\\n            address receiver = receivers[i];\\r\\n            _safeMint(receiver, amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override(ERC721x) onlyAllowedOperator(from) {\\r\\n        require(\\r\\n            tokensLastStakedAt[tokenId] == 0,\\r\\n            \\\"Cannot transfer staked token\\\"\\r\\n        );\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata _data\\r\\n    ) public override(ERC721x) onlyAllowedOperator(from) {\\r\\n        require(\\r\\n            tokensLastStakedAt[tokenId] == 0,\\r\\n            \\\"Cannot transfer staked token\\\"\\r\\n        );\\r\\n        super.safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 tokenId) public {\\r\\n        require(canStake, \\\"staking not open\\\");\\r\\n        require(\\r\\n            msg.sender == ownerOf(tokenId) ||\\r\\n                msg.sender == owner() ||\\r\\n                msg.sender == address(leader),\\r\\n            \\\"caller must be any: token owner, contract owner, leader\\\"\\r\\n        );\\r\\n        require(tokensLastStakedAt[tokenId] == 0, \\\"already staking\\\");\\r\\n        tokensLastStakedAt[tokenId] = block.timestamp;\\r\\n        emit Stake(tokenId, msg.sender, tokensLastStakedAt[tokenId]);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 tokenId) public {\\r\\n        require(\\r\\n            msg.sender == ownerOf(tokenId) || msg.sender == owner() || moderators[msg.sender],\\r\\n            \\\"caller must be owner of token or contract owner\\\"\\r\\n        );\\r\\n        require(tokensLastStakedAt[tokenId] > 0, \\\"not staking\\\");\\r\\n        if (leader.isMinionQuesting(tokenId)) {\\r\\n            leader.removeCrew(tokenId);\\r\\n        }\\r\\n        uint256 lsa = tokensLastStakedAt[tokenId];\\r\\n        tokensLastStakedAt[tokenId] = 0;\\r\\n        emit Unstake(tokenId, msg.sender, block.timestamp, lsa);\\r\\n    }\\r\\n\\r\\n    function setTokensStakeStatus(uint256[] memory tokenIds, bool setStake)\\r\\n        external\\r\\n    {\\r\\n        for (uint256 i; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            if (setStake) {\\r\\n                stake(tokenId);\\r\\n            } else {\\r\\n                unstake(tokenId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakeTransferAll(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) public {\\r\\n        require(canStakeTransfer, \\\"Staked transfer not open\\\");\\r\\n        require(msg.sender == from, \\\"Sender must be from token owner\\\");\\r\\n        require(tokenIds.length == balanceOf(from), \\\"Staked transfer must transfer all tokens\\\");\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            require(\\r\\n                ownerOf(tokenId) == from,\\r\\n                \\\"Only token owner can do staked transfer\\\"\\r\\n            );\\r\\n            super.transferFrom(from, to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // V4\\r\\n    function isMinionStaking(uint256 tokenId) external view returns (bool) {\\r\\n        return tokensLastStakedAt[tokenId] > 0;\\r\\n    }\\r\\n\\r\\n    function stakeExternal(uint256 tokenId) external {\\r\\n        stake(tokenId);\\r\\n    }\\r\\n\\r\\n    function nftOwnerOf(uint256 tokenId) external view returns (address) {\\r\\n        return ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    function setLeader(address addr) external onlyOwner {\\r\\n        leader = ILeader(addr);\\r\\n    }\\r\\n\\r\\n    function setModerator(address addr, bool add) external onlyOwner {\\r\\n        moderators[addr] = add;\\r\\n    }\\r\\n\\r\\n    function setCanStake(bool _canStake) external onlyOwner {\\r\\n        canStake = _canStake;\\r\\n    }\\r\\n\\r\\n    function setCanStakeTransfer(bool _canStakeTransfer) external onlyOwner {\\r\\n        canStakeTransfer = _canStakeTransfer;\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x29d4dbe1c9307b868aeee4c356bab34545eaeb4a0a10897e1066ceae9a7bfaff\",\"license\":\"MIT\"},\"contracts/common/DefaultOperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\r\\nimport {CANONICAL_CORI_SUBSCRIPTION} from \\\"../lib/Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title  DefaultOperatorFilterer\\r\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\r\\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\\r\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\r\\n *         will be locked to the options set during construction.\\r\\n */\\r\\n\\r\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\r\\n    /// @dev The constructor that is called when the contract is being deployed.\\r\\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\\r\\n}\",\"keccak256\":\"0xfe09cff7ef73ebcd9b4708f91ac9a0ce97cacf8bdf887522ff868eaff5848d59\",\"license\":\"MIT\"},\"contracts/common/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721 {\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\r\\n\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Custom Errors\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    error NotMinted();\\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    error Unauthorized();\\r\\n\\r\\n    error WrongFrom();\\r\\n\\r\\n    error InvalidRecipient();\\r\\n\\r\\n    error UnsafeRecipient();\\r\\n\\r\\n    error AlreadyMinted();\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Metadata Storage/Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Balance/Owner Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) revert ZeroAddress();\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Approval Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert Unauthorized();\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        if (from != _ownerOf[id]) revert WrongFrom();\\r\\n\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\\r\\n            revert Unauthorized();\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC165 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Mint/Burn Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (owner == address(0)) revert NotMinted();\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Safe Mint Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n\\t function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x044de62895567fad0c346113704c2a8016b523cd3bcc494e49b09760189e6625\",\"license\":\"MIT\"},\"contracts/common/ERC721x.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n *     ,_,\\r\\n *    (',')\\r\\n *    {/\\\"\\\\}\\r\\n *    -\\\"-\\\"-\\r\\n */\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./LockRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract ERC721x is ERC721, LockRegistry {\\r\\n\\t    using Strings for uint256;\\r\\n\\r\\n\\t/*\\r\\n\\t *     bytes4(keccak256('freeId(uint256,address)')) == 0x94d216d6\\r\\n\\t *     bytes4(keccak256('isUnlocked(uint256)')) == 0x72abc8b7\\r\\n\\t *     bytes4(keccak256('lockCount(uint256)')) == 0x650b00f6\\r\\n\\t *     bytes4(keccak256('lockId(uint256)')) == 0x2799cde0\\r\\n\\t *     bytes4(keccak256('lockMap(uint256,uint256)')) == 0x2cba8123\\r\\n\\t *     bytes4(keccak256('lockMapIndex(uint256,address)')) == 0x09308e5d\\r\\n\\t *     bytes4(keccak256('unlockId(uint256)')) == 0x40a9c8df\\r\\n\\t *     bytes4(keccak256('approvedContract(address)')) == 0xb1a6505f\\r\\n\\t *\\r\\n\\t *     => 0x94d216d6 ^ 0x72abc8b7 ^ 0x650b00f6 ^ 0x2799cde0 ^\\r\\n\\t *        0x2cba8123 ^ 0x09308e5d ^ 0x40a9c8df ^ 0xb1a6505f == 0x706e8489\\r\\n\\t */\\r\\n\\r\\n\\tbytes4 private constant _INTERFACE_ID_ERC721x = 0x706e8489;\\r\\n\\t  string public baseURI;\\r\\n\\r\\n\\tconstructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {\\r\\n\\t}\\r\\n\\r\\n\\tfunction supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721) returns (bool) {\\r\\n\\t\\treturn _interfaceId == _INTERFACE_ID_ERC721x\\r\\n\\t\\t\\t|| super.supportsInterface(_interfaceId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public override virtual {\\r\\n\\t\\trequire(isUnlocked(_tokenId), \\\"Token is locked\\\");\\r\\n\\t\\tERC721.transferFrom(_from, _to, _tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) public override virtual {\\r\\n\\t\\trequire(isUnlocked(_tokenId), \\\"Token is locked\\\");\\r\\n\\t\\tERC721.safeTransferFrom(_from, _to, _tokenId, _data);\\r\\n\\t}\\r\\n\\r\\n\\tfunction lockId(uint256 _id) external override virtual {\\r\\n\\t\\trequire(_exists(_id), \\\"Token !exist\\\");\\r\\n\\t\\t_lockId(_id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction unlockId(uint256 _id) external override virtual {\\r\\n\\t\\trequire(_exists(_id), \\\"Token !exist\\\");\\r\\n\\t\\t_unlockId(_id);\\r\\n\\t}\\r\\n\\r\\n\\tfunction freeId(uint256 _id, address _contract) external override virtual {\\r\\n\\t\\trequire(_exists(_id), \\\"Token !exist\\\");\\r\\n\\t\\t_freeId(_id, _contract);\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenURI(uint256 _id) public view override virtual returns (string memory) {\\r\\n\\t\\trequire(_exists(_id), \\\"Token !exist\\\");\\r\\n\\t\\treturn string(abi.encodePacked(baseURI, Strings.toString(_id)));\\r\\n\\t}\\r\\n\\r\\n}\",\"keccak256\":\"0x3cbe1039d1375e1183c33a94e2f791077a25534c42c70051fe45951472c69034\",\"license\":\"UNLICENSED\"},\"contracts/common/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IOperatorFilterRegistry {\\r\\n    /**\\r\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\r\\n     *         true if supplied registrant address is not registered.\\r\\n     */\\r\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\r\\n     */\\r\\n    function register(address registrant) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\r\\n     */\\r\\n    function registerAndSubscribe(address registrant, address subscription) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\r\\n     *         address without subscribing.\\r\\n     */\\r\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\r\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\r\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\r\\n     */\\r\\n    function unregister(address addr) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\r\\n     */\\r\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\r\\n     */\\r\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\r\\n     */\\r\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\r\\n     */\\r\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\r\\n     *         subscription if present.\\r\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\r\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\r\\n     *         used.\\r\\n     */\\r\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\r\\n     */\\r\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Get the subscription address of a given registrant, if any.\\r\\n     */\\r\\n    function subscriptionOf(address addr) external returns (address registrant);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the set of addresses subscribed to a given registrant.\\r\\n     *         Note that order is not guaranteed as updates are made.\\r\\n     */\\r\\n    function subscribers(address registrant) external returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\r\\n     *         Note that order is not guaranteed as updates are made.\\r\\n     */\\r\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\r\\n     */\\r\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\r\\n     */\\r\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\r\\n     */\\r\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\r\\n     */\\r\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\r\\n     */\\r\\n    function filteredOperators(address addr) external returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\r\\n     *         Note that order is not guaranteed as updates are made.\\r\\n     */\\r\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\r\\n     *         its subscription.\\r\\n     *         Note that order is not guaranteed as updates are made.\\r\\n     */\\r\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\r\\n     *         its subscription.\\r\\n     *         Note that order is not guaranteed as updates are made.\\r\\n     */\\r\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if an address has registered\\r\\n     */\\r\\n    function isRegistered(address addr) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\r\\n     */\\r\\n    function codeHashOf(address addr) external returns (bytes32);\\r\\n}\",\"keccak256\":\"0x8877b1cbae152d21b3b9a634e1c85edbd06a1f661f3c94b0a651f364a0644bb8\",\"license\":\"MIT\"},\"contracts/common/LockRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n *     ,_,\\r\\n *    (',')\\r\\n *    {/\\\"\\\\}\\r\\n *    -\\\"-\\\"-\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IERC721x.sol\\\";\\r\\n\\r\\nabstract contract LockRegistry is Ownable, IERC721x {\\r\\n\\t\\r\\n\\tmapping(address => bool) public override approvedContract;\\r\\n\\tmapping(uint256 => uint256) public override lockCount;\\r\\n\\tmapping(uint256 => mapping(uint256 => address)) public override lockMap;\\r\\n\\tmapping(uint256 => mapping(address => uint256)) public override lockMapIndex;\\r\\n\\r\\n\\tevent TokenLocked(uint256 indexed tokenId, address indexed approvedContract);\\r\\n\\tevent TokenUnlocked(uint256 indexed tokenId, address indexed approvedContract);\\r\\n\\r\\n\\tfunction isUnlocked(uint256 _id) public view override returns(bool) {\\r\\n\\t\\treturn lockCount[_id] == 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateApprovedContracts(address[] calldata _contracts, bool[] calldata _values) external onlyOwner {\\r\\n\\t\\trequire(_contracts.length == _values.length, \\\"!length\\\");\\r\\n\\t\\tfor(uint256 i = 0; i < _contracts.length; i++)\\r\\n\\t\\t\\tapprovedContract[_contracts[i]] = _values[i];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _lockId(uint256 _id) internal {\\r\\n\\t\\trequire(approvedContract[msg.sender], \\\"Cannot update map\\\");\\r\\n\\t\\trequire(lockMapIndex[_id][msg.sender] == 0, \\\"ID already locked by caller\\\");\\r\\n\\r\\n\\t\\tuint256 count = lockCount[_id] + 1;\\r\\n\\t\\tlockMap[_id][count] = msg.sender;\\r\\n\\t\\tlockMapIndex[_id][msg.sender] = count;\\r\\n\\t\\tlockCount[_id]++;\\r\\n\\t\\temit TokenLocked(_id, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _unlockId(uint256 _id) internal {\\r\\n\\t\\trequire(approvedContract[msg.sender], \\\"Cannot update map\\\");\\r\\n\\t\\tuint256 index = lockMapIndex[_id][msg.sender];\\r\\n\\t\\trequire(index != 0, \\\"ID not locked by caller\\\");\\r\\n\\t\\t\\r\\n\\t\\tuint256 last = lockCount[_id];\\r\\n\\t\\tif (index != last) {\\r\\n\\t\\t\\taddress lastContract = lockMap[_id][last];\\r\\n\\t\\t\\tlockMap[_id][index] = lastContract;\\r\\n\\t\\t\\tlockMap[_id][last] = address(0);\\r\\n\\t\\t\\tlockMapIndex[_id][lastContract] = index;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t\\tlockMap[_id][index] = address(0);\\r\\n\\t\\tlockMapIndex[_id][msg.sender] = 0;\\r\\n\\t\\tlockCount[_id]--;\\r\\n\\t\\temit TokenUnlocked(_id, msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _freeId(uint256 _id, address _contract) internal {\\r\\n\\t\\trequire(!approvedContract[_contract], \\\"Cannot update map\\\");\\r\\n\\t\\tuint256 index = lockMapIndex[_id][_contract];\\r\\n\\t\\trequire(index != 0, \\\"ID not locked\\\");\\r\\n\\r\\n\\t\\tuint256 last = lockCount[_id];\\r\\n\\t\\tif (index != last) {\\r\\n\\t\\t\\taddress lastContract = lockMap[_id][last];\\r\\n\\t\\t\\tlockMap[_id][index] = lastContract;\\r\\n\\t\\t\\tlockMap[_id][last] = address(0);\\r\\n\\t\\t\\tlockMapIndex[_id][lastContract] = index;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t\\tlockMap[_id][index] = address(0);\\r\\n\\t\\tlockMapIndex[_id][_contract] = 0;\\r\\n\\t\\tlockCount[_id]--;\\r\\n\\t\\temit TokenUnlocked(_id, _contract);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0xb012f95d05afaeffafaffb2053c4002a2d87ded24125ee71a9b1e64916a932f6\",\"license\":\"UNLICENSED\"},\"contracts/common/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\r\\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \\\"../lib/Constants.sol\\\";\\r\\n/**\\r\\n * @title  OperatorFilterer\\r\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\r\\n *         registrant's entries in the OperatorFilterRegistry.\\r\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\r\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\r\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\r\\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\\r\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\r\\n *         will be locked to the options set during construction.\\r\\n */\\r\\n\\r\\nabstract contract OperatorFilterer {\\r\\n    /// @dev Emitted when an operator is not allowed.\\r\\n    error OperatorNotAllowed(address operator);\\r\\n\\r\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\r\\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\\r\\n\\r\\n    /// @dev The constructor that is called when the contract is being deployed.\\r\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\r\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\r\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\r\\n        // order for the modifier to filter addresses.\\r\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\r\\n            if (subscribe) {\\r\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\r\\n            } else {\\r\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\r\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\r\\n                } else {\\r\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A helper function to check if an operator is allowed.\\r\\n     */\\r\\n    modifier onlyAllowedOperator(address from) virtual {\\r\\n        // Allow spending tokens from addresses with balance\\r\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\r\\n        // from an EOA.\\r\\n        if (from != msg.sender) {\\r\\n            _checkFilterOperator(msg.sender);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A helper function to check if an operator approval is allowed.\\r\\n     */\\r\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\r\\n        _checkFilterOperator(operator);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A helper function to check if an operator is allowed.\\r\\n     */\\r\\n    function _checkFilterOperator(address operator) internal view virtual {\\r\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\r\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\r\\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\\r\\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\\r\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\r\\n                revert OperatorNotAllowed(operator);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x22196a3dfc9e705dace63ac389728cb80af49e5907388f0bda89800105ccf9d2\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721x.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n *     ,_,\\r\\n *    (',')\\r\\n *    {/\\\"\\\\}\\r\\n *    -\\\"-\\\"-\\r\\n */\\r\\n\\r\\ninterface IERC721x {\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns if the token is locked (non-transferrable) or not.\\r\\n\\t */\\r\\n\\tfunction isUnlocked(uint256 _id) external view returns(bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the amount of locks on the token.\\r\\n\\t */\\r\\n\\tfunction lockCount(uint256 _tokenId) external view returns(uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns if a contract is allowed to lock/unlock tokens.\\r\\n\\t */\\r\\n\\tfunction approvedContract(address _contract) external view returns(bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the contract that locked a token at a specific index in the mapping.\\r\\n\\t */\\r\\n\\tfunction lockMap(uint256 _tokenId, uint256 _index) external view returns(address);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the mapping index of a contract that locked a token.\\r\\n\\t */\\r\\n\\tfunction lockMapIndex(uint256 _tokenId, address _contract) external view returns(uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Locks a token, preventing it from being transferrable\\r\\n\\t */\\r\\n\\tfunction lockId(uint256 _id) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Unlocks a token.\\r\\n\\t */\\r\\n\\tfunction unlockId(uint256 _id) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Unlocks a token from a given contract if the contract is no longer approved.\\r\\n\\t */\\r\\n\\tfunction freeId(uint256 _id, address _contract) external;\\r\\n}\",\"keccak256\":\"0x8de56875278fc6625fa1698cea5d4da5821773bde3ebe2685ebb2a343d342da7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILeader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface ILeader {\\r\\n    function isMinionQuesting(uint256 tokenId) external view returns (bool);\\r\\n    function removeCrew(uint256 minionTokenId) external;\\r\\n}\",\"keccak256\":\"0x20b8380e34f4e8f5f42503a01da15c6d8382c0e3ebb6835f0467ffbb9206e5ee\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMinion.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IMinion {\\r\\n    function isMinionStaking(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function stakeExternal(uint256 tokenId) external;\\r\\n\\r\\n    function nftOwnerOf(uint256 tokenId) external view returns (address);\\r\\n}\",\"keccak256\":\"0x9ea22742ab25211bbc2391840d4047ab65251c3002564bbdf10f997fd0dfa447\",\"license\":\"UNLICENSED\"},\"contracts/lib/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\\r\\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\",\"keccak256\":\"0xdbd7c2b8073d1a5c6813e8b366c8e4b48636c584b9177a76fe29ef85207689cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162004a6938038062004a6983398101604081905262000035916200040c565b733cc6cdda760b79bafa08df41ecfa224f810dceb660018b8b8b8b8b8b8b8b8b8b8989818160006200006883826200058d565b5060016200007782826200058d565b505050620000946200008e6200024460201b60201c565b62000248565b505061ffff87166080819052600e805461ffff19169091179055620000b9886200029a565b6001600160a01b0395861660e052939094166101005260a09190915260c0526110119190915561101255505060016110145550506daaeb6d7670e522a718067333cd4e3b15620002325780156200018057604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156200016157600080fd5b505af115801562000176573d6000803e3d6000fd5b5050505062000232565b6001600160a01b03821615620001d15760405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af29039060440162000146565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b1580156200021857600080fd5b505af11580156200022d573d6000803e3d6000fd5b505050505b50505050505050505050505062000659565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002a4620002b6565b600b620002b282826200058d565b5050565b6006546001600160a01b03163314620003155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033f57600080fd5b81516001600160401b03808211156200035c576200035c62000317565b604051601f8301601f19908116603f0116810190828211818310171562000387576200038762000317565b81604052838152602092508683858801011115620003a457600080fd5b600091505b83821015620003c85785820183015181830184015290820190620003a9565b600093810190920192909252949350505050565b805161ffff81168114620003ef57600080fd5b919050565b80516001600160a01b0381168114620003ef57600080fd5b6000806000806000806000806000806101408b8d0312156200042d57600080fd5b8a516001600160401b03808211156200044557600080fd5b620004538e838f016200032d565b9b5060208d01519150808211156200046a57600080fd5b620004788e838f016200032d565b9a5060408d01519150808211156200048f57600080fd5b506200049e8d828e016200032d565b985050620004af60608c01620003dc565b9650620004bf60808c01620003f4565b9550620004cf60a08c01620003f4565b945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b600181811c908216806200051357607f821691505b6020821081036200053457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200058857600081815260208120601f850160051c81016020861015620005635750805b601f850160051c820191505b8181101562000584578281556001016200056f565b5050505b505050565b81516001600160401b03811115620005a957620005a962000317565b620005c181620005ba8454620004fe565b846200053a565b602080601f831160018114620005f95760008415620005e05750858301515b600019600386901b1c1916600185901b17855562000584565b600085815260208120601f198616915b828110156200062a5788860151825594840194600190910190840162000609565b5085821015620006495787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e0516101005161438c620006dd60003960008181610b8e015261275c01526000818161059f015261191d015260008181610c5601526112cc015260008181610c02015261160501526000818161060a0152818161076801528181611214015281816112460152818161154e0152611580015261438c6000f3fe6080604052600436106103fa5760003560e01c80636352211e11610213578063a611708e11610123578063c87b56dd116100ab578063e88671801161007a578063e886718014610d7a578063e985e9c514610d9a578063eec97e6914610dd5578063f2fde38b14610e06578063f90a82c814610e2657600080fd5b8063c87b56dd14610d03578063ce3cd99714610d23578063d00aea7c14610d43578063dc53fd9214610d6357600080fd5b8063aeb16768116100f2578063aeb1676814610c44578063af2f1a6e14610c78578063b1a6505f14610c98578063b88d4fde14610cc8578063c040e6b814610ce857600080fd5b8063a611708e14610bb0578063a694fc3a14610bd0578063a734678014610bf0578063ac52e64414610c2457600080fd5b80638b8d66f2116101a657806396330b5f1161017557806396330b5f14610ae05780639ed2780914610b0e578063a22cb46514610b29578063a33d9e6714610b49578063a591c4cb14610b7c57600080fd5b80638b8d66f214610a6d5780638da5cb5b14610a8d57806394d216d614610aab57806395d89b4114610acb57600080fd5b8063715018a6116101e2578063715018a6146109ea57806372abc8b7146109ff5780637b6fa73a14610a2d57806386f1b11814610a4d57600080fd5b80636352211e14610968578063650b00f6146109885780636c0360eb146109b557806370a08231146109ca57600080fd5b80632db115441161030e57806340a9c8df116102a15780634331e8dd116102705780634331e8dd146108c857806355f804b3146108e85780635944c753146109085780635a446215146109285780635d82cf6e1461094857600080fd5b806340a9c8df1461084557806340eedabb1461086557806341f434341461088657806342842e0e146108a857600080fd5b806335c6aaf8116102dd57806335c6aaf8146107cb5780633bdf4ac6146107e25780633ccfd60b146108105780633ee2b01d1461082557600080fd5b80632db11544146107235780632e17de781461073657806332cb6b0c1461075657806335b504c51461079d57600080fd5b8063122e04a81161039157806323b872dd1161036057806323b872dd1461065057806324436f77146106705780632799cde0146106835780632a55205a146106a35780632cba8123146106e257600080fd5b8063122e04a81461058d57806314d0f1ba146105c157806318160ddd146105f25780631d4c64d21461063057600080fd5b8063081812fc116103cd578063081812fc146104a957806309308e5d146104f7578063095ea7b31461053d57806309751d941461055d57600080fd5b806301ffc9a7146103ff57806304634d8d1461043457806304845e3e1461045657806306fdde0314610487575b600080fd5b34801561040b57600080fd5b5061041f61041a3660046136d4565b610e46565b60405190151581526020015b60405180910390f35b34801561044057600080fd5b5061045461044f366004613726565b610e66565b005b34801561046257600080fd5b5061041f610471366004613759565b6110186020526000908152604090205460ff1681565b34801561049357600080fd5b5061049c610e7c565b60405161042b9190613798565b3480156104b557600080fd5b506104df6104c43660046137cb565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161042b565b34801561050357600080fd5b5061052f6105123660046137e4565b600a60209081526000928352604080842090915290825290205481565b60405190815260200161042b565b34801561054957600080fd5b50610454610558366004613807565b610f0a565b34801561056957600080fd5b5061041f6105783660046137cb565b60009081526110156020526040902054151590565b34801561059957600080fd5b506104df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105cd57600080fd5b5061041f6105dc366004613759565b61101a6020526000908152604090205460ff1681565b3480156105fe57600080fd5b50600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031661052f565b34801561063c57600080fd5b5061045461064b366004613905565b610fcf565b34801561065c57600080fd5b5061045461066b3660046139c4565b611089565b61045461067e366004613a41565b611111565b34801561068f57600080fd5b5061045461069e3660046137cb565b6113c3565b3480156106af57600080fd5b506106c36106be366004613aba565b611403565b604080516001600160a01b03909316835260208301919091520161042b565b3480156106ee57600080fd5b506104df6106fd366004613aba565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b6104546107313660046137cb565b6114b1565b34801561074257600080fd5b506104546107513660046137cb565b6116ec565b34801561076257600080fd5b5061078a7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff909116815260200161042b565b3480156107a957600080fd5b5061052f6107b83660046137cb565b6110156020526000908152604090205481565b3480156107d757600080fd5b5061052f6110115481565b3480156107ee57600080fd5b5061052f6107fd366004613759565b61100f6020526000908152604090205481565b34801561081c57600080fd5b50610454611919565b34801561083157600080fd5b50610454610840366004613aea565b6119ad565b34801561085157600080fd5b506104546108603660046137cb565b6119e1565b34801561087157600080fd5b50611019546104df906001600160a01b031681565b34801561089257600080fd5b506104df6daaeb6d7670e522a718067333cd4e81565b3480156108b457600080fd5b506104546108c33660046139c4565b611a1e565b3480156108d457600080fd5b506104546108e3366004613759565b611aec565b3480156108f457600080fd5b50610454610903366004613b21565b611b17565b34801561091457600080fd5b50610454610923366004613bb5565b611b2b565b34801561093457600080fd5b50610454610943366004613bf1565b611b3e565b34801561095457600080fd5b506104546109633660046137cb565b611b68565b34801561097457600080fd5b506104df6109833660046137cb565b611b76565b34801561099457600080fd5b5061052f6109a33660046137cb565b60086020526000908152604090205481565b3480156109c157600080fd5b5061049c611bb1565b3480156109d657600080fd5b5061052f6109e5366004613759565b611bbe565b3480156109f657600080fd5b50610454611c03565b348015610a0b57600080fd5b5061041f610a1a3660046137cb565b6000908152600860205260409020541590565b348015610a3957600080fd5b506104df610a483660046137cb565b611c17565b348015610a5957600080fd5b50610454610a68366004613c5c565b611c22565b348015610a7957600080fd5b50610454610a883660046137cb565b611c45565b348015610a9957600080fd5b506006546001600160a01b03166104df565b348015610ab757600080fd5b50610454610ac63660046137e4565b611c4e565b348015610ad757600080fd5b5061049c611c8c565b348015610aec57600080fd5b5061052f610afb366004613759565b6110106020526000908152604090205481565b348015610b1a57600080fd5b506110165461041f9060ff1681565b348015610b3557600080fd5b50610454610b44366004613aea565b611c99565b348015610b5557600080fd5b5061101654610b6a9062010000900460ff1681565b60405160ff909116815260200161042b565b348015610b8857600080fd5b506104df7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bbc57600080fd5b50610454610bcb3660046137cb565b611d05565b348015610bdc57600080fd5b50610454610beb3660046137cb565b611d13565b348015610bfc57600080fd5b5061052f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c3057600080fd5b50610454610c3f366004613cbd565b611eba565b348015610c5057600080fd5b5061052f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c8457600080fd5b50610454610c93366004613d1c565b611f92565b348015610ca457600080fd5b5061041f610cb3366004613759565b60076020526000908152604090205460ff1681565b348015610cd457600080fd5b50610454610ce3366004613d70565b612169565b348015610cf457600080fd5b5061101354610b6a9060ff1681565b348015610d0f57600080fd5b5061049c610d1e3660046137cb565b6121ed565b348015610d2f57600080fd5b50610454610d3e366004613dcd565b612256565b348015610d4f57600080fd5b506110165461041f90610100900460ff1681565b348015610d6f57600080fd5b5061052f6110125481565b348015610d8657600080fd5b50610454610d95366004613c5c565b612275565b348015610da657600080fd5b5061041f610db5366004613df0565b600560209081526000928352604080842090915290825290205460ff1681565b348015610de157600080fd5b5061041f610df0366004613759565b6110176020526000908152604090205460ff1681565b348015610e1257600080fd5b50610454610e21366004613759565b612291565b348015610e3257600080fd5b50610454610e41366004613e1a565b612307565b6000610e5182612361565b80610e605750610e60826123af565b92915050565b610e6e6123e4565b610e78828261243e565b5050565b60008054610e8990613e60565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb590613e60565b8015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114801590610f5657506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b15610f73576040516282b42960e81b815260040160405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610fd76123e4565b6001825110156110245760405162461bcd60e51b815260206004820152601360248201527230ba103632b0b9ba1018903932b1b2b4bb32b960691b60448201526064015b60405180910390fd5b60005b825181101561108457600083828151811061104457611044613e9a565b602002602001015190506110718184848151811061106457611064613e9a565b60200260200101516124f8565b508061107c81613ec6565b915050611027565b505050565b826001600160a01b03811633146110a3576110a3336125c2565b60008281526110156020526040902054156111005760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74207472616e73666572207374616b656420746f6b656e00000000604482015260640161101b565b61110b84848461267b565b50505050565b6110135461112b903390869086908690869060ff166126d4565b61116c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964205369676e61747572652160701b604482015260640161101b565b6110135460ff166001146111c25760405162461bcd60e51b815260206004820152601a60248201527f57686974656c697374204d696e74206973206e6f74206f70656e000000000000604482015260640161101b565b611011546111d09086613edf565b34146112125760405162461bcd60e51b8152602060048201526011602482015270496e73756666696369656e74204554482160781b604482015260640161101b565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168561126a600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031690565b6112749190613ef6565b11156112b95760405162461bcd60e51b81526020600482015260146024820152734578636565646564204d617820537570706c792160601b604482015260640161101b565b33600090815261100f60205260409020547f0000000000000000000000000000000000000000000000000000000000000000906112f7908790613ef6565b111561136b5760405162461bcd60e51b815260206004820152603860248201527f57616c6c65742068617320616c7265616479206d696e746564204d617820416d60448201527f6f756e7420666f722057686974656c697374204d696e74210000000000000000606482015260840161101b565b33600090815261100f60205260408120805487929061138b908490613ef6565b90915550600090505b858110156113bb5760006113a6612792565b90506113b233826124f8565b50600101611394565b505050505050565b6000818152600260205260409020546001600160a01b03166113f75760405162461bcd60e51b815260040161101b90613f09565b61140081612960565b50565b6000828152600d602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291611478575060408051808201909152600c546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611497906001600160601b031687613edf565b6114a19190613f45565b91519350909150505b9250929050565b6110135460ff166002146114fd5760405162461bcd60e51b81526020600482015260136024820152725075626c69632053616c6520436c6f7365642160681b604482015260640161101b565b6110125461150b9082613edf565b341461154c5760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161101b565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16816115a4600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031690565b6115ae9190613ef6565b11156115f25760405162461bcd60e51b81526020600482015260136024820152724d617820537570706c7920526561636865642160681b604482015260640161101b565b33600090815261101060205260409020547f000000000000000000000000000000000000000000000000000000000000000090611630908390613ef6565b111561169c5760405162461bcd60e51b815260206004820152603560248201527f57616c6c65742068617320616c7265616479206d696e746564204d617820416d6044820152746f756e7420666f72205075626c6963204d696e742160581b606482015260840161101b565b3360009081526110106020526040812080548392906116bc908490613ef6565b90915550600090505b81811015610e785760006116d7612792565b90506116e333826124f8565b506001016116c5565b6116f581611b76565b6001600160a01b0316336001600160a01b0316148061171e57506006546001600160a01b031633145b80611739575033600090815261101a602052604090205460ff165b61179d5760405162461bcd60e51b815260206004820152602f60248201527f63616c6c6572206d757374206265206f776e6572206f6620746f6b656e206f7260448201526e1031b7b73a3930b1ba1037bbb732b960891b606482015260840161101b565b600081815261101560205260409020546117e75760405162461bcd60e51b815260206004820152600b60248201526a6e6f74207374616b696e6760a81b604482015260640161101b565b611019546040516363d13c8f60e01b8152600481018390526001600160a01b03909116906363d13c8f90602401602060405180830381865afa158015611831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118559190613f59565b156118ba576110195460405163704a6f5960e01b8152600481018390526001600160a01b039091169063704a6f5990602401600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050505b600081815261101560209081526040808320805493905580518481523392810192909252428282015260608201839052517fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c29181900360800190a15050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114611986576040519150601f19603f3d011682016040523d82523d6000602084013e61198b565b606091505b505090508061140057604051631d42c86760e21b815260040160405180910390fd5b6119b56123e4565b6001600160a01b0391909116600090815261101a60205260409020805460ff1916911515919091179055565b6000818152600260205260409020546001600160a01b0316611a155760405162461bcd60e51b815260040161101b90613f09565b61140081612aa0565b611a29838383611089565b6001600160a01b0382163b1561108457604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190613f76565b6001600160e01b0319161461108457604051633da6393160e01b815260040160405180910390fd5b611af46123e4565b61101980546001600160a01b0319166001600160a01b0392909216919091179055565b611b1f6123e4565b600b610e788282613fd9565b611b336123e4565b611084838383612c40565b611b466123e4565b6000611b53848683614098565b506001611b61828483614098565b5050505050565b611b706123e4565b61101255565b6000818152600260205260409020546001600160a01b031680611bac57604051634d5e5fb360e01b815260040160405180910390fd5b919050565b600b8054610e8990613e60565b60006001600160a01b038216611be75760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526003602052604090205490565b611c0b6123e4565b611c156000612d0b565b565b6000610e6082611b76565b611c2a6123e4565b61101680549115156101000261ff0019909216919091179055565b61140081611d13565b6000828152600260205260409020546001600160a01b0316611c825760405162461bcd60e51b815260040161101b90613f09565b610e788282612d5d565b60018054610e8990613e60565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611d0d6123e4565b61101155565b6110165460ff16611d595760405162461bcd60e51b815260206004820152601060248201526f39ba30b5b4b733903737ba1037b832b760811b604482015260640161101b565b611d6281611b76565b6001600160a01b0316336001600160a01b03161480611d8b57506006546001600160a01b031633145b80611da15750611019546001600160a01b031633145b611e135760405162461bcd60e51b815260206004820152603760248201527f63616c6c6572206d75737420626520616e793a20746f6b656e206f776e65722c60448201527f20636f6e7472616374206f776e65722c206c6561646572000000000000000000606482015260840161101b565b6000818152611015602052604090205415611e625760405162461bcd60e51b815260206004820152600f60248201526e616c7265616479207374616b696e6760881b604482015260640161101b565b600081815261101560209081526040918290204290819055825184815233928101929092528183015290517f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff9181900360600190a150565b611ec26123e4565b828114611efb5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161101b565b60005b83811015611b6157828282818110611f1857611f18613e9a565b9050602002016020810190611f2d9190613c5c565b60076000878785818110611f4357611f43613e9a565b9050602002016020810190611f589190613759565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580611f8a81613ec6565b915050611efe565b61101654610100900460ff16611fea5760405162461bcd60e51b815260206004820152601860248201527f5374616b6564207472616e73666572206e6f74206f70656e0000000000000000604482015260640161101b565b336001600160a01b038516146120425760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742062652066726f6d20746f6b656e206f776e657200604482015260640161101b565b61204b84611bbe565b81146120aa5760405162461bcd60e51b815260206004820152602860248201527f5374616b6564207472616e73666572206d757374207472616e7366657220616c6044820152676c20746f6b656e7360c01b606482015260840161101b565b60005b81811015611b615760008383838181106120c9576120c9613e9a565b905060200201359050856001600160a01b03166120e582611b76565b6001600160a01b03161461214b5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746f6b656e206f776e65722063616e20646f207374616b656420746044820152663930b739b332b960c91b606482015260840161101b565b61215686868361267b565b508061216181613ec6565b9150506120ad565b846001600160a01b038116331461218357612183336125c2565b60008481526110156020526040902054156121e05760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74207472616e73666572207374616b656420746f6b656e00000000604482015260640161101b565b6113bb8686868686612f13565b6000818152600260205260409020546060906001600160a01b03166122245760405162461bcd60e51b815260040161101b90613f09565b600b61222f83612f6e565b604051602001612240929190614157565b6040516020818303038152906040529050919050565b61225e6123e4565b611013805460ff191660ff92909216919091179055565b61227d6123e4565b611016805460ff1916911515919091179055565b6122996123e4565b6001600160a01b0381166122fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161101b565b61140081612d0b565b60005b825181101561108457600083828151811061232757612327613e9a565b6020026020010151905082156123455761234081611d13565b61234e565b61234e816116ec565b508061235981613ec6565b91505061230a565b60006301ffc9a760e01b6001600160e01b03198316148061239257506380ac58cd60e01b6001600160e01b03198316145b80610e605750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610e6057506301ffc9a760e01b6001600160e01b0319831614610e60565b6006546001600160a01b03163314611c155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161101b565b6127106001600160601b03821611156124695760405162461bcd60e51b815260040161101b906141de565b6001600160a01b0382166124bf5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161101b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600c55565b6125028282613000565b6001600160a01b0382163b15610e7857604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a4016020604051808303816000875af1158015612576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259a9190613f76565b6001600160e01b03191614610e7857604051633da6393160e01b815260040160405180910390fd5b6daaeb6d7670e522a718067333cd4e3b1561140057604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190613f59565b61140057604051633b79c77360e21b81526001600160a01b038216600482015260240161101b565b600081815260086020526040902054156126c95760405162461bcd60e51b815260206004820152600f60248201526e151bdad95b881a5cc81b1bd8dad959608a1b604482015260640161101b565b6110848383836130c8565b600080878787856040516020016126ee9493929190614228565b60405160208183030381529060405280519060200120905061275185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061274b92508591506132359050565b90613268565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b600e5460009061ffff168082036127bc5760405163aeb0cc9b60e01b815260040160405180910390fd5b60006127c78261328c565b905060006127d58383614265565b90506000600f826201000081106127ee576127ee613e9a565b601091828204019190066002029054906101000a900461ffff1661ffff16905060008160000361281f575081612822565b50805b600061282f600187614279565b9050808414612926576000600f8262010000811061284f5761284f613e9a565b601091828204019190066002029054906101000a900461ffff1661ffff169050806000036128b75781600f8662010000811061288d5761288d613e9a565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550612924565b80600f866201000081106128cd576128cd613e9a565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600f8262010000811061290757612907613e9a565b601091828204019190066002026101000a81549061ffff02191690555b505b600e805460009061293a9061ffff1661428c565b91906101000a81548161ffff021916908361ffff16021790555081965050505050505090565b3360009081526007602052604090205460ff1661298f5760405162461bcd60e51b815260040161101b906142aa565b6000818152600a60209081526040808320338452909152902054156129f65760405162461bcd60e51b815260206004820152601b60248201527f494420616c7265616479206c6f636b65642062792063616c6c65720000000000604482015260640161101b565b600081815260086020526040812054612a10906001613ef6565b6000838152600960209081526040808320848452825280832080546001600160a01b03191633908117909155868452600a8352818420908452825280832084905585835260089091528120805492935090612a6a83613ec6565b9091555050604051339083907f9ecfd70e9ff36df72989324a49559383d39f9290d700b10cf5ac10dcb68d264390600090a35050565b3360009081526007602052604090205460ff16612acf5760405162461bcd60e51b815260040161101b906142aa565b6000818152600a6020908152604080832033845290915281205490819003612b395760405162461bcd60e51b815260206004820152601760248201527f4944206e6f74206c6f636b65642062792063616c6c6572000000000000000000604482015260640161101b565b600082815260086020526040902054818114612baf5760008381526009602090815260408083208484528252808320805486855282852080546001600160a01b03199081166001600160a01b03909316928317909155825416909155868452600a83528184209084529091529020829055612bd7565b6000838152600960209081526040808320858452909152902080546001600160a01b03191690555b6000838152600a60209081526040808320338452825280832083905585835260089091528120805491612c09836142d5565b9091555050604051339084907f0fe7d9801197f79ef3b1595d19379eb58f0fff5f98b0f6d6f34c03cae5306c3790600090a3505050565b6127106001600160601b0382161115612c6b5760405162461bcd60e51b815260040161101b906141de565b6001600160a01b038216612cc15760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161101b565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600d90529190942093519051909116600160a01b029116179055565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526007602052604090205460ff1615612d965760405162461bcd60e51b815260040161101b906142aa565b6000828152600a602090815260408083206001600160a01b038516845290915281205490819003612df95760405162461bcd60e51b815260206004820152600d60248201526c1251081b9bdd081b1bd8dad959609a1b604482015260640161101b565b600083815260086020526040902054818114612e6f5760008481526009602090815260408083208484528252808320805486855282852080546001600160a01b03199081166001600160a01b03909316928317909155825416909155878452600a83528184209084529091529020829055612e97565b6000848152600960209081526040808320858452909152902080546001600160a01b03191690555b6000848152600a602090815260408083206001600160a01b0387168452825280832083905586835260089091528120805491612ed2836142d5565b90915550506040516001600160a01b0384169085907f0fe7d9801197f79ef3b1595d19379eb58f0fff5f98b0f6d6f34c03cae5306c3790600090a350505050565b60008381526008602052604090205415612f615760405162461bcd60e51b815260206004820152600f60248201526e151bdad95b881a5cc81b1bd8dad959608a1b604482015260640161101b565b611b6185858585856132da565b60606000612f7b83613396565b60010190506000816001600160401b03811115612f9a57612f9a613831565b6040519080825280601f01601f191660200182016040528015612fc4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612fce57509392505050565b6001600160a01b03821661302757604051634e46966960e11b815260040160405180910390fd5b6000818152600260205260409020546001600160a01b03161561305d57604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b038481169116146131025760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b03821661312957604051634e46966960e11b815260040160405180910390fd5b336001600160a01b0384161480159061316657506001600160a01b038316600090815260056020908152604080832033845290915290205460ff16155b801561318957506000818152600460205260409020546001600160a01b03163314155b156131a6576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000613277858561346e565b91509150613284816134b0565b509392505050565b60004461329a600143614279565b6040805160208101939093529040908201523060608201526080810183905260a00160408051601f19818403018152919052805160209091012092915050565b6132e5858585611089565b6001600160a01b0384163b15611b6157604051630a85bd0160e11b808252906001600160a01b0386169063150b7a029061332b9033908a908990899089906004016142ec565b6020604051808303816000875af115801561334a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336e9190613f76565b6001600160e01b03191614611b6157604051633da6393160e01b815260040160405180910390fd5b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133d55772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613401576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061341f57662386f26fc10000830492506010015b6305f5e1008310613437576305f5e100830492506008015b612710831061344b57612710830492506004015b6064831061345d576064830492506002015b600a8310610e605760010192915050565b60008082516041036134a45760208301516040840151606085015160001a613498878285856135fa565b945094505050506114aa565b506000905060026114aa565b60008160048111156134c4576134c4614340565b036134cc5750565b60018160048111156134e0576134e0614340565b0361352d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161101b565b600281600481111561354157613541614340565b0361358e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161101b565b60038160048111156135a2576135a2614340565b036114005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161101b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561363157506000905060036136b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613685573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166136ae576000600192509250506136b5565b9150600090505b94509492505050565b6001600160e01b03198116811461140057600080fd5b6000602082840312156136e657600080fd5b81356136f1816136be565b9392505050565b80356001600160a01b0381168114611bac57600080fd5b80356001600160601b0381168114611bac57600080fd5b6000806040838503121561373957600080fd5b613742836136f8565b91506137506020840161370f565b90509250929050565b60006020828403121561376b57600080fd5b6136f1826136f8565b60005b8381101561378f578181015183820152602001613777565b50506000910152565b60208152600082518060208401526137b7816040850160208701613774565b601f01601f19169190910160400192915050565b6000602082840312156137dd57600080fd5b5035919050565b600080604083850312156137f757600080fd5b82359150613750602084016136f8565b6000806040838503121561381a57600080fd5b613823836136f8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561386f5761386f613831565b604052919050565b60006001600160401b0382111561389057613890613831565b5060051b60200190565b600082601f8301126138ab57600080fd5b813560206138c06138bb83613877565b613847565b82815260059290921b840181019181810190868411156138df57600080fd5b8286015b848110156138fa57803583529183019183016138e3565b509695505050505050565b6000806040838503121561391857600080fd5b82356001600160401b038082111561392f57600080fd5b818501915085601f83011261394357600080fd5b813560206139536138bb83613877565b82815260059290921b8401810191818101908984111561397257600080fd5b948201945b8386101561399757613988866136f8565b82529482019490820190613977565b965050860135925050808211156139ad57600080fd5b506139ba8582860161389a565b9150509250929050565b6000806000606084860312156139d957600080fd5b6139e2846136f8565b92506139f0602085016136f8565b9150604084013590509250925092565b60008083601f840112613a1257600080fd5b5081356001600160401b03811115613a2957600080fd5b6020830191508360208285010111156114aa57600080fd5b600080600080600060608688031215613a5957600080fd5b8535945060208601356001600160401b0380821115613a7757600080fd5b613a8389838a01613a00565b90965094506040880135915080821115613a9c57600080fd5b50613aa988828901613a00565b969995985093965092949392505050565b60008060408385031215613acd57600080fd5b50508035926020909101359150565b801515811461140057600080fd5b60008060408385031215613afd57600080fd5b613b06836136f8565b91506020830135613b1681613adc565b809150509250929050565b60006020808385031215613b3457600080fd5b82356001600160401b0380821115613b4b57600080fd5b818501915085601f830112613b5f57600080fd5b813581811115613b7157613b71613831565b613b83601f8201601f19168501613847565b91508082528684828501011115613b9957600080fd5b8084840185840137600090820190930192909252509392505050565b600080600060608486031215613bca57600080fd5b83359250613bda602085016136f8565b9150613be86040850161370f565b90509250925092565b60008060008060408587031215613c0757600080fd5b84356001600160401b0380821115613c1e57600080fd5b613c2a88838901613a00565b90965094506020870135915080821115613c4357600080fd5b50613c5087828801613a00565b95989497509550505050565b600060208284031215613c6e57600080fd5b81356136f181613adc565b60008083601f840112613c8b57600080fd5b5081356001600160401b03811115613ca257600080fd5b6020830191508360208260051b85010111156114aa57600080fd5b60008060008060408587031215613cd357600080fd5b84356001600160401b0380821115613cea57600080fd5b613cf688838901613c79565b90965094506020870135915080821115613d0f57600080fd5b50613c5087828801613c79565b60008060008060608587031215613d3257600080fd5b613d3b856136f8565b9350613d49602086016136f8565b925060408501356001600160401b03811115613d6457600080fd5b613c5087828801613c79565b600080600080600060808688031215613d8857600080fd5b613d91866136f8565b9450613d9f602087016136f8565b93506040860135925060608601356001600160401b03811115613dc157600080fd5b613aa988828901613a00565b600060208284031215613ddf57600080fd5b813560ff811681146136f157600080fd5b60008060408385031215613e0357600080fd5b613e0c836136f8565b9150613750602084016136f8565b60008060408385031215613e2d57600080fd5b82356001600160401b03811115613e4357600080fd5b613e4f8582860161389a565b9250506020830135613b1681613adc565b600181811c90821680613e7457607f821691505b602082108103613e9457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613ed857613ed8613eb0565b5060010190565b8082028115828204841417610e6057610e60613eb0565b80820180821115610e6057610e60613eb0565b6020808252600c908201526b151bdad95b8808595e1a5cdd60a21b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600082613f5457613f54613f2f565b500490565b600060208284031215613f6b57600080fd5b81516136f181613adc565b600060208284031215613f8857600080fd5b81516136f1816136be565b601f82111561108457600081815260208120601f850160051c81016020861015613fba5750805b601f850160051c820191505b818110156113bb57828155600101613fc6565b81516001600160401b03811115613ff257613ff2613831565b614006816140008454613e60565b84613f93565b602080601f83116001811461403b57600084156140235750858301515b600019600386901b1c1916600185901b1785556113bb565b600085815260208120601f198616915b8281101561406a5788860151825594840194600190910190840161404b565b50858210156140885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160401b038311156140af576140af613831565b6140c3836140bd8354613e60565b83613f93565b6000601f8411600181146140f757600085156140df5750838201355b600019600387901b1c1916600186901b178355611b61565b600083815260209020601f19861690835b828110156141285786850135825560209485019460019092019101614108565b50868210156141455760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600080845461416581613e60565b6001828116801561417d5760018114614192576141c1565b60ff19841687528215158302870194506141c1565b8860005260208060002060005b858110156141b85781548a82015290840190820161419f565b50505082870194505b5050505083516141d5818360208801613774565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b60008261427457614274613f2f565b500690565b81810381811115610e6057610e60613eb0565b600061ffff8216806142a0576142a0613eb0565b6000190192915050565b602080825260119082015270043616e6e6f7420757064617465206d617607c1b604082015260600190565b6000816142e4576142e4613eb0565b506000190190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f02f9ac839347f7f17d90259a3042f6e6d796dbb1a61cd2bb5a83328cb685e4464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106103fa5760003560e01c80636352211e11610213578063a611708e11610123578063c87b56dd116100ab578063e88671801161007a578063e886718014610d7a578063e985e9c514610d9a578063eec97e6914610dd5578063f2fde38b14610e06578063f90a82c814610e2657600080fd5b8063c87b56dd14610d03578063ce3cd99714610d23578063d00aea7c14610d43578063dc53fd9214610d6357600080fd5b8063aeb16768116100f2578063aeb1676814610c44578063af2f1a6e14610c78578063b1a6505f14610c98578063b88d4fde14610cc8578063c040e6b814610ce857600080fd5b8063a611708e14610bb0578063a694fc3a14610bd0578063a734678014610bf0578063ac52e64414610c2457600080fd5b80638b8d66f2116101a657806396330b5f1161017557806396330b5f14610ae05780639ed2780914610b0e578063a22cb46514610b29578063a33d9e6714610b49578063a591c4cb14610b7c57600080fd5b80638b8d66f214610a6d5780638da5cb5b14610a8d57806394d216d614610aab57806395d89b4114610acb57600080fd5b8063715018a6116101e2578063715018a6146109ea57806372abc8b7146109ff5780637b6fa73a14610a2d57806386f1b11814610a4d57600080fd5b80636352211e14610968578063650b00f6146109885780636c0360eb146109b557806370a08231146109ca57600080fd5b80632db115441161030e57806340a9c8df116102a15780634331e8dd116102705780634331e8dd146108c857806355f804b3146108e85780635944c753146109085780635a446215146109285780635d82cf6e1461094857600080fd5b806340a9c8df1461084557806340eedabb1461086557806341f434341461088657806342842e0e146108a857600080fd5b806335c6aaf8116102dd57806335c6aaf8146107cb5780633bdf4ac6146107e25780633ccfd60b146108105780633ee2b01d1461082557600080fd5b80632db11544146107235780632e17de781461073657806332cb6b0c1461075657806335b504c51461079d57600080fd5b8063122e04a81161039157806323b872dd1161036057806323b872dd1461065057806324436f77146106705780632799cde0146106835780632a55205a146106a35780632cba8123146106e257600080fd5b8063122e04a81461058d57806314d0f1ba146105c157806318160ddd146105f25780631d4c64d21461063057600080fd5b8063081812fc116103cd578063081812fc146104a957806309308e5d146104f7578063095ea7b31461053d57806309751d941461055d57600080fd5b806301ffc9a7146103ff57806304634d8d1461043457806304845e3e1461045657806306fdde0314610487575b600080fd5b34801561040b57600080fd5b5061041f61041a3660046136d4565b610e46565b60405190151581526020015b60405180910390f35b34801561044057600080fd5b5061045461044f366004613726565b610e66565b005b34801561046257600080fd5b5061041f610471366004613759565b6110186020526000908152604090205460ff1681565b34801561049357600080fd5b5061049c610e7c565b60405161042b9190613798565b3480156104b557600080fd5b506104df6104c43660046137cb565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161042b565b34801561050357600080fd5b5061052f6105123660046137e4565b600a60209081526000928352604080842090915290825290205481565b60405190815260200161042b565b34801561054957600080fd5b50610454610558366004613807565b610f0a565b34801561056957600080fd5b5061041f6105783660046137cb565b60009081526110156020526040902054151590565b34801561059957600080fd5b506104df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105cd57600080fd5b5061041f6105dc366004613759565b61101a6020526000908152604090205460ff1681565b3480156105fe57600080fd5b50600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031661052f565b34801561063c57600080fd5b5061045461064b366004613905565b610fcf565b34801561065c57600080fd5b5061045461066b3660046139c4565b611089565b61045461067e366004613a41565b611111565b34801561068f57600080fd5b5061045461069e3660046137cb565b6113c3565b3480156106af57600080fd5b506106c36106be366004613aba565b611403565b604080516001600160a01b03909316835260208301919091520161042b565b3480156106ee57600080fd5b506104df6106fd366004613aba565b60096020908152600092835260408084209091529082529020546001600160a01b031681565b6104546107313660046137cb565b6114b1565b34801561074257600080fd5b506104546107513660046137cb565b6116ec565b34801561076257600080fd5b5061078a7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff909116815260200161042b565b3480156107a957600080fd5b5061052f6107b83660046137cb565b6110156020526000908152604090205481565b3480156107d757600080fd5b5061052f6110115481565b3480156107ee57600080fd5b5061052f6107fd366004613759565b61100f6020526000908152604090205481565b34801561081c57600080fd5b50610454611919565b34801561083157600080fd5b50610454610840366004613aea565b6119ad565b34801561085157600080fd5b506104546108603660046137cb565b6119e1565b34801561087157600080fd5b50611019546104df906001600160a01b031681565b34801561089257600080fd5b506104df6daaeb6d7670e522a718067333cd4e81565b3480156108b457600080fd5b506104546108c33660046139c4565b611a1e565b3480156108d457600080fd5b506104546108e3366004613759565b611aec565b3480156108f457600080fd5b50610454610903366004613b21565b611b17565b34801561091457600080fd5b50610454610923366004613bb5565b611b2b565b34801561093457600080fd5b50610454610943366004613bf1565b611b3e565b34801561095457600080fd5b506104546109633660046137cb565b611b68565b34801561097457600080fd5b506104df6109833660046137cb565b611b76565b34801561099457600080fd5b5061052f6109a33660046137cb565b60086020526000908152604090205481565b3480156109c157600080fd5b5061049c611bb1565b3480156109d657600080fd5b5061052f6109e5366004613759565b611bbe565b3480156109f657600080fd5b50610454611c03565b348015610a0b57600080fd5b5061041f610a1a3660046137cb565b6000908152600860205260409020541590565b348015610a3957600080fd5b506104df610a483660046137cb565b611c17565b348015610a5957600080fd5b50610454610a68366004613c5c565b611c22565b348015610a7957600080fd5b50610454610a883660046137cb565b611c45565b348015610a9957600080fd5b506006546001600160a01b03166104df565b348015610ab757600080fd5b50610454610ac63660046137e4565b611c4e565b348015610ad757600080fd5b5061049c611c8c565b348015610aec57600080fd5b5061052f610afb366004613759565b6110106020526000908152604090205481565b348015610b1a57600080fd5b506110165461041f9060ff1681565b348015610b3557600080fd5b50610454610b44366004613aea565b611c99565b348015610b5557600080fd5b5061101654610b6a9062010000900460ff1681565b60405160ff909116815260200161042b565b348015610b8857600080fd5b506104df7f000000000000000000000000000000000000000000000000000000000000000081565b348015610bbc57600080fd5b50610454610bcb3660046137cb565b611d05565b348015610bdc57600080fd5b50610454610beb3660046137cb565b611d13565b348015610bfc57600080fd5b5061052f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c3057600080fd5b50610454610c3f366004613cbd565b611eba565b348015610c5057600080fd5b5061052f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c8457600080fd5b50610454610c93366004613d1c565b611f92565b348015610ca457600080fd5b5061041f610cb3366004613759565b60076020526000908152604090205460ff1681565b348015610cd457600080fd5b50610454610ce3366004613d70565b612169565b348015610cf457600080fd5b5061101354610b6a9060ff1681565b348015610d0f57600080fd5b5061049c610d1e3660046137cb565b6121ed565b348015610d2f57600080fd5b50610454610d3e366004613dcd565b612256565b348015610d4f57600080fd5b506110165461041f90610100900460ff1681565b348015610d6f57600080fd5b5061052f6110125481565b348015610d8657600080fd5b50610454610d95366004613c5c565b612275565b348015610da657600080fd5b5061041f610db5366004613df0565b600560209081526000928352604080842090915290825290205460ff1681565b348015610de157600080fd5b5061041f610df0366004613759565b6110176020526000908152604090205460ff1681565b348015610e1257600080fd5b50610454610e21366004613759565b612291565b348015610e3257600080fd5b50610454610e41366004613e1a565b612307565b6000610e5182612361565b80610e605750610e60826123af565b92915050565b610e6e6123e4565b610e78828261243e565b5050565b60008054610e8990613e60565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb590613e60565b8015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114801590610f5657506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b15610f73576040516282b42960e81b815260040160405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610fd76123e4565b6001825110156110245760405162461bcd60e51b815260206004820152601360248201527230ba103632b0b9ba1018903932b1b2b4bb32b960691b60448201526064015b60405180910390fd5b60005b825181101561108457600083828151811061104457611044613e9a565b602002602001015190506110718184848151811061106457611064613e9a565b60200260200101516124f8565b508061107c81613ec6565b915050611027565b505050565b826001600160a01b03811633146110a3576110a3336125c2565b60008281526110156020526040902054156111005760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74207472616e73666572207374616b656420746f6b656e00000000604482015260640161101b565b61110b84848461267b565b50505050565b6110135461112b903390869086908690869060ff166126d4565b61116c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964205369676e61747572652160701b604482015260640161101b565b6110135460ff166001146111c25760405162461bcd60e51b815260206004820152601a60248201527f57686974656c697374204d696e74206973206e6f74206f70656e000000000000604482015260640161101b565b611011546111d09086613edf565b34146112125760405162461bcd60e51b8152602060048201526011602482015270496e73756666696369656e74204554482160781b604482015260640161101b565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168561126a600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031690565b6112749190613ef6565b11156112b95760405162461bcd60e51b81526020600482015260146024820152734578636565646564204d617820537570706c792160601b604482015260640161101b565b33600090815261100f60205260409020547f0000000000000000000000000000000000000000000000000000000000000000906112f7908790613ef6565b111561136b5760405162461bcd60e51b815260206004820152603860248201527f57616c6c65742068617320616c7265616479206d696e746564204d617820416d60448201527f6f756e7420666f722057686974656c697374204d696e74210000000000000000606482015260840161101b565b33600090815261100f60205260408120805487929061138b908490613ef6565b90915550600090505b858110156113bb5760006113a6612792565b90506113b233826124f8565b50600101611394565b505050505050565b6000818152600260205260409020546001600160a01b03166113f75760405162461bcd60e51b815260040161101b90613f09565b61140081612960565b50565b6000828152600d602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291611478575060408051808201909152600c546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090611497906001600160601b031687613edf565b6114a19190613f45565b91519350909150505b9250929050565b6110135460ff166002146114fd5760405162461bcd60e51b81526020600482015260136024820152725075626c69632053616c6520436c6f7365642160681b604482015260640161101b565b6110125461150b9082613edf565b341461154c5760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b604482015260640161101b565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16816115a4600e5461ffff9081167f0000000000000000000000000000000000000000000000000000000000000000031690565b6115ae9190613ef6565b11156115f25760405162461bcd60e51b81526020600482015260136024820152724d617820537570706c7920526561636865642160681b604482015260640161101b565b33600090815261101060205260409020547f000000000000000000000000000000000000000000000000000000000000000090611630908390613ef6565b111561169c5760405162461bcd60e51b815260206004820152603560248201527f57616c6c65742068617320616c7265616479206d696e746564204d617820416d6044820152746f756e7420666f72205075626c6963204d696e742160581b606482015260840161101b565b3360009081526110106020526040812080548392906116bc908490613ef6565b90915550600090505b81811015610e785760006116d7612792565b90506116e333826124f8565b506001016116c5565b6116f581611b76565b6001600160a01b0316336001600160a01b0316148061171e57506006546001600160a01b031633145b80611739575033600090815261101a602052604090205460ff165b61179d5760405162461bcd60e51b815260206004820152602f60248201527f63616c6c6572206d757374206265206f776e6572206f6620746f6b656e206f7260448201526e1031b7b73a3930b1ba1037bbb732b960891b606482015260840161101b565b600081815261101560205260409020546117e75760405162461bcd60e51b815260206004820152600b60248201526a6e6f74207374616b696e6760a81b604482015260640161101b565b611019546040516363d13c8f60e01b8152600481018390526001600160a01b03909116906363d13c8f90602401602060405180830381865afa158015611831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118559190613f59565b156118ba576110195460405163704a6f5960e01b8152600481018390526001600160a01b039091169063704a6f5990602401600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050505b600081815261101560209081526040808320805493905580518481523392810192909252428282015260608201839052517fc1e00202ee2c06861d326fc6374026b751863ff64218ccbaa38c3e603a8e72c29181900360800190a15050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114611986576040519150601f19603f3d011682016040523d82523d6000602084013e61198b565b606091505b505090508061140057604051631d42c86760e21b815260040160405180910390fd5b6119b56123e4565b6001600160a01b0391909116600090815261101a60205260409020805460ff1916911515919091179055565b6000818152600260205260409020546001600160a01b0316611a155760405162461bcd60e51b815260040161101b90613f09565b61140081612aa0565b611a29838383611089565b6001600160a01b0382163b1561108457604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190613f76565b6001600160e01b0319161461108457604051633da6393160e01b815260040160405180910390fd5b611af46123e4565b61101980546001600160a01b0319166001600160a01b0392909216919091179055565b611b1f6123e4565b600b610e788282613fd9565b611b336123e4565b611084838383612c40565b611b466123e4565b6000611b53848683614098565b506001611b61828483614098565b5050505050565b611b706123e4565b61101255565b6000818152600260205260409020546001600160a01b031680611bac57604051634d5e5fb360e01b815260040160405180910390fd5b919050565b600b8054610e8990613e60565b60006001600160a01b038216611be75760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526003602052604090205490565b611c0b6123e4565b611c156000612d0b565b565b6000610e6082611b76565b611c2a6123e4565b61101680549115156101000261ff0019909216919091179055565b61140081611d13565b6000828152600260205260409020546001600160a01b0316611c825760405162461bcd60e51b815260040161101b90613f09565b610e788282612d5d565b60018054610e8990613e60565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611d0d6123e4565b61101155565b6110165460ff16611d595760405162461bcd60e51b815260206004820152601060248201526f39ba30b5b4b733903737ba1037b832b760811b604482015260640161101b565b611d6281611b76565b6001600160a01b0316336001600160a01b03161480611d8b57506006546001600160a01b031633145b80611da15750611019546001600160a01b031633145b611e135760405162461bcd60e51b815260206004820152603760248201527f63616c6c6572206d75737420626520616e793a20746f6b656e206f776e65722c60448201527f20636f6e7472616374206f776e65722c206c6561646572000000000000000000606482015260840161101b565b6000818152611015602052604090205415611e625760405162461bcd60e51b815260206004820152600f60248201526e616c7265616479207374616b696e6760881b604482015260640161101b565b600081815261101560209081526040918290204290819055825184815233928101929092528183015290517f02567b2553aeb44e4ddd5d68462774dc3de158cb0f2c2da1740e729b22086aff9181900360600190a150565b611ec26123e4565b828114611efb5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161101b565b60005b83811015611b6157828282818110611f1857611f18613e9a565b9050602002016020810190611f2d9190613c5c565b60076000878785818110611f4357611f43613e9a565b9050602002016020810190611f589190613759565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580611f8a81613ec6565b915050611efe565b61101654610100900460ff16611fea5760405162461bcd60e51b815260206004820152601860248201527f5374616b6564207472616e73666572206e6f74206f70656e0000000000000000604482015260640161101b565b336001600160a01b038516146120425760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742062652066726f6d20746f6b656e206f776e657200604482015260640161101b565b61204b84611bbe565b81146120aa5760405162461bcd60e51b815260206004820152602860248201527f5374616b6564207472616e73666572206d757374207472616e7366657220616c6044820152676c20746f6b656e7360c01b606482015260840161101b565b60005b81811015611b615760008383838181106120c9576120c9613e9a565b905060200201359050856001600160a01b03166120e582611b76565b6001600160a01b03161461214b5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920746f6b656e206f776e65722063616e20646f207374616b656420746044820152663930b739b332b960c91b606482015260840161101b565b61215686868361267b565b508061216181613ec6565b9150506120ad565b846001600160a01b038116331461218357612183336125c2565b60008481526110156020526040902054156121e05760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74207472616e73666572207374616b656420746f6b656e00000000604482015260640161101b565b6113bb8686868686612f13565b6000818152600260205260409020546060906001600160a01b03166122245760405162461bcd60e51b815260040161101b90613f09565b600b61222f83612f6e565b604051602001612240929190614157565b6040516020818303038152906040529050919050565b61225e6123e4565b611013805460ff191660ff92909216919091179055565b61227d6123e4565b611016805460ff1916911515919091179055565b6122996123e4565b6001600160a01b0381166122fe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161101b565b61140081612d0b565b60005b825181101561108457600083828151811061232757612327613e9a565b6020026020010151905082156123455761234081611d13565b61234e565b61234e816116ec565b508061235981613ec6565b91505061230a565b60006301ffc9a760e01b6001600160e01b03198316148061239257506380ac58cd60e01b6001600160e01b03198316145b80610e605750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b1480610e6057506301ffc9a760e01b6001600160e01b0319831614610e60565b6006546001600160a01b03163314611c155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161101b565b6127106001600160601b03821611156124695760405162461bcd60e51b815260040161101b906141de565b6001600160a01b0382166124bf5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161101b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600c55565b6125028282613000565b6001600160a01b0382163b15610e7857604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a4016020604051808303816000875af1158015612576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259a9190613f76565b6001600160e01b03191614610e7857604051633da6393160e01b815260040160405180910390fd5b6daaeb6d7670e522a718067333cd4e3b1561140057604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190613f59565b61140057604051633b79c77360e21b81526001600160a01b038216600482015260240161101b565b600081815260086020526040902054156126c95760405162461bcd60e51b815260206004820152600f60248201526e151bdad95b881a5cc81b1bd8dad959608a1b604482015260640161101b565b6110848383836130c8565b600080878787856040516020016126ee9493929190614228565b60405160208183030381529060405280519060200120905061275185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061274b92508591506132359050565b90613268565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b600e5460009061ffff168082036127bc5760405163aeb0cc9b60e01b815260040160405180910390fd5b60006127c78261328c565b905060006127d58383614265565b90506000600f826201000081106127ee576127ee613e9a565b601091828204019190066002029054906101000a900461ffff1661ffff16905060008160000361281f575081612822565b50805b600061282f600187614279565b9050808414612926576000600f8262010000811061284f5761284f613e9a565b601091828204019190066002029054906101000a900461ffff1661ffff169050806000036128b75781600f8662010000811061288d5761288d613e9a565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550612924565b80600f866201000081106128cd576128cd613e9a565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600f8262010000811061290757612907613e9a565b601091828204019190066002026101000a81549061ffff02191690555b505b600e805460009061293a9061ffff1661428c565b91906101000a81548161ffff021916908361ffff16021790555081965050505050505090565b3360009081526007602052604090205460ff1661298f5760405162461bcd60e51b815260040161101b906142aa565b6000818152600a60209081526040808320338452909152902054156129f65760405162461bcd60e51b815260206004820152601b60248201527f494420616c7265616479206c6f636b65642062792063616c6c65720000000000604482015260640161101b565b600081815260086020526040812054612a10906001613ef6565b6000838152600960209081526040808320848452825280832080546001600160a01b03191633908117909155868452600a8352818420908452825280832084905585835260089091528120805492935090612a6a83613ec6565b9091555050604051339083907f9ecfd70e9ff36df72989324a49559383d39f9290d700b10cf5ac10dcb68d264390600090a35050565b3360009081526007602052604090205460ff16612acf5760405162461bcd60e51b815260040161101b906142aa565b6000818152600a6020908152604080832033845290915281205490819003612b395760405162461bcd60e51b815260206004820152601760248201527f4944206e6f74206c6f636b65642062792063616c6c6572000000000000000000604482015260640161101b565b600082815260086020526040902054818114612baf5760008381526009602090815260408083208484528252808320805486855282852080546001600160a01b03199081166001600160a01b03909316928317909155825416909155868452600a83528184209084529091529020829055612bd7565b6000838152600960209081526040808320858452909152902080546001600160a01b03191690555b6000838152600a60209081526040808320338452825280832083905585835260089091528120805491612c09836142d5565b9091555050604051339084907f0fe7d9801197f79ef3b1595d19379eb58f0fff5f98b0f6d6f34c03cae5306c3790600090a3505050565b6127106001600160601b0382161115612c6b5760405162461bcd60e51b815260040161101b906141de565b6001600160a01b038216612cc15760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d65746572730000000000604482015260640161101b565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600d90529190942093519051909116600160a01b029116179055565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526007602052604090205460ff1615612d965760405162461bcd60e51b815260040161101b906142aa565b6000828152600a602090815260408083206001600160a01b038516845290915281205490819003612df95760405162461bcd60e51b815260206004820152600d60248201526c1251081b9bdd081b1bd8dad959609a1b604482015260640161101b565b600083815260086020526040902054818114612e6f5760008481526009602090815260408083208484528252808320805486855282852080546001600160a01b03199081166001600160a01b03909316928317909155825416909155878452600a83528184209084529091529020829055612e97565b6000848152600960209081526040808320858452909152902080546001600160a01b03191690555b6000848152600a602090815260408083206001600160a01b0387168452825280832083905586835260089091528120805491612ed2836142d5565b90915550506040516001600160a01b0384169085907f0fe7d9801197f79ef3b1595d19379eb58f0fff5f98b0f6d6f34c03cae5306c3790600090a350505050565b60008381526008602052604090205415612f615760405162461bcd60e51b815260206004820152600f60248201526e151bdad95b881a5cc81b1bd8dad959608a1b604482015260640161101b565b611b6185858585856132da565b60606000612f7b83613396565b60010190506000816001600160401b03811115612f9a57612f9a613831565b6040519080825280601f01601f191660200182016040528015612fc4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612fce57509392505050565b6001600160a01b03821661302757604051634e46966960e11b815260040160405180910390fd5b6000818152600260205260409020546001600160a01b03161561305d57604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b038481169116146131025760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b03821661312957604051634e46966960e11b815260040160405180910390fd5b336001600160a01b0384161480159061316657506001600160a01b038316600090815260056020908152604080832033845290915290205460ff16155b801561318957506000818152600460205260409020546001600160a01b03163314155b156131a6576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000613277858561346e565b91509150613284816134b0565b509392505050565b60004461329a600143614279565b6040805160208101939093529040908201523060608201526080810183905260a00160408051601f19818403018152919052805160209091012092915050565b6132e5858585611089565b6001600160a01b0384163b15611b6157604051630a85bd0160e11b808252906001600160a01b0386169063150b7a029061332b9033908a908990899089906004016142ec565b6020604051808303816000875af115801561334a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336e9190613f76565b6001600160e01b03191614611b6157604051633da6393160e01b815260040160405180910390fd5b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133d55772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613401576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061341f57662386f26fc10000830492506010015b6305f5e1008310613437576305f5e100830492506008015b612710831061344b57612710830492506004015b6064831061345d576064830492506002015b600a8310610e605760010192915050565b60008082516041036134a45760208301516040840151606085015160001a613498878285856135fa565b945094505050506114aa565b506000905060026114aa565b60008160048111156134c4576134c4614340565b036134cc5750565b60018160048111156134e0576134e0614340565b0361352d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161101b565b600281600481111561354157613541614340565b0361358e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161101b565b60038160048111156135a2576135a2614340565b036114005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161101b565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561363157506000905060036136b5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613685573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166136ae576000600192509250506136b5565b9150600090505b94509492505050565b6001600160e01b03198116811461140057600080fd5b6000602082840312156136e657600080fd5b81356136f1816136be565b9392505050565b80356001600160a01b0381168114611bac57600080fd5b80356001600160601b0381168114611bac57600080fd5b6000806040838503121561373957600080fd5b613742836136f8565b91506137506020840161370f565b90509250929050565b60006020828403121561376b57600080fd5b6136f1826136f8565b60005b8381101561378f578181015183820152602001613777565b50506000910152565b60208152600082518060208401526137b7816040850160208701613774565b601f01601f19169190910160400192915050565b6000602082840312156137dd57600080fd5b5035919050565b600080604083850312156137f757600080fd5b82359150613750602084016136f8565b6000806040838503121561381a57600080fd5b613823836136f8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561386f5761386f613831565b604052919050565b60006001600160401b0382111561389057613890613831565b5060051b60200190565b600082601f8301126138ab57600080fd5b813560206138c06138bb83613877565b613847565b82815260059290921b840181019181810190868411156138df57600080fd5b8286015b848110156138fa57803583529183019183016138e3565b509695505050505050565b6000806040838503121561391857600080fd5b82356001600160401b038082111561392f57600080fd5b818501915085601f83011261394357600080fd5b813560206139536138bb83613877565b82815260059290921b8401810191818101908984111561397257600080fd5b948201945b8386101561399757613988866136f8565b82529482019490820190613977565b965050860135925050808211156139ad57600080fd5b506139ba8582860161389a565b9150509250929050565b6000806000606084860312156139d957600080fd5b6139e2846136f8565b92506139f0602085016136f8565b9150604084013590509250925092565b60008083601f840112613a1257600080fd5b5081356001600160401b03811115613a2957600080fd5b6020830191508360208285010111156114aa57600080fd5b600080600080600060608688031215613a5957600080fd5b8535945060208601356001600160401b0380821115613a7757600080fd5b613a8389838a01613a00565b90965094506040880135915080821115613a9c57600080fd5b50613aa988828901613a00565b969995985093965092949392505050565b60008060408385031215613acd57600080fd5b50508035926020909101359150565b801515811461140057600080fd5b60008060408385031215613afd57600080fd5b613b06836136f8565b91506020830135613b1681613adc565b809150509250929050565b60006020808385031215613b3457600080fd5b82356001600160401b0380821115613b4b57600080fd5b818501915085601f830112613b5f57600080fd5b813581811115613b7157613b71613831565b613b83601f8201601f19168501613847565b91508082528684828501011115613b9957600080fd5b8084840185840137600090820190930192909252509392505050565b600080600060608486031215613bca57600080fd5b83359250613bda602085016136f8565b9150613be86040850161370f565b90509250925092565b60008060008060408587031215613c0757600080fd5b84356001600160401b0380821115613c1e57600080fd5b613c2a88838901613a00565b90965094506020870135915080821115613c4357600080fd5b50613c5087828801613a00565b95989497509550505050565b600060208284031215613c6e57600080fd5b81356136f181613adc565b60008083601f840112613c8b57600080fd5b5081356001600160401b03811115613ca257600080fd5b6020830191508360208260051b85010111156114aa57600080fd5b60008060008060408587031215613cd357600080fd5b84356001600160401b0380821115613cea57600080fd5b613cf688838901613c79565b90965094506020870135915080821115613d0f57600080fd5b50613c5087828801613c79565b60008060008060608587031215613d3257600080fd5b613d3b856136f8565b9350613d49602086016136f8565b925060408501356001600160401b03811115613d6457600080fd5b613c5087828801613c79565b600080600080600060808688031215613d8857600080fd5b613d91866136f8565b9450613d9f602087016136f8565b93506040860135925060608601356001600160401b03811115613dc157600080fd5b613aa988828901613a00565b600060208284031215613ddf57600080fd5b813560ff811681146136f157600080fd5b60008060408385031215613e0357600080fd5b613e0c836136f8565b9150613750602084016136f8565b60008060408385031215613e2d57600080fd5b82356001600160401b03811115613e4357600080fd5b613e4f8582860161389a565b9250506020830135613b1681613adc565b600181811c90821680613e7457607f821691505b602082108103613e9457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613ed857613ed8613eb0565b5060010190565b8082028115828204841417610e6057610e60613eb0565b80820180821115610e6057610e60613eb0565b6020808252600c908201526b151bdad95b8808595e1a5cdd60a21b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600082613f5457613f54613f2f565b500490565b600060208284031215613f6b57600080fd5b81516136f181613adc565b600060208284031215613f8857600080fd5b81516136f1816136be565b601f82111561108457600081815260208120601f850160051c81016020861015613fba5750805b601f850160051c820191505b818110156113bb57828155600101613fc6565b81516001600160401b03811115613ff257613ff2613831565b614006816140008454613e60565b84613f93565b602080601f83116001811461403b57600084156140235750858301515b600019600386901b1c1916600185901b1785556113bb565b600085815260208120601f198616915b8281101561406a5788860151825594840194600190910190840161404b565b50858210156140885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160401b038311156140af576140af613831565b6140c3836140bd8354613e60565b83613f93565b6000601f8411600181146140f757600085156140df5750838201355b600019600387901b1c1916600186901b178355611b61565b600083815260209020601f19861690835b828110156141285786850135825560209485019460019092019101614108565b50868210156141455760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600080845461416581613e60565b6001828116801561417d5760018114614192576141c1565b60ff19841687528215158302870194506141c1565b8860005260208060002060005b858110156141b85781548a82015290840190820161419f565b50505082870194505b5050505083516141d5818360208801613774565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b60008261427457614274613f2f565b500690565b81810381811115610e6057610e60613eb0565b600061ffff8216806142a0576142a0613eb0565b6000190192915050565b602080825260119082015270043616e6e6f7420757064617465206d617607c1b604082015260600190565b6000816142e4576142e4613eb0565b506000190190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f02f9ac839347f7f17d90259a3042f6e6d796dbb1a61cd2bb5a83328cb685e4464736f6c63430008120033",
  "devdoc": {
    "errors": {
      "OperatorNotAllowed(address)": [
        {
          "details": "Emitted when an operator is not allowed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "freeId(uint256,address)": {
        "details": "Unlocks a token from a given contract if the contract is no longer approved."
      },
      "isUnlocked(uint256)": {
        "details": "Returns if the token is locked (non-transferrable) or not."
      },
      "lockId(uint256)": {
        "details": "Locks a token, preventing it from being transferrable"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockId(uint256)": {
        "details": "Unlocks a token."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotMinted()": [
        {
          "notice": "----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------"
        }
      ]
    },
    "events": {
      "Transfer(address,address,uint256)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------"
      },
      "getApproved(uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------"
      },
      "name()": {
        "notice": "----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4577,
        "contract": "contracts/Minion.sol:Minion",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4579,
        "contract": "contracts/Minion.sol:Minion",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 4591,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4595,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4645,
        "contract": "contracts/Minion.sol:Minion",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4651,
        "contract": "contracts/Minion.sol:Minion",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5562,
        "contract": "contracts/Minion.sol:Minion",
        "label": "approvedContract",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5567,
        "contract": "contracts/Minion.sol:Minion",
        "label": "lockCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5574,
        "contract": "contracts/Minion.sol:Minion",
        "label": "lockMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 5581,
        "contract": "contracts/Minion.sol:Minion",
        "label": "lockMapIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5159,
        "contract": "contracts/Minion.sol:Minion",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(RoyaltyInfo)326_storage"
      },
      {
        "astId": 334,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)326_storage)"
      },
      {
        "astId": 2157,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_numAvailableRemainingTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_uint16"
      },
      {
        "astId": 2161,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_availableRemainingTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint16)65536_storage"
      },
      {
        "astId": 2173,
        "contract": "contracts/Minion.sol:Minion",
        "label": "whitelistMintCount",
        "offset": 0,
        "slot": "4111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2177,
        "contract": "contracts/Minion.sol:Minion",
        "label": "publicMintCount",
        "offset": 0,
        "slot": "4112",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2179,
        "contract": "contracts/Minion.sol:Minion",
        "label": "whitelistMintPrice",
        "offset": 0,
        "slot": "4113",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "contracts/Minion.sol:Minion",
        "label": "publicMintPrice",
        "offset": 0,
        "slot": "4114",
        "type": "t_uint256"
      },
      {
        "astId": 2183,
        "contract": "contracts/Minion.sol:Minion",
        "label": "stage",
        "offset": 0,
        "slot": "4115",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/Minion.sol:Minion",
        "label": "_status",
        "offset": 0,
        "slot": "4116",
        "type": "t_uint256"
      },
      {
        "astId": 3984,
        "contract": "contracts/Minion.sol:Minion",
        "label": "tokensLastStakedAt",
        "offset": 0,
        "slot": "4117",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3986,
        "contract": "contracts/Minion.sol:Minion",
        "label": "canStake",
        "offset": 0,
        "slot": "4118",
        "type": "t_bool"
      },
      {
        "astId": 3988,
        "contract": "contracts/Minion.sol:Minion",
        "label": "canStakeTransfer",
        "offset": 1,
        "slot": "4118",
        "type": "t_bool"
      },
      {
        "astId": 3990,
        "contract": "contracts/Minion.sol:Minion",
        "label": "marketplaceRestriction",
        "offset": 2,
        "slot": "4118",
        "type": "t_uint8"
      },
      {
        "astId": 4012,
        "contract": "contracts/Minion.sol:Minion",
        "label": "whitelistedMarketplaces",
        "offset": 0,
        "slot": "4119",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4016,
        "contract": "contracts/Minion.sol:Minion",
        "label": "blacklistedMarketplaces",
        "offset": 0,
        "slot": "4120",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4031,
        "contract": "contracts/Minion.sol:Minion",
        "label": "leader",
        "offset": 0,
        "slot": "4121",
        "type": "t_contract(ILeader)6152"
      },
      {
        "astId": 4035,
        "contract": "contracts/Minion.sol:Minion",
        "label": "moderators",
        "offset": 0,
        "slot": "4122",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)65536_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[65536]",
        "numberOfBytes": "131072"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILeader)6152": {
        "encoding": "inplace",
        "label": "contract ILeader",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)326_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)326_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)326_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 323,
            "contract": "contracts/Minion.sol:Minion",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 325,
            "contract": "contracts/Minion.sol:Minion",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}