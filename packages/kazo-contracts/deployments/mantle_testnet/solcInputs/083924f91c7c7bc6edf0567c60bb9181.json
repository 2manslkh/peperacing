{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/common/DefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\r\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"../lib/Constants.sol\";\r\n\r\n/**\r\n * @title  DefaultOperatorFilterer\r\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\r\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n *         will be locked to the options set during construction.\r\n */\r\n\r\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\r\n    /// @dev The constructor that is called when the contract is being deployed.\r\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\r\n}"
    },
    "contracts/common/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\r\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721 {\r\n    /// -----------------------------------------------------------------------\r\n    /// Events\r\n    /// -----------------------------------------------------------------------\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Custom Errors\r\n    /// -----------------------------------------------------------------------\r\n\r\n    error NotMinted();\r\n\r\n    error ZeroAddress();\r\n\r\n    error Unauthorized();\r\n\r\n    error WrongFrom();\r\n\r\n    error InvalidRecipient();\r\n\r\n    error UnsafeRecipient();\r\n\r\n    error AlreadyMinted();\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Metadata Storage/Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC721 Balance/Owner Storage\r\n    /// -----------------------------------------------------------------------\r\n\r\n    mapping(uint256 => address) internal _ownerOf;\r\n\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\r\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        if (owner == address(0)) revert ZeroAddress();\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC721 Approval Storage\r\n    /// -----------------------------------------------------------------------\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Constructor\r\n    /// -----------------------------------------------------------------------\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC721 Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert Unauthorized();\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 id) public virtual {\r\n        if (from != _ownerOf[id]) revert WrongFrom();\r\n\r\n        if (to == address(0)) revert InvalidRecipient();\r\n\r\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\r\n            revert Unauthorized();\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            _balanceOf[from]--;\r\n\r\n            _balanceOf[to]++;\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (to.code.length != 0) {\r\n            if (\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") !=\r\n                ERC721TokenReceiver.onERC721Received.selector\r\n            ) revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (to.code.length != 0) {\r\n            if (\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\r\n                ERC721TokenReceiver.onERC721Received.selector\r\n            ) revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC165 Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Internal Mint/Burn Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        if (to == address(0)) revert InvalidRecipient();\r\n\r\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            _balanceOf[to]++;\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = _ownerOf[id];\r\n\r\n        if (owner == address(0)) revert NotMinted();\r\n\r\n        // Ownership check above ensures no underflow.\r\n        unchecked {\r\n            _balanceOf[owner]--;\r\n        }\r\n\r\n        delete _ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// Internal Safe Mint Logic\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        if (to.code.length != 0) {\r\n            if (\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") !=\r\n                ERC721TokenReceiver.onERC721Received.selector\r\n            ) revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\r\n        _mint(to, id);\r\n\r\n        if (to.code.length != 0) {\r\n            if (\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\r\n                ERC721TokenReceiver.onERC721Received.selector\r\n            ) revert UnsafeRecipient();\r\n        }\r\n    }\r\n    \r\n\t function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf[tokenId] != address(0);\r\n    }\r\n\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\r\nabstract contract ERC721TokenReceiver {\r\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\r\n        return ERC721TokenReceiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/common/ERC721x.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\n/*\r\n *     ,_,\r\n *    (',')\r\n *    {/\"\\}\r\n *    -\"-\"-\r\n */\r\n\r\nimport \"./ERC721.sol\";\r\nimport \"./LockRegistry.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract ERC721x is ERC721, LockRegistry {\r\n\t    using Strings for uint256;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('freeId(uint256,address)')) == 0x94d216d6\r\n\t *     bytes4(keccak256('isUnlocked(uint256)')) == 0x72abc8b7\r\n\t *     bytes4(keccak256('lockCount(uint256)')) == 0x650b00f6\r\n\t *     bytes4(keccak256('lockId(uint256)')) == 0x2799cde0\r\n\t *     bytes4(keccak256('lockMap(uint256,uint256)')) == 0x2cba8123\r\n\t *     bytes4(keccak256('lockMapIndex(uint256,address)')) == 0x09308e5d\r\n\t *     bytes4(keccak256('unlockId(uint256)')) == 0x40a9c8df\r\n\t *     bytes4(keccak256('approvedContract(address)')) == 0xb1a6505f\r\n\t *\r\n\t *     => 0x94d216d6 ^ 0x72abc8b7 ^ 0x650b00f6 ^ 0x2799cde0 ^\r\n\t *        0x2cba8123 ^ 0x09308e5d ^ 0x40a9c8df ^ 0xb1a6505f == 0x706e8489\r\n\t */\r\n\r\n\tbytes4 private constant _INTERFACE_ID_ERC721x = 0x706e8489;\r\n\t  string public baseURI;\r\n\r\n\tconstructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {\r\n\t}\r\n\r\n\tfunction supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721) returns (bool) {\r\n\t\treturn _interfaceId == _INTERFACE_ID_ERC721x\r\n\t\t\t|| super.supportsInterface(_interfaceId);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public override virtual {\r\n\t\trequire(isUnlocked(_tokenId), \"Token is locked\");\r\n\t\tERC721.transferFrom(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) public override virtual {\r\n\t\trequire(isUnlocked(_tokenId), \"Token is locked\");\r\n\t\tERC721.safeTransferFrom(_from, _to, _tokenId, _data);\r\n\t}\r\n\r\n\tfunction lockId(uint256 _id) external override virtual {\r\n\t\trequire(_exists(_id), \"Token !exist\");\r\n\t\t_lockId(_id);\r\n\t}\r\n\r\n\tfunction unlockId(uint256 _id) external override virtual {\r\n\t\trequire(_exists(_id), \"Token !exist\");\r\n\t\t_unlockId(_id);\r\n\t}\r\n\r\n\tfunction freeId(uint256 _id, address _contract) external override virtual {\r\n\t\trequire(_exists(_id), \"Token !exist\");\r\n\t\t_freeId(_id, _contract);\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _id) public view override virtual returns (string memory) {\r\n\t\trequire(_exists(_id), \"Token !exist\");\r\n\t\treturn string(abi.encodePacked(baseURI, Strings.toString(_id)));\r\n\t}\r\n\r\n}"
    },
    "contracts/common/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IOperatorFilterRegistry {\r\n    /**\r\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\r\n     *         true if supplied registrant address is not registered.\r\n     */\r\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\r\n     */\r\n    function register(address registrant) external;\r\n\r\n    /**\r\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\r\n     */\r\n    function registerAndSubscribe(address registrant, address subscription) external;\r\n\r\n    /**\r\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\r\n     *         address without subscribing.\r\n     */\r\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n\r\n    /**\r\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\r\n     *         Note that this does not remove any filtered addresses or codeHashes.\r\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\r\n     */\r\n    function unregister(address addr) external;\r\n\r\n    /**\r\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\r\n     */\r\n    function updateOperator(address registrant, address operator, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\r\n     */\r\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\r\n     */\r\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\r\n     */\r\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n\r\n    /**\r\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\r\n     *         subscription if present.\r\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\r\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\r\n     *         used.\r\n     */\r\n    function subscribe(address registrant, address registrantToSubscribe) external;\r\n\r\n    /**\r\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\r\n     */\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n\r\n    /**\r\n     * @notice Get the subscription address of a given registrant, if any.\r\n     */\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n\r\n    /**\r\n     * @notice Get the set of addresses subscribed to a given registrant.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function subscribers(address registrant) external returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function subscriberAt(address registrant, uint256 index) external returns (address);\r\n\r\n    /**\r\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\r\n     */\r\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n\r\n    /**\r\n     * @notice Returns true if operator is filtered by a given address or its subscription.\r\n     */\r\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\r\n     */\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\r\n     */\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n\r\n    /**\r\n     * @notice Returns a list of filtered operators for a given address or its subscription.\r\n     */\r\n    function filteredOperators(address addr) external returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n\r\n    /**\r\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\r\n     *         its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n\r\n    /**\r\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\r\n     *         its subscription.\r\n     *         Note that order is not guaranteed as updates are made.\r\n     */\r\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns true if an address has registered\r\n     */\r\n    function isRegistered(address addr) external returns (bool);\r\n\r\n    /**\r\n     * @dev Convenience method to compute the code hash of an arbitrary contract\r\n     */\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}"
    },
    "contracts/common/LockRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\n/*\r\n *     ,_,\r\n *    (',')\r\n *    {/\"\\}\r\n *    -\"-\"-\r\n */\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IERC721x.sol\";\r\n\r\nabstract contract LockRegistry is Ownable, IERC721x {\r\n\t\r\n\tmapping(address => bool) public override approvedContract;\r\n\tmapping(uint256 => uint256) public override lockCount;\r\n\tmapping(uint256 => mapping(uint256 => address)) public override lockMap;\r\n\tmapping(uint256 => mapping(address => uint256)) public override lockMapIndex;\r\n\r\n\tevent TokenLocked(uint256 indexed tokenId, address indexed approvedContract);\r\n\tevent TokenUnlocked(uint256 indexed tokenId, address indexed approvedContract);\r\n\r\n\tfunction isUnlocked(uint256 _id) public view override returns(bool) {\r\n\t\treturn lockCount[_id] == 0;\r\n\t}\r\n\r\n\tfunction updateApprovedContracts(address[] calldata _contracts, bool[] calldata _values) external onlyOwner {\r\n\t\trequire(_contracts.length == _values.length, \"!length\");\r\n\t\tfor(uint256 i = 0; i < _contracts.length; i++)\r\n\t\t\tapprovedContract[_contracts[i]] = _values[i];\r\n\t}\r\n\r\n\tfunction _lockId(uint256 _id) internal {\r\n\t\trequire(approvedContract[msg.sender], \"Cannot update map\");\r\n\t\trequire(lockMapIndex[_id][msg.sender] == 0, \"ID already locked by caller\");\r\n\r\n\t\tuint256 count = lockCount[_id] + 1;\r\n\t\tlockMap[_id][count] = msg.sender;\r\n\t\tlockMapIndex[_id][msg.sender] = count;\r\n\t\tlockCount[_id]++;\r\n\t\temit TokenLocked(_id, msg.sender);\r\n\t}\r\n\r\n\tfunction _unlockId(uint256 _id) internal {\r\n\t\trequire(approvedContract[msg.sender], \"Cannot update map\");\r\n\t\tuint256 index = lockMapIndex[_id][msg.sender];\r\n\t\trequire(index != 0, \"ID not locked by caller\");\r\n\t\t\r\n\t\tuint256 last = lockCount[_id];\r\n\t\tif (index != last) {\r\n\t\t\taddress lastContract = lockMap[_id][last];\r\n\t\t\tlockMap[_id][index] = lastContract;\r\n\t\t\tlockMap[_id][last] = address(0);\r\n\t\t\tlockMapIndex[_id][lastContract] = index;\r\n\t\t}\r\n\t\telse\r\n\t\t\tlockMap[_id][index] = address(0);\r\n\t\tlockMapIndex[_id][msg.sender] = 0;\r\n\t\tlockCount[_id]--;\r\n\t\temit TokenUnlocked(_id, msg.sender);\r\n\t}\r\n\r\n\tfunction _freeId(uint256 _id, address _contract) internal {\r\n\t\trequire(!approvedContract[_contract], \"Cannot update map\");\r\n\t\tuint256 index = lockMapIndex[_id][_contract];\r\n\t\trequire(index != 0, \"ID not locked\");\r\n\r\n\t\tuint256 last = lockCount[_id];\r\n\t\tif (index != last) {\r\n\t\t\taddress lastContract = lockMap[_id][last];\r\n\t\t\tlockMap[_id][index] = lastContract;\r\n\t\t\tlockMap[_id][last] = address(0);\r\n\t\t\tlockMapIndex[_id][lastContract] = index;\r\n\t\t}\r\n\t\telse\r\n\t\t\tlockMap[_id][index] = address(0);\r\n\t\tlockMapIndex[_id][_contract] = 0;\r\n\t\tlockCount[_id]--;\r\n\t\temit TokenUnlocked(_id, _contract);\r\n\t}\r\n}"
    },
    "contracts/common/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\r\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"../lib/Constants.sol\";\r\n/**\r\n * @title  OperatorFilterer\r\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\r\n *         registrant's entries in the OperatorFilterRegistry.\r\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\r\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\r\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\r\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n *         will be locked to the options set during construction.\r\n */\r\n\r\nabstract contract OperatorFilterer {\r\n    /// @dev Emitted when an operator is not allowed.\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\r\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\r\n\r\n    /// @dev The constructor that is called when the contract is being deployed.\r\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            if (subscribe) {\r\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator is allowed.\r\n     */\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        // Allow spending tokens from addresses with balance\r\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n        // from an EOA.\r\n        if (from != msg.sender) {\r\n            _checkFilterOperator(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator approval is allowed.\r\n     */\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        _checkFilterOperator(operator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev A helper function to check if an operator is allowed.\r\n     */\r\n    function _checkFilterOperator(address operator) internal view virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\r\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\r\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/ERC721Template.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./common/ERC721x.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\nerror InvalidTokenId();\r\nerror NoMoreTokenIds();\r\nerror WithdrawFailed();\r\n\r\n// Cred: Elementals contract -> learning from the best!\r\ncontract ERC721Template is ERC721x, ERC2981 {\r\n    using ECDSA for bytes32;\r\n\r\n    uint16 public immutable MAX_SUPPLY;\r\n    uint16 internal _numAvailableRemainingTokens;\r\n    uint16[65536] internal _availableRemainingTokens;\r\n    uint256 public immutable PUBLIC_MAX_MINT;\r\n    uint256 public immutable WHITELIST_MAX_MINT;\r\n    address public immutable WITHDRAW_ADDRESS;\r\n    address public immutable WHITELIST_SIGNER_ADDRESS;\r\n    mapping(address => uint256) public whitelistMintCount;\r\n    mapping(address => uint256) public publicMintCount;\r\n    uint256 public whitelistMintPrice;\r\n    uint256 public publicMintPrice;\r\n    uint8 public stage;\r\n\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        uint16 maxSupply_,\r\n        address withdrawAddress,\r\n        address _whitelistSignerAddress,\r\n        uint256 _publicMaxMint,\r\n        uint256 _whitelistMaxMint,\r\n        uint256 _whitelistMintPrice,\r\n        uint256 _publicMintPrice\r\n    ) ERC721x(_name, _symbol) {\r\n        MAX_SUPPLY = maxSupply_;\r\n        _numAvailableRemainingTokens = maxSupply_;\r\n        setBaseURI(_baseURI);\r\n        WITHDRAW_ADDRESS = withdrawAddress;\r\n        WHITELIST_SIGNER_ADDRESS = _whitelistSignerAddress;\r\n        PUBLIC_MAX_MINT = _publicMaxMint;\r\n        WHITELIST_MAX_MINT = _whitelistMaxMint;\r\n        whitelistMintPrice = _whitelistMintPrice;\r\n        publicMintPrice = _publicMintPrice;\r\n    }\r\n\r\n    // ---------------\r\n    // Name and symbol\r\n    // ---------------\r\n    function setNameAndSymbol(string calldata _newName, string calldata _newSymbol) external onlyOwner {\r\n        name = _newName;\r\n        symbol = _newSymbol;\r\n    }\r\n\r\n    function _useRandomAvailableTokenId() internal returns (uint256) {\r\n        uint256 numAvailableRemainingTokens = _numAvailableRemainingTokens;\r\n        if (numAvailableRemainingTokens == 0) {\r\n            revert NoMoreTokenIds();\r\n        }\r\n\r\n        uint256 randomNum = _getRandomNum(numAvailableRemainingTokens);\r\n        uint256 randomIndex = randomNum % numAvailableRemainingTokens;\r\n        uint256 valAtIndex = _availableRemainingTokens[randomIndex];\r\n\r\n        uint256 result;\r\n        if (valAtIndex == 0) {\r\n            // This means the index itself is still an available token\r\n            result = randomIndex;\r\n        } else {\r\n            // This means the index itself is not an available token, but the val at that index is.\r\n            result = valAtIndex;\r\n        }\r\n\r\n        uint256 lastIndex = numAvailableRemainingTokens - 1;\r\n        if (randomIndex != lastIndex) {\r\n            // Replace the value at randomIndex, now that it's been used.\r\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\r\n            uint256 lastValInArray = _availableRemainingTokens[lastIndex];\r\n            if (lastValInArray == 0) {\r\n                // This means the index itself is still an available token\r\n                // Cast is safe as we know that lastIndex cannot > MAX_SUPPLY, which is a uint16\r\n                _availableRemainingTokens[randomIndex] = uint16(lastIndex);\r\n            } else {\r\n                // This means the index itself is not an available token, but the val at that index is.\r\n                // Cast is safe as we know that lastValInArray cannot > MAX_SUPPLY, which is a uint16\r\n                _availableRemainingTokens[randomIndex] = uint16(lastValInArray);\r\n                delete _availableRemainingTokens[lastIndex];\r\n            }\r\n        }\r\n\r\n        --_numAvailableRemainingTokens;\r\n\r\n        return result;\r\n    }\r\n\r\n    function _getRandomNum(uint256 numAvailableRemainingTokens) internal view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        block.prevrandao,\r\n                        blockhash(block.number - 1),\r\n                        address(this),\r\n                        numAvailableRemainingTokens\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function whitelistMint(\r\n        uint256 _amount,\r\n        bytes calldata nonce,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        // Check if user is whitelisted\r\n        require(whitelistSigned(msg.sender, nonce, signature, stage), \"Invalid Signature!\");\r\n\r\n        // Check if whitelist sale is open\r\n        require(stage == 1, \"Whitelist Mint is not open\");\r\n\r\n        // Check if enough ETH is sent\r\n        require(msg.value == _amount * whitelistMintPrice, \"Insufficient ETH!\");\r\n\r\n        // Check if mints does not exceed MAX_SUPPLY\r\n        require(totalSupply() + _amount <= MAX_SUPPLY, \"Exceeded Max Supply!\");\r\n\r\n        // Check if mints does not exceed max wallet allowance for public sale\r\n        require(\r\n            whitelistMintCount[msg.sender] + _amount <= WHITELIST_MAX_MINT,\r\n            \"Wallet has already minted Max Amount for Whitelist Mint!\"\r\n        );\r\n\r\n        whitelistMintCount[msg.sender] += _amount;\r\n        for (uint256 i; i < _amount; ) {\r\n            uint256 tokenId = _useRandomAvailableTokenId();\r\n            _safeMint(msg.sender, tokenId);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function publicMint(uint256 _amount) external payable {\r\n        // Check if public sale is open\r\n        require(stage == 2, \"Public Sale Closed!\");\r\n        // Check if enough ETH is sent\r\n        require(msg.value == _amount * publicMintPrice, \"Insufficient ETH\");\r\n\r\n        // Check if mints does not exceed total max supply\r\n        require(totalSupply() + _amount <= MAX_SUPPLY, \"Max Supply Reached!\");\r\n        // Check if mints does not exceed max wallet allowance for public sale\r\n        require(\r\n            publicMintCount[msg.sender] + _amount <= PUBLIC_MAX_MINT,\r\n            \"Wallet has already minted Max Amount for Public Mint!\"\r\n        );\r\n        publicMintCount[msg.sender] += _amount;\r\n        for (uint256 i; i < _amount; ) {\r\n            uint256 tokenId = _useRandomAvailableTokenId();\r\n            _safeMint(msg.sender, tokenId);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function whitelistSigned(\r\n        address sender,\r\n        bytes calldata nonce,\r\n        bytes calldata signature,\r\n        uint8 _stage\r\n    ) private view returns (bool) {\r\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce, _stage));\r\n        return WHITELIST_SIGNER_ADDRESS == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\r\n    }\r\n\r\n    function withdraw() external {\r\n        (bool sent, ) = WITHDRAW_ADDRESS.call{ value: address(this).balance }(\"\");\r\n        if (!sent) {\r\n            revert WithdrawFailed();\r\n        }\r\n    }\r\n\r\n    // ------------\r\n    // Mint\r\n    // ------------\r\n\r\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\r\n        publicMintPrice = _publicMintPrice;\r\n    }\r\n\r\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\r\n        whitelistMintPrice = _whitelistMintPrice;\r\n    }\r\n\r\n    function setStage(uint8 _newStage) public onlyOwner {\r\n        stage = _newStage;\r\n    }\r\n\r\n    // ------------\r\n    // Total Supply\r\n    // ------------\r\n    function totalSupply() public view returns (uint256) {\r\n        unchecked {\r\n            // Does not need to account for burns as they aren't supported.\r\n            return MAX_SUPPLY - _numAvailableRemainingTokens;\r\n        }\r\n    }\r\n\r\n     // --------\r\n    // Metadata\r\n    // --------\r\n\r\n    function setBaseURI(string memory _baseURI_) public onlyOwner {\r\n        baseURI = _baseURI_;\r\n    }\r\n\r\n    // --------\r\n    // EIP-2981\r\n    // --------\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setDefaultRoyalty(receiver, feeNumerator);\r\n    }\r\n\r\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\r\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\r\n    }\r\n\r\n    // -------\r\n    // EIP-165\r\n    // -------\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721x, ERC2981) returns (bool) {\r\n        return ERC721.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IERC721x.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\n/*\r\n *     ,_,\r\n *    (',')\r\n *    {/\"\\}\r\n *    -\"-\"-\r\n */\r\n\r\ninterface IERC721x {\r\n\r\n\t/**\r\n\t * @dev Returns if the token is locked (non-transferrable) or not.\r\n\t */\r\n\tfunction isUnlocked(uint256 _id) external view returns(bool);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of locks on the token.\r\n\t */\r\n\tfunction lockCount(uint256 _tokenId) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Returns if a contract is allowed to lock/unlock tokens.\r\n\t */\r\n\tfunction approvedContract(address _contract) external view returns(bool);\r\n\r\n\t/**\r\n\t * @dev Returns the contract that locked a token at a specific index in the mapping.\r\n\t */\r\n\tfunction lockMap(uint256 _tokenId, uint256 _index) external view returns(address);\r\n\r\n\t/**\r\n\t * @dev Returns the mapping index of a contract that locked a token.\r\n\t */\r\n\tfunction lockMapIndex(uint256 _tokenId, address _contract) external view returns(uint256);\r\n\r\n\t/**\r\n\t * @dev Locks a token, preventing it from being transferrable\r\n\t */\r\n\tfunction lockId(uint256 _id) external;\r\n\r\n\t/**\r\n\t * @dev Unlocks a token.\r\n\t */\r\n\tfunction unlockId(uint256 _id) external;\r\n\r\n\t/**\r\n\t * @dev Unlocks a token from a given contract if the contract is no longer approved.\r\n\t */\r\n\tfunction freeId(uint256 _id, address _contract) external;\r\n}"
    },
    "contracts/interfaces/ILeader.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface ILeader {\r\n    function isMinionQuesting(uint256 tokenId) external view returns (bool);\r\n    function removeCrew(uint256 minionTokenId) external;\r\n}"
    },
    "contracts/interfaces/IMinion.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IMinion {\r\n    function isMinionStaking(uint256 tokenId) external view returns (bool);\r\n\r\n    function stakeExternal(uint256 tokenId) external;\r\n\r\n    function nftOwnerOf(uint256 tokenId) external view returns (address);\r\n}"
    },
    "contracts/Leader.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./interfaces/ILeader.sol\";\r\nimport \"./interfaces/IMinion.sol\";\r\nimport \"./ERC721Template.sol\";\r\nimport \"./common/DefaultOperatorFilterer.sol\";\r\n\r\ncontract Leader is ERC721Template, DefaultOperatorFilterer, ILeader{\r\n    \r\n    event QuestStarted(uint256 indexed tokenId, uint256 questStartedAt, uint256[] crews);\r\n    event QuestEdited(uint256 indexed tokenId, uint256 questStartedAt, uint256[] crews, uint256 questEditedAt);\r\n    event QuestStopped(\r\n        uint256 indexed tokenId,\r\n        uint256 questStartedAt,\r\n        uint256 questStoppedAt\r\n    );\r\n\r\n    event ChestRevealed(uint256 indexed tokenId);\r\n\r\n    IMinion public minion;\r\n\r\n    uint256 public immutable MAX_CREWS;\r\n    bool public canQuest;\r\n    mapping(uint256 => uint256) public tokensLastQuestedAt;\r\n    mapping(uint256 => uint256[]) public questCrews;\r\n    mapping(uint256 => uint256[]) public minionCrew;\r\n    mapping(uint256 => bool) public revealed;\r\n\r\n    // =============== V3 ===============\r\n    mapping(address => bool) public moderators;\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        uint16 maxSupply_,\r\n        address withdrawAddress,\r\n        address _whitelistSignerAddress,\r\n        uint256 _publicMaxMint,\r\n        uint256 _whitelistMaxMint,\r\n        uint256 _whitelistMintPrice,\r\n        uint256 _publicMintPrice,\r\n        uint256 _maxCrews\r\n    ) ERC721Template(_name, _symbol, _baseURI, maxSupply_, withdrawAddress, _whitelistSignerAddress, _publicMaxMint, _whitelistMaxMint, _whitelistMintPrice, _publicMintPrice) {\r\n        MAX_CREWS = _maxCrews;\r\n    }\r\n\r\n   \r\n    // --------\r\n    // Questing\r\n    // --------\r\n    \r\n    // =============== Airdrop ===============\r\n\r\n    function airdropWithAmounts(\r\n        address[] memory receivers,\r\n        uint256[] memory amounts\r\n    ) external onlyOwner {\r\n        require(receivers.length >= 1, \"at least 1 receiver\");\r\n        for (uint256 i; i < receivers.length; i++) {\r\n            address receiver = receivers[i];\r\n            _safeMint(receiver, amounts[i]);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override(ERC721x) onlyAllowedOperator(from) {\r\n        require(\r\n            tokensLastQuestedAt[tokenId] == 0,\r\n            \"Cannot transfer questing token\"\r\n        );\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) public override(ERC721x) onlyAllowedOperator(from) {\r\n        require(\r\n            tokensLastQuestedAt[tokenId] == 0,\r\n            \"Cannot transfer questing token\"\r\n        );\r\n        super.safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    // =============== Questing ===============\r\n\r\n    struct QuestInfo {\r\n        uint256 tokenId;\r\n        uint256[] minionTokenIds;\r\n    }\r\n\r\n    function batchStartQuest(QuestInfo[] calldata questInfos) external {\r\n        uint256 batch = questInfos.length;\r\n        for (uint256 i; i < batch;) {\r\n            startQuest(questInfos[i].tokenId, questInfos[i].minionTokenIds);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function batchEditQuest(QuestInfo[] calldata questInfos) external {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(minion) != address(0), \"minion not set\");\r\n\r\n        uint256 batch = questInfos.length;\r\n        for (uint256 i; i < batch;) {\r\n            uint256 tokenId = questInfos[i].tokenId;\r\n\r\n            require(msg.sender == ownerOf(tokenId), \"not owner of [captainz tokenId]\");\r\n            require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [captainz tokenId]\");\r\n\r\n            _resetCrew(tokenId);\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        for (uint256 i; i < batch;) {\r\n            uint256 tokenId = questInfos[i].tokenId;\r\n            uint256[] calldata minionTokenIds = questInfos[i].minionTokenIds;\r\n\r\n            require(minionTokenIds.length <= MAX_CREWS, \"too many crews [minionTokenIds]\");\r\n\r\n            _addCrew(tokenId, minionTokenIds);\r\n            emit QuestEdited(tokenId, tokensLastQuestedAt[tokenId], minionTokenIds, block.timestamp);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function batchStopQuest(uint256[] calldata tokenIds) external {\r\n        uint256 batch = tokenIds.length;\r\n        for (uint256 i; i < batch;) {\r\n            stopQuest(tokenIds[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function startQuest(uint256 tokenId, uint256[] calldata minionTokenIds) public {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(minion) != address(0), \"minion not set\");\r\n\r\n        require(msg.sender == ownerOf(tokenId), \"not owner of [captainz tokenId]\");\r\n        require(tokensLastQuestedAt[tokenId] == 0, \"quested already started for [captainz tokenId]\");\r\n        require(minionTokenIds.length <= MAX_CREWS, \"too many crews [minionTokenIds]\");\r\n\r\n        _addCrew(tokenId, minionTokenIds);\r\n\r\n        tokensLastQuestedAt[tokenId] = block.timestamp;\r\n        emit QuestStarted(tokenId, block.timestamp, minionTokenIds);\r\n\r\n        if (!revealed[tokenId]) {\r\n            revealed[tokenId] = true;\r\n            emit ChestRevealed(tokenId);\r\n        }\r\n    }\r\n\r\n    function editQuest(uint256 tokenId, uint256[] calldata minionTokenIds) public {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(minion) != address(0), \"minion not set\");\r\n\r\n        require(msg.sender == ownerOf(tokenId), \"not owner of [captainz tokenId]\");\r\n        require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [captainz tokenId]\");\r\n        require(minionTokenIds.length <= MAX_CREWS, \"too many crews [minionTokenIds]\");\r\n\r\n        _resetCrew(tokenId);\r\n        _addCrew(tokenId, minionTokenIds);\r\n\r\n        emit QuestEdited(tokenId, tokensLastQuestedAt[tokenId], minionTokenIds, block.timestamp);\r\n    }\r\n\r\n    function _addCrew(uint256 tokenId, uint256[] calldata minionTokenIds) private {\r\n        uint256 crews = minionTokenIds.length;\r\n        if (crews >= 1) {\r\n            uint256[] memory wrapper = new uint256[](1);\r\n            wrapper[0] = tokenId;\r\n            for (uint256 i; i < crews;) {\r\n                uint256 pTokenId = minionTokenIds[i];\r\n                require(minion.nftOwnerOf(pTokenId) == msg.sender, \"not owner of [minion tokenId]\");\r\n                if (!minion.isMinionStaking(pTokenId)) {\r\n                    minion.stakeExternal(pTokenId);\r\n                }\r\n                uint256[] storage existCheck = minionCrew[pTokenId];\r\n                if (existCheck.length != 0) {\r\n                    removeCrew(pTokenId);\r\n                }\r\n                minionCrew[pTokenId] = wrapper;\r\n                unchecked { ++i; }\r\n            }\r\n            questCrews[tokenId] = minionTokenIds;\r\n        }\r\n    }\r\n\r\n    function removeCrew(uint256 minionTokenId) public {\r\n        require(address(minion) != address(0), \"minion not set\");\r\n        require(\r\n            msg.sender == minion.nftOwnerOf(minionTokenId) || msg.sender == address(minion),\r\n            \"caller must be any: minion owner, minion\"\r\n        );\r\n\r\n        uint256[] storage existCheck = minionCrew[minionTokenId];\r\n        require(existCheck.length != 0, \"minionTokenId not questing\");\r\n        uint256 tokenId = existCheck[0];\r\n        uint256 empty = MAX_SUPPLY;\r\n\r\n        uint256[] memory pTokenIds = questCrews[tokenId];\r\n        uint256 crews = pTokenIds.length;\r\n        uint256 crewLength = pTokenIds.length;\r\n        for (uint256 i; i < crews;) {\r\n            uint256 pTokenId = pTokenIds[i];\r\n            if (pTokenId == minionTokenId) {\r\n                pTokenIds[i] = empty;\r\n                crewLength--;\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        require(pTokenIds.length != crewLength, \"minionTokenId not in crew\");\r\n\r\n        uint256[] memory newCrews = new uint256[](crewLength);\r\n        uint256 activeIdx;\r\n        for (uint256 i; i < crews;) {\r\n            if (pTokenIds[i] != empty) {\r\n                newCrews[activeIdx++] = pTokenIds[i];\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        questCrews[tokenId] = newCrews;\r\n        minionCrew[minionTokenId] = new uint256[](0);\r\n    }\r\n\r\n    function _resetCrew(uint256 tokenId) private {\r\n        uint256[] storage minionTokenIds = questCrews[tokenId];\r\n        uint256 crews = minionTokenIds.length;\r\n        if (crews >= 1) {\r\n            uint256[] memory empty = new uint256[](0);\r\n            for (uint256 i; i < crews;) {\r\n                uint256 pTokenId = minionTokenIds[i];\r\n                minionCrew[pTokenId] = empty;\r\n                unchecked { ++i; }\r\n            }\r\n            questCrews[tokenId] = empty;\r\n        }\r\n    }\r\n\r\n    function stopQuest(uint256 tokenId) public {\r\n        require(\r\n            msg.sender == ownerOf(tokenId) || msg.sender == owner() || moderators[msg.sender],\r\n            \"not owner of [captainz tokenId]\"\r\n        );\r\n        require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [captainz tokenId]\");\r\n\r\n        _resetCrew(tokenId);\r\n\r\n        uint256 tlqa = tokensLastQuestedAt[tokenId];\r\n        tokensLastQuestedAt[tokenId] = 0;\r\n        emit QuestStopped(tokenId, tlqa, block.timestamp);\r\n    }\r\n\r\n    function isMinionQuesting(uint256 tokenId) external view returns (bool) {\r\n        uint256[] storage existCheck = minionCrew[tokenId];\r\n        return existCheck.length > 0;\r\n    }\r\n\r\n    function getTokenInfo(uint256 tokenId) external view returns (uint256 lastQuestedAt, uint256[] memory crewTokenIds, bool hasRevealed) {\r\n        return (tokensLastQuestedAt[tokenId], questCrews[tokenId], revealed[tokenId]);\r\n    }\r\n\r\n    function getActiveCrews(uint256 tokenId) external view returns (uint256[] memory) {\r\n        require(address(minion) != address(0), \"minion not set\");\r\n        address owner = ownerOf(tokenId);\r\n\r\n        uint256[] memory pTokenIds = questCrews[tokenId];\r\n        uint256 crews = pTokenIds.length;\r\n        uint256 activeLength = pTokenIds.length;\r\n        uint256 empty = MAX_SUPPLY;\r\n        for (uint256 i; i < crews;) {\r\n            uint256 pTokenId = pTokenIds[i];\r\n            if (minion.nftOwnerOf(pTokenId) != owner || !minion.isMinionStaking(pTokenId)) {\r\n                pTokenIds[i] = empty;\r\n                activeLength--;\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        uint256[] memory activeCrews = new uint256[](activeLength);\r\n        uint256 activeIdx;\r\n        for (uint256 i; i < crews;) {\r\n            if (pTokenIds[i] != empty) {\r\n                activeCrews[activeIdx++] = pTokenIds[i];\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        return activeCrews;\r\n    }\r\n\r\n    // =============== Admin ===============\r\n\r\n    function setCanQuest(bool b) external onlyOwner {\r\n        canQuest = b;\r\n    }\r\n\r\n    function setMinion(address addr) external onlyOwner {\r\n        minion = IMinion(addr);\r\n    }\r\n\r\n    function setModerator(address addr, bool add) external onlyOwner {\r\n        moderators[addr] = add;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/lib/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\r\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;"
    },
    "contracts/Minion.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./interfaces/IMinion.sol\";\r\nimport \"./interfaces/ILeader.sol\";\r\nimport \"./ERC721Template.sol\";\r\nimport \"./common/DefaultOperatorFilterer.sol\";\r\n\r\ncontract Minion is\r\n    ERC721Template,\r\n    ReentrancyGuard,\r\n    DefaultOperatorFilterer,\r\n    IMinion\r\n{\r\n\r\n    mapping(uint256 => uint256) public tokensLastStakedAt; // tokenId => timestamp\r\n     bool public canStake;\r\n        bool public canStakeTransfer;\r\n        uint8 public marketplaceRestriction;\r\n    event Stake(uint256 tokenId, address by, uint256 stakedAt);\r\n    event Unstake(\r\n        uint256 tokenId,\r\n        address by,\r\n        uint256 stakedAt,\r\n        uint256 unstakedAt\r\n    );\r\n\r\n    mapping(address => bool) public whitelistedMarketplaces;\r\n    mapping(address => bool) public blacklistedMarketplaces;\r\n    event MarketplaceWhitelisted(address indexed market, bool whitelisted);\r\n    event MarketplaceBlacklisted(address indexed market, bool blacklisted);\r\n\r\n    ILeader public leader;\r\n    mapping(address => bool) public moderators;\r\n\r\n\r\n      constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        uint16 maxSupply_,\r\n        address withdrawAddress,\r\n        address _whitelistSignerAddress,\r\n        uint256 _publicMaxMint,\r\n        uint256 _whitelistMaxMint,\r\n        uint256 _whitelistMintPrice,\r\n        uint256 _publicMintPrice\r\n    ) ERC721Template(_name, _symbol, _baseURI, maxSupply_, withdrawAddress, _whitelistSignerAddress, _publicMaxMint, _whitelistMaxMint, _whitelistMintPrice, _publicMintPrice) {\r\n       \r\n    }\r\n\r\n    // =============== Airdrop ===============\r\n\r\n    function giveawayWithAmounts(\r\n        address[] memory receivers,\r\n        uint256[] memory amounts\r\n    ) external onlyOwner {\r\n        require(receivers.length >= 1, \"at least 1 receiver\");\r\n        for (uint256 i; i < receivers.length; i++) {\r\n            address receiver = receivers[i];\r\n            _safeMint(receiver, amounts[i]);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override(ERC721x) onlyAllowedOperator(from) {\r\n        require(\r\n            tokensLastStakedAt[tokenId] == 0,\r\n            \"Cannot transfer staked token\"\r\n        );\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata _data\r\n    ) public override(ERC721x) onlyAllowedOperator(from) {\r\n        require(\r\n            tokensLastStakedAt[tokenId] == 0,\r\n            \"Cannot transfer staked token\"\r\n        );\r\n        super.safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    function stake(uint256 tokenId) public {\r\n        require(canStake, \"staking not open\");\r\n        require(\r\n            msg.sender == ownerOf(tokenId) ||\r\n                msg.sender == owner() ||\r\n                msg.sender == address(leader),\r\n            \"caller must be any: token owner, contract owner, leader\"\r\n        );\r\n        require(tokensLastStakedAt[tokenId] == 0, \"already staking\");\r\n        tokensLastStakedAt[tokenId] = block.timestamp;\r\n        emit Stake(tokenId, msg.sender, tokensLastStakedAt[tokenId]);\r\n    }\r\n\r\n    function unstake(uint256 tokenId) public {\r\n        require(\r\n            msg.sender == ownerOf(tokenId) || msg.sender == owner() || moderators[msg.sender],\r\n            \"caller must be owner of token or contract owner\"\r\n        );\r\n        require(tokensLastStakedAt[tokenId] > 0, \"not staking\");\r\n        if (leader.isMinionQuesting(tokenId)) {\r\n            leader.removeCrew(tokenId);\r\n        }\r\n        uint256 lsa = tokensLastStakedAt[tokenId];\r\n        tokensLastStakedAt[tokenId] = 0;\r\n        emit Unstake(tokenId, msg.sender, block.timestamp, lsa);\r\n    }\r\n\r\n    function setTokensStakeStatus(uint256[] memory tokenIds, bool setStake)\r\n        external\r\n    {\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            if (setStake) {\r\n                stake(tokenId);\r\n            } else {\r\n                unstake(tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function stakeTransferAll(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata tokenIds\r\n    ) public {\r\n        require(canStakeTransfer, \"Staked transfer not open\");\r\n        require(msg.sender == from, \"Sender must be from token owner\");\r\n        require(tokenIds.length == balanceOf(from), \"Staked transfer must transfer all tokens\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(\r\n                ownerOf(tokenId) == from,\r\n                \"Only token owner can do staked transfer\"\r\n            );\r\n            super.transferFrom(from, to, tokenId);\r\n        }\r\n    }\r\n\r\n    // V4\r\n    function isMinionStaking(uint256 tokenId) external view returns (bool) {\r\n        return tokensLastStakedAt[tokenId] > 0;\r\n    }\r\n\r\n    function stakeExternal(uint256 tokenId) external {\r\n        stake(tokenId);\r\n    }\r\n\r\n    function nftOwnerOf(uint256 tokenId) external view returns (address) {\r\n        return ownerOf(tokenId);\r\n    }\r\n\r\n    function setLeader(address addr) external onlyOwner {\r\n        leader = ILeader(addr);\r\n    }\r\n\r\n    function setModerator(address addr, bool add) external onlyOwner {\r\n        moderators[addr] = add;\r\n    }\r\n\r\n    function setCanStake(bool _canStake) external onlyOwner {\r\n        canStake = _canStake;\r\n    }\r\n\r\n    function setCanStakeTransfer(bool _canStakeTransfer) external onlyOwner {\r\n        canStakeTransfer = _canStakeTransfer;\r\n    }\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}