// Generated by @wagmi/cli@1.0.2 on 8/1/2023 at 9:32:56 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArgoPetz
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const argoPetzABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_baseURI', internalType: 'string', type: 'string' },
      { name: 'maxSupply_', internalType: 'uint16', type: 'uint16' },
      { name: 'withdrawAddress', internalType: 'address', type: 'address' },
      {
        name: '_whitelistSignerAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_whitelistMaxMint', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { type: 'error', inputs: [], name: 'AlreadyMinted' },
  { type: 'error', inputs: [], name: 'InvalidRecipient' },
  { type: 'error', inputs: [], name: 'InvalidTokenId' },
  { type: 'error', inputs: [], name: 'NotMinted' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  { type: 'error', inputs: [], name: 'UnsafeRecipient' },
  { type: 'error', inputs: [], name: 'WithdrawFailed' },
  { type: 'error', inputs: [], name: 'WrongFrom' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_SUPPLY',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WHITELIST_MAX_MINT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WHITELIST_SIGNER_ADDRESS',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WITHDRAW_ADDRESS',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'availableTokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'publicMint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicMintPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_revealedURI', internalType: 'string', type: 'string' }],
    name: 'reveal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_baseURI_', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'feeNumerator', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_newName', internalType: 'string', type: 'string' },
      { name: '_newSymbol', internalType: 'string', type: 'string' },
    ],
    name: 'setNameAndSymbol',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicMintPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPublicMintPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newStage', internalType: 'uint8', type: 'uint8' }],
    name: 'setStage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'feeNumerator', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'setTokenRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_whitelistMintPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWhitelistMintPrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stage',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalMaxSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'whitelistMint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'whitelistMintCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whitelistMintPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
] as const

/**
 *
 */
export const argoPetzAddress = {
  338: '0xcd50c5bAAA765A0c761DDd58D6e1aB95fA76eA7C',
} as const

/**
 *
 */
export const argoPetzConfig = {
  address: argoPetzAddress,
  abi: argoPetzABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ArgoQuest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const argoQuestABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_argonauts', internalType: 'address', type: 'address' },
      { name: '_argopetz', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'questStartedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'crews',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'questEditedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'QuestEdited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'questStartedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'crews',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'QuestStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'questStartedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'questStoppedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'QuestStopped',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_SUPPLY',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'argonauts',
    outputs: [{ name: '', internalType: 'contract IERC721', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'argonautsOwners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'argopetz',
    outputs: [{ name: '', internalType: 'contract IERC721', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'argopetzCrew',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'argopetzOwners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'questInfos',
        internalType: 'struct ArgoQuest.QuestInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'argopetzTokenIds',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
        ],
      },
    ],
    name: 'batchEditQuest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'questInfos',
        internalType: 'struct ArgoQuest.QuestInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'argopetzTokenIds',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
        ],
      },
    ],
    name: 'batchStartQuest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchStopQuest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'canQuest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'argopetzTokenIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'editQuest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getTokenInfo',
    outputs: [
      { name: 'lastQuestedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'crewTokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isArgopetzQuesting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxCrews',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'questCrews',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'argopetzTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeCrew',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'setArgonauts',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'setArgopetz',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'b', internalType: 'bool', type: 'bool' }],
    name: 'setCanQuest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'argopetzTokenIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'startQuest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'stopQuest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokensLastQuestedAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 *
 */
export const argoQuestAddress = {
  338: '0x05ab185d3c8A5b8E00ae1a5C02487e6d85E9CD1D',
} as const

/**
 *
 */
export const argoQuestConfig = {
  address: argoQuestAddress,
  abi: argoQuestABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
  },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ConsecutiveTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_mintAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

/**
 *
 */
export const erc721Address = {
  338: '0x60F5CEb4b06434E77e335B9140D17814f72De05a',
} as const

/**
 *
 */
export const erc721Config = { address: erc721Address, abi: erc721ABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StarMapCrafting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const starMapCraftingABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_argopetz', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'nftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'startTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakedNFT',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'craftingTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StarmapCraftingTimeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'nftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'unstakeTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnstakedNFT',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'argopetz',
    outputs: [{ name: '', internalType: 'contract IERC721', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'getStakedNFTCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'getStakedNFTs',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_argopetz', internalType: 'address', type: 'address' }],
    name: 'setArgopetz',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_starmapCraftingTime',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setStarmapCraftingTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_nftIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'stakeNFT',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'starmapCraftingTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_nftIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'unstakeNFT',
    outputs: [],
  },
] as const

/**
 *
 */
export const starMapCraftingAddress = {
  338: '0xEc919907Dc23122a430a887BA985aDc54983Ff5B',
} as const

/**
 *
 */
export const starMapCraftingConfig = {
  address: starMapCraftingAddress,
  abi: starMapCraftingABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const bankABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'nftAddress',
        internalType: 'contract IERC721',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositedNFT',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenAddress',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DepositedToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'nftAddress',
        internalType: 'contract IERC721',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawnNFT',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenAddress',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawnToken',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nftAddress', internalType: 'contract IERC721', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositNFT',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'tokenAddress',
        internalType: 'contract IERC20',
        type: 'address',
      },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
    name: 'getBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract IERC721', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'nftOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract IERC20', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'tokenBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nftAddress', internalType: 'contract IERC721', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawNFT',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'tokenAddress',
        internalType: 'contract IERC20',
        type: 'address',
      },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawToken',
    outputs: [],
  },
] as const

/**
 *
 */
export const bankAddress = {
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 *
 */
export const bankConfig = { address: bankAddress, abi: bankABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Diamonds
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const diamondsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ExceedMaxMintPerWallet' },
  {
    type: 'error',
    inputs: [
      { name: 'amountPaid', internalType: 'uint256', type: 'uint256' },
      { name: 'amountRequired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCRO',
  },
  { type: 'error', inputs: [], name: 'InvalidSignature' },
  {
    type: 'error',
    inputs: [
      { name: 'currentStage', internalType: 'uint8', type: 'uint8' },
      { name: 'requiredStage', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'InvalidStage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_mintAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'publicMintCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicMintMaxPerWallet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicMintPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'revealed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newBaseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicMintPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPublicMintPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newStage', internalType: 'uint8', type: 'uint8' }],
    name: 'setStage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_newUnrevealedImageURI',
        internalType: 'string',
        type: 'string',
      },
    ],
    name: 'setUnrevealedImageURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setVipMaxMintPerWallet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_vipMintPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVipMintPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'setWhitelistMaxMintPerWallet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_whitelistMintPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWhitelistMintPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_whitelistPhase', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWhitelistPhase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'setWhitelistSignerAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stage',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'toggleReveal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'unrevealedImageURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'vipMintCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vipMintMaxPerWallet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vipMintPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_mintAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'nonce', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'whitelistMint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'whitelistMintCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whitelistMintMaxPerWallet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whitelistMintPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'whitelistPhase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawFund',
    outputs: [],
  },
] as const

/**
 *
 */
export const diamondsAddress = {
  31337: '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0',
} as const

/**
 *
 */
export const diamondsConfig = {
  address: diamondsAddress,
  abi: diamondsABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gold
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const goldABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

/**
 *
 */
export const goldAddress = {
  31337: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
} as const

/**
 *
 */
export const goldConfig = { address: goldAddress, abi: goldABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__.
 *
 *
 */
export function useArgoPetzRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"MAX_SUPPLY"`.
 *
 *
 */
export function useArgoPetzMaxSupply<
  TFunctionName extends 'MAX_SUPPLY',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'MAX_SUPPLY',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"WHITELIST_MAX_MINT"`.
 *
 *
 */
export function useArgoPetzWhitelistMaxMint<
  TFunctionName extends 'WHITELIST_MAX_MINT',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'WHITELIST_MAX_MINT',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"WHITELIST_SIGNER_ADDRESS"`.
 *
 *
 */
export function useArgoPetzWhitelistSignerAddress<
  TFunctionName extends 'WHITELIST_SIGNER_ADDRESS',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'WHITELIST_SIGNER_ADDRESS',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"WITHDRAW_ADDRESS"`.
 *
 *
 */
export function useArgoPetzWithdrawAddress<
  TFunctionName extends 'WITHDRAW_ADDRESS',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'WITHDRAW_ADDRESS',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"availableTokenCount"`.
 *
 *
 */
export function useArgoPetzAvailableTokenCount<
  TFunctionName extends 'availableTokenCount',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'availableTokenCount',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useArgoPetzBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"baseURI"`.
 *
 *
 */
export function useArgoPetzBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"currentSupply"`.
 *
 *
 */
export function useArgoPetzCurrentSupply<
  TFunctionName extends 'currentSupply',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'currentSupply',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useArgoPetzGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useArgoPetzIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useArgoPetzName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useArgoPetzOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useArgoPetzOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"publicMintPrice"`.
 *
 *
 */
export function useArgoPetzPublicMintPrice<
  TFunctionName extends 'publicMintPrice',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'publicMintPrice',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"royaltyInfo"`.
 *
 *
 */
export function useArgoPetzRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"stage"`.
 *
 *
 */
export function useArgoPetzStage<
  TFunctionName extends 'stage',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'stage',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useArgoPetzSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useArgoPetzSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"tokenCount"`.
 *
 *
 */
export function useArgoPetzTokenCount<
  TFunctionName extends 'tokenCount',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'tokenCount',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useArgoPetzTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"totalMaxSupply"`.
 *
 *
 */
export function useArgoPetzTotalMaxSupply<
  TFunctionName extends 'totalMaxSupply',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'totalMaxSupply',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useArgoPetzTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"whitelistMintCount"`.
 *
 *
 */
export function useArgoPetzWhitelistMintCount<
  TFunctionName extends 'whitelistMintCount',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'whitelistMintCount',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"whitelistMintPrice"`.
 *
 *
 */
export function useArgoPetzWhitelistMintPrice<
  TFunctionName extends 'whitelistMintPrice',
  TSelectData = ReadContractResult<typeof argoPetzABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractRead({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'whitelistMintPrice',
    ...config,
  } as UseContractReadConfig<typeof argoPetzABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__.
 *
 *
 */
export function useArgoPetzWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof argoPetzABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, TFunctionName, TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useArgoPetzApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof argoPetzABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'approve', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"publicMint"`.
 *
 *
 */
export function useArgoPetzPublicMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'publicMint'
        >['request']['abi'],
        'publicMint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'publicMint' }
    : UseContractWriteConfig<typeof argoPetzABI, 'publicMint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'publicMint'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'publicMint', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'publicMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useArgoPetzRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'renounceOwnership', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"reveal"`.
 *
 *
 */
export function useArgoPetzReveal<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'reveal'
        >['request']['abi'],
        'reveal',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'reveal' }
    : UseContractWriteConfig<typeof argoPetzABI, 'reveal', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'reveal'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'reveal', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'reveal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useArgoPetzSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'safeTransferFrom', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useArgoPetzSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setApprovalForAll', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setBaseURI"`.
 *
 *
 */
export function useArgoPetzSetBaseUri<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setBaseURI' }
    : UseContractWriteConfig<typeof argoPetzABI, 'setBaseURI', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setBaseURI', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 *
 *
 */
export function useArgoPetzSetDefaultRoyalty<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setDefaultRoyalty'
        >['request']['abi'],
        'setDefaultRoyalty',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setDefaultRoyalty'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'setDefaultRoyalty', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setDefaultRoyalty'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setDefaultRoyalty', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setNameAndSymbol"`.
 *
 *
 */
export function useArgoPetzSetNameAndSymbol<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setNameAndSymbol'
        >['request']['abi'],
        'setNameAndSymbol',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setNameAndSymbol'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'setNameAndSymbol', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setNameAndSymbol'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setNameAndSymbol', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setNameAndSymbol',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setPublicMintPrice"`.
 *
 *
 */
export function useArgoPetzSetPublicMintPrice<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setPublicMintPrice'
        >['request']['abi'],
        'setPublicMintPrice',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setPublicMintPrice'
      }
    : UseContractWriteConfig<
        typeof argoPetzABI,
        'setPublicMintPrice',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setPublicMintPrice'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setPublicMintPrice', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setPublicMintPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setStage"`.
 *
 *
 */
export function useArgoPetzSetStage<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setStage'
        >['request']['abi'],
        'setStage',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setStage' }
    : UseContractWriteConfig<typeof argoPetzABI, 'setStage', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setStage'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setStage', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setStage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setTokenRoyalty"`.
 *
 *
 */
export function useArgoPetzSetTokenRoyalty<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setTokenRoyalty'
        >['request']['abi'],
        'setTokenRoyalty',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setTokenRoyalty'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'setTokenRoyalty', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTokenRoyalty'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setTokenRoyalty', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setTokenRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setWhitelistMintPrice"`.
 *
 *
 */
export function useArgoPetzSetWhitelistMintPrice<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'setWhitelistMintPrice'
        >['request']['abi'],
        'setWhitelistMintPrice',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setWhitelistMintPrice'
      }
    : UseContractWriteConfig<
        typeof argoPetzABI,
        'setWhitelistMintPrice',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWhitelistMintPrice'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'setWhitelistMintPrice', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setWhitelistMintPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useArgoPetzTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'transferFrom', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useArgoPetzTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'transferOwnership', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"whitelistMint"`.
 *
 *
 */
export function useArgoPetzWhitelistMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'whitelistMint'
        >['request']['abi'],
        'whitelistMint',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'whitelistMint'
      }
    : UseContractWriteConfig<typeof argoPetzABI, 'whitelistMint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'whitelistMint'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'whitelistMint', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'whitelistMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function useArgoPetzWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoPetzAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoPetzABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof argoPetzABI, 'withdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof argoPetzABI, 'withdraw', TMode>({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__.
 *
 *
 */
export function usePrepareArgoPetzWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareArgoPetzApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"publicMint"`.
 *
 *
 */
export function usePrepareArgoPetzPublicMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'publicMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'publicMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'publicMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareArgoPetzRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"reveal"`.
 *
 *
 */
export function usePrepareArgoPetzReveal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'reveal'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'reveal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'reveal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareArgoPetzSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareArgoPetzSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setBaseURI"`.
 *
 *
 */
export function usePrepareArgoPetzSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setBaseURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 *
 *
 */
export function usePrepareArgoPetzSetDefaultRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setDefaultRoyalty'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setDefaultRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setDefaultRoyalty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setNameAndSymbol"`.
 *
 *
 */
export function usePrepareArgoPetzSetNameAndSymbol(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setNameAndSymbol'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setNameAndSymbol',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setNameAndSymbol'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setPublicMintPrice"`.
 *
 *
 */
export function usePrepareArgoPetzSetPublicMintPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setPublicMintPrice'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setPublicMintPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setPublicMintPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setStage"`.
 *
 *
 */
export function usePrepareArgoPetzSetStage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setStage'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setStage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setStage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setTokenRoyalty"`.
 *
 *
 */
export function usePrepareArgoPetzSetTokenRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setTokenRoyalty'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setTokenRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'setTokenRoyalty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"setWhitelistMintPrice"`.
 *
 *
 */
export function usePrepareArgoPetzSetWhitelistMintPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'setWhitelistMintPrice'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'setWhitelistMintPrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof argoPetzABI,
    'setWhitelistMintPrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareArgoPetzTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareArgoPetzTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"whitelistMint"`.
 *
 *
 */
export function usePrepareArgoPetzWhitelistMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'whitelistMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'whitelistMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'whitelistMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoPetzABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function usePrepareArgoPetzWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoPetzABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoPetzABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoPetzABI}__.
 *
 *
 */
export function useArgoPetzEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof argoPetzABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    ...config,
  } as UseContractEventConfig<typeof argoPetzABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoPetzABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useArgoPetzApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof argoPetzABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof argoPetzABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoPetzABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useArgoPetzApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof argoPetzABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof argoPetzABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoPetzABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useArgoPetzOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof argoPetzABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof argoPetzABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoPetzABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useArgoPetzTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof argoPetzABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoPetzAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoPetzABI,
    address: argoPetzAddress[338],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof argoPetzABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__.
 *
 *
 */
export function useArgoQuestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"MAX_SUPPLY"`.
 *
 *
 */
export function useArgoQuestMaxSupply<
  TFunctionName extends 'MAX_SUPPLY',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'MAX_SUPPLY',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"argonauts"`.
 *
 *
 */
export function useArgoQuestArgonauts<
  TFunctionName extends 'argonauts',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'argonauts',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"argonautsOwners"`.
 *
 *
 */
export function useArgoQuestArgonautsOwners<
  TFunctionName extends 'argonautsOwners',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'argonautsOwners',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"argopetz"`.
 *
 *
 */
export function useArgoQuestArgopetz<
  TFunctionName extends 'argopetz',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'argopetz',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"argopetzCrew"`.
 *
 *
 */
export function useArgoQuestArgopetzCrew<
  TFunctionName extends 'argopetzCrew',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'argopetzCrew',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"argopetzOwners"`.
 *
 *
 */
export function useArgoQuestArgopetzOwners<
  TFunctionName extends 'argopetzOwners',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'argopetzOwners',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"canQuest"`.
 *
 *
 */
export function useArgoQuestCanQuest<
  TFunctionName extends 'canQuest',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'canQuest',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"getTokenInfo"`.
 *
 *
 */
export function useArgoQuestGetTokenInfo<
  TFunctionName extends 'getTokenInfo',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'getTokenInfo',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"isArgopetzQuesting"`.
 *
 *
 */
export function useArgoQuestIsArgopetzQuesting<
  TFunctionName extends 'isArgopetzQuesting',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'isArgopetzQuesting',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"maxCrews"`.
 *
 *
 */
export function useArgoQuestMaxCrews<
  TFunctionName extends 'maxCrews',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'maxCrews',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useArgoQuestOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"questCrews"`.
 *
 *
 */
export function useArgoQuestQuestCrews<
  TFunctionName extends 'questCrews',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'questCrews',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"tokensLastQuestedAt"`.
 *
 *
 */
export function useArgoQuestTokensLastQuestedAt<
  TFunctionName extends 'tokensLastQuestedAt',
  TSelectData = ReadContractResult<typeof argoQuestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractRead({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'tokensLastQuestedAt',
    ...config,
  } as UseContractReadConfig<typeof argoQuestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__.
 *
 *
 */
export function useArgoQuestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof argoQuestABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, TFunctionName, TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchEditQuest"`.
 *
 *
 */
export function useArgoQuestBatchEditQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'batchEditQuest'
        >['request']['abi'],
        'batchEditQuest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchEditQuest'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'batchEditQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchEditQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'batchEditQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchEditQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchStartQuest"`.
 *
 *
 */
export function useArgoQuestBatchStartQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'batchStartQuest'
        >['request']['abi'],
        'batchStartQuest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchStartQuest'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'batchStartQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchStartQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'batchStartQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchStartQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchStopQuest"`.
 *
 *
 */
export function useArgoQuestBatchStopQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'batchStopQuest'
        >['request']['abi'],
        'batchStopQuest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchStopQuest'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'batchStopQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchStopQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'batchStopQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchStopQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"editQuest"`.
 *
 *
 */
export function useArgoQuestEditQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'editQuest'
        >['request']['abi'],
        'editQuest',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'editQuest' }
    : UseContractWriteConfig<typeof argoQuestABI, 'editQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'editQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'editQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'editQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function useArgoQuestOnErc721Received<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'onERC721Received'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'onERC721Received', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'onERC721Received', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"removeCrew"`.
 *
 *
 */
export function useArgoQuestRemoveCrew<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'removeCrew'
        >['request']['abi'],
        'removeCrew',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'removeCrew' }
    : UseContractWriteConfig<typeof argoQuestABI, 'removeCrew', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'removeCrew'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'removeCrew', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'removeCrew',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useArgoQuestRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof argoQuestABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'renounceOwnership', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setArgonauts"`.
 *
 *
 */
export function useArgoQuestSetArgonauts<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'setArgonauts'
        >['request']['abi'],
        'setArgonauts',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setArgonauts'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'setArgonauts', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setArgonauts'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'setArgonauts', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setArgonauts',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setArgopetz"`.
 *
 *
 */
export function useArgoQuestSetArgopetz<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'setArgopetz'
        >['request']['abi'],
        'setArgopetz',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setArgopetz'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'setArgopetz', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setArgopetz'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'setArgopetz', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setArgopetz',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setCanQuest"`.
 *
 *
 */
export function useArgoQuestSetCanQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'setCanQuest'
        >['request']['abi'],
        'setCanQuest',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setCanQuest'
      }
    : UseContractWriteConfig<typeof argoQuestABI, 'setCanQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setCanQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'setCanQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setCanQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"startQuest"`.
 *
 *
 */
export function useArgoQuestStartQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'startQuest'
        >['request']['abi'],
        'startQuest',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'startQuest' }
    : UseContractWriteConfig<typeof argoQuestABI, 'startQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'startQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'startQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'startQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"stopQuest"`.
 *
 *
 */
export function useArgoQuestStopQuest<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'stopQuest'
        >['request']['abi'],
        'stopQuest',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'stopQuest' }
    : UseContractWriteConfig<typeof argoQuestABI, 'stopQuest', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'stopQuest'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'stopQuest', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'stopQuest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useArgoQuestTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof argoQuestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof argoQuestABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof argoQuestABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof argoQuestABI, 'transferOwnership', TMode>({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__.
 *
 *
 */
export function usePrepareArgoQuestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchEditQuest"`.
 *
 *
 */
export function usePrepareArgoQuestBatchEditQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchEditQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchEditQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchEditQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchStartQuest"`.
 *
 *
 */
export function usePrepareArgoQuestBatchStartQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchStartQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchStartQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchStartQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"batchStopQuest"`.
 *
 *
 */
export function usePrepareArgoQuestBatchStopQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchStopQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'batchStopQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'batchStopQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"editQuest"`.
 *
 *
 */
export function usePrepareArgoQuestEditQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'editQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'editQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'editQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function usePrepareArgoQuestOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'onERC721Received'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"removeCrew"`.
 *
 *
 */
export function usePrepareArgoQuestRemoveCrew(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'removeCrew'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'removeCrew',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'removeCrew'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareArgoQuestRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setArgonauts"`.
 *
 *
 */
export function usePrepareArgoQuestSetArgonauts(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'setArgonauts'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setArgonauts',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'setArgonauts'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setArgopetz"`.
 *
 *
 */
export function usePrepareArgoQuestSetArgopetz(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'setArgopetz'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setArgopetz',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'setArgopetz'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"setCanQuest"`.
 *
 *
 */
export function usePrepareArgoQuestSetCanQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'setCanQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'setCanQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'setCanQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"startQuest"`.
 *
 *
 */
export function usePrepareArgoQuestStartQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'startQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'startQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'startQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"stopQuest"`.
 *
 *
 */
export function usePrepareArgoQuestStopQuest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'stopQuest'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'stopQuest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'stopQuest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link argoQuestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareArgoQuestTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof argoQuestABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof argoQuestABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoQuestABI}__.
 *
 *
 */
export function useArgoQuestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof argoQuestABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    ...config,
  } as UseContractEventConfig<typeof argoQuestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoQuestABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useArgoQuestOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof argoQuestABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof argoQuestABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoQuestABI}__ and `eventName` set to `"QuestEdited"`.
 *
 *
 */
export function useArgoQuestQuestEditedEvent(
  config: Omit<
    UseContractEventConfig<typeof argoQuestABI, 'QuestEdited'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    eventName: 'QuestEdited',
    ...config,
  } as UseContractEventConfig<typeof argoQuestABI, 'QuestEdited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoQuestABI}__ and `eventName` set to `"QuestStarted"`.
 *
 *
 */
export function useArgoQuestQuestStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof argoQuestABI, 'QuestStarted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    eventName: 'QuestStarted',
    ...config,
  } as UseContractEventConfig<typeof argoQuestABI, 'QuestStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link argoQuestABI}__ and `eventName` set to `"QuestStopped"`.
 *
 *
 */
export function useArgoQuestQuestStoppedEvent(
  config: Omit<
    UseContractEventConfig<typeof argoQuestABI, 'QuestStopped'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof argoQuestAddress } = {} as any,
) {
  return useContractEvent({
    abi: argoQuestABI,
    address: argoQuestAddress[338],
    eventName: 'QuestStopped',
    ...config,
  } as UseContractEventConfig<typeof argoQuestABI, 'QuestStopped'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 *
 *
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"baseURI"`.
 *
 *
 */
export function useErc721BaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"exists"`.
 *
 *
 */
export function useErc721Exists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useErc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useErc721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 *
 *
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useErc721Approve<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'approve', TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function useErc721Mint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof erc721ABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'mint', TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof erc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof erc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useErc721TransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc721Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 *
 *
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function usePrepareErc721Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    address: erc721Address[338],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 *
 *
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    address: erc721Address[338],
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    address: erc721Address[338],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    address: erc721Address[338],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ConsecutiveTransfer"`.
 *
 *
 */
export function useErc721ConsecutiveTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ConsecutiveTransfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    address: erc721Address[338],
    eventName: 'ConsecutiveTransfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ConsecutiveTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc721Address } = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    address: erc721Address[338],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__.
 *
 *
 */
export function useStarMapCraftingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"argopetz"`.
 *
 *
 */
export function useStarMapCraftingArgopetz<
  TFunctionName extends 'argopetz',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'argopetz',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"getStakedNFTCount"`.
 *
 *
 */
export function useStarMapCraftingGetStakedNftCount<
  TFunctionName extends 'getStakedNFTCount',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'getStakedNFTCount',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"getStakedNFTs"`.
 *
 *
 */
export function useStarMapCraftingGetStakedNfTs<
  TFunctionName extends 'getStakedNFTs',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'getStakedNFTs',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function useStarMapCraftingOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useStarMapCraftingOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"starmapCraftingTime"`.
 *
 *
 */
export function useStarMapCraftingStarmapCraftingTime<
  TFunctionName extends 'starmapCraftingTime',
  TSelectData = ReadContractResult<typeof starMapCraftingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof starMapCraftingABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractRead({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'starmapCraftingTime',
    ...config,
  } as UseContractReadConfig<
    typeof starMapCraftingABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__.
 *
 *
 */
export function useStarMapCraftingWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof starMapCraftingABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof starMapCraftingABI, TFunctionName, TMode>({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useStarMapCraftingRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<
        typeof starMapCraftingABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof starMapCraftingABI,
    'renounceOwnership',
    TMode
  >({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"setArgopetz"`.
 *
 *
 */
export function useStarMapCraftingSetArgopetz<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'setArgopetz'
        >['request']['abi'],
        'setArgopetz',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setArgopetz'
      }
    : UseContractWriteConfig<
        typeof starMapCraftingABI,
        'setArgopetz',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setArgopetz'
      } = {} as any,
) {
  return useContractWrite<typeof starMapCraftingABI, 'setArgopetz', TMode>({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'setArgopetz',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"setStarmapCraftingTime"`.
 *
 *
 */
export function useStarMapCraftingSetStarmapCraftingTime<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'setStarmapCraftingTime'
        >['request']['abi'],
        'setStarmapCraftingTime',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setStarmapCraftingTime'
      }
    : UseContractWriteConfig<
        typeof starMapCraftingABI,
        'setStarmapCraftingTime',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setStarmapCraftingTime'
      } = {} as any,
) {
  return useContractWrite<
    typeof starMapCraftingABI,
    'setStarmapCraftingTime',
    TMode
  >({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'setStarmapCraftingTime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"stakeNFT"`.
 *
 *
 */
export function useStarMapCraftingStakeNft<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'stakeNFT'
        >['request']['abi'],
        'stakeNFT',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'stakeNFT' }
    : UseContractWriteConfig<typeof starMapCraftingABI, 'stakeNFT', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'stakeNFT'
      } = {} as any,
) {
  return useContractWrite<typeof starMapCraftingABI, 'stakeNFT', TMode>({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'stakeNFT',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useStarMapCraftingTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<
        typeof starMapCraftingABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof starMapCraftingABI,
    'transferOwnership',
    TMode
  >({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"unstakeNFT"`.
 *
 *
 */
export function useStarMapCraftingUnstakeNft<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof starMapCraftingAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof starMapCraftingABI,
          'unstakeNFT'
        >['request']['abi'],
        'unstakeNFT',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unstakeNFT' }
    : UseContractWriteConfig<typeof starMapCraftingABI, 'unstakeNFT', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unstakeNFT'
      } = {} as any,
) {
  return useContractWrite<typeof starMapCraftingABI, 'unstakeNFT', TMode>({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'unstakeNFT',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__.
 *
 *
 */
export function usePrepareStarMapCraftingWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof starMapCraftingABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    ...config,
  } as UsePrepareContractWriteConfig<typeof starMapCraftingABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareStarMapCraftingRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof starMapCraftingABI,
      'renounceOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof starMapCraftingABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"setArgopetz"`.
 *
 *
 */
export function usePrepareStarMapCraftingSetArgopetz(
  config: Omit<
    UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'setArgopetz'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'setArgopetz',
    ...config,
  } as UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'setArgopetz'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"setStarmapCraftingTime"`.
 *
 *
 */
export function usePrepareStarMapCraftingSetStarmapCraftingTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof starMapCraftingABI,
      'setStarmapCraftingTime'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'setStarmapCraftingTime',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof starMapCraftingABI,
    'setStarmapCraftingTime'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"stakeNFT"`.
 *
 *
 */
export function usePrepareStarMapCraftingStakeNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'stakeNFT'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'stakeNFT',
    ...config,
  } as UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'stakeNFT'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareStarMapCraftingTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof starMapCraftingABI,
      'transferOwnership'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof starMapCraftingABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link starMapCraftingABI}__ and `functionName` set to `"unstakeNFT"`.
 *
 *
 */
export function usePrepareStarMapCraftingUnstakeNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'unstakeNFT'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    functionName: 'unstakeNFT',
    ...config,
  } as UsePrepareContractWriteConfig<typeof starMapCraftingABI, 'unstakeNFT'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link starMapCraftingABI}__.
 *
 *
 */
export function useStarMapCraftingEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof starMapCraftingABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractEvent({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    ...config,
  } as UseContractEventConfig<typeof starMapCraftingABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link starMapCraftingABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useStarMapCraftingOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof starMapCraftingABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractEvent({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof starMapCraftingABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link starMapCraftingABI}__ and `eventName` set to `"StakedNFT"`.
 *
 *
 */
export function useStarMapCraftingStakedNftEvent(
  config: Omit<
    UseContractEventConfig<typeof starMapCraftingABI, 'StakedNFT'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractEvent({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    eventName: 'StakedNFT',
    ...config,
  } as UseContractEventConfig<typeof starMapCraftingABI, 'StakedNFT'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link starMapCraftingABI}__ and `eventName` set to `"StarmapCraftingTimeSet"`.
 *
 *
 */
export function useStarMapCraftingStarmapCraftingTimeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof starMapCraftingABI, 'StarmapCraftingTimeSet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractEvent({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    eventName: 'StarmapCraftingTimeSet',
    ...config,
  } as UseContractEventConfig<
    typeof starMapCraftingABI,
    'StarmapCraftingTimeSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link starMapCraftingABI}__ and `eventName` set to `"UnstakedNFT"`.
 *
 *
 */
export function useStarMapCraftingUnstakedNftEvent(
  config: Omit<
    UseContractEventConfig<typeof starMapCraftingABI, 'UnstakedNFT'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof starMapCraftingAddress } = {} as any,
) {
  return useContractEvent({
    abi: starMapCraftingABI,
    address: starMapCraftingAddress[338],
    eventName: 'UnstakedNFT',
    ...config,
  } as UseContractEventConfig<typeof starMapCraftingABI, 'UnstakedNFT'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBankRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof bankABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"balances"`.
 *
 *
 */
export function useBankBalances<
  TFunctionName extends 'balances',
  TSelectData = ReadContractResult<typeof bankABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'balances',
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"getBalance"`.
 *
 *
 */
export function useBankGetBalance<
  TFunctionName extends 'getBalance',
  TSelectData = ReadContractResult<typeof bankABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'getBalance',
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"nftOwner"`.
 *
 *
 */
export function useBankNftOwner<
  TFunctionName extends 'nftOwner',
  TSelectData = ReadContractResult<typeof bankABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'nftOwner',
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"tokenBalances"`.
 *
 *
 */
export function useBankTokenBalances<
  TFunctionName extends 'tokenBalances',
  TSelectData = ReadContractResult<typeof bankABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractRead({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'tokenBalances',
    ...config,
  } as UseContractReadConfig<typeof bankABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBankWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bankABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof bankABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, TFunctionName, TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function useBankDeposit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bankABI, 'deposit'>['request']['abi'],
        'deposit',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'deposit' }
    : UseContractWriteConfig<typeof bankABI, 'deposit', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'deposit', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"depositNFT"`.
 *
 *
 */
export function useBankDepositNft<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bankABI,
          'depositNFT'
        >['request']['abi'],
        'depositNFT',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'depositNFT' }
    : UseContractWriteConfig<typeof bankABI, 'depositNFT', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositNFT'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'depositNFT', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'depositNFT',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"depositToken"`.
 *
 *
 */
export function useBankDepositToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bankABI,
          'depositToken'
        >['request']['abi'],
        'depositToken',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'depositToken'
      }
    : UseContractWriteConfig<typeof bankABI, 'depositToken', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'depositToken'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'depositToken', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'depositToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function useBankWithdraw<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bankABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof bankABI, 'withdraw', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'withdraw', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdrawNFT"`.
 *
 *
 */
export function useBankWithdrawNft<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bankABI,
          'withdrawNFT'
        >['request']['abi'],
        'withdrawNFT',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawNFT'
      }
    : UseContractWriteConfig<typeof bankABI, 'withdrawNFT', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawNFT'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'withdrawNFT', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdrawNFT',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdrawToken"`.
 *
 *
 */
export function useBankWithdrawToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof bankAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof bankABI,
          'withdrawToken'
        >['request']['abi'],
        'withdrawToken',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawToken'
      }
    : UseContractWriteConfig<typeof bankABI, 'withdrawToken', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawToken'
      } = {} as any,
) {
  return useContractWrite<typeof bankABI, 'withdrawToken', TMode>({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdrawToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function usePrepareBankWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"deposit"`.
 *
 *
 */
export function usePrepareBankDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"depositNFT"`.
 *
 *
 */
export function usePrepareBankDepositNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'depositNFT'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'depositNFT',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'depositNFT'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"depositToken"`.
 *
 *
 */
export function usePrepareBankDepositToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'depositToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'depositToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'depositToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdraw"`.
 *
 *
 */
export function usePrepareBankWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdrawNFT"`.
 *
 *
 */
export function usePrepareBankWithdrawNft(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'withdrawNFT'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdrawNFT',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'withdrawNFT'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bankABI}__ and `functionName` set to `"withdrawToken"`.
 *
 *
 */
export function usePrepareBankWithdrawToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof bankABI, 'withdrawToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: bankABI,
    address: bankAddress[31337],
    functionName: 'withdrawToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bankABI, 'withdrawToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__.
 *
 *
 */
export function useBankEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof bankABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof bankABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"Deposited"`.
 *
 *
 */
export function useBankDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'Deposited'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"DepositedNFT"`.
 *
 *
 */
export function useBankDepositedNftEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'DepositedNFT'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'DepositedNFT',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'DepositedNFT'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"DepositedToken"`.
 *
 *
 */
export function useBankDepositedTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'DepositedToken'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'DepositedToken',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'DepositedToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"Withdrawn"`.
 *
 *
 */
export function useBankWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'Withdrawn'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"WithdrawnNFT"`.
 *
 *
 */
export function useBankWithdrawnNftEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'WithdrawnNFT'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'WithdrawnNFT',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'WithdrawnNFT'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bankABI}__ and `eventName` set to `"WithdrawnToken"`.
 *
 *
 */
export function useBankWithdrawnTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof bankABI, 'WithdrawnToken'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof bankAddress } = {} as any,
) {
  return useContractEvent({
    abi: bankABI,
    address: bankAddress[31337],
    eventName: 'WithdrawnToken',
    ...config,
  } as UseContractEventConfig<typeof bankABI, 'WithdrawnToken'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__.
 *
 *
 */
export function useDiamondsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useDiamondsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"baseURI"`.
 *
 *
 */
export function useDiamondsBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"exists"`.
 *
 *
 */
export function useDiamondsExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useDiamondsGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useDiamondsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useDiamondsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useDiamondsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useDiamondsOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"publicMintCount"`.
 *
 *
 */
export function useDiamondsPublicMintCount<
  TFunctionName extends 'publicMintCount',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'publicMintCount',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"publicMintMaxPerWallet"`.
 *
 *
 */
export function useDiamondsPublicMintMaxPerWallet<
  TFunctionName extends 'publicMintMaxPerWallet',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'publicMintMaxPerWallet',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"publicMintPrice"`.
 *
 *
 */
export function useDiamondsPublicMintPrice<
  TFunctionName extends 'publicMintPrice',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'publicMintPrice',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"revealed"`.
 *
 *
 */
export function useDiamondsRevealed<
  TFunctionName extends 'revealed',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'revealed',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"stage"`.
 *
 *
 */
export function useDiamondsStage<
  TFunctionName extends 'stage',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'stage',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useDiamondsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useDiamondsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useDiamondsTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useDiamondsTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"treasury"`.
 *
 *
 */
export function useDiamondsTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"unrevealedImageURI"`.
 *
 *
 */
export function useDiamondsUnrevealedImageUri<
  TFunctionName extends 'unrevealedImageURI',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'unrevealedImageURI',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"vipMintCount"`.
 *
 *
 */
export function useDiamondsVipMintCount<
  TFunctionName extends 'vipMintCount',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'vipMintCount',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"vipMintMaxPerWallet"`.
 *
 *
 */
export function useDiamondsVipMintMaxPerWallet<
  TFunctionName extends 'vipMintMaxPerWallet',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'vipMintMaxPerWallet',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"vipMintPrice"`.
 *
 *
 */
export function useDiamondsVipMintPrice<
  TFunctionName extends 'vipMintPrice',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'vipMintPrice',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistMintCount"`.
 *
 *
 */
export function useDiamondsWhitelistMintCount<
  TFunctionName extends 'whitelistMintCount',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistMintCount',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistMintMaxPerWallet"`.
 *
 *
 */
export function useDiamondsWhitelistMintMaxPerWallet<
  TFunctionName extends 'whitelistMintMaxPerWallet',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistMintMaxPerWallet',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistMintPrice"`.
 *
 *
 */
export function useDiamondsWhitelistMintPrice<
  TFunctionName extends 'whitelistMintPrice',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistMintPrice',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistPhase"`.
 *
 *
 */
export function useDiamondsWhitelistPhase<
  TFunctionName extends 'whitelistPhase',
  TSelectData = ReadContractResult<typeof diamondsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractRead({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistPhase',
    ...config,
  } as UseContractReadConfig<typeof diamondsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__.
 *
 *
 */
export function useDiamondsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof diamondsABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, TFunctionName, TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useDiamondsApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof diamondsABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'approve', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function useDiamondsMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof diamondsABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'mint', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useDiamondsRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'renounceOwnership', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useDiamondsSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'safeTransferFrom', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useDiamondsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setApprovalForAll', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setBaseURI"`.
 *
 *
 */
export function useDiamondsSetBaseUri<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setBaseURI' }
    : UseContractWriteConfig<typeof diamondsABI, 'setBaseURI', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setBaseURI', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setPublicMintPrice"`.
 *
 *
 */
export function useDiamondsSetPublicMintPrice<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setPublicMintPrice'
        >['request']['abi'],
        'setPublicMintPrice',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setPublicMintPrice'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setPublicMintPrice',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setPublicMintPrice'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setPublicMintPrice', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setPublicMintPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setStage"`.
 *
 *
 */
export function useDiamondsSetStage<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setStage'
        >['request']['abi'],
        'setStage',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setStage' }
    : UseContractWriteConfig<typeof diamondsABI, 'setStage', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setStage'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setStage', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setStage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setTreasury"`.
 *
 *
 */
export function useDiamondsSetTreasury<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setTreasury'
        >['request']['abi'],
        'setTreasury',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setTreasury'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'setTreasury', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setTreasury', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setUnrevealedImageURI"`.
 *
 *
 */
export function useDiamondsSetUnrevealedImageUri<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setUnrevealedImageURI'
        >['request']['abi'],
        'setUnrevealedImageURI',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setUnrevealedImageURI'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setUnrevealedImageURI',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setUnrevealedImageURI'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setUnrevealedImageURI', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setUnrevealedImageURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setVipMaxMintPerWallet"`.
 *
 *
 */
export function useDiamondsSetVipMaxMintPerWallet<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setVipMaxMintPerWallet'
        >['request']['abi'],
        'setVipMaxMintPerWallet',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setVipMaxMintPerWallet'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setVipMaxMintPerWallet',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setVipMaxMintPerWallet'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setVipMaxMintPerWallet', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setVipMaxMintPerWallet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setVipMintPrice"`.
 *
 *
 */
export function useDiamondsSetVipMintPrice<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setVipMintPrice'
        >['request']['abi'],
        'setVipMintPrice',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setVipMintPrice'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'setVipMintPrice', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setVipMintPrice'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setVipMintPrice', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setVipMintPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistMaxMintPerWallet"`.
 *
 *
 */
export function useDiamondsSetWhitelistMaxMintPerWallet<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setWhitelistMaxMintPerWallet'
        >['request']['abi'],
        'setWhitelistMaxMintPerWallet',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setWhitelistMaxMintPerWallet'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setWhitelistMaxMintPerWallet',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWhitelistMaxMintPerWallet'
      } = {} as any,
) {
  return useContractWrite<
    typeof diamondsABI,
    'setWhitelistMaxMintPerWallet',
    TMode
  >({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistMaxMintPerWallet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistMintPrice"`.
 *
 *
 */
export function useDiamondsSetWhitelistMintPrice<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setWhitelistMintPrice'
        >['request']['abi'],
        'setWhitelistMintPrice',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setWhitelistMintPrice'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setWhitelistMintPrice',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWhitelistMintPrice'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setWhitelistMintPrice', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistMintPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistPhase"`.
 *
 *
 */
export function useDiamondsSetWhitelistPhase<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setWhitelistPhase'
        >['request']['abi'],
        'setWhitelistPhase',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setWhitelistPhase'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'setWhitelistPhase', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWhitelistPhase'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'setWhitelistPhase', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistPhase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistSignerAddress"`.
 *
 *
 */
export function useDiamondsSetWhitelistSignerAddress<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'setWhitelistSignerAddress'
        >['request']['abi'],
        'setWhitelistSignerAddress',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setWhitelistSignerAddress'
      }
    : UseContractWriteConfig<
        typeof diamondsABI,
        'setWhitelistSignerAddress',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setWhitelistSignerAddress'
      } = {} as any,
) {
  return useContractWrite<
    typeof diamondsABI,
    'setWhitelistSignerAddress',
    TMode
  >({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistSignerAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"toggleReveal"`.
 *
 *
 */
export function useDiamondsToggleReveal<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'toggleReveal'
        >['request']['abi'],
        'toggleReveal',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'toggleReveal'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'toggleReveal', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'toggleReveal'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'toggleReveal', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'toggleReveal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useDiamondsTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'transferFrom', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useDiamondsTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'transferOwnership', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistMint"`.
 *
 *
 */
export function useDiamondsWhitelistMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'whitelistMint'
        >['request']['abi'],
        'whitelistMint',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'whitelistMint'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'whitelistMint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'whitelistMint'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'whitelistMint', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"withdrawFund"`.
 *
 *
 */
export function useDiamondsWithdrawFund<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof diamondsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof diamondsABI,
          'withdrawFund'
        >['request']['abi'],
        'withdrawFund',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawFund'
      }
    : UseContractWriteConfig<typeof diamondsABI, 'withdrawFund', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawFund'
      } = {} as any,
) {
  return useContractWrite<typeof diamondsABI, 'withdrawFund', TMode>({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'withdrawFund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__.
 *
 *
 */
export function usePrepareDiamondsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareDiamondsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function usePrepareDiamondsMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareDiamondsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareDiamondsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareDiamondsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setBaseURI"`.
 *
 *
 */
export function usePrepareDiamondsSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setBaseURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setPublicMintPrice"`.
 *
 *
 */
export function usePrepareDiamondsSetPublicMintPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setPublicMintPrice'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setPublicMintPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setPublicMintPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setStage"`.
 *
 *
 */
export function usePrepareDiamondsSetStage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setStage'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setStage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setStage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setTreasury"`.
 *
 *
 */
export function usePrepareDiamondsSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setTreasury'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setUnrevealedImageURI"`.
 *
 *
 */
export function usePrepareDiamondsSetUnrevealedImageUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setUnrevealedImageURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setUnrevealedImageURI',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof diamondsABI,
    'setUnrevealedImageURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setVipMaxMintPerWallet"`.
 *
 *
 */
export function usePrepareDiamondsSetVipMaxMintPerWallet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setVipMaxMintPerWallet'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setVipMaxMintPerWallet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof diamondsABI,
    'setVipMaxMintPerWallet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setVipMintPrice"`.
 *
 *
 */
export function usePrepareDiamondsSetVipMintPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setVipMintPrice'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setVipMintPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setVipMintPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistMaxMintPerWallet"`.
 *
 *
 */
export function usePrepareDiamondsSetWhitelistMaxMintPerWallet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof diamondsABI,
      'setWhitelistMaxMintPerWallet'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistMaxMintPerWallet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof diamondsABI,
    'setWhitelistMaxMintPerWallet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistMintPrice"`.
 *
 *
 */
export function usePrepareDiamondsSetWhitelistMintPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setWhitelistMintPrice'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistMintPrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof diamondsABI,
    'setWhitelistMintPrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistPhase"`.
 *
 *
 */
export function usePrepareDiamondsSetWhitelistPhase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'setWhitelistPhase'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistPhase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'setWhitelistPhase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"setWhitelistSignerAddress"`.
 *
 *
 */
export function usePrepareDiamondsSetWhitelistSignerAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof diamondsABI,
      'setWhitelistSignerAddress'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'setWhitelistSignerAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof diamondsABI,
    'setWhitelistSignerAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"toggleReveal"`.
 *
 *
 */
export function usePrepareDiamondsToggleReveal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'toggleReveal'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'toggleReveal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'toggleReveal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareDiamondsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareDiamondsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"whitelistMint"`.
 *
 *
 */
export function usePrepareDiamondsWhitelistMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'whitelistMint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'whitelistMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'whitelistMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link diamondsABI}__ and `functionName` set to `"withdrawFund"`.
 *
 *
 */
export function usePrepareDiamondsWithdrawFund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof diamondsABI, 'withdrawFund'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    functionName: 'withdrawFund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof diamondsABI, 'withdrawFund'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link diamondsABI}__.
 *
 *
 */
export function useDiamondsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof diamondsABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractEvent({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof diamondsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link diamondsABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useDiamondsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof diamondsABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractEvent({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof diamondsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link diamondsABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useDiamondsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof diamondsABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractEvent({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof diamondsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link diamondsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useDiamondsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof diamondsABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractEvent({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof diamondsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link diamondsABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useDiamondsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof diamondsABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof diamondsAddress } = {} as any,
) {
  return useContractEvent({
    abi: diamondsABI,
    address: diamondsAddress[31337],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof diamondsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__.
 *
 *
 */
export function useGoldRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"allowance"`.
 *
 *
 */
export function useGoldAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useGoldBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"decimals"`.
 *
 *
 */
export function useGoldDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useGoldName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useGoldSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useGoldTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof goldABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractRead({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof goldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__.
 *
 *
 */
export function useGoldWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof goldABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, TFunctionName, TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useGoldApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof goldABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'approve', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 *
 */
export function useGoldDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<typeof goldABI, 'decreaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'decreaseAllowance', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 *
 */
export function useGoldIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<typeof goldABI, 'increaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'increaseAllowance', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function useGoldMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof goldABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'mint', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"transfer"`.
 *
 *
 */
export function useGoldTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof goldABI, 'transfer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'transfer', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useGoldTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof goldAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof goldABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof goldABI, 'transferFrom', TMode>({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__.
 *
 *
 */
export function usePrepareGoldWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareGoldApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 *
 */
export function usePrepareGoldDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 *
 */
export function usePrepareGoldIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function usePrepareGoldMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"transfer"`.
 *
 *
 */
export function usePrepareGoldTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareGoldTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: goldABI,
    address: goldAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldABI}__.
 *
 *
 */
export function useGoldEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof goldABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractEvent({
    abi: goldABI,
    address: goldAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof goldABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useGoldApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof goldABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractEvent({
    abi: goldABI,
    address: goldAddress[31337],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof goldABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useGoldTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof goldABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof goldAddress } = {} as any,
) {
  return useContractEvent({
    abi: goldABI,
    address: goldAddress[31337],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof goldABI, 'Transfer'>)
}
