{
  "abi": [
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060265760003560e01c80633ccfd60b14602b578063d0e30db014603d575b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220e03b907323ddfef5a1d9d1630aac6953e1253157d12eae0596ab02f1c534559164736f6c63430008130033",
    "sourceMap": "62:282:0:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361060265760003560e01c80633ccfd60b14602b578063d0e30db014603d575b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220e03b907323ddfef5a1d9d1630aac6953e1253157d12eae0596ab02f1c534559164736f6c63430008130033",
    "sourceMap": "62:282:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;245:97;;;;;;;;;;;;;:::i;:::-;;;284:51;;292:10;;313:21;284:51;;;;;;;;;313:21;292:10;284:51;;;;;;;;;;;;;;;;;;;;;245:97::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "deposit()": "d0e30db0",
    "withdraw()": "3ccfd60b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit()\":{\"details\":\"Deposit ETH to the contract\"},\"withdraw()\":{\"details\":\"Withdraw ETH from the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Contract.sol\":\"Contract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/Contract.sol\":{\"keccak256\":\"0x2d0c380853edc5385cd2226b09e2da8d0f7b5a393aad5db51f7a951ae34b43dc\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://9d464a64651480fd05a04b2a5499feff69d6e21017083a3530d4417c7919bcce\",\"dweb:/ipfs/QmXtXRaChkj7R68sxMYkwGqPRAv43gzH91ox8sZUq728MR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "deposit"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deposit()": {
            "details": "Deposit ETH to the contract"
          },
          "withdraw()": {
            "details": "Withdraw ETH from the contract"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat-deploy/=node_modules/hardhat-deploy/",
        ":hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/Contract.sol": "Contract"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/Contract.sol": {
        "keccak256": "0x2d0c380853edc5385cd2226b09e2da8d0f7b5a393aad5db51f7a951ae34b43dc",
        "urls": [
          "bzz-raw://9d464a64651480fd05a04b2a5499feff69d6e21017083a3530d4417c7919bcce",
          "dweb:/ipfs/QmXtXRaChkj7R68sxMYkwGqPRAv43gzH91ox8sZUq728MR"
        ],
        "license": "GPL-3.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/Contract.sol",
    "id": 26,
    "exportedSymbols": {
      "Contract": [
        25
      ]
    },
    "nodeType": "SourceUnit",
    "src": "36:309:0",
    "nodes": [
      {
        "id": 1,
        "nodeType": "PragmaDirective",
        "src": "36:24:0",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 25,
        "nodeType": "ContractDefinition",
        "src": "62:282:0",
        "nodes": [
          {
            "id": 6,
            "nodeType": "FunctionDefinition",
            "src": "142:38:0",
            "nodes": [],
            "body": {
              "id": 5,
              "nodeType": "Block",
              "src": "178:2:0",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 2,
              "nodeType": "StructuredDocumentation",
              "src": "86:51:0",
              "text": " @dev Deposit ETH to the contract"
            },
            "functionSelector": "d0e30db0",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "151:7:0",
            "parameters": {
              "id": 3,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "158:2:0"
            },
            "returnParameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "178:0:0"
            },
            "scope": 25,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24,
            "nodeType": "FunctionDefinition",
            "src": "245:97:0",
            "nodes": [],
            "body": {
              "id": 23,
              "nodeType": "Block",
              "src": "274:68:0",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 18,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "321:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Contract_$25",
                                "typeString": "contract Contract"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Contract_$25",
                                "typeString": "contract Contract"
                              }
                            ],
                            "id": 17,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "313:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 16,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "313:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 19,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "313:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "327:7:0",
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "313:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 12,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "292:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 13,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "296:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "292:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 11,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "284:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 10,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "284:8:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "284:19:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 15,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "304:8:0",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "284:28:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "284:51:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22,
                  "nodeType": "ExpressionStatement",
                  "src": "284:51:0"
                }
              ]
            },
            "documentation": {
              "id": 7,
              "nodeType": "StructuredDocumentation",
              "src": "186:54:0",
              "text": " @dev Withdraw ETH from the contract"
            },
            "functionSelector": "3ccfd60b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "254:8:0",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "262:2:0"
            },
            "returnParameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "274:0:0"
            },
            "scope": 25,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Contract",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          25
        ],
        "name": "Contract",
        "nameLocation": "71:8:0",
        "scope": 26,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0"
  },
  "id": 0
}