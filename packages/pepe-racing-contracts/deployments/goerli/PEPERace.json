{
  "address": "0x35AcD978de9cc98437FD310EC71723FD4e9741b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_myWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketingWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AntiBotDisengaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AntiBotEngaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StealthLaunchEngaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTaxBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "secret",
          "type": "uint32"
        }
      ],
      "name": "connectAndApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableAntiBotMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disengagedOnce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableAntiBotMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "engagedOnce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGoerli",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLaunched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSepolia",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTestnet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "racingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellTaxBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setMarketingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setMyWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "setRacingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setRevenueWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stealthLaunch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa1f356b4898fa4df1e497da6732c5c8cadb740cdffa1dc043af189a609a8c56a",
  "receipt": {
    "to": null,
    "from": "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D",
    "contractAddress": "0x35AcD978de9cc98437FD310EC71723FD4e9741b6",
    "transactionIndex": 4,
    "gasUsed": "2114376",
    "logsBloom": "0x
    "blockHash": "0xf2b0eaafcfa60419aed4f56783b5f006b3c8b4e2d974e05176b4a693816745c5",
    "transactionHash": "0xa1f356b4898fa4df1e497da6732c5c8cadb740cdffa1dc043af189a609a8c56a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9515132,
        "transactionHash": "0xa1f356b4898fa4df1e497da6732c5c8cadb740cdffa1dc043af189a609a8c56a",
        "address": "0x35AcD978de9cc98437FD310EC71723FD4e9741b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d11334b5a96cc48f5c2f58b0a4201a9fa984df0d"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xf2b0eaafcfa60419aed4f56783b5f006b3c8b4e2d974e05176b4a693816745c5"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9515132,
        "transactionHash": "0xa1f356b4898fa4df1e497da6732c5c8cadb740cdffa1dc043af189a609a8c56a",
        "address": "0x35AcD978de9cc98437FD310EC71723FD4e9741b6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000035acd978de9cc98437fd310ec71723fd4e9741b6",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xf2b0eaafcfa60419aed4f56783b5f006b3c8b4e2d974e05176b4a693816745c5"
      }
    ],
    "blockNumber": 9515132,
    "cumulativeGasUsed": "2712072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D",
    "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D",
    "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D"
  ],
  "numDeployments": 1,
  "solcInputHash": "1ab3b8ed2aed212100e465f59e538e51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_myWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AntiBotDisengaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AntiBotEngaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StealthLaunchEngaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"secret\",\"type\":\"uint32\"}],\"name\":\"connectAndApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAntiBotMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disengagedOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAntiBotMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engagedOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGoerli\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSepolia\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTestnet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"racingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setRacingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setRevenueWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stealthLaunch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"connectAndApprove(uint32)\":{\"details\":\"Does the same thing as a max approve for the racing contract, but takes as input a secret that the bot uses to verify ownership by a Telegram user.\",\"params\":{\"secret\":\"The secret that the bot is expecting.\"},\"returns\":{\"_0\":\"true\"}},\"mint(uint256)\":{\"details\":\"Allow minting on testnet so I don't have to deal with buying from Uniswap.\",\"params\":{\"amount\":\"the number of tokens to mint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"details\":\"Transfer tokens from the caller to another address.\",\"params\":{\"amount\":\"the quantity to send\",\"to\":\"the receiver\"},\"returns\":{\"_0\":\"true if the transfer succeeded, otherwise false\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. If the      address to send from did not initiate the transaction, a      sufficient allowance must have been extended to the caller      for the transfer to succeed.\",\"params\":{\"amount\":\"the quantity to send\",\"from\":\"the sender\",\"to\":\"the receiver\"},\"returns\":{\"_0\":\"true if the transfer succeeded, otherwise false\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PEPERace.sol\":\"PEPERace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/PEPERace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ncontract PEPERace is Ownable, ERC20 {\\r\\n    IUniswapV2Router02 public router;\\r\\n    IUniswapV2Factory public factory;\\r\\n    IUniswapV2Pair public pair;\\r\\n\\r\\n    uint private constant INITIAL_SUPPLY = 10_000_000 * 10 ** 18;\\r\\n\\r\\n    // Percent of the initial supply that will go to the LP\\r\\n    uint constant LP_BPS = 9000;\\r\\n\\r\\n    // Percent of the initial supply that will go to marketing\\r\\n    uint constant MARKETING_BPS = 10_000 - LP_BPS;\\r\\n\\r\\n    //\\r\\n    // The tax to deduct, in basis points\\r\\n    //\\r\\n    uint public buyTaxBps = 500;\\r\\n    uint public sellTaxBps = 500;\\r\\n    //\\r\\n    bool isSellingCollectedTaxes;\\r\\n\\r\\n    event AntiBotEngaged();\\r\\n    event AntiBotDisengaged();\\r\\n    event StealthLaunchEngaged();\\r\\n\\r\\n    address public racingContract;\\r\\n\\r\\n    bool public isLaunched;\\r\\n\\r\\n    address public myWallet;\\r\\n    address public marketingWallet;\\r\\n    address public revenueWallet;\\r\\n\\r\\n    bool public engagedOnce;\\r\\n    bool public disengagedOnce;\\r\\n\\r\\n    constructor(address _myWallet, address _marketingWallet, address _revenueWallet) ERC20(\\\"PEPE Racing Token\\\", \\\"PEPERACE\\\", 18) {\\r\\n        if (isGoerli()) {\\r\\n            router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        } else if (isSepolia()) {\\r\\n            router = IUniswapV2Router02(0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008);\\r\\n        } else {\\r\\n            // require(block.chainid == 1, \\\"expected mainnet\\\");\\r\\n            router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        }\\r\\n        factory = IUniswapV2Factory(router.factory());\\r\\n\\r\\n        // Approve infinite spending by DEX, to sell tokens collected via tax.\\r\\n        allowance[address(this)][address(router)] = type(uint).max;\\r\\n        emit Approval(address(this), address(router), type(uint).max);\\r\\n\\r\\n        isLaunched = false;\\r\\n        myWallet = _myWallet;\\r\\n        marketingWallet = _marketingWallet;\\r\\n        revenueWallet = _revenueWallet;\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        isSellingCollectedTaxes = true;\\r\\n        _;\\r\\n        isSellingCollectedTaxes = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyTestnet() {\\r\\n        require(isTestnet(), \\\"not testnet\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function burn(uint amount) external {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allow minting on testnet so I don't have to deal with\\r\\n     * buying from Uniswap.\\r\\n     * @param amount the number of tokens to mint\\r\\n     */\\r\\n    function mint(uint amount) external onlyTestnet {\\r\\n        _mint(address(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n    function getMinSwapAmount() internal view returns (uint) {\\r\\n        return (totalSupply * 2) / 10000; // 0.02%\\r\\n    }\\r\\n\\r\\n    function isGoerli() public view returns (bool) {\\r\\n        return block.chainid == 5;\\r\\n    }\\r\\n\\r\\n    function isSepolia() public view returns (bool) {\\r\\n        return block.chainid == 11155111;\\r\\n    }\\r\\n\\r\\n    function isTestnet() public view returns (bool) {\\r\\n        return isGoerli() || isSepolia();\\r\\n    }\\r\\n\\r\\n    function enableAntiBotMode() public onlyOwner {\\r\\n        require(!engagedOnce, \\\"this is a one shot function\\\");\\r\\n        engagedOnce = true;\\r\\n        buyTaxBps = 1000;\\r\\n        sellTaxBps = 1000;\\r\\n        emit AntiBotEngaged();\\r\\n    }\\r\\n\\r\\n    function disableAntiBotMode() public onlyOwner {\\r\\n        require(!disengagedOnce, \\\"this is a one shot function\\\");\\r\\n        disengagedOnce = true;\\r\\n        buyTaxBps = 500;\\r\\n        sellTaxBps = 500;\\r\\n        emit AntiBotDisengaged();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Does the same thing as a max approve for the racing\\r\\n     * contract, but takes as input a secret that the bot uses to\\r\\n     * verify ownership by a Telegram user.\\r\\n     * @param secret The secret that the bot is expecting.\\r\\n     * @return true\\r\\n     */\\r\\n    function connectAndApprove(uint32 secret) external returns (bool) {\\r\\n        address pwner = _msgSender();\\r\\n\\r\\n        allowance[pwner][racingContract] = type(uint).max;\\r\\n        emit Approval(pwner, racingContract, type(uint).max);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setRacingContract(address a) public onlyOwner {\\r\\n        require(a != address(0), \\\"null address\\\");\\r\\n        racingContract = a;\\r\\n    }\\r\\n\\r\\n    function setMyWallet(address wallet) public onlyOwner {\\r\\n        require(wallet != address(0), \\\"null address\\\");\\r\\n        myWallet = wallet;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address wallet) public onlyOwner {\\r\\n        require(wallet != address(0), \\\"null address\\\");\\r\\n        marketingWallet = wallet;\\r\\n    }\\r\\n\\r\\n    function setRevenueWallet(address wallet) public onlyOwner {\\r\\n        require(wallet != address(0), \\\"null address\\\");\\r\\n        revenueWallet = wallet;\\r\\n    }\\r\\n\\r\\n    function stealthLaunch() external payable onlyOwner {\\r\\n        require(!isLaunched, \\\"already launched\\\");\\r\\n        require(myWallet != address(0), \\\"null address\\\");\\r\\n        require(marketingWallet != address(0), \\\"null address\\\");\\r\\n        require(revenueWallet != address(0), \\\"null address\\\");\\r\\n        require(racingContract != address(0), \\\"null address\\\");\\r\\n        isLaunched = true;\\r\\n\\r\\n        _mint(address(this), (INITIAL_SUPPLY * LP_BPS) / 10_000);\\r\\n\\r\\n        router.addLiquidityETH{ value: msg.value }(\\r\\n            address(this),\\r\\n            balanceOf[address(this)],\\r\\n            0,\\r\\n            0,\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        pair = IUniswapV2Pair(factory.getPair(address(this), router.WETH()));\\r\\n\\r\\n        _mint(marketingWallet, (INITIAL_SUPPLY * MARKETING_BPS) / 10_000);\\r\\n\\r\\n        require(totalSupply == INITIAL_SUPPLY, \\\"numbers don't add up\\\");\\r\\n\\r\\n        // So I don't have to deal with Uniswap when testing\\r\\n        if (isTestnet()) {\\r\\n            _mint(address(msg.sender), 10_000 * 10 ** decimals);\\r\\n        }\\r\\n\\r\\n        emit StealthLaunchEngaged();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate the amount of tax to apply to a transaction.\\r\\n     * @param from the sender\\r\\n     * @param to the receiver\\r\\n     * @param amount the quantity of tokens being sent\\r\\n     * @return the amount of tokens to withhold for taxes\\r\\n     */\\r\\n    function calcTax(address from, address to, uint amount) internal view returns (uint) {\\r\\n        if (from == owner() || to == owner() || from == address(this)) {\\r\\n            // For adding liquidity at the beginning\\r\\n            //\\r\\n            // Also for this contract selling the collected tax.\\r\\n            return 0;\\r\\n        } else if (from == address(pair)) {\\r\\n            // Buy from DEX, or adding liquidity.\\r\\n            return (amount * buyTaxBps) / 10_000;\\r\\n        } else if (to == address(pair)) {\\r\\n            // Sell from DEX, or removing liquidity.\\r\\n            return (amount * sellTaxBps) / 10_000;\\r\\n        } else {\\r\\n            // Sending to other wallets (e.g. OTC) is tax-free.\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sell the balance accumulated from taxes.\\r\\n     */\\r\\n    function sellCollectedTaxes() internal lockTheSwap {\\r\\n        // Of the remaining tokens, set aside 1/4 of the tokens to LP,\\r\\n        // swap the rest for ETH. LP the tokens with all of the ETH\\r\\n        // (only enough ETH will be used to pair with the original 1/4\\r\\n        // of tokens). Send the remaining ETH (about half the original\\r\\n        // balance) to my wallet.\\r\\n\\r\\n        uint tokensForLiq = balanceOf[address(this)] / 4;\\r\\n        uint tokensToSwap = balanceOf[address(this)] - tokensForLiq;\\r\\n\\r\\n        // Sell\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokensToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        router.addLiquidityETH{ value: address(this).balance }(\\r\\n            address(this),\\r\\n            tokensForLiq,\\r\\n            0,\\r\\n            0,\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        (bool success, ) = myWallet.call{ value: address(this).balance }(\\\"\\\");\\r\\n        require(success, \\\"ETH transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from the caller to another address.\\r\\n     * @param to the receiver\\r\\n     * @param amount the quantity to send\\r\\n     * @return true if the transfer succeeded, otherwise false\\r\\n     */\\r\\n    function transfer(address to, uint amount) public override returns (bool) {\\r\\n        return transferFrom(msg.sender, to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another. If the\\r\\n     *      address to send from did not initiate the transaction, a\\r\\n     *      sufficient allowance must have been extended to the caller\\r\\n     *      for the transfer to succeed.\\r\\n     * @param from the sender\\r\\n     * @param to the receiver\\r\\n     * @param amount the quantity to send\\r\\n     * @return true if the transfer succeeded, otherwise false\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint amount) public override returns (bool) {\\r\\n        if (from != msg.sender) {\\r\\n            // This is a typical transferFrom\\r\\n\\r\\n            uint allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n            if (allowed != type(uint).max) allowance[from][msg.sender] = allowed - amount;\\r\\n        }\\r\\n\\r\\n        // Only on sells because DEX has a LOCKED (reentrancy)\\r\\n        // error if done during buys.\\r\\n        //\\r\\n        // isSellingCollectedTaxes prevents an infinite loop.\\r\\n        if (\\r\\n            balanceOf[address(this)] > getMinSwapAmount() &&\\r\\n            !isSellingCollectedTaxes &&\\r\\n            from != address(pair) &&\\r\\n            from != address(this)\\r\\n        ) {\\r\\n            sellCollectedTaxes();\\r\\n        }\\r\\n\\r\\n        uint tax = calcTax(from, to, amount);\\r\\n        uint afterTaxAmount = amount - tax;\\r\\n\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += afterTaxAmount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, afterTaxAmount);\\r\\n\\r\\n        if (tax > 0) {\\r\\n            // Use 1/5 of tax for revenue\\r\\n            uint revenue = tax / 5;\\r\\n            tax -= revenue;\\r\\n\\r\\n            unchecked {\\r\\n                balanceOf[address(this)] += tax;\\r\\n                balanceOf[revenueWallet] += revenue;\\r\\n            }\\r\\n\\r\\n            // Any transfer to the contract can be viewed as tax\\r\\n            emit Transfer(from, address(this), tax);\\r\\n            emit Transfer(from, revenueWallet, revenue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x03c45cfe476891a31168b0d7bfa9aa7b511df38f5ecfffae5ad9cba28c8931cb\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e06040526101f4600a556101f4600b553480156200001d57600080fd5b5060405162002695380380620026958339810160408190526200004091620003c4565b604051806040016040528060118152602001702822a822902930b1b4b733902a37b5b2b760791b81525060405180604001604052806008815260200167504550455241434560c01b8152506012620000a7620000a1620002b760201b60201c565b620002bb565b6001620000b58482620004b3565b506002620000c48382620004b3565b5060ff81166080524660a052620000da6200030b565b60c052505050600546036200011557600780546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d17905562000173565b4662aa36a7036200014c57600780546001600160a01b03191673c532a74256d3db42d0bf7a0400fefdbad769400817905562000173565b600780546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d1790555b600760009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ed91906200057f565b600880546001600160a01b0319166001600160a01b039283161790553060008181526005602090815260408083206007805487168552908352928190206000199081905592549051928352909316927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3600c805460ff60a81b19169055600d80546001600160a01b039485166001600160a01b031991821617909155600e805493851693821693909317909255600f805491909316911617905562000622565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60016040516200033f9190620005a4565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b80516001600160a01b0381168114620003bf57600080fd5b919050565b600080600060608486031215620003da57600080fd5b620003e584620003a7565b9250620003f560208501620003a7565b91506200040560408501620003a7565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200043957607f821691505b6020821081036200045a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ae57600081815260208120601f850160051c81016020861015620004895750805b601f850160051c820191505b81811015620004aa5782815560010162000495565b5050505b505050565b81516001600160401b03811115620004cf57620004cf6200040e565b620004e781620004e0845462000424565b8462000460565b602080601f8311600181146200051f5760008415620005065750858301515b600019600386901b1c1916600185901b178555620004aa565b600085815260208120601f198616915b8281101562000550578886015182559484019460019091019084016200052f565b50858210156200056f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200059257600080fd5b6200059d82620003a7565b9392505050565b6000808354620005b48162000424565b60018281168015620005cf5760018114620005e55762000616565b60ff198416875282151583028701945062000616565b8760005260208060002060005b858110156200060d5781548a820152908401908201620005f2565b50505082870194505b50929695505050505050565b60805160a05160c05161203c620006596000396000610f2601526000610ef10152600081816103400152610b51015261203c6000f3fe6080604052600436106102275760003560e01c806389d796e411610122578063c473413a116100a5578063f2fde38b1161006c578063f2fde38b146106b0578063f887ea40146106d0578063f98eb6e1146106f0578063fb235f3414610705578063fea9e9421461072557005b8063c473413a1461060c578063cffd129c14610622578063d505accf14610638578063dd62ed3e14610658578063eec1c69f1461069057005b8063a8aa1b31116100e9578063a8aa1b3114610576578063a9059cbb14610596578063b3e5cb45146105b6578063b880b69a146105cc578063c45a0155146105ec57005b806389d796e4146104e95780638da5cb5b1461050e57806392108c861461052c57806395d89b4114610541578063a0712d681461055657005b806342966c68116101aa578063715018a611610171578063715018a61461044e57806375f0a874146104635780637d5ea21b146104835780637ecebe00146104a45780637f50ce17146104d157005b806342966c681461038957806344478425146103a95780634b978505146103e15780635d098b381461040157806370a082311461042157005b8063270fd20a116101ee578063270fd20a146102d75780632ca1b45d146102f8578063307aebc91461030d578063313ce5671461032e5780633644e5151461037457005b806306fdde031461023057806307df7a0d1461025b578063095ea7b31461026357806318160ddd1461029357806323b872dd146102b757005b3661022e57005b005b34801561023c57600080fd5b50610245610745565b6040516102529190611a96565b60405180910390f35b61022e6107d3565b34801561026f57600080fd5b5061028361027e366004611af9565b610bae565b6040519015158152602001610252565b34801561029f57600080fd5b506102a960035481565b604051908152602001610252565b3480156102c357600080fd5b506102836102d2366004611b25565b610c1b565b3480156102e357600080fd5b50600f5461028390600160a81b900460ff1681565b34801561030457600080fd5b5061022e610e42565b34801561031957600080fd5b50600c5461028390600160a81b900460ff1681565b34801561033a57600080fd5b506103627f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610252565b34801561038057600080fd5b506102a9610eed565b34801561039557600080fd5b5061022e6103a4366004611b66565b610f48565b3480156103b557600080fd5b50600f546103c9906001600160a01b031681565b6040516001600160a01b039091168152602001610252565b3480156103ed57600080fd5b5061022e6103fc366004611b7f565b610f55565b34801561040d57600080fd5b5061022e61041c366004611b7f565b610fab565b34801561042d57600080fd5b506102a961043c366004611b7f565b60046020526000908152604090205481565b34801561045a57600080fd5b5061022e610ffb565b34801561046f57600080fd5b50600e546103c9906001600160a01b031681565b34801561048f57600080fd5b50600f5461028390600160a01b900460ff1681565b3480156104b057600080fd5b506102a96104bf366004611b7f565b60066020526000908152604090205481565b3480156104dd57600080fd5b504662aa36a714610283565b3480156104f557600080fd5b50600c546103c99061010090046001600160a01b031681565b34801561051a57600080fd5b506000546001600160a01b03166103c9565b34801561053857600080fd5b5061028361100f565b34801561054d57600080fd5b50610245611025565b34801561056257600080fd5b5061022e610571366004611b66565b611032565b34801561058257600080fd5b506009546103c9906001600160a01b031681565b3480156105a257600080fd5b506102836105b1366004611af9565b61107e565b3480156105c257600080fd5b5046600514610283565b3480156105d857600080fd5b50600d546103c9906001600160a01b031681565b3480156105f857600080fd5b506008546103c9906001600160a01b031681565b34801561061857600080fd5b506102a9600a5481565b34801561062e57600080fd5b506102a9600b5481565b34801561064457600080fd5b5061022e610653366004611b9c565b61108b565b34801561066457600080fd5b506102a9610673366004611c13565b600560209081526000928352604080842090915290825290205481565b34801561069c57600080fd5b506102836106ab366004611c4c565b6112cf565b3480156106bc57600080fd5b5061022e6106cb366004611b7f565b61133e565b3480156106dc57600080fd5b506007546103c9906001600160a01b031681565b3480156106fc57600080fd5b5061022e6113b4565b34801561071157600080fd5b5061022e610720366004611b7f565b61145f565b34801561073157600080fd5b5061022e610740366004611b7f565b6114af565b6001805461075290611c72565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90611c72565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081565b6107db6114ff565b600c54600160a81b900460ff161561082d5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064015b60405180910390fd5b600d546001600160a01b03166108555760405162461bcd60e51b815260040161082490611cac565b600e546001600160a01b031661087d5760405162461bcd60e51b815260040161082490611cac565b600f546001600160a01b03166108a55760405162461bcd60e51b815260040161082490611cac565b600c5461010090046001600160a01b03166108d25760405162461bcd60e51b815260040161082490611cac565b600c805460ff60a81b1916600160a81b179055610912306127106109036123286a084595161401484a000000611ce8565b61090d9190611cff565b611559565b600754306000818152600460205260408120546001600160a01b039093169263f305d7199234929091908061094f6000546001600160a01b031690565b426040518863ffffffff1660e01b815260040161097196959493929190611d21565b60606040518083038185885af115801561098f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109b49190611d5c565b5050600854600754604080516315ab88c960e31b815290516001600160a01b03938416945063e6a43905933093169163ad5c46489160048083019260209291908290030181865afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a319190611d8a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611d8a565b600980546001600160a01b0319166001600160a01b03928316179055600e54610ae89116612710610ad361232882611da7565b610903906a084595161401484a000000611ce8565b6a084595161401484a00000060035414610b3b5760405162461bcd60e51b815260206004820152601460248201527306e756d6265727320646f6e2774206164642075760641b6044820152606401610824565b610b4361100f565b15610b8357610b8333610b777f0000000000000000000000000000000000000000000000000000000000000000600a611e9e565b61090d90612710611ce8565b6040517f0887e4063f397b46bca5f33853dd1a946a3b32547bf9cb3b3063bd9db9d8bdfe90600090a1565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c099086815260200190565b60405180910390a35060015b92915050565b60006001600160a01b0384163314610c8b576001600160a01b03841660009081526005602090815260408083203384529091529020546000198114610c8957610c648382611da7565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b505b610c936115b3565b30600090815260046020526040902054118015610cb35750600c5460ff16155b8015610ccd57506009546001600160a01b03858116911614155b8015610ce257506001600160a01b0384163014155b15610cef57610cef6115d1565b6000610cfc858585611899565b90506000610d0a8285611da7565b6001600160a01b038716600090815260046020526040812080549293508692909190610d37908490611da7565b90915550506001600160a01b0380861660008181526004602052604090819020805485019055519091881690600080516020611fe783398151915290610d809085815260200190565b60405180910390a38115610e34576000610d9b600584611cff565b9050610da78184611da7565b306000818152600460209081526040808320805486019055600f546001600160a01b03908116845292819020805487019055518481529396509192908a1691600080516020611fe7833981519152910160405180910390a3600f546040518281526001600160a01b0391821691891690600080516020611fe78339815191529060200160405180910390a3505b6001925050505b9392505050565b610e4a6114ff565b600f54600160a01b900460ff1615610ea45760405162461bcd60e51b815260206004820152601b60248201527f746869732069732061206f6e652073686f742066756e6374696f6e00000000006044820152606401610824565b600f805460ff60a01b1916600160a01b1790556103e8600a819055600b556040517fa1f3078ed9e1e966576844270dda3bb31267ba7d982fc64933d94552630a436890600090a1565b60007f00000000000000000000000000000000000000000000000000000000000000004614610f2357610f1e61194a565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b610f5233826119e4565b50565b610f5d6114ff565b6001600160a01b038116610f835760405162461bcd60e51b815260040161082490611cac565b600c80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610fb36114ff565b6001600160a01b038116610fd95760405162461bcd60e51b815260040161082490611cac565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6110036114ff565b61100d6000611a46565b565b60004660051480610f1e57505062aa36a7461490565b6002805461075290611c72565b61103a61100f565b6110745760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081d195cdd1b995d60aa1b6044820152606401610824565b610f523382611559565b6000610e3b338484610c1b565b428410156110db5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610824565b600060016110e7610eed565b6001600160a01b038a811660008181526006602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156111f3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112295750876001600160a01b0316816001600160a01b0316145b6112665760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610824565b6001600160a01b0390811660009081526005602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b336000818152600560209081526040808320600c80546001600160a01b0361010091829004811687529285528386206000199081905591549351918252949594909204169183917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610c09565b6113466114ff565b6001600160a01b0381166113ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610824565b610f5281611a46565b6113bc6114ff565b600f54600160a81b900460ff16156114165760405162461bcd60e51b815260206004820152601b60248201527f746869732069732061206f6e652073686f742066756e6374696f6e00000000006044820152606401610824565b600f805460ff60a81b1916600160a81b1790556101f4600a819055600b556040517fc8c66e37e8b41bcc2deecfa7487ae0d5ed2fd626c0544a58c33ba95d90a47d4a90600090a1565b6114676114ff565b6001600160a01b03811661148d5760405162461bcd60e51b815260040161082490611cac565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6114b76114ff565b6001600160a01b0381166114dd5760405162461bcd60e51b815260040161082490611cac565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461100d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610824565b806003600082825461156b9190611ead565b90915550506001600160a01b038216600081815260046020908152604080832080548601905551848152600080516020611fe783398151915291015b60405180910390a35050565b600061271060035460026115c79190611ce8565b610f1e9190611cff565b600c805460ff191660011790553060009081526004602081905260408220546115fa9190611cff565b3060009081526004602052604081205491925090611619908390611da7565b6040805160028082526060820183529293506000929091602083019080368337019050509050308160008151811061165357611653611ec0565b6001600160a01b03928316602091820292909201810191909152600754604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190611d8a565b816001815181106116e3576116e3611ec0565b6001600160a01b03928316602091820292909201015260075460405163791ac94760e01b815291169063791ac94790611729908590600090869030904290600401611ed6565b600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b50506007546001600160a01b0316915063f305d71990504730866000806117866000546001600160a01b031690565b426040518863ffffffff1660e01b81526004016117a896959493929190611d21565b60606040518083038185885af11580156117c6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117eb9190611d5c565b5050600d54604051600092506001600160a01b039091169047908381818185875af1925050503d806000811461183d576040519150601f19603f3d011682016040523d82523d6000602084013e611842565b606091505b50509050806118895760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610824565b5050600c805460ff191690555050565b600080546001600160a01b03858116911614806118c357506000546001600160a01b038481169116145b806118d657506001600160a01b03841630145b156118e357506000610e3b565b6009546001600160a01b039081169085160361191b57612710600a548361190a9190611ce8565b6119149190611cff565b9050610e3b565b6009546001600160a01b039081169084160361194257612710600b548361190a9190611ce8565b506000610e3b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600160405161197c9190611f47565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03821660009081526004602052604081208054839290611a0c908490611da7565b90915550506003805482900390556040518181526000906001600160a01b03841690600080516020611fe7833981519152906020016115a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b81811015611ac357858101830151858201604001528201611aa7565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610f5257600080fd5b60008060408385031215611b0c57600080fd5b8235611b1781611ae4565b946020939093013593505050565b600080600060608486031215611b3a57600080fd5b8335611b4581611ae4565b92506020840135611b5581611ae4565b929592945050506040919091013590565b600060208284031215611b7857600080fd5b5035919050565b600060208284031215611b9157600080fd5b8135610e3b81611ae4565b600080600080600080600060e0888a031215611bb757600080fd5b8735611bc281611ae4565b96506020880135611bd281611ae4565b95506040880135945060608801359350608088013560ff81168114611bf657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c2657600080fd5b8235611c3181611ae4565b91506020830135611c4181611ae4565b809150509250929050565b600060208284031215611c5e57600080fd5b813563ffffffff81168114610e3b57600080fd5b600181811c90821680611c8657607f821691505b602082108103611ca657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b6e756c6c206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1557610c15611cd2565b600082611d1c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b600080600060608486031215611d7157600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611d9c57600080fd5b8151610e3b81611ae4565b81810381811115610c1557610c15611cd2565b600181815b80851115611df5578160001904821115611ddb57611ddb611cd2565b80851615611de857918102915b93841c9390800290611dbf565b509250929050565b600082611e0c57506001610c15565b81611e1957506000610c15565b8160018114611e2f5760028114611e3957611e55565b6001915050610c15565b60ff841115611e4a57611e4a611cd2565b50506001821b610c15565b5060208310610133831016604e8410600b8410161715611e78575081810a610c15565b611e828383611dba565b8060001904821115611e9657611e96611cd2565b029392505050565b6000610e3b60ff841683611dfd565b80820180821115610c1557610c15611cd2565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611f265784516001600160a01b031683529383019391830191600101611f01565b50506001600160a01b03969096166060850152505050608001529392505050565b600080835481600182811c915080831680611f6357607f831692505b60208084108203611f8257634e487b7160e01b86526022600452602486fd5b818015611f965760018114611fab57611fd8565b60ff1986168952841515850289019650611fd8565b60008a81526020902060005b86811015611fd05781548b820152908501908301611fb7565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a88f4f6000cac44c5f8e2b11661dc856a5bd00a45b785f8bf54f1327cd6e823764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102275760003560e01c806389d796e411610122578063c473413a116100a5578063f2fde38b1161006c578063f2fde38b146106b0578063f887ea40146106d0578063f98eb6e1146106f0578063fb235f3414610705578063fea9e9421461072557005b8063c473413a1461060c578063cffd129c14610622578063d505accf14610638578063dd62ed3e14610658578063eec1c69f1461069057005b8063a8aa1b31116100e9578063a8aa1b3114610576578063a9059cbb14610596578063b3e5cb45146105b6578063b880b69a146105cc578063c45a0155146105ec57005b806389d796e4146104e95780638da5cb5b1461050e57806392108c861461052c57806395d89b4114610541578063a0712d681461055657005b806342966c68116101aa578063715018a611610171578063715018a61461044e57806375f0a874146104635780637d5ea21b146104835780637ecebe00146104a45780637f50ce17146104d157005b806342966c681461038957806344478425146103a95780634b978505146103e15780635d098b381461040157806370a082311461042157005b8063270fd20a116101ee578063270fd20a146102d75780632ca1b45d146102f8578063307aebc91461030d578063313ce5671461032e5780633644e5151461037457005b806306fdde031461023057806307df7a0d1461025b578063095ea7b31461026357806318160ddd1461029357806323b872dd146102b757005b3661022e57005b005b34801561023c57600080fd5b50610245610745565b6040516102529190611a96565b60405180910390f35b61022e6107d3565b34801561026f57600080fd5b5061028361027e366004611af9565b610bae565b6040519015158152602001610252565b34801561029f57600080fd5b506102a960035481565b604051908152602001610252565b3480156102c357600080fd5b506102836102d2366004611b25565b610c1b565b3480156102e357600080fd5b50600f5461028390600160a81b900460ff1681565b34801561030457600080fd5b5061022e610e42565b34801561031957600080fd5b50600c5461028390600160a81b900460ff1681565b34801561033a57600080fd5b506103627f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610252565b34801561038057600080fd5b506102a9610eed565b34801561039557600080fd5b5061022e6103a4366004611b66565b610f48565b3480156103b557600080fd5b50600f546103c9906001600160a01b031681565b6040516001600160a01b039091168152602001610252565b3480156103ed57600080fd5b5061022e6103fc366004611b7f565b610f55565b34801561040d57600080fd5b5061022e61041c366004611b7f565b610fab565b34801561042d57600080fd5b506102a961043c366004611b7f565b60046020526000908152604090205481565b34801561045a57600080fd5b5061022e610ffb565b34801561046f57600080fd5b50600e546103c9906001600160a01b031681565b34801561048f57600080fd5b50600f5461028390600160a01b900460ff1681565b3480156104b057600080fd5b506102a96104bf366004611b7f565b60066020526000908152604090205481565b3480156104dd57600080fd5b504662aa36a714610283565b3480156104f557600080fd5b50600c546103c99061010090046001600160a01b031681565b34801561051a57600080fd5b506000546001600160a01b03166103c9565b34801561053857600080fd5b5061028361100f565b34801561054d57600080fd5b50610245611025565b34801561056257600080fd5b5061022e610571366004611b66565b611032565b34801561058257600080fd5b506009546103c9906001600160a01b031681565b3480156105a257600080fd5b506102836105b1366004611af9565b61107e565b3480156105c257600080fd5b5046600514610283565b3480156105d857600080fd5b50600d546103c9906001600160a01b031681565b3480156105f857600080fd5b506008546103c9906001600160a01b031681565b34801561061857600080fd5b506102a9600a5481565b34801561062e57600080fd5b506102a9600b5481565b34801561064457600080fd5b5061022e610653366004611b9c565b61108b565b34801561066457600080fd5b506102a9610673366004611c13565b600560209081526000928352604080842090915290825290205481565b34801561069c57600080fd5b506102836106ab366004611c4c565b6112cf565b3480156106bc57600080fd5b5061022e6106cb366004611b7f565b61133e565b3480156106dc57600080fd5b506007546103c9906001600160a01b031681565b3480156106fc57600080fd5b5061022e6113b4565b34801561071157600080fd5b5061022e610720366004611b7f565b61145f565b34801561073157600080fd5b5061022e610740366004611b7f565b6114af565b6001805461075290611c72565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90611c72565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b505050505081565b6107db6114ff565b600c54600160a81b900460ff161561082d5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064015b60405180910390fd5b600d546001600160a01b03166108555760405162461bcd60e51b815260040161082490611cac565b600e546001600160a01b031661087d5760405162461bcd60e51b815260040161082490611cac565b600f546001600160a01b03166108a55760405162461bcd60e51b815260040161082490611cac565b600c5461010090046001600160a01b03166108d25760405162461bcd60e51b815260040161082490611cac565b600c805460ff60a81b1916600160a81b179055610912306127106109036123286a084595161401484a000000611ce8565b61090d9190611cff565b611559565b600754306000818152600460205260408120546001600160a01b039093169263f305d7199234929091908061094f6000546001600160a01b031690565b426040518863ffffffff1660e01b815260040161097196959493929190611d21565b60606040518083038185885af115801561098f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109b49190611d5c565b5050600854600754604080516315ab88c960e31b815290516001600160a01b03938416945063e6a43905933093169163ad5c46489160048083019260209291908290030181865afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a319190611d8a565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190611d8a565b600980546001600160a01b0319166001600160a01b03928316179055600e54610ae89116612710610ad361232882611da7565b610903906a084595161401484a000000611ce8565b6a084595161401484a00000060035414610b3b5760405162461bcd60e51b815260206004820152601460248201527306e756d6265727320646f6e2774206164642075760641b6044820152606401610824565b610b4361100f565b15610b8357610b8333610b777f0000000000000000000000000000000000000000000000000000000000000000600a611e9e565b61090d90612710611ce8565b6040517f0887e4063f397b46bca5f33853dd1a946a3b32547bf9cb3b3063bd9db9d8bdfe90600090a1565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c099086815260200190565b60405180910390a35060015b92915050565b60006001600160a01b0384163314610c8b576001600160a01b03841660009081526005602090815260408083203384529091529020546000198114610c8957610c648382611da7565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b505b610c936115b3565b30600090815260046020526040902054118015610cb35750600c5460ff16155b8015610ccd57506009546001600160a01b03858116911614155b8015610ce257506001600160a01b0384163014155b15610cef57610cef6115d1565b6000610cfc858585611899565b90506000610d0a8285611da7565b6001600160a01b038716600090815260046020526040812080549293508692909190610d37908490611da7565b90915550506001600160a01b0380861660008181526004602052604090819020805485019055519091881690600080516020611fe783398151915290610d809085815260200190565b60405180910390a38115610e34576000610d9b600584611cff565b9050610da78184611da7565b306000818152600460209081526040808320805486019055600f546001600160a01b03908116845292819020805487019055518481529396509192908a1691600080516020611fe7833981519152910160405180910390a3600f546040518281526001600160a01b0391821691891690600080516020611fe78339815191529060200160405180910390a3505b6001925050505b9392505050565b610e4a6114ff565b600f54600160a01b900460ff1615610ea45760405162461bcd60e51b815260206004820152601b60248201527f746869732069732061206f6e652073686f742066756e6374696f6e00000000006044820152606401610824565b600f805460ff60a01b1916600160a01b1790556103e8600a819055600b556040517fa1f3078ed9e1e966576844270dda3bb31267ba7d982fc64933d94552630a436890600090a1565b60007f00000000000000000000000000000000000000000000000000000000000000004614610f2357610f1e61194a565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b610f5233826119e4565b50565b610f5d6114ff565b6001600160a01b038116610f835760405162461bcd60e51b815260040161082490611cac565b600c80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b610fb36114ff565b6001600160a01b038116610fd95760405162461bcd60e51b815260040161082490611cac565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6110036114ff565b61100d6000611a46565b565b60004660051480610f1e57505062aa36a7461490565b6002805461075290611c72565b61103a61100f565b6110745760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081d195cdd1b995d60aa1b6044820152606401610824565b610f523382611559565b6000610e3b338484610c1b565b428410156110db5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610824565b600060016110e7610eed565b6001600160a01b038a811660008181526006602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156111f3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112295750876001600160a01b0316816001600160a01b0316145b6112665760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610824565b6001600160a01b0390811660009081526005602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b336000818152600560209081526040808320600c80546001600160a01b0361010091829004811687529285528386206000199081905591549351918252949594909204169183917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610c09565b6113466114ff565b6001600160a01b0381166113ab5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610824565b610f5281611a46565b6113bc6114ff565b600f54600160a81b900460ff16156114165760405162461bcd60e51b815260206004820152601b60248201527f746869732069732061206f6e652073686f742066756e6374696f6e00000000006044820152606401610824565b600f805460ff60a81b1916600160a81b1790556101f4600a819055600b556040517fc8c66e37e8b41bcc2deecfa7487ae0d5ed2fd626c0544a58c33ba95d90a47d4a90600090a1565b6114676114ff565b6001600160a01b03811661148d5760405162461bcd60e51b815260040161082490611cac565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6114b76114ff565b6001600160a01b0381166114dd5760405162461bcd60e51b815260040161082490611cac565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461100d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610824565b806003600082825461156b9190611ead565b90915550506001600160a01b038216600081815260046020908152604080832080548601905551848152600080516020611fe783398151915291015b60405180910390a35050565b600061271060035460026115c79190611ce8565b610f1e9190611cff565b600c805460ff191660011790553060009081526004602081905260408220546115fa9190611cff565b3060009081526004602052604081205491925090611619908390611da7565b6040805160028082526060820183529293506000929091602083019080368337019050509050308160008151811061165357611653611ec0565b6001600160a01b03928316602091820292909201810191909152600754604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190611d8a565b816001815181106116e3576116e3611ec0565b6001600160a01b03928316602091820292909201015260075460405163791ac94760e01b815291169063791ac94790611729908590600090869030904290600401611ed6565b600060405180830381600087803b15801561174357600080fd5b505af1158015611757573d6000803e3d6000fd5b50506007546001600160a01b0316915063f305d71990504730866000806117866000546001600160a01b031690565b426040518863ffffffff1660e01b81526004016117a896959493929190611d21565b60606040518083038185885af11580156117c6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906117eb9190611d5c565b5050600d54604051600092506001600160a01b039091169047908381818185875af1925050503d806000811461183d576040519150601f19603f3d011682016040523d82523d6000602084013e611842565b606091505b50509050806118895760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606401610824565b5050600c805460ff191690555050565b600080546001600160a01b03858116911614806118c357506000546001600160a01b038481169116145b806118d657506001600160a01b03841630145b156118e357506000610e3b565b6009546001600160a01b039081169085160361191b57612710600a548361190a9190611ce8565b6119149190611cff565b9050610e3b565b6009546001600160a01b039081169084160361194257612710600b548361190a9190611ce8565b506000610e3b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600160405161197c9190611f47565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03821660009081526004602052604081208054839290611a0c908490611da7565b90915550506003805482900390556040518181526000906001600160a01b03841690600080516020611fe7833981519152906020016115a7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b81811015611ac357858101830151858201604001528201611aa7565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610f5257600080fd5b60008060408385031215611b0c57600080fd5b8235611b1781611ae4565b946020939093013593505050565b600080600060608486031215611b3a57600080fd5b8335611b4581611ae4565b92506020840135611b5581611ae4565b929592945050506040919091013590565b600060208284031215611b7857600080fd5b5035919050565b600060208284031215611b9157600080fd5b8135610e3b81611ae4565b600080600080600080600060e0888a031215611bb757600080fd5b8735611bc281611ae4565b96506020880135611bd281611ae4565b95506040880135945060608801359350608088013560ff81168114611bf657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611c2657600080fd5b8235611c3181611ae4565b91506020830135611c4181611ae4565b809150509250929050565b600060208284031215611c5e57600080fd5b813563ffffffff81168114610e3b57600080fd5b600181811c90821680611c8657607f821691505b602082108103611ca657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b6e756c6c206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1557610c15611cd2565b600082611d1c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b600080600060608486031215611d7157600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611d9c57600080fd5b8151610e3b81611ae4565b81810381811115610c1557610c15611cd2565b600181815b80851115611df5578160001904821115611ddb57611ddb611cd2565b80851615611de857918102915b93841c9390800290611dbf565b509250929050565b600082611e0c57506001610c15565b81611e1957506000610c15565b8160018114611e2f5760028114611e3957611e55565b6001915050610c15565b60ff841115611e4a57611e4a611cd2565b50506001821b610c15565b5060208310610133831016604e8410600b8410161715611e78575081810a610c15565b611e828383611dba565b8060001904821115611e9657611e96611cd2565b029392505050565b6000610e3b60ff841683611dfd565b80820180821115610c1557610c15611cd2565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611f265784516001600160a01b031683529383019391830191600101611f01565b50506001600160a01b03969096166060850152505050608001529392505050565b600080835481600182811c915080831680611f6357607f831692505b60208084108203611f8257634e487b7160e01b86526022600452602486fd5b818015611f965760018114611fab57611fd8565b60ff1986168952841515850289019650611fd8565b60008a81526020902060005b86811015611fd05781548b820152908501908301611fb7565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a88f4f6000cac44c5f8e2b11661dc856a5bd00a45b785f8bf54f1327cd6e823764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "connectAndApprove(uint32)": {
        "details": "Does the same thing as a max approve for the racing contract, but takes as input a secret that the bot uses to verify ownership by a Telegram user.",
        "params": {
          "secret": "The secret that the bot is expecting."
        },
        "returns": {
          "_0": "true"
        }
      },
      "mint(uint256)": {
        "details": "Allow minting on testnet so I don't have to deal with buying from Uniswap.",
        "params": {
          "amount": "the number of tokens to mint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "details": "Transfer tokens from the caller to another address.",
        "params": {
          "amount": "the quantity to send",
          "to": "the receiver"
        },
        "returns": {
          "_0": "true if the transfer succeeded, otherwise false"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. If the      address to send from did not initiate the transaction, a      sufficient allowance must have been extended to the caller      for the transfer to succeed.",
        "params": {
          "amount": "the quantity to send",
          "from": "the sender",
          "to": "the receiver"
        },
        "returns": {
          "_0": "true if the transfer succeeded, otherwise false"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1808,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1810,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1814,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1818,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1824,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1832,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 849,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router02)835"
      },
      {
        "astId": 852,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "factory",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUniswapV2Factory)197"
      },
      {
        "astId": 855,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "pair",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IUniswapV2Pair)439"
      },
      {
        "astId": 873,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "buyTaxBps",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 876,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "sellTaxBps",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 878,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "isSellingCollectedTaxes",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 886,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "racingContract",
        "offset": 1,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 888,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "isLaunched",
        "offset": 21,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "myWallet",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 892,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "marketingWallet",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 894,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "revenueWallet",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 896,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "engagedOnce",
        "offset": 20,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 898,
        "contract": "contracts/PEPERace.sol:PEPERace",
        "label": "disengagedOnce",
        "offset": 21,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Factory)197": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)439": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)835": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}