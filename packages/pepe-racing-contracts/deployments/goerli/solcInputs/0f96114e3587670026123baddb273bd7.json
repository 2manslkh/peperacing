{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/PEPERace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"solmate/src/tokens/ERC20.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\r\n\r\ncontract PEPERace is Ownable, ERC20 {\r\n    IUniswapV2Router02 public router;\r\n    IUniswapV2Factory public factory;\r\n    IUniswapV2Pair public pair;\r\n\r\n    uint private constant INITIAL_SUPPLY = 10_000_000 * 10 ** 8;\r\n\r\n    // Percent of the initial supply that will go to the LP\r\n    uint constant LP_BPS = 9000;\r\n\r\n    // Percent of the initial supply that will go to marketing\r\n    uint constant MARKETING_BPS = 10_000 - LP_BPS;\r\n\r\n    //\r\n    // The tax to deduct, in basis points\r\n    //\r\n    uint public buyTaxBps = 500;\r\n    uint public sellTaxBps = 500;\r\n    //\r\n    bool isSellingCollectedTaxes;\r\n\r\n    event AntiBotEngaged();\r\n    event AntiBotDisengaged();\r\n    event StealthLaunchEngaged();\r\n\r\n    address public racingContract;\r\n\r\n    bool public isLaunched;\r\n\r\n    address public myWallet;\r\n    address public marketingWallet;\r\n    address public revenueWallet;\r\n\r\n    bool public engagedOnce;\r\n    bool public disengagedOnce;\r\n\r\n    constructor(address _myWallet, address _marketingWallet, address _revenueWallet) ERC20(\"PEPE Racing Token\", \"PEPERACE\", 18) {\r\n        if (isGoerli()) {\r\n            router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (isSepolia()) {\r\n            router = IUniswapV2Router02(0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008);\r\n        } else {\r\n            // require(block.chainid == 1, \"expected mainnet\");\r\n            router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        }\r\n        factory = IUniswapV2Factory(router.factory());\r\n\r\n        // Approve infinite spending by DEX, to sell tokens collected via tax.\r\n        allowance[address(this)][address(router)] = type(uint).max;\r\n        emit Approval(address(this), address(router), type(uint).max);\r\n\r\n        isLaunched = false;\r\n        myWallet = _myWallet;\r\n        marketingWallet = _marketingWallet;\r\n        revenueWallet = _revenueWallet;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        isSellingCollectedTaxes = true;\r\n        _;\r\n        isSellingCollectedTaxes = false;\r\n    }\r\n\r\n    modifier onlyTestnet() {\r\n        require(isTestnet(), \"not testnet\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function burn(uint amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow minting on testnet so I don't have to deal with\r\n     * buying from Uniswap.\r\n     * @param amount the number of tokens to mint\r\n     */\r\n    function mint(uint amount) external onlyTestnet {\r\n        _mint(address(msg.sender), amount);\r\n    }\r\n\r\n    function getMinSwapAmount() internal view returns (uint) {\r\n        return (totalSupply * 2) / 10000; // 0.02%\r\n    }\r\n\r\n    function isGoerli() public view returns (bool) {\r\n        return block.chainid == 5;\r\n    }\r\n\r\n    function isSepolia() public view returns (bool) {\r\n        return block.chainid == 11155111;\r\n    }\r\n\r\n    function isTestnet() public view returns (bool) {\r\n        return isGoerli() || isSepolia();\r\n    }\r\n\r\n    function enableAntiBotMode() public onlyOwner {\r\n        require(!engagedOnce, \"this is a one shot function\");\r\n        engagedOnce = true;\r\n        buyTaxBps = 1000;\r\n        sellTaxBps = 1000;\r\n        emit AntiBotEngaged();\r\n    }\r\n\r\n    function disableAntiBotMode() public onlyOwner {\r\n        require(!disengagedOnce, \"this is a one shot function\");\r\n        disengagedOnce = true;\r\n        buyTaxBps = 500;\r\n        sellTaxBps = 500;\r\n        emit AntiBotDisengaged();\r\n    }\r\n\r\n    /**\r\n     * @dev Does the same thing as a max approve for the racing\r\n     * contract, but takes as input a secret that the bot uses to\r\n     * verify ownership by a Telegram user.\r\n     * @param secret The secret that the bot is expecting.\r\n     * @return true\r\n     */\r\n    function connectAndApprove(uint32 secret) external returns (bool) {\r\n        address pwner = _msgSender();\r\n\r\n        allowance[pwner][racingContract] = type(uint).max;\r\n        emit Approval(pwner, racingContract, type(uint).max);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setRacingContract(address a) public onlyOwner {\r\n        require(a != address(0), \"null address\");\r\n        racingContract = a;\r\n    }\r\n\r\n    function setMyWallet(address wallet) public onlyOwner {\r\n        require(wallet != address(0), \"null address\");\r\n        myWallet = wallet;\r\n    }\r\n\r\n    function setMarketingWallet(address wallet) public onlyOwner {\r\n        require(wallet != address(0), \"null address\");\r\n        marketingWallet = wallet;\r\n    }\r\n\r\n    function setRevenueWallet(address wallet) public onlyOwner {\r\n        require(wallet != address(0), \"null address\");\r\n        revenueWallet = wallet;\r\n    }\r\n\r\n    function stealthLaunch() external payable onlyOwner {\r\n        require(!isLaunched, \"already launched\");\r\n        require(myWallet != address(0), \"null address\");\r\n        require(marketingWallet != address(0), \"null address\");\r\n        require(revenueWallet != address(0), \"null address\");\r\n        require(racingContract != address(0), \"null address\");\r\n        isLaunched = true;\r\n\r\n        _mint(address(this), (INITIAL_SUPPLY * LP_BPS) / 10_000);\r\n\r\n        router.addLiquidityETH{ value: msg.value }(\r\n            address(this),\r\n            balanceOf[address(this)],\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        pair = IUniswapV2Pair(factory.getPair(address(this), router.WETH()));\r\n\r\n        _mint(marketingWallet, (INITIAL_SUPPLY * MARKETING_BPS) / 10_000);\r\n\r\n        require(totalSupply == INITIAL_SUPPLY, \"numbers don't add up\");\r\n\r\n        // So I don't have to deal with Uniswap when testing\r\n        if (isTestnet()) {\r\n            _mint(address(msg.sender), 10_000 * 10 ** decimals);\r\n        }\r\n\r\n        emit StealthLaunchEngaged();\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the amount of tax to apply to a transaction.\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the quantity of tokens being sent\r\n     * @return the amount of tokens to withhold for taxes\r\n     */\r\n    function calcTax(address from, address to, uint amount) internal view returns (uint) {\r\n        if (from == owner() || to == owner() || from == address(this)) {\r\n            // For adding liquidity at the beginning\r\n            //\r\n            // Also for this contract selling the collected tax.\r\n            return 0;\r\n        } else if (from == address(pair)) {\r\n            // Buy from DEX, or adding liquidity.\r\n            return (amount * buyTaxBps) / 10_000;\r\n        } else if (to == address(pair)) {\r\n            // Sell from DEX, or removing liquidity.\r\n            return (amount * sellTaxBps) / 10_000;\r\n        } else {\r\n            // Sending to other wallets (e.g. OTC) is tax-free.\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sell the balance accumulated from taxes.\r\n     */\r\n    function sellCollectedTaxes() internal lockTheSwap {\r\n        // Of the remaining tokens, set aside 1/4 of the tokens to LP,\r\n        // swap the rest for ETH. LP the tokens with all of the ETH\r\n        // (only enough ETH will be used to pair with the original 1/4\r\n        // of tokens). Send the remaining ETH (about half the original\r\n        // balance) to my wallet.\r\n\r\n        uint tokensForLiq = balanceOf[address(this)] / 4;\r\n        uint tokensToSwap = balanceOf[address(this)] - tokensForLiq;\r\n\r\n        // Sell\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokensToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        router.addLiquidityETH{ value: address(this).balance }(\r\n            address(this),\r\n            tokensForLiq,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        (bool success, ) = myWallet.call{ value: address(this).balance }(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from the caller to another address.\r\n     * @param to the receiver\r\n     * @param amount the quantity to send\r\n     * @return true if the transfer succeeded, otherwise false\r\n     */\r\n    function transfer(address to, uint amount) public override returns (bool) {\r\n        return transferFrom(msg.sender, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another. If the\r\n     *      address to send from did not initiate the transaction, a\r\n     *      sufficient allowance must have been extended to the caller\r\n     *      for the transfer to succeed.\r\n     * @param from the sender\r\n     * @param to the receiver\r\n     * @param amount the quantity to send\r\n     * @return true if the transfer succeeded, otherwise false\r\n     */\r\n    function transferFrom(address from, address to, uint amount) public override returns (bool) {\r\n        if (from != msg.sender) {\r\n            // This is a typical transferFrom\r\n\r\n            uint allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n            if (allowed != type(uint).max) allowance[from][msg.sender] = allowed - amount;\r\n        }\r\n\r\n        // Only on sells because DEX has a LOCKED (reentrancy)\r\n        // error if done during buys.\r\n        //\r\n        // isSellingCollectedTaxes prevents an infinite loop.\r\n        if (\r\n            balanceOf[address(this)] > getMinSwapAmount() &&\r\n            !isSellingCollectedTaxes &&\r\n            from != address(pair) &&\r\n            from != address(this)\r\n        ) {\r\n            sellCollectedTaxes();\r\n        }\r\n\r\n        uint tax = calcTax(from, to, amount);\r\n        uint afterTaxAmount = amount - tax;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint value.\r\n        unchecked {\r\n            balanceOf[to] += afterTaxAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, afterTaxAmount);\r\n\r\n        if (tax > 0) {\r\n            // Use 1/5 of tax for revenue\r\n            uint revenue = tax / 5;\r\n            tax -= revenue;\r\n\r\n            unchecked {\r\n                balanceOf[address(this)] += tax;\r\n                balanceOf[revenueWallet] += revenue;\r\n            }\r\n\r\n            // Any transfer to the contract can be viewed as tax\r\n            emit Transfer(from, address(this), tax);\r\n            emit Transfer(from, revenueWallet, revenue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/TelegramPEPERace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function burn(uint256 amount) external;\r\n}\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\ncontract TelegramPEPERace is Ownable {\r\n    \r\n        struct Game {\r\n        uint256 raceLength;\r\n        uint256 minBet;\r\n        // This is a SHA-256 hash of the random number generated by the bot.\r\n        bytes32 hashedSuit;\r\n        address[] players;\r\n        uint256[] bets;\r\n        bool inProgress;\r\n        uint16 loser;\r\n    }\r\n\r\n    address public revenueWallet;\r\n\r\n    IERC20 public immutable bettingToken;\r\n\r\n    uint256 public immutable minimumBet;\r\n\r\n    // The amount to take as revenue, in basis points.\r\n    uint256 public immutable revenueBps;\r\n\r\n    // The amount to burn forever, in basis points.\r\n    uint256 public immutable burnBps;\r\n\r\n    // Minimum race length\r\n    uint256 public minRaceLength;\r\n\r\n    // Max race length\r\n    uint256 public maxRaceLength;\r\n\r\n    // Map Telegram chat IDs to their games.\r\n    mapping(int64 => Game) public games;\r\n\r\n    // The Telegram chat IDs for each active game. Mainly used to\r\n    // abort all active games in the event of a catastrophe.\r\n    int64[] public activeTgGroups;\r\n\r\n    // Stores the amount each player has bet for a game.\r\n    event Bet(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\r\n\r\n    // Stores the amount each player wins for a game.\r\n    event Win(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\r\n\r\n    // Stores the amount the loser lost.\r\n    event Loss(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\r\n\r\n    // Stores the amount collected by the protocol.\r\n    event Revenue(int64 tgChatId, uint256 amount);\r\n\r\n    // Stores the amount burned by the protocol.\r\n    event Burn(int64 tgChatId, uint256 amount);\r\n\r\n    constructor(\r\n        address payable _bettingToken,\r\n        uint256 _minimumBet,\r\n        uint256 _revenueBps,\r\n        uint256 _burnBps,\r\n        address _revenueWallet,\r\n        uint256 _minRaceLength,\r\n        uint256 _maxRaceLength\r\n    ) {\r\n        revenueWallet = _revenueWallet;\r\n        revenueBps = _revenueBps;\r\n        burnBps = _burnBps;\r\n        bettingToken = IERC20(_bettingToken);\r\n        minimumBet = _minimumBet;\r\n        minRaceLength = _minRaceLength;\r\n        maxRaceLength = _maxRaceLength;\r\n    }\r\n    /**\r\n     * @dev Check if there is a game in progress for a Telegram group.\r\n     * @param _tgChatId Telegram group to check\r\n     * @return true if there is a game in progress, otherwise false\r\n     */\r\n    function isGameInProgress(int64 _tgChatId) public view returns (bool) {\r\n        return games[_tgChatId].inProgress;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a Telegram chat ID from the array.\r\n     * @param _tgChatId Telegram chat ID to remove\r\n     */\r\n    function removeTgId(int64 _tgChatId) internal {\r\n        for (uint256 i = 0; i < activeTgGroups.length; i++) {\r\n            if (activeTgGroups[i] == _tgChatId) {\r\n                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];\r\n                activeTgGroups.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new game. Transfer funds into escrow.\r\n     * @param _tgChatId Telegram group of this game\r\n     * @param _raceLength Length of race\r\n     * @param _minBet minimum bet to play\r\n     * @param _hashedSuit The suit drawn by the bot, hashed with keccak256\r\n     * @param _players participating players\r\n     * @param _bets each player's bet\r\n     * @return The updated list of bets.\r\n     */\r\n    function newGame(\r\n        int64 _tgChatId,\r\n        uint256 _raceLength,\r\n        uint256 _minBet,\r\n        bytes32 _hashedSuit,\r\n        address[] memory _players,\r\n        uint256[] memory _bets\r\n    ) public onlyOwner returns (uint256[] memory) {\r\n        require(_raceLength <= maxRaceLength, \"Race too long\");\r\n        require(_raceLength >= minRaceLength, \"Race too short\");\r\n        require(_minBet >= minimumBet, \"Minimum bet too small\");\r\n        require(_players.length == _bets.length, \"Players/bets length mismatch\");\r\n        require(_players.length > 1, \"Not enough players\");\r\n        require(!isGameInProgress(_tgChatId), \"There is already a game in progress\");\r\n\r\n        // The bets will be capped so you can only lose what other\r\n        // players bet. The updated bets will be returned to the\r\n        // caller.\r\n        //\r\n        // O(N) by doing a prepass to sum all the bets in the\r\n        // array. Use the sum to modify one bet at a time. Replace\r\n        // each bet with its updated value.\r\n        uint256 betTotal = 0;\r\n        for (uint16 i = 0; i < _bets.length; i++) {\r\n            require(_bets[i] >= _minBet, \"Bet is smaller than the minimum\");\r\n            betTotal += _bets[i];\r\n        }\r\n        for (uint16 i = 0; i < _bets.length; i++) {\r\n            betTotal -= _bets[i];\r\n            if (_bets[i] > betTotal) {\r\n                _bets[i] = betTotal;\r\n            }\r\n            betTotal += _bets[i];\r\n\r\n            require(bettingToken.allowance(_players[i], address(this)) >= _bets[i], \"Not enough allowance\");\r\n            bool isSent = bettingToken.transferFrom(_players[i], address(this), _bets[i]);\r\n            require(isSent, \"Funds transfer failed\");\r\n\r\n            emit Bet(_tgChatId, _players[i], i, _bets[i]);\r\n        }\r\n\r\n        Game memory g;\r\n        g.raceLength = _raceLength;\r\n        g.minBet = _minBet;\r\n        g.hashedSuit = _hashedSuit;\r\n        g.players = _players;\r\n        g.bets = _bets;\r\n        g.inProgress = true;\r\n\r\n        games[_tgChatId] = g;\r\n        activeTgGroups.push(_tgChatId);\r\n\r\n        return _bets;\r\n    }\r\n\r\n    /**\r\n     * @dev Declare a loser of the game and pay out the winnings.\r\n     * @param _tgChatId Telegram group of this game\r\n     * @param _loser index of the loser\r\n     *\r\n     * There is also a string array that will be passed in by the bot\r\n     * containing labeled strings, for historical/auditing purposes:\r\n     *\r\n     * beta: The randomly generated number in hex.\r\n     *\r\n     * salt: The salt to append to beta for hashing, in hex.\r\n     *\r\n     * publickey: The VRF public key in hex.\r\n     *\r\n     * proof: The generated proof in hex.\r\n     *\r\n     * alpha: The input message to the VRF.\r\n     */\r\n    function endGame(int64 _tgChatId, uint16 _loser, string[] calldata) public onlyOwner {\r\n        require(_loser != type(uint16).max, \"Loser index shouldn't be the sentinel value\");\r\n        require(isGameInProgress(_tgChatId), \"No game in progress for this Telegram chat ID\");\r\n\r\n        Game storage g = games[_tgChatId];\r\n\r\n        require(_loser < g.players.length, \"Loser index out of range\");\r\n        require(g.players.length > 1, \"Not enough players\");\r\n\r\n        g.loser = _loser;\r\n        g.inProgress = false;\r\n        removeTgId(_tgChatId);\r\n\r\n        // Parallel arrays\r\n        address[] memory winners = new address[](g.players.length - 1);\r\n        uint16[] memory winnersPlayerIndex = new uint16[](g.players.length - 1);\r\n\r\n        // The total bets of the winners.\r\n        uint256 winningBetTotal = 0;\r\n\r\n        // Filter out the loser and calc the total winning bets.\r\n        {\r\n            uint16 numWinners = 0;\r\n            for (uint16 i = 0; i < g.players.length; i++) {\r\n                if (i != _loser) {\r\n                    winners[numWinners] = g.players[i];\r\n                    winnersPlayerIndex[numWinners] = i;\r\n                    winningBetTotal += g.bets[i];\r\n                    numWinners++;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 totalPaidWinnings = 0;\r\n        require(burnBps + revenueBps < 10_1000, \"Total fees must be < 100%\");\r\n\r\n        // The share of tokens to burn.\r\n        uint256 burnShare = (g.bets[_loser] * burnBps) / 10_000;\r\n\r\n        // The share left for the contract. This is an approximate\r\n        // value. The real value will be whatever is leftover after\r\n        // each winner is paid their share.\r\n        uint256 approxRevenueShare = (g.bets[_loser] * revenueBps) / 10_000;\r\n\r\n        bool isSent;\r\n        {\r\n            uint256 totalWinnings = g.bets[_loser] - burnShare - approxRevenueShare;\r\n\r\n            for (uint16 i = 0; i < winners.length; i++) {\r\n                uint256 winnings = (totalWinnings * g.bets[winnersPlayerIndex[i]]) / winningBetTotal;\r\n\r\n                isSent = bettingToken.transfer(winners[i], g.bets[winnersPlayerIndex[i]] + winnings);\r\n                require(isSent, \"Funds transfer failed\");\r\n\r\n                emit Win(_tgChatId, winners[i], winnersPlayerIndex[i], winnings);\r\n\r\n                totalPaidWinnings += winnings;\r\n            }\r\n        }\r\n\r\n        bettingToken.burn(burnShare);\r\n        emit Burn(_tgChatId, burnShare);\r\n\r\n        uint256 realRevenueShare = g.bets[_loser] - totalPaidWinnings - burnShare;\r\n        isSent = bettingToken.transfer(revenueWallet, realRevenueShare);\r\n        require(isSent, \"Revenue transfer failed\");\r\n        emit Revenue(_tgChatId, realRevenueShare);\r\n\r\n        require(\r\n            (totalPaidWinnings + burnShare + realRevenueShare) == g.bets[_loser],\r\n            \"Calculated winnings do not add up\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Abort a game and refund the bets. Use in emergencies\r\n     *      e.g. bot crash.\r\n     * @param _tgChatId Telegram group of this game\r\n     */\r\n    function abortGame(int64 _tgChatId) public onlyOwner {\r\n        require(isGameInProgress(_tgChatId), \"No game in progress for this Telegram chat ID\");\r\n        Game storage g = games[_tgChatId];\r\n\r\n        for (uint16 i = 0; i < g.players.length; i++) {\r\n            bool isSent = bettingToken.transfer(g.players[i], g.bets[i]);\r\n            require(isSent, \"Funds transfer failed\");\r\n        }\r\n\r\n        g.inProgress = false;\r\n        removeTgId(_tgChatId);\r\n    }\r\n\r\n    /**\r\n     * @dev Abort all in progress games.\r\n     */\r\n    function abortAllGames() public onlyOwner {\r\n        // abortGame modifies activeTgGroups with each call, so\r\n        // iterate over a copy\r\n        int64[] memory _activeTgGroups = activeTgGroups;\r\n        for (uint256 i = 0; i < _activeTgGroups.length; i++) {\r\n            abortGame(_activeTgGroups[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}