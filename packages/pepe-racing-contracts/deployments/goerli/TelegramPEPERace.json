{
  "address": "0x91Fe258fFad5b58f14D18d25171eE91FAC478731",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_bettingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_revenueBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burnBps",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_revenueWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minRaceLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxRaceLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int64",
          "name": "tgChatId",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "playerIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Bet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int64",
          "name": "tgChatId",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int64",
          "name": "tgChatId",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "playerIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Loss",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int64",
          "name": "tgChatId",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Revenue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int64",
          "name": "tgChatId",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "playerIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Win",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "abortAllGames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "_tgChatId",
          "type": "int64"
        }
      ],
      "name": "abortGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeTgGroups",
      "outputs": [
        {
          "internalType": "int64",
          "name": "",
          "type": "int64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bettingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "_tgChatId",
          "type": "int64"
        },
        {
          "internalType": "uint16",
          "name": "_loser",
          "type": "uint16"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "name": "endGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "",
          "type": "int64"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raceLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hashedSuit",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "inProgress",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "loser",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "_tgChatId",
          "type": "int64"
        }
      ],
      "name": "isGameInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRaceLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRaceLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int64",
          "name": "_tgChatId",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "_raceLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minBet",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hashedSuit",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_players",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_bets",
          "type": "uint256[]"
        }
      ],
      "name": "newGame",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a139e18b795a7593ee3661dd5f60dcb8924c2a76a6d4da3e91762518a017334",
  "receipt": {
    "to": null,
    "from": "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D",
    "contractAddress": "0x91Fe258fFad5b58f14D18d25171eE91FAC478731",
    "transactionIndex": 1,
    "gasUsed": "1896158",
    "logsBloom": "0x
    "blockHash": "0x84c6240b0cfc0bdae8dd0cb9ed55d548e40daebd9abd5879678d607256eb031b",
    "transactionHash": "0x9a139e18b795a7593ee3661dd5f60dcb8924c2a76a6d4da3e91762518a017334",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9515134,
        "transactionHash": "0x9a139e18b795a7593ee3661dd5f60dcb8924c2a76a6d4da3e91762518a017334",
        "address": "0x91Fe258fFad5b58f14D18d25171eE91FAC478731",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d11334b5a96cc48f5c2f58b0a4201a9fa984df0d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x84c6240b0cfc0bdae8dd0cb9ed55d548e40daebd9abd5879678d607256eb031b"
      }
    ],
    "blockNumber": 9515134,
    "cumulativeGasUsed": "2164240",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35AcD978de9cc98437FD310EC71723FD4e9741b6",
    1000,
    900,
    100,
    "0xd11334b5a96Cc48f5C2f58B0a4201a9FA984df0D",
    5,
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "0f96114e3587670026123baddb273bd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bettingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revenueBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minRaceLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRaceLength\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abortAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"abortGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTgGroups\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint16\",\"name\":\"_loser\",\"type\":\"uint16\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raceLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashedSuit\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"loser\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRaceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRaceLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_raceLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hashedSuit\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bets\",\"type\":\"uint256[]\"}],\"name\":\"newGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"abortAllGames()\":{\"details\":\"Abort all in progress games.\"},\"abortGame(int64)\":{\"details\":\"Abort a game and refund the bets. Use in emergencies      e.g. bot crash.\",\"params\":{\"_tgChatId\":\"Telegram group of this game\"}},\"endGame(int64,uint16,string[])\":{\"details\":\"Declare a loser of the game and pay out the winnings.\",\"params\":{\"_loser\":\"index of the loser There is also a string array that will be passed in by the bot containing labeled strings, for historical/auditing purposes: beta: The randomly generated number in hex. salt: The salt to append to beta for hashing, in hex. publickey: The VRF public key in hex. proof: The generated proof in hex. alpha: The input message to the VRF.\",\"_tgChatId\":\"Telegram group of this game\"}},\"isGameInProgress(int64)\":{\"details\":\"Check if there is a game in progress for a Telegram group.\",\"params\":{\"_tgChatId\":\"Telegram group to check\"},\"returns\":{\"_0\":\"true if there is a game in progress, otherwise false\"}},\"newGame(int64,uint256,uint256,bytes32,address[],uint256[])\":{\"details\":\"Create a new game. Transfer funds into escrow.\",\"params\":{\"_bets\":\"each player's bet\",\"_hashedSuit\":\"The suit drawn by the bot, hashed with keccak256\",\"_minBet\":\"minimum bet to play\",\"_players\":\"participating players\",\"_raceLength\":\"Length of race\",\"_tgChatId\":\"Telegram group of this game\"},\"returns\":{\"_0\":\"The updated list of bets.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TelegramPEPERace.sol\":\"TelegramPEPERace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TelegramPEPERace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\ncontract TelegramPEPERace is Ownable {\\r\\n    \\r\\n        struct Game {\\r\\n        uint256 raceLength;\\r\\n        uint256 minBet;\\r\\n        // This is a SHA-256 hash of the random number generated by the bot.\\r\\n        bytes32 hashedSuit;\\r\\n        address[] players;\\r\\n        uint256[] bets;\\r\\n        bool inProgress;\\r\\n        uint16 loser;\\r\\n    }\\r\\n\\r\\n    address public revenueWallet;\\r\\n\\r\\n    IERC20 public immutable bettingToken;\\r\\n\\r\\n    uint256 public immutable minimumBet;\\r\\n\\r\\n    // The amount to take as revenue, in basis points.\\r\\n    uint256 public immutable revenueBps;\\r\\n\\r\\n    // The amount to burn forever, in basis points.\\r\\n    uint256 public immutable burnBps;\\r\\n\\r\\n    // Minimum race length\\r\\n    uint256 public minRaceLength;\\r\\n\\r\\n    // Max race length\\r\\n    uint256 public maxRaceLength;\\r\\n\\r\\n    // Map Telegram chat IDs to their games.\\r\\n    mapping(int64 => Game) public games;\\r\\n\\r\\n    // The Telegram chat IDs for each active game. Mainly used to\\r\\n    // abort all active games in the event of a catastrophe.\\r\\n    int64[] public activeTgGroups;\\r\\n\\r\\n    // Stores the amount each player has bet for a game.\\r\\n    event Bet(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\r\\n\\r\\n    // Stores the amount each player wins for a game.\\r\\n    event Win(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\r\\n\\r\\n    // Stores the amount the loser lost.\\r\\n    event Loss(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\r\\n\\r\\n    // Stores the amount collected by the protocol.\\r\\n    event Revenue(int64 tgChatId, uint256 amount);\\r\\n\\r\\n    // Stores the amount burned by the protocol.\\r\\n    event Burn(int64 tgChatId, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address payable _bettingToken,\\r\\n        uint256 _minimumBet,\\r\\n        uint256 _revenueBps,\\r\\n        uint256 _burnBps,\\r\\n        address _revenueWallet,\\r\\n        uint256 _minRaceLength,\\r\\n        uint256 _maxRaceLength\\r\\n    ) {\\r\\n        revenueWallet = _revenueWallet;\\r\\n        revenueBps = _revenueBps;\\r\\n        burnBps = _burnBps;\\r\\n        bettingToken = IERC20(_bettingToken);\\r\\n        minimumBet = _minimumBet;\\r\\n        minRaceLength = _minRaceLength;\\r\\n        maxRaceLength = _maxRaceLength;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Check if there is a game in progress for a Telegram group.\\r\\n     * @param _tgChatId Telegram group to check\\r\\n     * @return true if there is a game in progress, otherwise false\\r\\n     */\\r\\n    function isGameInProgress(int64 _tgChatId) public view returns (bool) {\\r\\n        return games[_tgChatId].inProgress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a Telegram chat ID from the array.\\r\\n     * @param _tgChatId Telegram chat ID to remove\\r\\n     */\\r\\n    function removeTgId(int64 _tgChatId) internal {\\r\\n        for (uint256 i = 0; i < activeTgGroups.length; i++) {\\r\\n            if (activeTgGroups[i] == _tgChatId) {\\r\\n                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];\\r\\n                activeTgGroups.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new game. Transfer funds into escrow.\\r\\n     * @param _tgChatId Telegram group of this game\\r\\n     * @param _raceLength Length of race\\r\\n     * @param _minBet minimum bet to play\\r\\n     * @param _hashedSuit The suit drawn by the bot, hashed with keccak256\\r\\n     * @param _players participating players\\r\\n     * @param _bets each player's bet\\r\\n     * @return The updated list of bets.\\r\\n     */\\r\\n    function newGame(\\r\\n        int64 _tgChatId,\\r\\n        uint256 _raceLength,\\r\\n        uint256 _minBet,\\r\\n        bytes32 _hashedSuit,\\r\\n        address[] memory _players,\\r\\n        uint256[] memory _bets\\r\\n    ) public onlyOwner returns (uint256[] memory) {\\r\\n        require(_raceLength <= maxRaceLength, \\\"Race too long\\\");\\r\\n        require(_raceLength >= minRaceLength, \\\"Race too short\\\");\\r\\n        require(_minBet >= minimumBet, \\\"Minimum bet too small\\\");\\r\\n        require(_players.length == _bets.length, \\\"Players/bets length mismatch\\\");\\r\\n        require(_players.length > 1, \\\"Not enough players\\\");\\r\\n        require(!isGameInProgress(_tgChatId), \\\"There is already a game in progress\\\");\\r\\n\\r\\n        // The bets will be capped so you can only lose what other\\r\\n        // players bet. The updated bets will be returned to the\\r\\n        // caller.\\r\\n        //\\r\\n        // O(N) by doing a prepass to sum all the bets in the\\r\\n        // array. Use the sum to modify one bet at a time. Replace\\r\\n        // each bet with its updated value.\\r\\n        uint256 betTotal = 0;\\r\\n        for (uint16 i = 0; i < _bets.length; i++) {\\r\\n            require(_bets[i] >= _minBet, \\\"Bet is smaller than the minimum\\\");\\r\\n            betTotal += _bets[i];\\r\\n        }\\r\\n        for (uint16 i = 0; i < _bets.length; i++) {\\r\\n            betTotal -= _bets[i];\\r\\n            if (_bets[i] > betTotal) {\\r\\n                _bets[i] = betTotal;\\r\\n            }\\r\\n            betTotal += _bets[i];\\r\\n\\r\\n            require(bettingToken.allowance(_players[i], address(this)) >= _bets[i], \\\"Not enough allowance\\\");\\r\\n            bool isSent = bettingToken.transferFrom(_players[i], address(this), _bets[i]);\\r\\n            require(isSent, \\\"Funds transfer failed\\\");\\r\\n\\r\\n            emit Bet(_tgChatId, _players[i], i, _bets[i]);\\r\\n        }\\r\\n\\r\\n        Game memory g;\\r\\n        g.raceLength = _raceLength;\\r\\n        g.minBet = _minBet;\\r\\n        g.hashedSuit = _hashedSuit;\\r\\n        g.players = _players;\\r\\n        g.bets = _bets;\\r\\n        g.inProgress = true;\\r\\n\\r\\n        games[_tgChatId] = g;\\r\\n        activeTgGroups.push(_tgChatId);\\r\\n\\r\\n        return _bets;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Declare a loser of the game and pay out the winnings.\\r\\n     * @param _tgChatId Telegram group of this game\\r\\n     * @param _loser index of the loser\\r\\n     *\\r\\n     * There is also a string array that will be passed in by the bot\\r\\n     * containing labeled strings, for historical/auditing purposes:\\r\\n     *\\r\\n     * beta: The randomly generated number in hex.\\r\\n     *\\r\\n     * salt: The salt to append to beta for hashing, in hex.\\r\\n     *\\r\\n     * publickey: The VRF public key in hex.\\r\\n     *\\r\\n     * proof: The generated proof in hex.\\r\\n     *\\r\\n     * alpha: The input message to the VRF.\\r\\n     */\\r\\n    function endGame(int64 _tgChatId, uint16 _loser, string[] calldata) public onlyOwner {\\r\\n        require(_loser != type(uint16).max, \\\"Loser index shouldn't be the sentinel value\\\");\\r\\n        require(isGameInProgress(_tgChatId), \\\"No game in progress for this Telegram chat ID\\\");\\r\\n\\r\\n        Game storage g = games[_tgChatId];\\r\\n\\r\\n        require(_loser < g.players.length, \\\"Loser index out of range\\\");\\r\\n        require(g.players.length > 1, \\\"Not enough players\\\");\\r\\n\\r\\n        g.loser = _loser;\\r\\n        g.inProgress = false;\\r\\n        removeTgId(_tgChatId);\\r\\n\\r\\n        // Parallel arrays\\r\\n        address[] memory winners = new address[](g.players.length - 1);\\r\\n        uint16[] memory winnersPlayerIndex = new uint16[](g.players.length - 1);\\r\\n\\r\\n        // The total bets of the winners.\\r\\n        uint256 winningBetTotal = 0;\\r\\n\\r\\n        // Filter out the loser and calc the total winning bets.\\r\\n        {\\r\\n            uint16 numWinners = 0;\\r\\n            for (uint16 i = 0; i < g.players.length; i++) {\\r\\n                if (i != _loser) {\\r\\n                    winners[numWinners] = g.players[i];\\r\\n                    winnersPlayerIndex[numWinners] = i;\\r\\n                    winningBetTotal += g.bets[i];\\r\\n                    numWinners++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalPaidWinnings = 0;\\r\\n        require(burnBps + revenueBps < 10_1000, \\\"Total fees must be < 100%\\\");\\r\\n\\r\\n        // The share of tokens to burn.\\r\\n        uint256 burnShare = (g.bets[_loser] * burnBps) / 10_000;\\r\\n\\r\\n        // The share left for the contract. This is an approximate\\r\\n        // value. The real value will be whatever is leftover after\\r\\n        // each winner is paid their share.\\r\\n        uint256 approxRevenueShare = (g.bets[_loser] * revenueBps) / 10_000;\\r\\n\\r\\n        bool isSent;\\r\\n        {\\r\\n            uint256 totalWinnings = g.bets[_loser] - burnShare - approxRevenueShare;\\r\\n\\r\\n            for (uint16 i = 0; i < winners.length; i++) {\\r\\n                uint256 winnings = (totalWinnings * g.bets[winnersPlayerIndex[i]]) / winningBetTotal;\\r\\n\\r\\n                isSent = bettingToken.transfer(winners[i], g.bets[winnersPlayerIndex[i]] + winnings);\\r\\n                require(isSent, \\\"Funds transfer failed\\\");\\r\\n\\r\\n                emit Win(_tgChatId, winners[i], winnersPlayerIndex[i], winnings);\\r\\n\\r\\n                totalPaidWinnings += winnings;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bettingToken.burn(burnShare);\\r\\n        emit Burn(_tgChatId, burnShare);\\r\\n\\r\\n        uint256 realRevenueShare = g.bets[_loser] - totalPaidWinnings - burnShare;\\r\\n        isSent = bettingToken.transfer(revenueWallet, realRevenueShare);\\r\\n        require(isSent, \\\"Revenue transfer failed\\\");\\r\\n        emit Revenue(_tgChatId, realRevenueShare);\\r\\n\\r\\n        require(\\r\\n            (totalPaidWinnings + burnShare + realRevenueShare) == g.bets[_loser],\\r\\n            \\\"Calculated winnings do not add up\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Abort a game and refund the bets. Use in emergencies\\r\\n     *      e.g. bot crash.\\r\\n     * @param _tgChatId Telegram group of this game\\r\\n     */\\r\\n    function abortGame(int64 _tgChatId) public onlyOwner {\\r\\n        require(isGameInProgress(_tgChatId), \\\"No game in progress for this Telegram chat ID\\\");\\r\\n        Game storage g = games[_tgChatId];\\r\\n\\r\\n        for (uint16 i = 0; i < g.players.length; i++) {\\r\\n            bool isSent = bettingToken.transfer(g.players[i], g.bets[i]);\\r\\n            require(isSent, \\\"Funds transfer failed\\\");\\r\\n        }\\r\\n\\r\\n        g.inProgress = false;\\r\\n        removeTgId(_tgChatId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Abort all in progress games.\\r\\n     */\\r\\n    function abortAllGames() public onlyOwner {\\r\\n        // abortGame modifies activeTgGroups with each call, so\\r\\n        // iterate over a copy\\r\\n        int64[] memory _activeTgGroups = activeTgGroups;\\r\\n        for (uint256 i = 0; i < _activeTgGroups.length; i++) {\\r\\n            abortGame(_activeTgGroups[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe37fff963676e47df621ed64e050ec5da87aea67a27feb5231c030fa9f4ae152\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002187380380620021878339810160408190526200003591620000ed565b620000403362000084565b600180546001600160a01b0319166001600160a01b0394851617905560c09490945260e0929092529390931660805260a0919091526002919091556003556200015d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000ea57600080fd5b50565b600080600080600080600060e0888a0312156200010957600080fd5b87516200011681620000d4565b8097505060208801519550604088015194506060880151935060808801516200013f81620000d4565b8093505060a0880151915060c0880151905092959891949750929550565b60805160a05160c05160e051611fa3620001e4600039600081816101830152818161079a015261081201526000818161032601528181610779015261087201526000818161022201526110580152600081816101150152818161097701528181610b7301528181610c8601528181610e8c01528181611358015261145d0152611fa36000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806388b7904d116100a2578063ceb7ec0411610071578063ceb7ec0414610257578063d057fc1f14610277578063f2fde38b1461029d578063f3619716146102b0578063ff08aa491461032157600080fd5b806388b7904d146101f95780638da5cb5b1461020c578063c38a8afd1461021d578063cb99e91f1461024457600080fd5b806363c42460116100de57806363c42460146101a557806365816731146101de578063715018a6146101e8578063748e636e146101f057600080fd5b806343425e8814610110578063444784251461015457806351385f361461016757806353deb3d61461017e575b600080fd5b6101377f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610137906001600160a01b031681565b61017060035481565b60405190815260200161014b565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6101b3366004611ac6565b60070b60009081526004602052604090206005015460ff1690565b604051901515815260200161014b565b6101e6610348565b005b6101e661040c565b61017060025481565b6101e6610207366004611ae8565b610420565b6000546001600160a01b0316610137565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101e6610252366004611ac6565b610e20565b61026a610265366004611c6f565b610fc7565b60405161014b9190611d5d565b61028a610285366004611da1565b61176c565b60405160079190910b815260200161014b565b6101e66102ab366004611dba565b6117a3565b6102f36102be366004611ac6565b60046020526000908152604090208054600182015460028301546005909301549192909160ff811690610100900461ffff1685565b604080519586526020860194909452928401919091521515606083015261ffff16608082015260a00161014b565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b61035061181c565b600060058054806020026020016040519081016040528092919081815260200182805480156103c157602002820191906000526020600020906000905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161038d5790505b5050505050905060005b8151811015610408576103f68282815181106103e9576103e9611dd5565b6020026020010151610e20565b8061040081611e01565b9150506103cb565b5050565b61041461181c565b61041e6000611876565b565b61042861181c565b61fffe1961ffff8416016104975760405162461bcd60e51b815260206004820152602b60248201527f4c6f73657220696e6465782073686f756c646e2774206265207468652073656e60448201526a74696e656c2076616c756560a81b60648201526084015b60405180910390fd5b6104b68460070b60009081526004602052604090206005015460ff1690565b6104d25760405162461bcd60e51b815260040161048e90611e1a565b600784900b6000908152600460205260409020600381015461ffff85161061053c5760405162461bcd60e51b815260206004820152601860248201527f4c6f73657220696e646578206f7574206f662072616e67650000000000000000604482015260640161048e565b60038101546001106105855760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820706c617965727360701b604482015260640161048e565b60058101805462ffffff191661010061ffff87160260ff19161790556105aa856118c6565b60038101546000906105be90600190611e67565b67ffffffffffffffff8111156105d6576105d6611b82565b6040519080825280602002602001820160405280156105ff578160200160208202803683370190505b50600383015490915060009061061790600190611e67565b67ffffffffffffffff81111561062f5761062f611b82565b604051908082528060200260200182016040528015610658578160200160208202803683370190505b50905060008060005b600386015461ffff8216101561076b578861ffff168161ffff161461075957856003018161ffff168154811061069957610699611dd5565b9060005260206000200160009054906101000a90046001600160a01b0316858361ffff16815181106106cd576106cd611dd5565b60200260200101906001600160a01b031690816001600160a01b03168152505080848361ffff168151811061070457610704611dd5565b602002602001019061ffff16908161ffff1681525050856004018161ffff168154811061073357610733611dd5565b9060005260206000200154836107499190611e80565b92508161075581611e93565b9250505b8061076381611e93565b915050610661565b506000905062018a886107be7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e80565b1061080b5760405162461bcd60e51b815260206004820152601960248201527f546f74616c2066656573206d757374206265203c203130302500000000000000604482015260640161048e565b60006127107f0000000000000000000000000000000000000000000000000000000000000000876004018b61ffff168154811061084a5761084a611dd5565b906000526020600020015461085f9190611eb4565b6108699190611ecb565b905060006127107f0000000000000000000000000000000000000000000000000000000000000000886004018c61ffff16815481106108aa576108aa611dd5565b90600052602060002001546108bf9190611eb4565b6108c99190611ecb565b905060008082848a6004018e61ffff16815481106108e9576108e9611dd5565b90600052602060002001546108fe9190611e67565b6109089190611e67565b905060005b88518161ffff161015610b5b576000878b6004018a8461ffff168151811061093757610937611dd5565b602002602001015161ffff168154811061095357610953611dd5565b9060005260206000200154846109699190611eb4565b6109739190611ecb565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8b8461ffff16815181106109ba576109ba611dd5565b6020026020010151838e6004018d8761ffff16815181106109dd576109dd611dd5565b602002602001015161ffff16815481106109f9576109f9611dd5565b9060005260206000200154610a0e9190611e80565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190611eed565b935083610a9c5760405162461bcd60e51b815260040161048e90611f0f565b7f6b5ed972057bb3f9c6b7b2ea6350bf7abde0e0c5f8a765c5dde8402bb2b6efd38f8b8461ffff1681518110610ad457610ad4611dd5565b60200260200101518b8561ffff1681518110610af257610af2611dd5565b602002602001015184604051610b33949392919060079490940b84526001600160a01b0392909216602084015261ffff166040830152606082015260800190565b60405180910390a1610b458188611e80565b9650508080610b5390611e93565b91505061090d565b5050604051630852cd8d60e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050507fbc03807cbae975b0551ce6caa7b86a1ff549b347e16440847a8c03140f59c27c8c84604051610c1692919060079290920b8252602082015260400190565b60405180910390a1600083858a6004018e61ffff1681548110610c3b57610c3b611dd5565b9060005260206000200154610c509190611e67565b610c5a9190611e67565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190611eed565b915081610d425760405162461bcd60e51b815260206004820152601760248201527f526576656e7565207472616e73666572206661696c6564000000000000000000604482015260640161048e565b6040805160078f900b8152602081018390527f0f771b5d5a6b02378d0d1a6b6b371ac1e69759fb677e46109ae1bb55167ea7ad910160405180910390a1886004018c61ffff1681548110610d9857610d98611dd5565b9060005260206000200154818587610db09190611e80565b610dba9190611e80565b14610e115760405162461bcd60e51b815260206004820152602160248201527f43616c63756c617465642077696e6e696e677320646f206e6f742061646420756044820152600760fc1b606482015260840161048e565b50505050505050505050505050565b610e2861181c565b610e478160070b60009081526004602052604090206005015460ff1690565b610e635760405162461bcd60e51b815260040161048e90611e1a565b600781900b6000908152600460205260408120905b600382015461ffff82161015610fb15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb846003018461ffff1681548110610ed257610ed2611dd5565b6000918252602090912001546004860180546001600160a01b039092169161ffff8716908110610f0457610f04611dd5565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190611eed565b905080610f9e5760405162461bcd60e51b815260040161048e90611f0f565b5080610fa981611e93565b915050610e78565b5060058101805460ff19169055610408826118c6565b6060610fd161181c565b6003548611156110135760405162461bcd60e51b815260206004820152600d60248201526c5261636520746f6f206c6f6e6760981b604482015260640161048e565b6002548610156110565760405162461bcd60e51b815260206004820152600e60248201526d149858d9481d1bdbc81cda1bdc9d60921b604482015260640161048e565b7f00000000000000000000000000000000000000000000000000000000000000008510156110be5760405162461bcd60e51b8152602060048201526015602482015274135a5b9a5b5d5b4818995d081d1bdbc81cdb585b1b605a1b604482015260640161048e565b815183511461110f5760405162461bcd60e51b815260206004820152601c60248201527f506c61796572732f62657473206c656e677468206d69736d6174636800000000604482015260640161048e565b60018351116111555760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820706c617965727360701b604482015260640161048e565b6111748760070b60009081526004602052604090206005015460ff1690565b156111cd5760405162461bcd60e51b815260206004820152602360248201527f546865726520697320616c726561647920612067616d6520696e2070726f677260448201526265737360e81b606482015260840161048e565b6000805b83518161ffff1610156112885786848261ffff16815181106111f5576111f5611dd5565b6020026020010151101561124b5760405162461bcd60e51b815260206004820152601f60248201527f42657420697320736d616c6c6572207468616e20746865206d696e696d756d00604482015260640161048e565b838161ffff168151811061126157611261611dd5565b6020026020010151826112749190611e80565b91508061128081611e93565b9150506111d1565b5060005b83518161ffff16101561161357838161ffff16815181106112af576112af611dd5565b6020026020010151826112c29190611e67565b915081848261ffff16815181106112db576112db611dd5565b6020026020010151111561130d5781848261ffff168151811061130057611300611dd5565b6020026020010181815250505b838161ffff168151811061132357611323611dd5565b6020026020010151826113369190611e80565b9150838161ffff168151811061134e5761134e611dd5565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd62ed3e878461ffff168151811061139b5761139b611dd5565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190611f3e565b10156114595760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b604482015260640161048e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd878461ffff16815181106114a0576114a0611dd5565b602002602001015130888661ffff16815181106114bf576114bf611dd5565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190611eed565b9050806115615760405162461bcd60e51b815260040161048e90611f0f565b7f4ca2b6f8214bfec8b3a7c06707618645a8e77d171b22a4eba1d8811fdc30bfdb8a878461ffff168151811061159957611599611dd5565b602002602001015184888661ffff16815181106115b8576115b8611dd5565b60200260200101516040516115f8949392919060079490940b84526001600160a01b0392909216602084015261ffff166040830152606082015260800190565b60405180910390a1508061160b81611e93565b91505061128c565b506040805160e0810182526000808252602082018190529181018290526060808201819052608082015260a0810182905260c0810191909152878152602080820188815260408084018981526060850189815260808601899052600160a0870181905260078f900b600090815260048752939093208651815593519284019290925551600283015551805184936116b19260038501929101906119fa565b50608082015180516116cd916004840191602090910190611a5f565b5060a08201516005918201805460c09094015162ffffff1990941691151562ffff0019169190911761010061ffff909416840217905580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db060048204018054600390921660080290920a67ffffffffffffffff818102199092169b909116029990991790985550909695505050505050565b6005818154811061177c57600080fd5b9060005260206000209060049182820401919006600802915054906101000a900460070b81565b6117ab61181c565b6001600160a01b0381166118105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161048e565b61181981611876565b50565b6000546001600160a01b0316331461041e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b600554811015610408578160070b600582815481106118ea576118ea611dd5565b6000918252602090912060048204015460039091166008026101000a900460070b036119e8576005805461192090600190611e67565b8154811061193057611930611dd5565b90600052602060002090600491828204019190066008029054906101000a900460070b6005828154811061196657611966611dd5565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060058054806119b5576119b5611f57565b600082815260209020600460001990920191820401805467ffffffffffffffff600860038516026101000a021916905590555b806119f281611e01565b9150506118c9565b828054828255906000526020600020908101928215611a4f579160200282015b82811115611a4f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a1a565b50611a5b929150611a9a565b5090565b828054828255906000526020600020908101928215611a4f579160200282015b82811115611a4f578251825591602001919060010190611a7f565b5b80821115611a5b5760008155600101611a9b565b8035600781900b8114611ac157600080fd5b919050565b600060208284031215611ad857600080fd5b611ae182611aaf565b9392505050565b60008060008060608587031215611afe57600080fd5b611b0785611aaf565b9350602085013561ffff81168114611b1e57600080fd5b9250604085013567ffffffffffffffff80821115611b3b57600080fd5b818701915087601f830112611b4f57600080fd5b813581811115611b5e57600080fd5b8860208260051b8501011115611b7357600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc157611bc1611b82565b604052919050565b600067ffffffffffffffff821115611be357611be3611b82565b5060051b60200190565b80356001600160a01b0381168114611ac157600080fd5b600082601f830112611c1557600080fd5b81356020611c2a611c2583611bc9565b611b98565b82815260059290921b84018101918181019086841115611c4957600080fd5b8286015b84811015611c645780358352918301918301611c4d565b509695505050505050565b60008060008060008060c08789031215611c8857600080fd5b611c9187611aaf565b955060208088013595506040880135945060608801359350608088013567ffffffffffffffff80821115611cc457600080fd5b818a0191508a601f830112611cd857600080fd5b8135611ce6611c2582611bc9565b81815260059190911b8301840190848101908d831115611d0557600080fd5b938501935b82851015611d2a57611d1b85611bed565b82529385019390850190611d0a565b9650505060a08a0135925080831115611d4257600080fd5b5050611d5089828a01611c04565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015611d9557835183529284019291840191600101611d79565b50909695505050505050565b600060208284031215611db357600080fd5b5035919050565b600060208284031215611dcc57600080fd5b611ae182611bed565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e1357611e13611deb565b5060010190565b6020808252602d908201527f4e6f2067616d6520696e2070726f677265737320666f7220746869732054656c60408201526c1959dc985b4818da185d081251609a1b606082015260800190565b81810381811115611e7a57611e7a611deb565b92915050565b80820180821115611e7a57611e7a611deb565b600061ffff808316818103611eaa57611eaa611deb565b6001019392505050565b8082028115828204841417611e7a57611e7a611deb565b600082611ee857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611eff57600080fd5b81518015158114611ae157600080fd5b602080825260159082015274119d5b991cc81d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b600060208284031215611f5057600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220fe377178c8616fa8a85b9d2322295983b6ab1df9885de8619ecf25b0e6cf99ec64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806388b7904d116100a2578063ceb7ec0411610071578063ceb7ec0414610257578063d057fc1f14610277578063f2fde38b1461029d578063f3619716146102b0578063ff08aa491461032157600080fd5b806388b7904d146101f95780638da5cb5b1461020c578063c38a8afd1461021d578063cb99e91f1461024457600080fd5b806363c42460116100de57806363c42460146101a557806365816731146101de578063715018a6146101e8578063748e636e146101f057600080fd5b806343425e8814610110578063444784251461015457806351385f361461016757806353deb3d61461017e575b600080fd5b6101377f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610137906001600160a01b031681565b61017060035481565b60405190815260200161014b565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6101b3366004611ac6565b60070b60009081526004602052604090206005015460ff1690565b604051901515815260200161014b565b6101e6610348565b005b6101e661040c565b61017060025481565b6101e6610207366004611ae8565b610420565b6000546001600160a01b0316610137565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101e6610252366004611ac6565b610e20565b61026a610265366004611c6f565b610fc7565b60405161014b9190611d5d565b61028a610285366004611da1565b61176c565b60405160079190910b815260200161014b565b6101e66102ab366004611dba565b6117a3565b6102f36102be366004611ac6565b60046020526000908152604090208054600182015460028301546005909301549192909160ff811690610100900461ffff1685565b604080519586526020860194909452928401919091521515606083015261ffff16608082015260a00161014b565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b61035061181c565b600060058054806020026020016040519081016040528092919081815260200182805480156103c157602002820191906000526020600020906000905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161038d5790505b5050505050905060005b8151811015610408576103f68282815181106103e9576103e9611dd5565b6020026020010151610e20565b8061040081611e01565b9150506103cb565b5050565b61041461181c565b61041e6000611876565b565b61042861181c565b61fffe1961ffff8416016104975760405162461bcd60e51b815260206004820152602b60248201527f4c6f73657220696e6465782073686f756c646e2774206265207468652073656e60448201526a74696e656c2076616c756560a81b60648201526084015b60405180910390fd5b6104b68460070b60009081526004602052604090206005015460ff1690565b6104d25760405162461bcd60e51b815260040161048e90611e1a565b600784900b6000908152600460205260409020600381015461ffff85161061053c5760405162461bcd60e51b815260206004820152601860248201527f4c6f73657220696e646578206f7574206f662072616e67650000000000000000604482015260640161048e565b60038101546001106105855760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820706c617965727360701b604482015260640161048e565b60058101805462ffffff191661010061ffff87160260ff19161790556105aa856118c6565b60038101546000906105be90600190611e67565b67ffffffffffffffff8111156105d6576105d6611b82565b6040519080825280602002602001820160405280156105ff578160200160208202803683370190505b50600383015490915060009061061790600190611e67565b67ffffffffffffffff81111561062f5761062f611b82565b604051908082528060200260200182016040528015610658578160200160208202803683370190505b50905060008060005b600386015461ffff8216101561076b578861ffff168161ffff161461075957856003018161ffff168154811061069957610699611dd5565b9060005260206000200160009054906101000a90046001600160a01b0316858361ffff16815181106106cd576106cd611dd5565b60200260200101906001600160a01b031690816001600160a01b03168152505080848361ffff168151811061070457610704611dd5565b602002602001019061ffff16908161ffff1681525050856004018161ffff168154811061073357610733611dd5565b9060005260206000200154836107499190611e80565b92508161075581611e93565b9250505b8061076381611e93565b915050610661565b506000905062018a886107be7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611e80565b1061080b5760405162461bcd60e51b815260206004820152601960248201527f546f74616c2066656573206d757374206265203c203130302500000000000000604482015260640161048e565b60006127107f0000000000000000000000000000000000000000000000000000000000000000876004018b61ffff168154811061084a5761084a611dd5565b906000526020600020015461085f9190611eb4565b6108699190611ecb565b905060006127107f0000000000000000000000000000000000000000000000000000000000000000886004018c61ffff16815481106108aa576108aa611dd5565b90600052602060002001546108bf9190611eb4565b6108c99190611ecb565b905060008082848a6004018e61ffff16815481106108e9576108e9611dd5565b90600052602060002001546108fe9190611e67565b6109089190611e67565b905060005b88518161ffff161015610b5b576000878b6004018a8461ffff168151811061093757610937611dd5565b602002602001015161ffff168154811061095357610953611dd5565b9060005260206000200154846109699190611eb4565b6109739190611ecb565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8b8461ffff16815181106109ba576109ba611dd5565b6020026020010151838e6004018d8761ffff16815181106109dd576109dd611dd5565b602002602001015161ffff16815481106109f9576109f9611dd5565b9060005260206000200154610a0e9190611e80565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190611eed565b935083610a9c5760405162461bcd60e51b815260040161048e90611f0f565b7f6b5ed972057bb3f9c6b7b2ea6350bf7abde0e0c5f8a765c5dde8402bb2b6efd38f8b8461ffff1681518110610ad457610ad4611dd5565b60200260200101518b8561ffff1681518110610af257610af2611dd5565b602002602001015184604051610b33949392919060079490940b84526001600160a01b0392909216602084015261ffff166040830152606082015260800190565b60405180910390a1610b458188611e80565b9650508080610b5390611e93565b91505061090d565b5050604051630852cd8d60e31b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b505050507fbc03807cbae975b0551ce6caa7b86a1ff549b347e16440847a8c03140f59c27c8c84604051610c1692919060079290920b8252602082015260400190565b60405180910390a1600083858a6004018e61ffff1681548110610c3b57610c3b611dd5565b9060005260206000200154610c509190611e67565b610c5a9190611e67565b60015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190611eed565b915081610d425760405162461bcd60e51b815260206004820152601760248201527f526576656e7565207472616e73666572206661696c6564000000000000000000604482015260640161048e565b6040805160078f900b8152602081018390527f0f771b5d5a6b02378d0d1a6b6b371ac1e69759fb677e46109ae1bb55167ea7ad910160405180910390a1886004018c61ffff1681548110610d9857610d98611dd5565b9060005260206000200154818587610db09190611e80565b610dba9190611e80565b14610e115760405162461bcd60e51b815260206004820152602160248201527f43616c63756c617465642077696e6e696e677320646f206e6f742061646420756044820152600760fc1b606482015260840161048e565b50505050505050505050505050565b610e2861181c565b610e478160070b60009081526004602052604090206005015460ff1690565b610e635760405162461bcd60e51b815260040161048e90611e1a565b600781900b6000908152600460205260408120905b600382015461ffff82161015610fb15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb846003018461ffff1681548110610ed257610ed2611dd5565b6000918252602090912001546004860180546001600160a01b039092169161ffff8716908110610f0457610f04611dd5565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190611eed565b905080610f9e5760405162461bcd60e51b815260040161048e90611f0f565b5080610fa981611e93565b915050610e78565b5060058101805460ff19169055610408826118c6565b6060610fd161181c565b6003548611156110135760405162461bcd60e51b815260206004820152600d60248201526c5261636520746f6f206c6f6e6760981b604482015260640161048e565b6002548610156110565760405162461bcd60e51b815260206004820152600e60248201526d149858d9481d1bdbc81cda1bdc9d60921b604482015260640161048e565b7f00000000000000000000000000000000000000000000000000000000000000008510156110be5760405162461bcd60e51b8152602060048201526015602482015274135a5b9a5b5d5b4818995d081d1bdbc81cdb585b1b605a1b604482015260640161048e565b815183511461110f5760405162461bcd60e51b815260206004820152601c60248201527f506c61796572732f62657473206c656e677468206d69736d6174636800000000604482015260640161048e565b60018351116111555760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f75676820706c617965727360701b604482015260640161048e565b6111748760070b60009081526004602052604090206005015460ff1690565b156111cd5760405162461bcd60e51b815260206004820152602360248201527f546865726520697320616c726561647920612067616d6520696e2070726f677260448201526265737360e81b606482015260840161048e565b6000805b83518161ffff1610156112885786848261ffff16815181106111f5576111f5611dd5565b6020026020010151101561124b5760405162461bcd60e51b815260206004820152601f60248201527f42657420697320736d616c6c6572207468616e20746865206d696e696d756d00604482015260640161048e565b838161ffff168151811061126157611261611dd5565b6020026020010151826112749190611e80565b91508061128081611e93565b9150506111d1565b5060005b83518161ffff16101561161357838161ffff16815181106112af576112af611dd5565b6020026020010151826112c29190611e67565b915081848261ffff16815181106112db576112db611dd5565b6020026020010151111561130d5781848261ffff168151811061130057611300611dd5565b6020026020010181815250505b838161ffff168151811061132357611323611dd5565b6020026020010151826113369190611e80565b9150838161ffff168151811061134e5761134e611dd5565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd62ed3e878461ffff168151811061139b5761139b611dd5565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156113f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190611f3e565b10156114595760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b604482015260640161048e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd878461ffff16815181106114a0576114a0611dd5565b602002602001015130888661ffff16815181106114bf576114bf611dd5565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190611eed565b9050806115615760405162461bcd60e51b815260040161048e90611f0f565b7f4ca2b6f8214bfec8b3a7c06707618645a8e77d171b22a4eba1d8811fdc30bfdb8a878461ffff168151811061159957611599611dd5565b602002602001015184888661ffff16815181106115b8576115b8611dd5565b60200260200101516040516115f8949392919060079490940b84526001600160a01b0392909216602084015261ffff166040830152606082015260800190565b60405180910390a1508061160b81611e93565b91505061128c565b506040805160e0810182526000808252602082018190529181018290526060808201819052608082015260a0810182905260c0810191909152878152602080820188815260408084018981526060850189815260808601899052600160a0870181905260078f900b600090815260048752939093208651815593519284019290925551600283015551805184936116b19260038501929101906119fa565b50608082015180516116cd916004840191602090910190611a5f565b5060a08201516005918201805460c09094015162ffffff1990941691151562ffff0019169190911761010061ffff909416840217905580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db060048204018054600390921660080290920a67ffffffffffffffff818102199092169b909116029990991790985550909695505050505050565b6005818154811061177c57600080fd5b9060005260206000209060049182820401919006600802915054906101000a900460070b81565b6117ab61181c565b6001600160a01b0381166118105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161048e565b61181981611876565b50565b6000546001600160a01b0316331461041e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b600554811015610408578160070b600582815481106118ea576118ea611dd5565b6000918252602090912060048204015460039091166008026101000a900460070b036119e8576005805461192090600190611e67565b8154811061193057611930611dd5565b90600052602060002090600491828204019190066008029054906101000a900460070b6005828154811061196657611966611dd5565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060058054806119b5576119b5611f57565b600082815260209020600460001990920191820401805467ffffffffffffffff600860038516026101000a021916905590555b806119f281611e01565b9150506118c9565b828054828255906000526020600020908101928215611a4f579160200282015b82811115611a4f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a1a565b50611a5b929150611a9a565b5090565b828054828255906000526020600020908101928215611a4f579160200282015b82811115611a4f578251825591602001919060010190611a7f565b5b80821115611a5b5760008155600101611a9b565b8035600781900b8114611ac157600080fd5b919050565b600060208284031215611ad857600080fd5b611ae182611aaf565b9392505050565b60008060008060608587031215611afe57600080fd5b611b0785611aaf565b9350602085013561ffff81168114611b1e57600080fd5b9250604085013567ffffffffffffffff80821115611b3b57600080fd5b818701915087601f830112611b4f57600080fd5b813581811115611b5e57600080fd5b8860208260051b8501011115611b7357600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611bc157611bc1611b82565b604052919050565b600067ffffffffffffffff821115611be357611be3611b82565b5060051b60200190565b80356001600160a01b0381168114611ac157600080fd5b600082601f830112611c1557600080fd5b81356020611c2a611c2583611bc9565b611b98565b82815260059290921b84018101918181019086841115611c4957600080fd5b8286015b84811015611c645780358352918301918301611c4d565b509695505050505050565b60008060008060008060c08789031215611c8857600080fd5b611c9187611aaf565b955060208088013595506040880135945060608801359350608088013567ffffffffffffffff80821115611cc457600080fd5b818a0191508a601f830112611cd857600080fd5b8135611ce6611c2582611bc9565b81815260059190911b8301840190848101908d831115611d0557600080fd5b938501935b82851015611d2a57611d1b85611bed565b82529385019390850190611d0a565b9650505060a08a0135925080831115611d4257600080fd5b5050611d5089828a01611c04565b9150509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015611d9557835183529284019291840191600101611d79565b50909695505050505050565b600060208284031215611db357600080fd5b5035919050565b600060208284031215611dcc57600080fd5b611ae182611bed565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611e1357611e13611deb565b5060010190565b6020808252602d908201527f4e6f2067616d6520696e2070726f677265737320666f7220746869732054656c60408201526c1959dc985b4818da185d081251609a1b606082015260800190565b81810381811115611e7a57611e7a611deb565b92915050565b80820180821115611e7a57611e7a611deb565b600061ffff808316818103611eaa57611eaa611deb565b6001019392505050565b8082028115828204841417611e7a57611e7a611deb565b600082611ee857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611eff57600080fd5b81518015158114611ae157600080fd5b602080825260159082015274119d5b991cc81d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b600060208284031215611f5057600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220fe377178c8616fa8a85b9d2322295983b6ab1df9885de8619ecf25b0e6cf99ec64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "abortAllGames()": {
        "details": "Abort all in progress games."
      },
      "abortGame(int64)": {
        "details": "Abort a game and refund the bets. Use in emergencies      e.g. bot crash.",
        "params": {
          "_tgChatId": "Telegram group of this game"
        }
      },
      "endGame(int64,uint16,string[])": {
        "details": "Declare a loser of the game and pay out the winnings.",
        "params": {
          "_loser": "index of the loser There is also a string array that will be passed in by the bot containing labeled strings, for historical/auditing purposes: beta: The randomly generated number in hex. salt: The salt to append to beta for hashing, in hex. publickey: The VRF public key in hex. proof: The generated proof in hex. alpha: The input message to the VRF.",
          "_tgChatId": "Telegram group of this game"
        }
      },
      "isGameInProgress(int64)": {
        "details": "Check if there is a game in progress for a Telegram group.",
        "params": {
          "_tgChatId": "Telegram group to check"
        },
        "returns": {
          "_0": "true if there is a game in progress, otherwise false"
        }
      },
      "newGame(int64,uint256,uint256,bytes32,address[],uint256[])": {
        "details": "Create a new game. Transfer funds into escrow.",
        "params": {
          "_bets": "each player's bet",
          "_hashedSuit": "The suit drawn by the bot, hashed with keccak256",
          "_minBet": "minimum bet to play",
          "_players": "participating players",
          "_raceLength": "Length of race",
          "_tgChatId": "Telegram group of this game"
        },
        "returns": {
          "_0": "The updated list of bets."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1846,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "revenueWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1857,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "minRaceLength",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1859,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "maxRaceLength",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1864,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "games",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_int64,t_struct(Game)1844_storage)"
      },
      {
        "astId": 1867,
        "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
        "label": "activeTgGroups",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_int64)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int64)dyn_storage": {
        "base": "t_int64",
        "encoding": "dynamic_array",
        "label": "int64[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_int64,t_struct(Game)1844_storage)": {
        "encoding": "mapping",
        "key": "t_int64",
        "label": "mapping(int64 => struct TelegramPEPERace.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)1844_storage"
      },
      "t_struct(Game)1844_storage": {
        "encoding": "inplace",
        "label": "struct TelegramPEPERace.Game",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "raceLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1831,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "minBet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1833,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "hashedSuit",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1836,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "players",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1839,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "bets",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1841,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "inProgress",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1843,
            "contract": "contracts/TelegramPEPERace.sol:TelegramPEPERace",
            "label": "loser",
            "offset": 1,
            "slot": "5",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}