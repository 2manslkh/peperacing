{
  "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply_",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistMaxMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_incentiveAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongFrom",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_SIGNER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_revealedURI",
          "type": "string"
        }
      ],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setPublicMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newStage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xd32C596994A07946699cAea4e669C6e284A85958",
    "transactionIndex": 0,
    "gasUsed": "2979406",
    "logsBloom": "0x
    "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1",
    "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9509296,
        "transactionHash": "0x056d12b2b6795b98c0848356086a003353f1d6692eac2b925f41dc94253bad3a",
        "address": "0xd32C596994A07946699cAea4e669C6e284A85958",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x5c609bef405179c434424179eadc0b9139ac717c0d68aa0cf46e11acb9c336d1"
      }
    ],
    "blockNumber": 9509296,
    "cumulativeGasUsed": "2979406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ArgoPetz",
    "ARGOPETZ",
    "ipfs://bafybeiftfn2trjds7ncovc7lieviekqdeb2ddhaevf3a22bgjz26pztvsy/",
    8888,
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "0x6A952f966c5DcC36A094c8AB141f027fb58F864e",
    50,
    "0x31ea6CF75114191C701A4fbf294b69f6f06e0A2b"
  ],
  "numDeployments": 5,
  "solcInputHash": "f68edfeaeb4cd010d9ae01294b18c339",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistMaxMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_incentiveAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongFrom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INCENTIVE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_SIGNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_revealedURI\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newStage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistMintPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableTokenCount()\":{\"details\":\"Check whether tokens are still available\",\"returns\":{\"_0\":\"the available token count\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"tokenCount()\":{\"details\":\"Get the current token count\",\"returns\":{\"_0\":\"the created token count\"}},\"totalMaxSupply()\":{\"details\":\"Get the max Supply\",\"returns\":{\"_0\":\"the maximum token count\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotMinted()\":[{\"notice\":\"----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------\"}]},\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------\"},\"getApproved(uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------\"},\"name()\":{\"notice\":\"----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArgoPetz.sol\":\"ArgoPetz\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ArgoPetz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./common/ERC721.sol\\\";\\r\\nimport \\\"./common/RandomlyAssigned.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nerror InvalidTokenId();\\r\\nerror NoMoreTokenIds();\\r\\nerror WithdrawFailed();\\r\\n\\r\\ncontract ArgoPetz is ERC721, ERC2981, RandomlyAssigned, Ownable {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    uint16 public immutable MAX_SUPPLY;\\r\\n    uint256 public currentSupply;\\r\\n    uint256 public immutable WHITELIST_MAX_MINT;\\r\\n    address public immutable WITHDRAW_ADDRESS;\\r\\n    address public immutable WHITELIST_SIGNER_ADDRESS;\\r\\n    address public immutable INCENTIVE_ADDRESS;\\r\\n    mapping(address => uint256) public whitelistMintCount;\\r\\n    uint256 public whitelistMintPrice = 449 ether;\\r\\n    uint256 public publicMintPrice = 499 ether;\\r\\n    uint8 public stage;\\r\\n    string public baseURI;\\r\\n    bool revealed;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseURI,\\r\\n        uint16 maxSupply_,\\r\\n        address withdrawAddress,\\r\\n        address _whitelistSignerAddress,\\r\\n        uint256 _whitelistMaxMint,\\r\\n        address _incentiveAddress\\r\\n    ) ERC721(_name, _symbol) RandomlyAssigned(maxSupply_, 6) {\\r\\n        MAX_SUPPLY = maxSupply_;\\r\\n        setBaseURI(_baseURI);\\r\\n        WITHDRAW_ADDRESS = withdrawAddress;\\r\\n        WHITELIST_SIGNER_ADDRESS = _whitelistSignerAddress;\\r\\n        WHITELIST_MAX_MINT = _whitelistMaxMint;\\r\\n        INCENTIVE_ADDRESS = _incentiveAddress;\\r\\n        currentSupply+= 5;\\r\\n        // Mint first 5 tokens to contract creator\\r\\n        for (uint256 i = 1; i <= 5; ) {\\r\\n            _mint(msg.sender, i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        revealed = false;\\r\\n    }\\r\\n\\r\\n    function whitelistMint(\\r\\n        uint256 _amount,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature\\r\\n    ) external payable {\\r\\n        // Check if user is whitelisted\\r\\n        require(whitelistSigned(msg.sender, nonce, signature, stage), \\\"ArgoPetz: Invalid Signature!\\\");\\r\\n\\r\\n        // Check if whitelist sale is open\\r\\n        require(stage == 1, \\\"ArgoPetz: Whitelist Mint is not open\\\");\\r\\n\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * whitelistMintPrice, \\\"ArgoPetz: Insufficient CRO!\\\");\\r\\n\\r\\n        // Check if mints does not exceed MAX_SUPPLY\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"ArgoPetz: Exceeded Max Supply for ArgoPetz!\\\");\\r\\n\\r\\n        // Check if mints does not exceed max wallet allowance for public sale\\r\\n        require(\\r\\n            whitelistMintCount[msg.sender] + _amount <= WHITELIST_MAX_MINT,\\r\\n            \\\"ArgoPetz: Wallet has already minted Max Amount for Whitelist Mint!\\\"\\r\\n        );\\r\\n\\r\\n        currentSupply+= _amount;\\r\\n\\r\\n        whitelistMintCount[msg.sender] += _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = nextToken();\\r\\n            _mint(msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function publicMint(uint256 _amount) external payable {\\r\\n        // Check if public sale is open\\r\\n        require(stage == 2, \\\"ArgoPetz: Public Sale Closed!\\\");\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * publicMintPrice, \\\"ArgoPetz: Insufficient CRO!\\\");\\r\\n\\r\\n        // Check if mints does not exceed total max supply\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"ArgoPetz: Max Supply for Public Mint Reached!\\\");\\r\\n        currentSupply+= _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = nextToken();\\r\\n            _mint(msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function devMint(uint256 _amount) external onlyOwner {\\r\\n        // Check if mints does not exceed total max supply\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"ArgoPetz: Max Supply for Public Mint Reached!\\\");\\r\\n        currentSupply+= _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = nextToken();\\r\\n            _mint(INCENTIVE_ADDRESS, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature,\\r\\n        uint8 _stage\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce, _stage));\\r\\n        return WHITELIST_SIGNER_ADDRESS == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{ value: address(this).balance }(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Mint\\r\\n    // ------------\\r\\n\\r\\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\\r\\n        publicMintPrice = _publicMintPrice;\\r\\n    }\\r\\n\\r\\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\\r\\n        whitelistMintPrice = _whitelistMintPrice;\\r\\n    }\\r\\n\\r\\n    function setStage(uint8 _newStage) public onlyOwner {\\r\\n        stage = _newStage;\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Total Supply\\r\\n    // ------------\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return currentSupply;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        if (_ownerOf[tokenId] == address(0)) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n         if (!revealed) {\\r\\n        string memory unrevealedJson = \\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{',\\r\\n                    '\\\"name\\\": \\\"ArgoPetz Lootbox #', tokenId.toString(), '\\\",',\\r\\n                    '\\\"description\\\": \\\"ArgoPetz is a collection of 8,888 unique utility-enabled characters and are partners to the Argonauts collection on the Cronos chain. Each ArgoPetz holder gets access to utility across the entire Argo ecosystem, lucrative rewards, airdrops, and will be a key asset in future Argo developments.\\\",',\\r\\n                    '\\\"image\\\": \\\"ipfs://bafybeigdgghjdunvqpsjqekn55ptm43kh7cjsnzu2hrqd72uwle4tgxuqm/Argo%20Petz.mp4\\\",',\\r\\n                    '\\\"id\\\": ', tokenId.toString(), ',',\\r\\n                    '\\\"attributes\\\": [{',\\r\\n                    '   \\\"trait_type\\\": \\\"Type\\\",',\\r\\n                    '   \\\"value\\\": \\\"Unrevealed\\\"',\\r\\n                    '}]',\\r\\n                    '}'\\r\\n                )\\r\\n            );\\r\\n        return unrevealedJson;\\r\\n    }\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _baseURI_) public onlyOwner {\\r\\n        baseURI = _baseURI_;\\r\\n    }\\r\\n\\r\\n    function reveal(string memory _revealedURI) public onlyOwner {\\r\\n        revealed = true;\\r\\n        setBaseURI(_revealedURI);\\r\\n    }\\r\\n\\r\\n    // ---------------\\r\\n    // Name and symbol\\r\\n    // ---------------\\r\\n    function setNameAndSymbol(string calldata _newName, string calldata _newSymbol) external onlyOwner {\\r\\n        name = _newName;\\r\\n        symbol = _newSymbol;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // -------\\r\\n    // EIP-165\\r\\n    // -------\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC2981) returns (bool) {\\r\\n        return ERC721.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc375e98ffebe21592a866a88dab6d312879fe882d58f808d8e928c27fc615be5\",\"license\":\"MIT\"},\"contracts/common/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721 {\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\r\\n\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Custom Errors\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    error NotMinted();\\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    error Unauthorized();\\r\\n\\r\\n    error WrongFrom();\\r\\n\\r\\n    error InvalidRecipient();\\r\\n\\r\\n    error UnsafeRecipient();\\r\\n\\r\\n    error AlreadyMinted();\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Metadata Storage/Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Balance/Owner Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) revert ZeroAddress();\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Approval Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert Unauthorized();\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        if (from != _ownerOf[id]) revert WrongFrom();\\r\\n\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\\r\\n            revert Unauthorized();\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC165 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Mint/Burn Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (owner == address(0)) revert NotMinted();\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Safe Mint Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7999b2698cc38cee8f1723fd3340fef08a726f4bd6eb82761c06a06ed5478c8a\",\"license\":\"MIT\"},\"contracts/common/RandomlyAssigned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./WithLimitedSupply.sol\\\";\\r\\n\\r\\n/// @author 1001.digital\\r\\n/// @title Randomly assign tokenIDs from a given set of tokens (PSEUDORANDOM).\\r\\nabstract contract RandomlyAssigned is WithLimitedSupply {\\r\\n    // Used for random index assignment\\r\\n    mapping(uint256 => uint256) private tokenMatrix;\\r\\n\\r\\n    // The initial token ID\\r\\n    uint256 private startFrom;\\r\\n\\r\\n    /// Instantiate the contract\\r\\n    /// @param _totalMaxSupply how many tokens this collection should hold\\r\\n    /// @param _startFrom the tokenID with which to start counting\\r\\n    constructor(uint256 _totalMaxSupply, uint256 _startFrom)\\r\\n        WithLimitedSupply(_totalMaxSupply)\\r\\n    {\\r\\n        startFrom = _startFrom;\\r\\n    }\\r\\n\\r\\n    /// Get the next token ID\\r\\n    /// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\\r\\n    /// @return the next token ID\\r\\n    function nextToken()\\r\\n        internal\\r\\n        override\\r\\n        ensureAvailability\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 maxIndex = totalMaxSupply() - tokenCount();\\r\\n        uint256 random = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    msg.sender,\\r\\n                    block.coinbase,\\r\\n                    block.prevrandao,\\r\\n                    block.gaslimit,\\r\\n                    block.timestamp\\r\\n                )\\r\\n            )\\r\\n        ) % maxIndex;\\r\\n\\r\\n        uint256 value = 0;\\r\\n        if (tokenMatrix[random] == 0) {\\r\\n            // If this matrix position is empty, set the value to the generated random number.\\r\\n            value = random;\\r\\n        } else {\\r\\n            // Otherwise, use the previously stored number from the matrix.\\r\\n            value = tokenMatrix[random];\\r\\n        }\\r\\n\\r\\n        // If the last available tokenID is still unused...\\r\\n        if (tokenMatrix[maxIndex - 1] == 0) {\\r\\n            // ...store that ID in the current matrix position.\\r\\n            tokenMatrix[random] = maxIndex - 1;\\r\\n        } else {\\r\\n            // ...otherwise copy over the stored number to the current matrix position.\\r\\n            tokenMatrix[random] = tokenMatrix[maxIndex - 1];\\r\\n        }\\r\\n\\r\\n        // Increment counts\\r\\n        super.nextToken();\\r\\n\\r\\n        return value + startFrom;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3825525c0648aa0de9fb9e87c484a76b5ff1e28d7af2ba39df1967c31a8aa848\",\"license\":\"MIT\"},\"contracts/common/WithLimitedSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\\r\\nabstract contract WithLimitedSupply {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Keeps track of how many we have minted\\r\\n    Counters.Counter private _tokenCount;\\r\\n\\r\\n    /// @dev The maximum count of tokens this token tracker will hold.\\r\\n    uint256 private _totalMaxSupply;\\r\\n\\r\\n    /// Instanciate the contract\\r\\n    /// @param totalMaxSupply_ how many tokens this collection should hold\\r\\n    constructor(uint256 totalMaxSupply_) {\\r\\n        _totalMaxSupply = totalMaxSupply_;\\r\\n    }\\r\\n\\r\\n    /// @dev Get the max Supply\\r\\n    /// @return the maximum token count\\r\\n    function totalMaxSupply() public view virtual returns (uint256) {\\r\\n        return _totalMaxSupply;\\r\\n    }\\r\\n\\r\\n    /// @dev Get the current token count\\r\\n    /// @return the created token count\\r\\n    function tokenCount() public view returns (uint256) {\\r\\n        return _tokenCount.current();\\r\\n    }\\r\\n\\r\\n    /// @dev Check whether tokens are still available\\r\\n    /// @return the available token count\\r\\n    function availableTokenCount() public view returns (uint256) {\\r\\n        return totalMaxSupply() - tokenCount();\\r\\n    }\\r\\n\\r\\n    /// @dev Increment the token count and fetch the latest count\\r\\n    /// @return the next token id\\r\\n    function nextToken() internal virtual returns (uint256) {\\r\\n        uint256 token = _tokenCount.current();\\r\\n\\r\\n        _tokenCount.increment();\\r\\n\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /// @dev Check whether another token is still available\\r\\n    modifier ensureAvailability() {\\r\\n        require(availableTokenCount() > 0, \\\"No more tokens available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param amount Check whether number of tokens are still available\\r\\n    /// @dev Check whether tokens are still available\\r\\n    modifier ensureAvailabilityFor(uint256 amount) {\\r\\n        require(availableTokenCount() >= amount, \\\"Requested number of tokens not available\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x68badc1ed36951958be461d8c5547ae043b399bb91dc5465308fa2d855b8fa69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060405268185720711896640000600f55681b0d04202f47ec00006010553480156200002c57600080fd5b5060405162003372380380620033728339810160408190526200004f91620003a4565b61ffff85166006818a8a600062000067838262000519565b50600162000076828262000519565b505050600955600b55506200008b3362000116565b61ffff85166080526200009e8662000168565b6001600160a01b0380851660c05283811660e05260a0839052811661010052600d805460059190600090620000d5908490620005e5565b90915550600190505b60058111620000fc57620000f3338262000184565b600101620000de565b50506013805460ff19169055506200060d95505050505050565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001726200024e565b601262000180828262000519565b5050565b6001600160a01b038216620001ac57604051634e46966960e11b815260040160405180910390fd5b6000818152600260205260409020546001600160a01b031615620001e357604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600c546001600160a01b03163314620002ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002d757600080fd5b81516001600160401b0380821115620002f457620002f4620002af565b604051601f8301601f19908116603f011681019082821181831017156200031f576200031f620002af565b816040528381526020925086838588010111156200033c57600080fd5b600091505b8382101562000360578582018301518183018401529082019062000341565b600093810190920192909252949350505050565b805161ffff811681146200038757600080fd5b919050565b80516001600160a01b03811681146200038757600080fd5b600080600080600080600080610100898b031215620003c257600080fd5b88516001600160401b0380821115620003da57600080fd5b620003e88c838d01620002c5565b995060208b0151915080821115620003ff57600080fd5b6200040d8c838d01620002c5565b985060408b01519150808211156200042457600080fd5b50620004338b828c01620002c5565b9650506200044460608a0162000374565b94506200045460808a016200038c565b93506200046460a08a016200038c565b925060c089015191506200047b60e08a016200038c565b90509295985092959890939650565b600181811c908216806200049f57607f821691505b602082108103620004c057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200051457600081815260208120601f850160051c81016020861015620004ef5750805b601f850160051c820191505b818110156200051057828155600101620004fb565b5050505b505050565b81516001600160401b03811115620005355762000535620002af565b6200054d816200054684546200048a565b84620004c6565b602080601f8311600181146200058557600084156200056c5750858301515b600019600386901b1c1916600185901b17855562000510565b600085815260208120601f198616915b82811015620005b65788860151825594840194600190910190840162000595565b5085821015620005d55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200060757634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e05161010051612cef620006836000396000818161051c01526110e00152600081816106ed015261185d01526000818161036501526111120152600081816107410152610d3e01526000818161043d01528181610c9301528181610fb601526110570152612cef6000f3fe6080604052600436106102675760003560e01c80635d82cf6e11610144578063a591c4cb116100b6578063c87b56dd1161007a578063c87b56dd146107af578063ce3cd997146107cf578063dc53fd92146107ef578063e14ca35314610805578063e985e9c51461081a578063f2fde38b1461085557600080fd5b8063a591c4cb146106db578063a611708e1461070f578063aeb167681461072f578063b88d4fde14610763578063c040e6b81461078357600080fd5b8063771282f611610108578063771282f6146106485780638da5cb5b1461065e57806395d89b411461067c5780639f181b5e14610691578063a0617ad0146106a6578063a22cb465146106bb57600080fd5b80635d82cf6e146105be5780636352211e146105de5780636c0360eb146105fe57806370a0823114610613578063715018a61461063357600080fd5b806332cb6b0c116101dd57806342842e0e116101a157806342842e0e146104ea578063442238851461050a5780634c2612471461053e57806355f804b31461055e5780635944c7531461057e5780635a4462151461059e57600080fd5b806332cb6b0c1461042b57806335c6aaf814610472578063375a069a146104885780633bdf4ac6146104a85780633ccfd60b146104d557600080fd5b8063122e04a81161022f578063122e04a81461035357806318160ddd1461038757806323b872dd146103a657806324436f77146103c65780632a55205a146103d95780632db115441461041857600080fd5b806301ffc9a71461026c57806304634d8d146102a157806306fdde03146102c3578063081812fc146102e5578063095ea7b314610333575b600080fd5b34801561027857600080fd5b5061028c610287366004612055565b610875565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc3660046120a7565b610895565b005b3480156102cf57600080fd5b506102d86108ab565b60405161029891906120fe565b3480156102f157600080fd5b5061031b610300366004612131565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610298565b34801561033f57600080fd5b506102c161034e36600461214a565b610939565b34801561035f57600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039357600080fd5b50600d545b604051908152602001610298565b3480156103b257600080fd5b506102c16103c1366004612174565b6109fe565b6102c16103d43660046121f2565b610b6b565b3480156103e557600080fd5b506103f96103f436600461226c565b610e56565b604080516001600160a01b039093168352602083019190915201610298565b6102c1610426366004612131565b610f04565b34801561043757600080fd5b5061045f7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610298565b34801561047e57600080fd5b50610398600f5481565b34801561049457600080fd5b506102c16104a3366004612131565b61104d565b3480156104b457600080fd5b506103986104c336600461228e565b600e6020526000908152604090205481565b3480156104e157600080fd5b506102c161110e565b3480156104f657600080fd5b506102c1610505366004612174565b6111a5565b34801561051657600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054a57600080fd5b506102c16105593660046122bf565b611278565b34801561056a57600080fd5b506102c16105793660046122bf565b611292565b34801561058a57600080fd5b506102c1610599366004612370565b6112a6565b3480156105aa57600080fd5b506102c16105b93660046123ac565b6112b9565b3480156105ca57600080fd5b506102c16105d9366004612131565b6112e3565b3480156105ea57600080fd5b5061031b6105f9366004612131565b6112f0565b34801561060a57600080fd5b506102d861132b565b34801561061f57600080fd5b5061039861062e36600461228e565b611338565b34801561063f57600080fd5b506102c161137d565b34801561065457600080fd5b50610398600d5481565b34801561066a57600080fd5b50600c546001600160a01b031661031b565b34801561068857600080fd5b506102d8611391565b34801561069d57600080fd5b5061039861139e565b3480156106b257600080fd5b50600954610398565b3480156106c757600080fd5b506102c16106d6366004612418565b6113ae565b3480156106e757600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561071b57600080fd5b506102c161072a366004612131565b61141a565b34801561073b57600080fd5b506103987f000000000000000000000000000000000000000000000000000000000000000081565b34801561076f57600080fd5b506102c161077e366004612454565b611427565b34801561078f57600080fd5b5060115461079d9060ff1681565b60405160ff9091168152602001610298565b3480156107bb57600080fd5b506102d86107ca366004612131565b6114e3565b3480156107db57600080fd5b506102c16107ea3660046124b2565b611593565b3480156107fb57600080fd5b5061039860105481565b34801561081157600080fd5b506103986115b1565b34801561082657600080fd5b5061028c6108353660046124d5565b600560209081526000928352604080842090915290825290205460ff1681565b34801561086157600080fd5b506102c161087036600461228e565b6115c8565b60006108808261163e565b8061088f575061088f8261168c565b92915050565b61089d6116c1565b6108a7828261171b565b5050565b600080546108b8906124ff565b80601f01602080910402602001604051908101604052809291908181526020018280546108e4906124ff565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b031633811480159061098557506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b156109a2576040516282b42960e81b815260040160405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b03848116911614610a385760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b038216610a5f57604051634e46966960e11b815260040160405180910390fd5b336001600160a01b03841614801590610a9c57506001600160a01b038316600090815260056020908152604080832033845290915290205460ff16155b8015610abf57506000818152600460205260409020546001600160a01b03163314155b15610adc576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b601154610b84903390869086908690869060ff166117d5565b610bd55760405162461bcd60e51b815260206004820152601c60248201527f4172676f5065747a3a20496e76616c6964205369676e6174757265210000000060448201526064015b60405180910390fd5b60115460ff16600114610c365760405162461bcd60e51b8152602060048201526024808201527f4172676f5065747a3a2057686974656c697374204d696e74206973206e6f742060448201526337b832b760e11b6064820152608401610bcc565b600f54610c43908661254f565b3414610c915760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610bcc565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1685610cc0600d5490565b610cca9190612566565b1115610d2c5760405162461bcd60e51b815260206004820152602b60248201527f4172676f5065747a3a204578636565646564204d617820537570706c7920666f60448201526a72204172676f5065747a2160a81b6064820152608401610bcc565b336000908152600e60205260409020547f000000000000000000000000000000000000000000000000000000000000000090610d69908790612566565b1115610de85760405162461bcd60e51b815260206004820152604260248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f722057686974656c697374204d696e606482015261742160f01b608482015260a401610bcc565b84600d6000828254610dfa9190612566565b9091555050336000908152600e602052604081208054879290610e1e908490612566565b90915550600090505b85811015610e4e576000610e39611893565b9050610e453382611a2c565b50600101610e27565b505050505050565b60008281526007602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610ecb5750604080518082019091526006546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610eea906001600160601b03168761254f565b610ef4919061258f565b91519350909150505b9250929050565b60115460ff16600214610f595760405162461bcd60e51b815260206004820152601d60248201527f4172676f5065747a3a205075626c69632053616c6520436c6f736564210000006044820152606401610bcc565b601054610f66908261254f565b3414610fb45760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610bcc565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681610fe3600d5490565b610fed9190612566565b111561100b5760405162461bcd60e51b8152600401610bcc906125a3565b80600d600082825461101d9190612566565b90915550600090505b818110156108a7576000611038611893565b90506110443382611a2c565b50600101611026565b6110556116c1565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681611084600d5490565b61108e9190612566565b11156110ac5760405162461bcd60e51b8152600401610bcc906125a3565b80600d60008282546110be9190612566565b90915550600090505b818110156108a75760006110d9611893565b90506111057f000000000000000000000000000000000000000000000000000000000000000082611a2c565b506001016110c7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461117b576040519150601f19603f3d011682016040523d82523d6000602084013e611180565b606091505b50509050806111a257604051631d42c86760e21b815260040160405180910390fd5b50565b6111b08383836109fe565b6001600160a01b0382163b1561127357604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b91906125f0565b6001600160e01b0319161461127357604051633da6393160e01b815260040160405180910390fd5b505050565b6112806116c1565b6013805460ff191660011790556111a2815b61129a6116c1565b60126108a78282612653565b6112ae6116c1565b611273838383611af4565b6112c16116c1565b60006112ce848683612713565b5060016112dc828483612713565b5050505050565b6112eb6116c1565b601055565b6000818152600260205260409020546001600160a01b03168061132657604051634d5e5fb360e01b815260040160405180910390fd5b919050565b601280546108b8906124ff565b60006001600160a01b0382166113615760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526003602052604090205490565b6113856116c1565b61138f6000611bbf565b565b600180546108b8906124ff565b60006113a960085490565b905090565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6114226116c1565b600f55565b6114328585856109fe565b6001600160a01b0384163b156112dc57604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906114789033908a908990899089906004016127d3565b6020604051808303816000875af1158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb91906125f0565b6001600160e01b031916146112dc57604051633da6393160e01b815260040160405180910390fd5b6000818152600260205260409020546060906001600160a01b031661151b576040516307ed98ed60e31b815260040160405180910390fd5b60135460ff1661156157600061153083611c11565b61153984611c11565b60405160200161154a929190612843565b60408051601f198184030181529190529392505050565b601261156c83611c11565b60405160200161157d929190612b5e565b6040516020818303038152906040529050919050565b61159b6116c1565b6011805460ff191660ff92909216919091179055565b60006115bb61139e565b6009546113a99190612bf5565b6115d06116c1565b6001600160a01b0381166116355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bcc565b6111a281611bbf565b60006301ffc9a760e01b6001600160e01b03198316148061166f57506380ac58cd60e01b6001600160e01b03198316145b8061088f5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b148061088f57506301ffc9a760e01b6001600160e01b031983161461088f565b600c546001600160a01b0316331461138f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bcc565b6127106001600160601b03821611156117465760405162461bcd60e51b8152600401610bcc90612c08565b6001600160a01b03821661179c5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610bcc565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600655565b600080878787856040516020016117ef9493929190612c52565b60405160208183030381529060405280519060200120905061185285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061184c9250859150611ca49050565b90611cd7565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b60008061189e6115b1565b116118eb5760405162461bcd60e51b815260206004820152601860248201527f4e6f206d6f726520746f6b656e7320617661696c61626c6500000000000000006044820152606401610bcc565b60006118f561139e565b6009546119029190612bf5565b6040516bffffffffffffffffffffffff1933606090811b8216602084015241901b166034820152446048820152456068820152426088820152909150600090829060a8016040516020818303038152906040528051906020012060001c6119699190612c8f565b6000818152600a602052604081205491925090810361198957508061199a565b506000818152600a60205260409020545b600a60006119a9600186612bf5565b8152602001908152602001600020546000036119de576119ca600184612bf5565b6000838152600a6020526040902055611a0e565b600a60006119ed600186612bf5565b81526020808201929092526040908101600090812054858252600a90935220555b611a16611cfb565b50600b54611a249082612566565b935050505090565b6001600160a01b038216611a5357604051634e46966960e11b815260040160405180910390fd5b6000818152600260205260409020546001600160a01b031615611a8957604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6127106001600160601b0382161115611b1f5760405162461bcd60e51b8152600401610bcc90612c08565b6001600160a01b038216611b755760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610bcc565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600790529190942093519051909116600160a01b029116179055565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611c1e83611d17565b600101905060008167ffffffffffffffff811115611c3e57611c3e6122a9565b6040519080825280601f01601f191660200182016040528015611c68576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c7257509392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000611ce68585611def565b91509150611cf381611e31565b509392505050565b600080611d0760085490565b9050611326600880546001019055565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d565772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611d82576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611da057662386f26fc10000830492506010015b6305f5e1008310611db8576305f5e100830492506008015b6127108310611dcc57612710830492506004015b60648310611dde576064830492506002015b600a831061088f5760010192915050565b6000808251604103611e255760208301516040840151606085015160001a611e1987828585611f7b565b94509450505050610efd565b50600090506002610efd565b6000816004811115611e4557611e45612ca3565b03611e4d5750565b6001816004811115611e6157611e61612ca3565b03611eae5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610bcc565b6002816004811115611ec257611ec2612ca3565b03611f0f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610bcc565b6003816004811115611f2357611f23612ca3565b036111a25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bcc565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fb25750600090506003612036565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612006573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661202f57600060019250925050612036565b9150600090505b94509492505050565b6001600160e01b0319811681146111a257600080fd5b60006020828403121561206757600080fd5b81356120728161203f565b9392505050565b80356001600160a01b038116811461132657600080fd5b80356001600160601b038116811461132657600080fd5b600080604083850312156120ba57600080fd5b6120c383612079565b91506120d160208401612090565b90509250929050565b60005b838110156120f55781810151838201526020016120dd565b50506000910152565b602081526000825180602084015261211d8160408501602087016120da565b601f01601f19169190910160400192915050565b60006020828403121561214357600080fd5b5035919050565b6000806040838503121561215d57600080fd5b61216683612079565b946020939093013593505050565b60008060006060848603121561218957600080fd5b61219284612079565b92506121a060208501612079565b9150604084013590509250925092565b60008083601f8401126121c257600080fd5b50813567ffffffffffffffff8111156121da57600080fd5b602083019150836020828501011115610efd57600080fd5b60008060008060006060868803121561220a57600080fd5b85359450602086013567ffffffffffffffff8082111561222957600080fd5b61223589838a016121b0565b9096509450604088013591508082111561224e57600080fd5b5061225b888289016121b0565b969995985093965092949392505050565b6000806040838503121561227f57600080fd5b50508035926020909101359150565b6000602082840312156122a057600080fd5b61207282612079565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d157600080fd5b813567ffffffffffffffff808211156122e957600080fd5b818401915084601f8301126122fd57600080fd5b81358181111561230f5761230f6122a9565b604051601f8201601f19908116603f01168101908382118183101715612337576123376122a9565b8160405282815287602084870101111561235057600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060006060848603121561238557600080fd5b8335925061239560208501612079565b91506123a360408501612090565b90509250925092565b600080600080604085870312156123c257600080fd5b843567ffffffffffffffff808211156123da57600080fd5b6123e6888389016121b0565b909650945060208701359150808211156123ff57600080fd5b5061240c878288016121b0565b95989497509550505050565b6000806040838503121561242b57600080fd5b61243483612079565b91506020830135801515811461244957600080fd5b809150509250929050565b60008060008060006080868803121561246c57600080fd5b61247586612079565b945061248360208701612079565b935060408601359250606086013567ffffffffffffffff8111156124a657600080fd5b61225b888289016121b0565b6000602082840312156124c457600080fd5b813560ff8116811461207257600080fd5b600080604083850312156124e857600080fd5b6124f183612079565b91506120d160208401612079565b600181811c9082168061251357607f821691505b60208210810361253357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761088f5761088f612539565b8082018082111561088f5761088f612539565b634e487b7160e01b600052601260045260246000fd5b60008261259e5761259e612579565b500490565b6020808252602d908201527f4172676f5065747a3a204d617820537570706c7920666f72205075626c69632060408201526c4d696e7420526561636865642160981b606082015260800190565b60006020828403121561260257600080fd5b81516120728161203f565b601f82111561127357600081815260208120601f850160051c810160208610156126345750805b601f850160051c820191505b81811015610e4e57828155600101612640565b815167ffffffffffffffff81111561266d5761266d6122a9565b6126818161267b84546124ff565b8461260d565b602080601f8311600181146126b6576000841561269e5750858301515b600019600386901b1c1916600185901b178555610e4e565b600085815260208120601f198616915b828110156126e5578886015182559484019460019091019084016126c6565b50858210156127035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83111561272b5761272b6122a9565b61273f8361273983546124ff565b8361260d565b6000601f841160018114612773576000851561275b5750838201355b600019600387901b1c1916600186901b1783556112dc565b600083815260209020601f19861690835b828110156127a45786850135825560209485019460019092019101612784565b50868210156127c15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600081516128398185602086016120da565b9290920192915050565b607b60f81b81527f226e616d65223a20224172676f5065747a204c6f6f74626f782023000000000060018201526000835161288581601c8501602088016120da565b61088b60f21b601c918401918201527f226465736372697074696f6e223a20224172676f5065747a206973206120636f601e8201527f6c6c656374696f6e206f6620382c38383820756e69717565207574696c697479603e8201527f2d656e61626c6564206368617261637465727320616e64206172652070617274605e8201527f6e65727320746f20746865204172676f6e6175747320636f6c6c656374696f6e607e8201527f206f6e207468652043726f6e6f7320636861696e2e2045616368204172676f50609e8201527f65747a20686f6c64657220676574732061636365737320746f207574696c697460be8201527f79206163726f73732074686520656e74697265204172676f2065636f7379737460de8201527f656d2c206c756372617469766520726577617264732c2061697264726f70732c60fe8201527f20616e642077696c6c2062652061206b657920617373657420696e206675747561011e8201527f7265204172676f20646576656c6f706d656e74732e222c00000000000000000061013e820152612b55612b48612b3a612b11612ae8612acc612abf612ab9612aa76101558a017f22696d616765223a2022697066733a2f2f6261667962656967646767686a647581527f6e767170736a71656b6e353570746d34336b6837636a736e7a7532687271643760208201527f3275776c653474677875716d2f4172676f2532305065747a2e6d7034222c00006040820152605e0190565b6501134b2111d160d51b815260060190565b8b612827565b600b60fa1b815260010190565b6f2261747472696275746573223a205b7b60801b815260100190565b7f2020202274726169745f74797065223a202254797065222c0000000000000000815260180190565b7f2020202276616c7565223a2022556e72657665616c6564220000000000000000815260180190565b617d5d60f01b815260020190565b607d60f81b815260010190565b95945050505050565b6000808454612b6c816124ff565b60018281168015612b845760018114612b9957612bc8565b60ff1984168752821515830287019450612bc8565b8860005260208060002060005b85811015612bbf5781548a820152908401908201612ba6565b50505082870194505b505050508351612bdc8183602088016120da565b64173539b7b760d91b9101908152600501949350505050565b8181038181111561088f5761088f612539565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b600082612c9e57612c9e612579565b500690565b634e487b7160e01b600052602160045260246000fdfea264697066735822122028ca7a95fd0765e88d54c11a7444ca98b9459bf33b70383a3d441b272e2cb00064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c80635d82cf6e11610144578063a591c4cb116100b6578063c87b56dd1161007a578063c87b56dd146107af578063ce3cd997146107cf578063dc53fd92146107ef578063e14ca35314610805578063e985e9c51461081a578063f2fde38b1461085557600080fd5b8063a591c4cb146106db578063a611708e1461070f578063aeb167681461072f578063b88d4fde14610763578063c040e6b81461078357600080fd5b8063771282f611610108578063771282f6146106485780638da5cb5b1461065e57806395d89b411461067c5780639f181b5e14610691578063a0617ad0146106a6578063a22cb465146106bb57600080fd5b80635d82cf6e146105be5780636352211e146105de5780636c0360eb146105fe57806370a0823114610613578063715018a61461063357600080fd5b806332cb6b0c116101dd57806342842e0e116101a157806342842e0e146104ea578063442238851461050a5780634c2612471461053e57806355f804b31461055e5780635944c7531461057e5780635a4462151461059e57600080fd5b806332cb6b0c1461042b57806335c6aaf814610472578063375a069a146104885780633bdf4ac6146104a85780633ccfd60b146104d557600080fd5b8063122e04a81161022f578063122e04a81461035357806318160ddd1461038757806323b872dd146103a657806324436f77146103c65780632a55205a146103d95780632db115441461041857600080fd5b806301ffc9a71461026c57806304634d8d146102a157806306fdde03146102c3578063081812fc146102e5578063095ea7b314610333575b600080fd5b34801561027857600080fd5b5061028c610287366004612055565b610875565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc3660046120a7565b610895565b005b3480156102cf57600080fd5b506102d86108ab565b60405161029891906120fe565b3480156102f157600080fd5b5061031b610300366004612131565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610298565b34801561033f57600080fd5b506102c161034e36600461214a565b610939565b34801561035f57600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039357600080fd5b50600d545b604051908152602001610298565b3480156103b257600080fd5b506102c16103c1366004612174565b6109fe565b6102c16103d43660046121f2565b610b6b565b3480156103e557600080fd5b506103f96103f436600461226c565b610e56565b604080516001600160a01b039093168352602083019190915201610298565b6102c1610426366004612131565b610f04565b34801561043757600080fd5b5061045f7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610298565b34801561047e57600080fd5b50610398600f5481565b34801561049457600080fd5b506102c16104a3366004612131565b61104d565b3480156104b457600080fd5b506103986104c336600461228e565b600e6020526000908152604090205481565b3480156104e157600080fd5b506102c161110e565b3480156104f657600080fd5b506102c1610505366004612174565b6111a5565b34801561051657600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054a57600080fd5b506102c16105593660046122bf565b611278565b34801561056a57600080fd5b506102c16105793660046122bf565b611292565b34801561058a57600080fd5b506102c1610599366004612370565b6112a6565b3480156105aa57600080fd5b506102c16105b93660046123ac565b6112b9565b3480156105ca57600080fd5b506102c16105d9366004612131565b6112e3565b3480156105ea57600080fd5b5061031b6105f9366004612131565b6112f0565b34801561060a57600080fd5b506102d861132b565b34801561061f57600080fd5b5061039861062e36600461228e565b611338565b34801561063f57600080fd5b506102c161137d565b34801561065457600080fd5b50610398600d5481565b34801561066a57600080fd5b50600c546001600160a01b031661031b565b34801561068857600080fd5b506102d8611391565b34801561069d57600080fd5b5061039861139e565b3480156106b257600080fd5b50600954610398565b3480156106c757600080fd5b506102c16106d6366004612418565b6113ae565b3480156106e757600080fd5b5061031b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561071b57600080fd5b506102c161072a366004612131565b61141a565b34801561073b57600080fd5b506103987f000000000000000000000000000000000000000000000000000000000000000081565b34801561076f57600080fd5b506102c161077e366004612454565b611427565b34801561078f57600080fd5b5060115461079d9060ff1681565b60405160ff9091168152602001610298565b3480156107bb57600080fd5b506102d86107ca366004612131565b6114e3565b3480156107db57600080fd5b506102c16107ea3660046124b2565b611593565b3480156107fb57600080fd5b5061039860105481565b34801561081157600080fd5b506103986115b1565b34801561082657600080fd5b5061028c6108353660046124d5565b600560209081526000928352604080842090915290825290205460ff1681565b34801561086157600080fd5b506102c161087036600461228e565b6115c8565b60006108808261163e565b8061088f575061088f8261168c565b92915050565b61089d6116c1565b6108a7828261171b565b5050565b600080546108b8906124ff565b80601f01602080910402602001604051908101604052809291908181526020018280546108e4906124ff565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b031633811480159061098557506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b156109a2576040516282b42960e81b815260040160405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b03848116911614610a385760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b038216610a5f57604051634e46966960e11b815260040160405180910390fd5b336001600160a01b03841614801590610a9c57506001600160a01b038316600090815260056020908152604080832033845290915290205460ff16155b8015610abf57506000818152600460205260409020546001600160a01b03163314155b15610adc576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b601154610b84903390869086908690869060ff166117d5565b610bd55760405162461bcd60e51b815260206004820152601c60248201527f4172676f5065747a3a20496e76616c6964205369676e6174757265210000000060448201526064015b60405180910390fd5b60115460ff16600114610c365760405162461bcd60e51b8152602060048201526024808201527f4172676f5065747a3a2057686974656c697374204d696e74206973206e6f742060448201526337b832b760e11b6064820152608401610bcc565b600f54610c43908661254f565b3414610c915760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610bcc565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1685610cc0600d5490565b610cca9190612566565b1115610d2c5760405162461bcd60e51b815260206004820152602b60248201527f4172676f5065747a3a204578636565646564204d617820537570706c7920666f60448201526a72204172676f5065747a2160a81b6064820152608401610bcc565b336000908152600e60205260409020547f000000000000000000000000000000000000000000000000000000000000000090610d69908790612566565b1115610de85760405162461bcd60e51b815260206004820152604260248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f722057686974656c697374204d696e606482015261742160f01b608482015260a401610bcc565b84600d6000828254610dfa9190612566565b9091555050336000908152600e602052604081208054879290610e1e908490612566565b90915550600090505b85811015610e4e576000610e39611893565b9050610e453382611a2c565b50600101610e27565b505050505050565b60008281526007602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610ecb5750604080518082019091526006546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610eea906001600160601b03168761254f565b610ef4919061258f565b91519350909150505b9250929050565b60115460ff16600214610f595760405162461bcd60e51b815260206004820152601d60248201527f4172676f5065747a3a205075626c69632053616c6520436c6f736564210000006044820152606401610bcc565b601054610f66908261254f565b3414610fb45760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610bcc565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681610fe3600d5490565b610fed9190612566565b111561100b5760405162461bcd60e51b8152600401610bcc906125a3565b80600d600082825461101d9190612566565b90915550600090505b818110156108a7576000611038611893565b90506110443382611a2c565b50600101611026565b6110556116c1565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1681611084600d5490565b61108e9190612566565b11156110ac5760405162461bcd60e51b8152600401610bcc906125a3565b80600d60008282546110be9190612566565b90915550600090505b818110156108a75760006110d9611893565b90506111057f000000000000000000000000000000000000000000000000000000000000000082611a2c565b506001016110c7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461117b576040519150601f19603f3d011682016040523d82523d6000602084013e611180565b606091505b50509050806111a257604051631d42c86760e21b815260040160405180910390fd5b50565b6111b08383836109fe565b6001600160a01b0382163b1561127357604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b91906125f0565b6001600160e01b0319161461127357604051633da6393160e01b815260040160405180910390fd5b505050565b6112806116c1565b6013805460ff191660011790556111a2815b61129a6116c1565b60126108a78282612653565b6112ae6116c1565b611273838383611af4565b6112c16116c1565b60006112ce848683612713565b5060016112dc828483612713565b5050505050565b6112eb6116c1565b601055565b6000818152600260205260409020546001600160a01b03168061132657604051634d5e5fb360e01b815260040160405180910390fd5b919050565b601280546108b8906124ff565b60006001600160a01b0382166113615760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526003602052604090205490565b6113856116c1565b61138f6000611bbf565b565b600180546108b8906124ff565b60006113a960085490565b905090565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6114226116c1565b600f55565b6114328585856109fe565b6001600160a01b0384163b156112dc57604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906114789033908a908990899089906004016127d3565b6020604051808303816000875af1158015611497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bb91906125f0565b6001600160e01b031916146112dc57604051633da6393160e01b815260040160405180910390fd5b6000818152600260205260409020546060906001600160a01b031661151b576040516307ed98ed60e31b815260040160405180910390fd5b60135460ff1661156157600061153083611c11565b61153984611c11565b60405160200161154a929190612843565b60408051601f198184030181529190529392505050565b601261156c83611c11565b60405160200161157d929190612b5e565b6040516020818303038152906040529050919050565b61159b6116c1565b6011805460ff191660ff92909216919091179055565b60006115bb61139e565b6009546113a99190612bf5565b6115d06116c1565b6001600160a01b0381166116355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bcc565b6111a281611bbf565b60006301ffc9a760e01b6001600160e01b03198316148061166f57506380ac58cd60e01b6001600160e01b03198316145b8061088f5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b148061088f57506301ffc9a760e01b6001600160e01b031983161461088f565b600c546001600160a01b0316331461138f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bcc565b6127106001600160601b03821611156117465760405162461bcd60e51b8152600401610bcc90612c08565b6001600160a01b03821661179c5760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610bcc565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600655565b600080878787856040516020016117ef9493929190612c52565b60405160208183030381529060405280519060200120905061185285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061184c9250859150611ca49050565b90611cd7565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b60008061189e6115b1565b116118eb5760405162461bcd60e51b815260206004820152601860248201527f4e6f206d6f726520746f6b656e7320617661696c61626c6500000000000000006044820152606401610bcc565b60006118f561139e565b6009546119029190612bf5565b6040516bffffffffffffffffffffffff1933606090811b8216602084015241901b166034820152446048820152456068820152426088820152909150600090829060a8016040516020818303038152906040528051906020012060001c6119699190612c8f565b6000818152600a602052604081205491925090810361198957508061199a565b506000818152600a60205260409020545b600a60006119a9600186612bf5565b8152602001908152602001600020546000036119de576119ca600184612bf5565b6000838152600a6020526040902055611a0e565b600a60006119ed600186612bf5565b81526020808201929092526040908101600090812054858252600a90935220555b611a16611cfb565b50600b54611a249082612566565b935050505090565b6001600160a01b038216611a5357604051634e46966960e11b815260040160405180910390fd5b6000818152600260205260409020546001600160a01b031615611a8957604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6127106001600160601b0382161115611b1f5760405162461bcd60e51b8152600401610bcc90612c08565b6001600160a01b038216611b755760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610bcc565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600790529190942093519051909116600160a01b029116179055565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611c1e83611d17565b600101905060008167ffffffffffffffff811115611c3e57611c3e6122a9565b6040519080825280601f01601f191660200182016040528015611c68576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611c7257509392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b6000806000611ce68585611def565b91509150611cf381611e31565b509392505050565b600080611d0760085490565b9050611326600880546001019055565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d565772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611d82576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611da057662386f26fc10000830492506010015b6305f5e1008310611db8576305f5e100830492506008015b6127108310611dcc57612710830492506004015b60648310611dde576064830492506002015b600a831061088f5760010192915050565b6000808251604103611e255760208301516040840151606085015160001a611e1987828585611f7b565b94509450505050610efd565b50600090506002610efd565b6000816004811115611e4557611e45612ca3565b03611e4d5750565b6001816004811115611e6157611e61612ca3565b03611eae5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610bcc565b6002816004811115611ec257611ec2612ca3565b03611f0f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610bcc565b6003816004811115611f2357611f23612ca3565b036111a25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bcc565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fb25750600090506003612036565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612006573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661202f57600060019250925050612036565b9150600090505b94509492505050565b6001600160e01b0319811681146111a257600080fd5b60006020828403121561206757600080fd5b81356120728161203f565b9392505050565b80356001600160a01b038116811461132657600080fd5b80356001600160601b038116811461132657600080fd5b600080604083850312156120ba57600080fd5b6120c383612079565b91506120d160208401612090565b90509250929050565b60005b838110156120f55781810151838201526020016120dd565b50506000910152565b602081526000825180602084015261211d8160408501602087016120da565b601f01601f19169190910160400192915050565b60006020828403121561214357600080fd5b5035919050565b6000806040838503121561215d57600080fd5b61216683612079565b946020939093013593505050565b60008060006060848603121561218957600080fd5b61219284612079565b92506121a060208501612079565b9150604084013590509250925092565b60008083601f8401126121c257600080fd5b50813567ffffffffffffffff8111156121da57600080fd5b602083019150836020828501011115610efd57600080fd5b60008060008060006060868803121561220a57600080fd5b85359450602086013567ffffffffffffffff8082111561222957600080fd5b61223589838a016121b0565b9096509450604088013591508082111561224e57600080fd5b5061225b888289016121b0565b969995985093965092949392505050565b6000806040838503121561227f57600080fd5b50508035926020909101359150565b6000602082840312156122a057600080fd5b61207282612079565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d157600080fd5b813567ffffffffffffffff808211156122e957600080fd5b818401915084601f8301126122fd57600080fd5b81358181111561230f5761230f6122a9565b604051601f8201601f19908116603f01168101908382118183101715612337576123376122a9565b8160405282815287602084870101111561235057600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060006060848603121561238557600080fd5b8335925061239560208501612079565b91506123a360408501612090565b90509250925092565b600080600080604085870312156123c257600080fd5b843567ffffffffffffffff808211156123da57600080fd5b6123e6888389016121b0565b909650945060208701359150808211156123ff57600080fd5b5061240c878288016121b0565b95989497509550505050565b6000806040838503121561242b57600080fd5b61243483612079565b91506020830135801515811461244957600080fd5b809150509250929050565b60008060008060006080868803121561246c57600080fd5b61247586612079565b945061248360208701612079565b935060408601359250606086013567ffffffffffffffff8111156124a657600080fd5b61225b888289016121b0565b6000602082840312156124c457600080fd5b813560ff8116811461207257600080fd5b600080604083850312156124e857600080fd5b6124f183612079565b91506120d160208401612079565b600181811c9082168061251357607f821691505b60208210810361253357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761088f5761088f612539565b8082018082111561088f5761088f612539565b634e487b7160e01b600052601260045260246000fd5b60008261259e5761259e612579565b500490565b6020808252602d908201527f4172676f5065747a3a204d617820537570706c7920666f72205075626c69632060408201526c4d696e7420526561636865642160981b606082015260800190565b60006020828403121561260257600080fd5b81516120728161203f565b601f82111561127357600081815260208120601f850160051c810160208610156126345750805b601f850160051c820191505b81811015610e4e57828155600101612640565b815167ffffffffffffffff81111561266d5761266d6122a9565b6126818161267b84546124ff565b8461260d565b602080601f8311600181146126b6576000841561269e5750858301515b600019600386901b1c1916600185901b178555610e4e565b600085815260208120601f198616915b828110156126e5578886015182559484019460019091019084016126c6565b50858210156127035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83111561272b5761272b6122a9565b61273f8361273983546124ff565b8361260d565b6000601f841160018114612773576000851561275b5750838201355b600019600387901b1c1916600186901b1783556112dc565b600083815260209020601f19861690835b828110156127a45786850135825560209485019460019092019101612784565b50868210156127c15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600081516128398185602086016120da565b9290920192915050565b607b60f81b81527f226e616d65223a20224172676f5065747a204c6f6f74626f782023000000000060018201526000835161288581601c8501602088016120da565b61088b60f21b601c918401918201527f226465736372697074696f6e223a20224172676f5065747a206973206120636f601e8201527f6c6c656374696f6e206f6620382c38383820756e69717565207574696c697479603e8201527f2d656e61626c6564206368617261637465727320616e64206172652070617274605e8201527f6e65727320746f20746865204172676f6e6175747320636f6c6c656374696f6e607e8201527f206f6e207468652043726f6e6f7320636861696e2e2045616368204172676f50609e8201527f65747a20686f6c64657220676574732061636365737320746f207574696c697460be8201527f79206163726f73732074686520656e74697265204172676f2065636f7379737460de8201527f656d2c206c756372617469766520726577617264732c2061697264726f70732c60fe8201527f20616e642077696c6c2062652061206b657920617373657420696e206675747561011e8201527f7265204172676f20646576656c6f706d656e74732e222c00000000000000000061013e820152612b55612b48612b3a612b11612ae8612acc612abf612ab9612aa76101558a017f22696d616765223a2022697066733a2f2f6261667962656967646767686a647581527f6e767170736a71656b6e353570746d34336b6837636a736e7a7532687271643760208201527f3275776c653474677875716d2f4172676f2532305065747a2e6d7034222c00006040820152605e0190565b6501134b2111d160d51b815260060190565b8b612827565b600b60fa1b815260010190565b6f2261747472696275746573223a205b7b60801b815260100190565b7f2020202274726169745f74797065223a202254797065222c0000000000000000815260180190565b7f2020202276616c7565223a2022556e72657665616c6564220000000000000000815260180190565b617d5d60f01b815260020190565b607d60f81b815260010190565b95945050505050565b6000808454612b6c816124ff565b60018281168015612b845760018114612b9957612bc8565b60ff1984168752821515830287019450612bc8565b8860005260208060002060005b85811015612bbf5781548a820152908401908201612ba6565b50505082870194505b505050508351612bdc8183602088016120da565b64173539b7b760d91b9101908152600501949350505050565b8181038181111561088f5761088f612539565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b600082612c9e57612c9e612579565b500690565b634e487b7160e01b600052602160045260246000fdfea264697066735822122028ca7a95fd0765e88d54c11a7444ca98b9459bf33b70383a3d441b272e2cb00064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableTokenCount()": {
        "details": "Check whether tokens are still available",
        "returns": {
          "_0": "the available token count"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "tokenCount()": {
        "details": "Get the current token count",
        "returns": {
          "_0": "the created token count"
        }
      },
      "totalMaxSupply()": {
        "details": "Get the max Supply",
        "returns": {
          "_0": "the maximum token count"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotMinted()": [
        {
          "notice": "----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------"
        }
      ]
    },
    "events": {
      "Transfer(address,address,uint256)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------"
      },
      "getApproved(uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------"
      },
      "name()": {
        "notice": "----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2677,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2679,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2691,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2695,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2745,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2751,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 148,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 3365,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)357_storage"
      },
      {
        "astId": 3368,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_totalMaxSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3235,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "tokenMatrix",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3237,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "startFrom",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2059,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "currentSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "whitelistMintCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2074,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "whitelistMintPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "publicMintPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2079,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "stage",
        "offset": 0,
        "slot": "17",
        "type": "t_uint8"
      },
      {
        "astId": 2081,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "baseURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2083,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "revealed",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)357_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 356,
            "contract": "contracts/ArgoPetz.sol:ArgoPetz",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/ArgoPetz.sol:ArgoPetz",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/ArgoPetz.sol:ArgoPetz",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}