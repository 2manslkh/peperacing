{
  "address": "0xEd2719B371b100e351d9a2Cfa9062AdE036e3be1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_argopetz",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "StakedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeTime",
          "type": "uint256"
        }
      ],
      "name": "UnstakedNFT",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "argopetz",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedNFTCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_argopetz",
          "type": "address"
        }
      ],
      "name": "setArgopetz",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4396690e374f522dffbcd91655f5b8215aedeab8627f2d5d1d6685f8d70afb43",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xEd2719B371b100e351d9a2Cfa9062AdE036e3be1",
    "transactionIndex": 3,
    "gasUsed": "858715",
    "logsBloom": "0x
    "blockHash": "0x52884594373a7d603abc54b45afd8067803d989aeb104c1c3394c023ec0e5341",
    "transactionHash": "0x4396690e374f522dffbcd91655f5b8215aedeab8627f2d5d1d6685f8d70afb43",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10356725,
        "transactionHash": "0x4396690e374f522dffbcd91655f5b8215aedeab8627f2d5d1d6685f8d70afb43",
        "address": "0xEd2719B371b100e351d9a2Cfa9062AdE036e3be1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x52884594373a7d603abc54b45afd8067803d989aeb104c1c3394c023ec0e5341"
      }
    ],
    "blockNumber": 10356725,
    "cumulativeGasUsed": "1493895",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd32C596994A07946699cAea4e669C6e284A85958"
  ],
  "numDeployments": 2,
  "solcInputHash": "680b6f5203e6d988bfe9ba615617d55a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argopetz\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StakedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"name\":\"UnstakedNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"argopetz\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argopetz\",\"type\":\"address\"}],\"name\":\"setArgopetz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kratos\",\"kind\":\"dev\",\"methods\":{\"getStakedNFTCount(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The number of staked NFTs\"}},\"getStakedNFTs(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The IDs of the NFTs\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stakeNFT(uint256[])\":{\"params\":{\"_nftIds\":\"The IDs of the NFTs\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeNFT(uint256[])\":{\"params\":{\"_nftIds\":\"The IDs of the NFTs\"}}},\"title\":\"StarMapCrafting\",\"version\":1},\"userdoc\":{\"events\":{\"StakedNFT(address,uint256,uint256)\":{\"notice\":\"Event emitted when an NFT is staked\"},\"UnstakedNFT(address,uint256,uint256)\":{\"notice\":\"Event emitted when an NFT is unstaked\"}},\"kind\":\"user\",\"methods\":{\"getStakedNFTCount(address)\":{\"notice\":\"Get staked NFT count of a user\"},\"getStakedNFTs(address)\":{\"notice\":\"Get staked NFTs of a user\"},\"stakeNFT(uint256[])\":{\"notice\":\"Stake NFTs\"},\"unstakeNFT(uint256[])\":{\"notice\":\"Unstake NFTs\"}},\"notice\":\"This contract is used to craft starmaps with Argopetz\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StarMapCrafting.sol\":\"StarMapCrafting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/StarMapCrafting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./common/SetUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\n/// @title StarMapCrafting\\r\\n/// @author Kratos\\r\\n/// @notice This contract is used to craft starmaps with Argopetz\\r\\n\\r\\ncontract StarMapCrafting is Ownable, IERC721Receiver {\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SetUtils for EnumerableSet.UintSet;\\r\\n    using SetUtils for EnumerableSet.AddressSet;\\r\\n\\r\\n    /// @notice Mapping of (user) => (EnumerableSet of NFT tokenIds) Number of NFTs staked for each user\\r\\n    mapping(address => EnumerableSet.UintSet) internal userStakedNFTs;\\r\\n\\r\\n    /// @notice Event emitted when an NFT is staked\\r\\n    event StakedNFT(address indexed user, uint256 indexed nftId, uint256 startTime);\\r\\n\\r\\n    /// @notice Event emitted when an NFT is unstaked\\r\\n    event UnstakedNFT(address indexed user, uint256 indexed nftId, uint256 unstakeTime);\\r\\n\\r\\n    IERC721 public argopetz;\\r\\n\\r\\n    constructor(address _argopetz) {\\r\\n        // Set the Argopetz token address\\r\\n        argopetz = IERC721(_argopetz);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake NFTs\\r\\n     * @param _nftIds The IDs of the NFTs\\r\\n     */\\r\\n    function stakeNFT(uint256[] calldata _nftIds) external {\\r\\n        // More than 1 NFT must be staked\\r\\n        require(_nftIds.length > 0, \\\"Must stake at least 1 NFT\\\");\\r\\n        for (uint256 i; i < _nftIds.length; ) {\\r\\n            // Add staked NFT to the stakedNFTs mapping\\r\\n            userStakedNFTs[msg.sender].add(_nftIds[i]);\\r\\n            // Transfer the NFT to this contract\\r\\n            argopetz.safeTransferFrom(msg.sender, address(this), _nftIds[i]);\\r\\n            // Emit the StakedNFT event\\r\\n            emit StakedNFT(msg.sender, _nftIds[i], block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake NFTs\\r\\n     * @param _nftIds The IDs of the NFTs\\r\\n     */\\r\\n    function unstakeNFT(uint256[] calldata _nftIds) external {\\r\\n        for (uint256 i; i < _nftIds.length; ) {\\r\\n            // Check if the NFT is staked\\r\\n            require(userStakedNFTs[msg.sender].contains(_nftIds[i]), \\\"NFT is not staked\\\");\\r\\n            // Remove the NFT from the stakedNFTs mapping\\r\\n            userStakedNFTs[msg.sender].remove(_nftIds[i]);\\r\\n            // Transfer the NFT back to the user\\r\\n            argopetz.safeTransferFrom(address(this), msg.sender, _nftIds[i]);\\r\\n            emit UnstakedNFT(msg.sender, _nftIds[i], block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get staked NFT count of a user\\r\\n     * @param _user The address of the user\\r\\n     * @return The number of staked NFTs\\r\\n     */\\r\\n    function getStakedNFTCount(address _user) external view returns (uint256) {\\r\\n        return userStakedNFTs[_user].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get staked NFTs of a user\\r\\n     * @param _user The address of the user\\r\\n     * @return The IDs of the NFTs\\r\\n     */\\r\\n    function getStakedNFTs(address _user) external view returns (uint256[] memory) {\\r\\n        return userStakedNFTs[_user].toArray();\\r\\n    }\\r\\n\\r\\n    // Set argopetz\\r\\n    function setArgopetz(address _argopetz) external onlyOwner {\\r\\n        argopetz = IERC721(_argopetz);\\r\\n    }\\r\\n\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a661890cb7744f053c5ebdd4b69a3efefbd0412c5b178cd5640a244f48e5d44\",\"license\":\"MIT\"},\"contracts/common/SetUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary SetUtils {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /// @dev Converst an iterable set of addresses to a corresponding array\\r\\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        address[] memory elements = new address[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n\\r\\n    /// @dev Converst an iterable set of uint to a corresponding array\\r\\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        uint256[] memory elements = new uint256[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaed461f20be292afd9a4c4839ed3ca31c29a41f247988ce9050ae308bce708ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610eb0380380610eb083398101604081905261002f916100ad565b6100383361005d565b600280546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b610dc4806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638453734d11610076578063b390bd911161005b578063b390bd91146101e4578063decfb2d714610205578063f2fde38b1461021857600080fd5b80638453734d146101b35780638da5cb5b146101c657600080fd5b8063182c5744116100a7578063182c5744146101765780636f70d2121461018b578063715018a6146101ab57600080fd5b8063150b7a02146100c3578063180f458314610131575b600080fd5b6100fb6100d1366004610b18565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6002546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b610189610184366004610bb3565b61022b565b005b61019e610199366004610c28565b610412565b6040516101289190610c43565b610189610449565b6101896101c1366004610bb3565b61045d565b60005473ffffffffffffffffffffffffffffffffffffffff16610151565b6101f76101f2366004610c28565b61066c565b604051908152602001610128565b610189610213366004610c28565b61069a565b610189610226366004610c28565b6106e9565b80610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d757374207374616b65206174206c656173742031204e46540000000000000060448201526064015b60405180910390fd5b60005b8181101561040d576102d58383838181106102b7576102b7610c87565b336000908152600160209081526040909120939102013590506107a0565b5060025473ffffffffffffffffffffffffffffffffffffffff166342842e0e333086868681811061030857610308610c87565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b505050508282828181106103ae576103ae610c87565b905060200201353373ffffffffffffffffffffffffffffffffffffffff167fd4832bcae9834661799ae29001c73a6d9915f2668ab97c975b2470c6d188a97f426040516103fd91815260200190565b60405180910390a360010161029a565b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020606090610443906107b3565b92915050565b610451610853565b61045b60006108d4565b565b60005b8181101561040d5761049b83838381811061047d5761047d610c87565b33600090815260016020908152604090912093910201359050610949565b610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4654206973206e6f74207374616b6564000000000000000000000000000000604482015260640161028e565b61053483838381811061051657610516610c87565b33600090815260016020908152604090912093910201359050610961565b5060025473ffffffffffffffffffffffffffffffffffffffff166342842e0e303386868681811061056757610567610c87565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b5050505082828281811061060d5761060d610c87565b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7675d67b1a43620fbbbdbe07ab3aa82cac67ccfc994ca205bd2a2fd9f0a59af34260405161065c91815260200190565b60405180910390a3600101610460565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206104439061096d565b6106a2610853565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6106f1610853565b73ffffffffffffffffffffffffffffffffffffffff8116610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161028e565b61079d816108d4565b50565b60006107ac8383610977565b9392505050565b606060006107c08361096d565b905060008167ffffffffffffffff8111156107dd576107dd610cb6565b604051908082528060200260200182016040528015610806578160200160208202803683370190505b50905060005b8281101561084b5761081e85826109c6565b82828151811061083057610830610c87565b602090810291909101015261084481610d14565b905061080c565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415156107ac565b60006107ac83836109d2565b6000610443825490565b60008181526001830160205260408120546109be57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610443565b506000610443565b60006107ac8383610ac5565b60008181526001830160205260408120548015610abb5760006109f6600183610d4c565b8554909150600090610a0a90600190610d4c565b9050818114610a6f576000866000018281548110610a2a57610a2a610c87565b9060005260206000200154905080876000018481548110610a4d57610a4d610c87565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a8057610a80610d5f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610443565b6000915050610443565b6000826000018281548110610adc57610adc610c87565b9060005260206000200154905092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b1357600080fd5b919050565b600080600080600060808688031215610b3057600080fd5b610b3986610aef565b9450610b4760208701610aef565b935060408601359250606086013567ffffffffffffffff80821115610b6b57600080fd5b818801915088601f830112610b7f57600080fd5b813581811115610b8e57600080fd5b896020828501011115610ba057600080fd5b9699959850939650602001949392505050565b60008060208385031215610bc657600080fd5b823567ffffffffffffffff80821115610bde57600080fd5b818501915085601f830112610bf257600080fd5b813581811115610c0157600080fd5b8660208260051b8501011115610c1657600080fd5b60209290920196919550909350505050565b600060208284031215610c3a57600080fd5b6107ac82610aef565b6020808252825182820181905260009190848201906040850190845b81811015610c7b57835183529284019291840191600101610c5f565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4557610d45610ce5565b5060010190565b8181038181111561044357610443610ce5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220af07fc6675d056b6e180c4f41ce1a1277d3931a0ad728a08ff15e7f5f7a8f41464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638453734d11610076578063b390bd911161005b578063b390bd91146101e4578063decfb2d714610205578063f2fde38b1461021857600080fd5b80638453734d146101b35780638da5cb5b146101c657600080fd5b8063182c5744116100a7578063182c5744146101765780636f70d2121461018b578063715018a6146101ab57600080fd5b8063150b7a02146100c3578063180f458314610131575b600080fd5b6100fb6100d1366004610b18565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6002546101519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610128565b610189610184366004610bb3565b61022b565b005b61019e610199366004610c28565b610412565b6040516101289190610c43565b610189610449565b6101896101c1366004610bb3565b61045d565b60005473ffffffffffffffffffffffffffffffffffffffff16610151565b6101f76101f2366004610c28565b61066c565b604051908152602001610128565b610189610213366004610c28565b61069a565b610189610226366004610c28565b6106e9565b80610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d757374207374616b65206174206c656173742031204e46540000000000000060448201526064015b60405180910390fd5b60005b8181101561040d576102d58383838181106102b7576102b7610c87565b336000908152600160209081526040909120939102013590506107a0565b5060025473ffffffffffffffffffffffffffffffffffffffff166342842e0e333086868681811061030857610308610c87565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561038457600080fd5b505af1158015610398573d6000803e3d6000fd5b505050508282828181106103ae576103ae610c87565b905060200201353373ffffffffffffffffffffffffffffffffffffffff167fd4832bcae9834661799ae29001c73a6d9915f2668ab97c975b2470c6d188a97f426040516103fd91815260200190565b60405180910390a360010161029a565b505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020606090610443906107b3565b92915050565b610451610853565b61045b60006108d4565b565b60005b8181101561040d5761049b83838381811061047d5761047d610c87565b33600090815260016020908152604090912093910201359050610949565b610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4654206973206e6f74207374616b6564000000000000000000000000000000604482015260640161028e565b61053483838381811061051657610516610c87565b33600090815260016020908152604090912093910201359050610961565b5060025473ffffffffffffffffffffffffffffffffffffffff166342842e0e303386868681811061056757610567610c87565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b5050505082828281811061060d5761060d610c87565b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7675d67b1a43620fbbbdbe07ab3aa82cac67ccfc994ca205bd2a2fd9f0a59af34260405161065c91815260200190565b60405180910390a3600101610460565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081206104439061096d565b6106a2610853565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6106f1610853565b73ffffffffffffffffffffffffffffffffffffffff8116610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161028e565b61079d816108d4565b50565b60006107ac8383610977565b9392505050565b606060006107c08361096d565b905060008167ffffffffffffffff8111156107dd576107dd610cb6565b604051908082528060200260200182016040528015610806578160200160208202803683370190505b50905060005b8281101561084b5761081e85826109c6565b82828151811061083057610830610c87565b602090810291909101015261084481610d14565b905061080c565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028e565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415156107ac565b60006107ac83836109d2565b6000610443825490565b60008181526001830160205260408120546109be57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610443565b506000610443565b60006107ac8383610ac5565b60008181526001830160205260408120548015610abb5760006109f6600183610d4c565b8554909150600090610a0a90600190610d4c565b9050818114610a6f576000866000018281548110610a2a57610a2a610c87565b9060005260206000200154905080876000018481548110610a4d57610a4d610c87565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a8057610a80610d5f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610443565b6000915050610443565b6000826000018281548110610adc57610adc610c87565b9060005260206000200154905092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b1357600080fd5b919050565b600080600080600060808688031215610b3057600080fd5b610b3986610aef565b9450610b4760208701610aef565b935060408601359250606086013567ffffffffffffffff80821115610b6b57600080fd5b818801915088601f830112610b7f57600080fd5b813581811115610b8e57600080fd5b896020828501011115610ba057600080fd5b9699959850939650602001949392505050565b60008060208385031215610bc657600080fd5b823567ffffffffffffffff80821115610bde57600080fd5b818501915085601f830112610bf257600080fd5b813581811115610c0157600080fd5b8660208260051b8501011115610c1657600080fd5b60209290920196919550909350505050565b600060208284031215610c3a57600080fd5b6107ac82610aef565b6020808252825182820181905260009190848201906040850190845b81811015610c7b57835183529284019291840191600101610c5f565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4557610d45610ce5565b5060010190565b8181038181111561044357610443610ce5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220af07fc6675d056b6e180c4f41ce1a1277d3931a0ad728a08ff15e7f5f7a8f41464736f6c63430008130033",
  "devdoc": {
    "author": "Kratos",
    "kind": "dev",
    "methods": {
      "getStakedNFTCount(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The number of staked NFTs"
        }
      },
      "getStakedNFTs(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The IDs of the NFTs"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stakeNFT(uint256[])": {
        "params": {
          "_nftIds": "The IDs of the NFTs"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeNFT(uint256[])": {
        "params": {
          "_nftIds": "The IDs of the NFTs"
        }
      }
    },
    "title": "StarMapCrafting",
    "version": 1
  },
  "userdoc": {
    "events": {
      "StakedNFT(address,uint256,uint256)": {
        "notice": "Event emitted when an NFT is staked"
      },
      "UnstakedNFT(address,uint256,uint256)": {
        "notice": "Event emitted when an NFT is unstaked"
      }
    },
    "kind": "user",
    "methods": {
      "getStakedNFTCount(address)": {
        "notice": "Get staked NFT count of a user"
      },
      "getStakedNFTs(address)": {
        "notice": "Get staked NFTs of a user"
      },
      "stakeNFT(uint256[])": {
        "notice": "Stake NFTs"
      },
      "unstakeNFT(uint256[])": {
        "notice": "Unstake NFTs"
      }
    },
    "notice": "This contract is used to craft starmaps with Argopetz",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4396,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "userStakedNFTs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)2671_storage)"
      },
      {
        "astId": 4417,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "argopetz",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC721)247"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)247": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)2671_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2671_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)2199_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2194,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2198,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2671_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2670,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2199_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}