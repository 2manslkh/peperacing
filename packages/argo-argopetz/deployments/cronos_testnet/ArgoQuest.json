{
  "address": "0x826Fc98655FA54F62B65b64fCa91f3074C646fe2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_argonauts",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_argopetz",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "questStartedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "crews",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "questEditedAt",
          "type": "uint256"
        }
      ],
      "name": "QuestEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "questStartedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "crews",
          "type": "uint256[]"
        }
      ],
      "name": "QuestStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "questStartedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "questStoppedAt",
          "type": "uint256"
        }
      ],
      "name": "QuestStopped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "argonauts",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "argonautsOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "argopetz",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "argopetzCrew",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "argopetzOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "argopetzTokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ArgoQuest.QuestInfo[]",
          "name": "questInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchEditQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "argopetzTokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ArgoQuest.QuestInfo[]",
          "name": "questInfos",
          "type": "tuple[]"
        }
      ],
      "name": "batchStartQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchStopQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canQuest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "argopetzTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "editQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastQuestedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "crewTokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isArgopetzQuesting",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCrews",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questCrews",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "argopetzTokenId",
          "type": "uint256"
        }
      ],
      "name": "removeCrew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setArgonauts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setArgopetz",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "b",
          "type": "bool"
        }
      ],
      "name": "setCanQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "n",
          "type": "uint8"
        }
      ],
      "name": "setMaxQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "argopetzTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "startQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stopQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensLastQuestedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf895b93a80bb5d21a1f6568bca552c1a311d55a7cce71582fd833ba4864ad73c",
  "receipt": {
    "to": null,
    "from": "0x865F4c222D7B23365C7Eb2F4f74d1a2533CD663E",
    "contractAddress": "0x826Fc98655FA54F62B65b64fCa91f3074C646fe2",
    "transactionIndex": 1,
    "gasUsed": "1941031",
    "logsBloom": "0x
    "blockHash": "0x87a2652690d80ecf5af76e0c9d6bfb333faadbb97c3af3e3490f0a9a1a69a4d3",
    "transactionHash": "0xf895b93a80bb5d21a1f6568bca552c1a311d55a7cce71582fd833ba4864ad73c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13592705,
        "transactionHash": "0xf895b93a80bb5d21a1f6568bca552c1a311d55a7cce71582fd833ba4864ad73c",
        "address": "0x826Fc98655FA54F62B65b64fCa91f3074C646fe2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000865f4c222d7b23365c7eb2f4f74d1a2533cd663e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x87a2652690d80ecf5af76e0c9d6bfb333faadbb97c3af3e3490f0a9a1a69a4d3"
      }
    ],
    "blockNumber": 13592705,
    "cumulativeGasUsed": "2209397",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60F5CEb4b06434E77e335B9140D17814f72De05a",
    "0x681BaC6cBc89D4bb6AA4cBcB7a31bFA944cA7A10"
  ],
  "numDeployments": 5,
  "solcInputHash": "a68fbdbe0091531b86c2f26cc7772240",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argonauts\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_argopetz\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"crews\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questEditedAt\",\"type\":\"uint256\"}],\"name\":\"QuestEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"crews\",\"type\":\"uint256[]\"}],\"name\":\"QuestStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questStoppedAt\",\"type\":\"uint256\"}],\"name\":\"QuestStopped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"argonauts\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"argonautsOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"argopetz\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"argopetzCrew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"argopetzOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"argopetzTokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ArgoQuest.QuestInfo[]\",\"name\":\"questInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchEditQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"argopetzTokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ArgoQuest.QuestInfo[]\",\"name\":\"questInfos\",\"type\":\"tuple[]\"}],\"name\":\"batchStartQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStopQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canQuest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"argopetzTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"editQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastQuestedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"crewTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isArgopetzQuesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCrews\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questCrews\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"argopetzTokenId\",\"type\":\"uint256\"}],\"name\":\"removeCrew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setArgonauts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setArgopetz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setCanQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"n\",\"type\":\"uint8\"}],\"name\":\"setMaxQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"argopetzTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"startQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stopQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensLastQuestedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArgoQuest.sol\":\"ArgoQuest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ArgoQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract ArgoQuest is ERC721Holder, Ownable {\\r\\n    struct QuestInfo {\\r\\n        uint256 tokenId;\\r\\n        uint256[] argopetzTokenIds;\\r\\n    }\\r\\n    IERC721 public argonauts;\\r\\n    IERC721 public argopetz;\\r\\n    bool public canQuest;\\r\\n    uint8 public maxCrews = 5;\\r\\n    // Track ownership of argonauts\\r\\n    mapping(uint256 => address) public argonautsOwners;\\r\\n    // Track ownership of argopetz\\r\\n    mapping(uint256 => address) public argopetzOwners;\\r\\n    mapping(uint256 => uint256) public tokensLastQuestedAt; // argonaut tokenId => timestamp\\r\\n    mapping(uint256 => uint256[]) public questCrews; // argonaut tokenId => argopetz tokenIds\\r\\n    mapping(uint256 => uint256[]) public argopetzCrew; // argopetz tokenId => argonaut tokenId [array of 1 uint256]\\r\\n    uint256 private constant MAX_SUPPLY = 8888;\\r\\n    event QuestStarted(address owner, uint256 indexed tokenId, uint256 questStartedAt, uint256[] crews);\\r\\n    event QuestEdited(\\r\\n        address owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 questStartedAt,\\r\\n        uint256[] crews,\\r\\n        uint256 questEditedAt\\r\\n    );\\r\\n    event QuestStopped(address owner, uint256 indexed tokenId, uint256 questStartedAt, uint256 questStoppedAt);\\r\\n\\r\\n    constructor(address _argonauts, address _argopetz) {\\r\\n        argonauts = IERC721(_argonauts);\\r\\n        argopetz = IERC721(_argopetz);\\r\\n    }\\r\\n\\r\\n    function batchStartQuest(QuestInfo[] calldata questInfos) external {\\r\\n        uint256 batch = questInfos.length;\\r\\n        for (uint256 i; i < batch; ) {\\r\\n            startQuest(questInfos[i].tokenId, questInfos[i].argopetzTokenIds);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchEditQuest(QuestInfo[] calldata questInfos) external {\\r\\n        require(canQuest, \\\"questing not open\\\");\\r\\n        require(address(argopetz) != address(0), \\\"Argopetz contract not set\\\");\\r\\n\\r\\n        uint256 batch = questInfos.length;\\r\\n        for (uint256 i; i < batch; ) {\\r\\n            uint256 tokenId = questInfos[i].tokenId;\\r\\n            require(tokensLastQuestedAt[tokenId] > 0, \\\"quested not started for [argonaut tokenId]\\\");\\r\\n\\r\\n            _resetCrew(tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < batch; ) {\\r\\n            uint256 tokenId = questInfos[i].tokenId;\\r\\n            uint256[] calldata argopetzTokenIds = questInfos[i].argopetzTokenIds;\\r\\n\\r\\n            require(argopetzTokenIds.length <= maxCrews, \\\"too many crews [argopetzTokenIds]\\\");\\r\\n\\r\\n            _addCrew(tokenId, argopetzTokenIds);\\r\\n            emit QuestEdited(msg.sender, tokenId, tokensLastQuestedAt[tokenId], argopetzTokenIds, block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchStopQuest(uint256[] calldata tokenIds) external {\\r\\n        uint256 batch = tokenIds.length;\\r\\n        for (uint256 i; i < batch; ) {\\r\\n            stopQuest(tokenIds[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function startQuest(uint256 tokenId, uint256[] calldata argopetzTokenIds) public {\\r\\n        require(canQuest, \\\"questing not open\\\");\\r\\n        require(address(argopetz) != address(0), \\\"argopetz not set\\\");\\r\\n        require(tokensLastQuestedAt[tokenId] == 0, \\\"quested already started for [argonaut tokenId]\\\");\\r\\n        require(argopetzTokenIds.length <= maxCrews, \\\"too many crews [argopetzTokenIds]\\\");\\r\\n        _addCrew(tokenId, argopetzTokenIds);\\r\\n\\r\\n        tokensLastQuestedAt[tokenId] = block.timestamp;\\r\\n\\r\\n        emit QuestStarted(msg.sender, tokenId, block.timestamp, argopetzTokenIds);\\r\\n    }\\r\\n\\r\\n    function editQuest(uint256 tokenId, uint256[] calldata argopetzTokenIds) public {\\r\\n        require(canQuest, \\\"questing not open\\\");\\r\\n        require(address(argopetz) != address(0), \\\"argopetz not set\\\");\\r\\n        require(tokensLastQuestedAt[tokenId] > 0, \\\"quested not started for [argonaut tokenId]\\\");\\r\\n        require(argopetzTokenIds.length <= maxCrews, \\\"too many crews [argopetzTokenIds]\\\");\\r\\n\\r\\n        _resetCrew(tokenId);\\r\\n        _addCrew(tokenId, argopetzTokenIds);\\r\\n\\r\\n        emit QuestEdited(msg.sender, tokenId, tokensLastQuestedAt[tokenId], argopetzTokenIds, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _addCrew(uint256 tokenId, uint256[] calldata argopetzTokenIds) private {\\r\\n        uint256 crews = argopetzTokenIds.length;\\r\\n        argonautsOwners[tokenId] = msg.sender;\\r\\n        uint256[] memory wrapper = new uint256[](1);\\r\\n        wrapper[0] = tokenId;\\r\\n        if (crews >= 1) {\\r\\n            for (uint256 i; i < crews; ) {\\r\\n                uint256 pTokenId = argopetzTokenIds[i];\\r\\n                argopetzOwners[pTokenId] = msg.sender;\\r\\n                uint256[] storage existCheck = argopetzCrew[pTokenId];\\r\\n                if (existCheck.length != 0) {\\r\\n                    removeCrew(pTokenId);\\r\\n                }\\r\\n                argopetz.safeTransferFrom(msg.sender, address(this), pTokenId);\\r\\n                argopetzCrew[pTokenId] = wrapper;\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            questCrews[tokenId] = argopetzTokenIds;\\r\\n        }\\r\\n        argonauts.safeTransferFrom(msg.sender, address(this), tokenId);\\r\\n    }\\r\\n\\r\\n    function removeCrew(uint256 argopetzTokenId) public {\\r\\n        require(address(argopetz) != address(0), \\\"argopetz not set\\\");\\r\\n        require(argopetzOwners[argopetzTokenId] == msg.sender, \\\"not argopetz owner\\\");\\r\\n\\r\\n        uint256[] storage existCheck = argopetzCrew[argopetzTokenId];\\r\\n        require(existCheck.length != 0, \\\"argopetzTokenId not questing\\\");\\r\\n        uint256 tokenId = existCheck[0];\\r\\n        uint256 empty = MAX_SUPPLY;\\r\\n\\r\\n        uint256[] memory pTokenIds = questCrews[tokenId];\\r\\n        uint256 crews = pTokenIds.length;\\r\\n        uint256 crewLength = pTokenIds.length;\\r\\n        for (uint256 i; i < crews; ) {\\r\\n            uint256 pTokenId = pTokenIds[i];\\r\\n            if (pTokenId == argopetzTokenId) {\\r\\n                argopetzOwners[pTokenId] = address(0);\\r\\n                pTokenIds[i] = empty;\\r\\n                crewLength--;\\r\\n                // Transfer back to owner\\r\\n                argopetz.safeTransferFrom(address(this), msg.sender, pTokenId);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(pTokenIds.length != crewLength, \\\"argopetzTokenId not in crew\\\");\\r\\n\\r\\n        uint256[] memory newCrews = new uint256[](crewLength);\\r\\n        uint256 activeIdx;\\r\\n        for (uint256 i; i < crews; ) {\\r\\n            if (pTokenIds[i] != empty) {\\r\\n                newCrews[activeIdx++] = pTokenIds[i];\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        questCrews[tokenId] = newCrews;\\r\\n        argopetzCrew[argopetzTokenId] = new uint256[](0);\\r\\n    }\\r\\n\\r\\n    function _resetCrew(uint256 tokenId) private {\\r\\n        uint256[] storage argopetzTokenIds = questCrews[tokenId];\\r\\n        uint256 crews = argopetzTokenIds.length;\\r\\n        if (crews >= 1) {\\r\\n            uint256[] memory empty = new uint256[](0);\\r\\n            for (uint256 i; i < crews; ) {\\r\\n                uint256 pTokenId = argopetzTokenIds[i];\\r\\n                argopetzCrew[pTokenId] = empty;\\r\\n                // Transfer back to owner\\r\\n                argopetz.safeTransferFrom(address(this), argopetzOwners[pTokenId], pTokenId);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            questCrews[tokenId] = empty;\\r\\n        }\\r\\n        argonauts.safeTransferFrom(address(this), argonautsOwners[tokenId], tokenId);\\r\\n    }\\r\\n\\r\\n    function stopQuest(uint256 tokenId) public {\\r\\n        require(tokensLastQuestedAt[tokenId] > 0, \\\"quested not started for [argonaut tokenId]\\\");\\r\\n        require(argonautsOwners[tokenId] == msg.sender, \\\"not argonauts owner\\\");\\r\\n        _resetCrew(tokenId);\\r\\n\\r\\n        uint256 tlqa = tokensLastQuestedAt[tokenId];\\r\\n        tokensLastQuestedAt[tokenId] = 0;\\r\\n        emit QuestStopped(msg.sender, tokenId, tlqa, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function isArgopetzQuesting(uint256 tokenId) external view returns (bool) {\\r\\n        uint256[] storage existCheck = argopetzCrew[tokenId];\\r\\n        return existCheck.length > 0;\\r\\n    }\\r\\n\\r\\n    function getTokenInfo(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256 lastQuestedAt, uint256[] memory crewTokenIds) {\\r\\n        return (tokensLastQuestedAt[tokenId], questCrews[tokenId]);\\r\\n    }\\r\\n\\r\\n    // =============== Admin ===============\\r\\n\\r\\n    function setCanQuest(bool b) external onlyOwner {\\r\\n        canQuest = b;\\r\\n    }\\r\\n\\r\\n    function setArgopetz(address addr) external onlyOwner {\\r\\n        argopetz = IERC721(addr);\\r\\n    }\\r\\n\\r\\n    function setArgonauts(address addr) external onlyOwner {\\r\\n        argonauts = IERC721(addr);\\r\\n    }\\r\\n\\r\\n    function setMaxQuest(uint8 n) external onlyOwner {\\r\\n        maxCrews = n;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e9b94276eb831895187bc17a126abd45c6e5d84259b2779631322776443a415\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff60a81b1916600560a81b1790553480156200002457600080fd5b506040516200223d3803806200223d8339810160408190526200004791620000f1565b620000523362000084565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000129565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ec57600080fd5b919050565b600080604083850312156200010557600080fd5b6200011083620000d4565b91506200012060208401620000d4565b90509250929050565b61210480620001396000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806391b16307116100ee578063ae85e02c11610097578063d73744fa11610071578063d73744fa146104b5578063decfb2d7146104c8578063f2fde38b146104db578063f72f20f2146104ee57600080fd5b8063ae85e02c1461044a578063c2a201981461046a578063d59642e2146104a257600080fd5b80639eb5614a116100c85780639eb5614a146103ff578063a6171eff14610424578063aa44048b1461043757600080fd5b806391b163071461037357806397b167ff146103a95780639a4e2649146103df57600080fd5b806354cb4c691161015b578063715018a611610135578063715018a61461031957806383508856146103215780638c7a63ae146103345780638da5cb5b1461035557600080fd5b806354cb4c69146102c15780636b965301146102d4578063704a6f591461030657600080fd5b8063180f45831161018c578063180f4583146102565780632dede78d1461029b57806332adcea1146102ae57600080fd5b80630ac04f45146101b3578063150b7a02146101c85780631802d72b14610235575b600080fd5b6101c66101c1366004611bba565b610501565b005b6101ff6101d6366004611c54565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b610248610243366004611d4e565b61053c565b60405190815260200161022c565b6002546102769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101c66102a9366004611bba565b61056d565b6101c66102bc366004611d70565b610876565b6101c66102cf366004611dbc565b610ac3565b6102f66102e2366004611de6565b600090815260076020526040902054151590565b604051901515815260200161022c565b6101c6610314366004611de6565b610b18565b6101c6610f68565b6101c661032f366004611dff565b610f7c565b610347610342366004611de6565b610fce565b60405161022c929190611e21565b60005473ffffffffffffffffffffffffffffffffffffffff16610276565b610276610381366004611de6565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6102766103b7366004611de6565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001546102769073ffffffffffffffffffffffffffffffffffffffff1681565b6002546102f69074010000000000000000000000000000000000000000900460ff1681565b6101c6610432366004611bba565b611041565b6101c6610445366004611d70565b6110af565b610248610458366004611de6565b60056020526000908152604090205481565b600254610490907501000000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161022c565b6101c66104b0366004611e6f565b6112e9565b6102486104c3366004611d4e565b611338565b6101c66104d6366004611e6f565b611354565b6101c66104e9366004611e6f565b6113a3565b6101c66104fc366004611de6565b611440565b8060005b818110156105365761052e84848381811061052257610522611e8a565b90506020020135611440565b600101610505565b50505050565b6007602052816000526040600020818154811061055857600080fd5b90600052602060002001600091509150505481565b60025474010000000000000000000000000000000000000000900460ff166105dc5760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064015b60405180910390fd5b60025473ffffffffffffffffffffffffffffffffffffffff166106415760405162461bcd60e51b815260206004820152601960248201527f4172676f7065747a20636f6e7472616374206e6f74207365740000000000000060448201526064016105d3565b8060005b8181101561070a57600084848381811061066157610661611e8a565b90506020028101906106739190611eb9565b356000818152600560205260409020549091506106f85760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b61070181611596565b50600101610645565b5060005b8181101561053657600084848381811061072a5761072a611e8a565b905060200281019061073c9190611eb9565b35905036600086868581811061075457610754611e8a565b90506020028101906107669190611eb9565b610774906020810190611ef7565b60025491935091507501000000000000000000000000000000000000000000900460ff1681111561080d5760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b610818838383611784565b6000838152600560205260409081902054905184917f5d0a647faddf13522b191ff485ece27591d39b63b9a4fe00d03fe6660e5e355291610860913391879087904290611faa565b60405180910390a283600101935050505061070e565b60025474010000000000000000000000000000000000000000900460ff166108e05760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064016105d3565b60025473ffffffffffffffffffffffffffffffffffffffff166109455760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b6000838152600560205260409020546109c65760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b6002547501000000000000000000000000000000000000000000900460ff16811115610a5a5760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b610a6383611596565b610a6e838383611784565b6000838152600560205260409081902054905184917f5d0a647faddf13522b191ff485ece27591d39b63b9a4fe00d03fe6660e5e355291610ab6913391879087904290611faa565b60405180910390a2505050565b610acb6119f7565b6002805460ff9092167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff16610b7d5760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610bf05760405162461bcd60e51b815260206004820152601260248201527f6e6f74206172676f7065747a206f776e6572000000000000000000000000000060448201526064016105d3565b60008181526007602052604081208054909103610c4f5760405162461bcd60e51b815260206004820152601c60248201527f6172676f7065747a546f6b656e4964206e6f74207175657374696e670000000060448201526064016105d3565b600081600081548110610c6457610c64611e8a565b600091825260208083209091015480835260068252604080842080548251818602810186019093528083529295506122b8949391929091830182828015610cca57602002820191906000526020600020905b815481526020019060010190808311610cb6575b5050835193945083925060009150505b82811015610e02576000848281518110610cf657610cf6611e8a565b60200260200101519050888103610df957600081815260046020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905584518690869084908110610d5157610d51611e8a565b602090810291909101015282610d6681612021565b6002546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905291955073ffffffffffffffffffffffffffffffffffffffff1691506342842e0e90606401600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b505050505b50600101610cda565b5080835103610e535760405162461bcd60e51b815260206004820152601b60248201527f6172676f7065747a546f6b656e4964206e6f7420696e2063726577000000000060448201526064016105d3565b60008167ffffffffffffffff811115610e6e57610e6e611c25565b604051908082528060200260200182016040528015610e97578160200160208202803683370190505b5090506000805b84811015610f135786868281518110610eb957610eb9611e8a565b602002602001015114610f0b57858181518110610ed857610ed8611e8a565b6020026020010151838380610eec90612056565b945081518110610efe57610efe611e8a565b6020026020010181815250505b600101610e9e565b5060008781526006602090815260409091208351610f3392850190611ad3565b5060408051600080825260208083018085528d835260079091529290209051610f5c9290611ad3565b50505050505050505050565b610f706119f7565b610f7a6000611a5e565b565b610f846119f7565b6002805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000818152600560209081526040808320546006835281842080548351818602810186019094528084526060949293919283919083018282801561103157602002820191906000526020600020905b81548152602001906001019080831161101d575b5050505050905091509150915091565b8060005b81811015610536576110a784848381811061106257611062611e8a565b90506020028101906110749190611eb9565b3585858481811061108757611087611e8a565b90506020028101906110999190611eb9565b610445906020810190611ef7565b600101611045565b60025474010000000000000000000000000000000000000000900460ff166111195760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064016105d3565b60025473ffffffffffffffffffffffffffffffffffffffff1661117e5760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b600083815260056020526040902054156112005760405162461bcd60e51b815260206004820152602e60248201527f7175657374656420616c7265616479207374617274656420666f72205b61726760448201527f6f6e61757420746f6b656e49645d00000000000000000000000000000000000060648201526084016105d3565b6002547501000000000000000000000000000000000000000000900460ff168111156112945760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b61129f838383611784565b600083815260056020526040908190204290819055905184917fa50414b111ff809c8b1c3ab86f1424caabbdd5abf81be13a1e1bdab5ddaf225491610ab69133918790879061208e565b6112f16119f7565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6006602052816000526040600020818154811061055857600080fd5b61135c6119f7565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6113ab6119f7565b73ffffffffffffffffffffffffffffffffffffffff81166114345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105d3565b61143d81611a5e565b50565b6000818152600560205260409020546114c15760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b60008181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146115345760405162461bcd60e51b815260206004820152601360248201527f6e6f74206172676f6e61757473206f776e65720000000000000000000000000060448201526064016105d3565b61153d81611596565b600081815260056020908152604080832080549390558051338152918201839052429082015282907f0a0d4d9a28fcd322b79221dac93bd8b6dad1788681212be0d9da357f9a30b0789060600160405180910390a25050565b60008181526006602052604090208054600181106116de5760408051600080825260208201909252905b828110156116bb5760008482815481106115dc576115dc611e8a565b60009182526020808320909101548083526007825260409092208551929350611609929091860190611ad3565b506002546000828152600460208190526040918290205491517f42842e0e000000000000000000000000000000000000000000000000000000008152309181019190915273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018490529116906342842e0e90606401600060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b50505050816001019150506115c0565b50600084815260066020908152604090912082516116db92840190611ad3565b50505b600154600084815260036020526040908190205490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018690529116906342842e0e90606401600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b50505050505050565b6000838152600360205260408082208054337fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790558051600180825281830190925283929181602001602082028036833701905050905084816000815181106117f3576117f3611e8a565b602002602001018181525050600182106119605760005b8281101561194457600085858381811061182657611826611e8a565b60209081029290920135600081815260048452604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790556007909452929092208054929350911590506118855761188582610b18565b6002546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156118fd57600080fd5b505af1158015611911573d6000803e3d6000fd5b5050506000838152600760209081526040909120865161193693509091870190611ad3565b50826001019250505061180a565b50600085815260066020526040902061195e908585611b1e565b505b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156119d857600080fd5b505af11580156119ec573d6000803e3d6000fd5b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215611b0e579160200282015b82811115611b0e578251825591602001919060010190611af3565b50611b1a929150611b59565b5090565b828054828255906000526020600020908101928215611b0e579160200282015b82811115611b0e578235825591602001919060010190611b3e565b5b80821115611b1a5760008155600101611b5a565b60008083601f840112611b8057600080fd5b50813567ffffffffffffffff811115611b9857600080fd5b6020830191508360208260051b8501011115611bb357600080fd5b9250929050565b60008060208385031215611bcd57600080fd5b823567ffffffffffffffff811115611be457600080fd5b611bf085828601611b6e565b90969095509350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c2057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215611c6a57600080fd5b611c7385611bfc565b9350611c8160208601611bfc565b925060408501359150606085013567ffffffffffffffff80821115611ca557600080fd5b818701915087601f830112611cb957600080fd5b813581811115611ccb57611ccb611c25565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611d1157611d11611c25565b816040528281528a6020848701011115611d2a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611d6157600080fd5b50508035926020909101359150565b600080600060408486031215611d8557600080fd5b83359250602084013567ffffffffffffffff811115611da357600080fd5b611daf86828701611b6e565b9497909650939450505050565b600060208284031215611dce57600080fd5b813560ff81168114611ddf57600080fd5b9392505050565b600060208284031215611df857600080fd5b5035919050565b600060208284031215611e1157600080fd5b81358015158114611ddf57600080fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611e6257845183529383019391830191600101611e46565b5090979650505050505050565b600060208284031215611e8157600080fd5b611ddf82611bfc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112611eed57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611f2c57600080fd5b83018035915067ffffffffffffffff821115611f4757600080fd5b6020019150600581901b3603821315611bb357600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611f9157600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152846020820152608060408201526000611fe0608083018587611f5f565b90508260608301529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008161203057612030611ff2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361208757612087611ff2565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201526060604082015260006120c4606083018486611f5f565b969550505050505056fea264697066735822122066e9842c50aeebc19801b9d159b8acdae3af66e75dc4aa850faafd5254281c8a64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806391b16307116100ee578063ae85e02c11610097578063d73744fa11610071578063d73744fa146104b5578063decfb2d7146104c8578063f2fde38b146104db578063f72f20f2146104ee57600080fd5b8063ae85e02c1461044a578063c2a201981461046a578063d59642e2146104a257600080fd5b80639eb5614a116100c85780639eb5614a146103ff578063a6171eff14610424578063aa44048b1461043757600080fd5b806391b163071461037357806397b167ff146103a95780639a4e2649146103df57600080fd5b806354cb4c691161015b578063715018a611610135578063715018a61461031957806383508856146103215780638c7a63ae146103345780638da5cb5b1461035557600080fd5b806354cb4c69146102c15780636b965301146102d4578063704a6f591461030657600080fd5b8063180f45831161018c578063180f4583146102565780632dede78d1461029b57806332adcea1146102ae57600080fd5b80630ac04f45146101b3578063150b7a02146101c85780631802d72b14610235575b600080fd5b6101c66101c1366004611bba565b610501565b005b6101ff6101d6366004611c54565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b610248610243366004611d4e565b61053c565b60405190815260200161022c565b6002546102769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101c66102a9366004611bba565b61056d565b6101c66102bc366004611d70565b610876565b6101c66102cf366004611dbc565b610ac3565b6102f66102e2366004611de6565b600090815260076020526040902054151590565b604051901515815260200161022c565b6101c6610314366004611de6565b610b18565b6101c6610f68565b6101c661032f366004611dff565b610f7c565b610347610342366004611de6565b610fce565b60405161022c929190611e21565b60005473ffffffffffffffffffffffffffffffffffffffff16610276565b610276610381366004611de6565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6102766103b7366004611de6565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001546102769073ffffffffffffffffffffffffffffffffffffffff1681565b6002546102f69074010000000000000000000000000000000000000000900460ff1681565b6101c6610432366004611bba565b611041565b6101c6610445366004611d70565b6110af565b610248610458366004611de6565b60056020526000908152604090205481565b600254610490907501000000000000000000000000000000000000000000900460ff1681565b60405160ff909116815260200161022c565b6101c66104b0366004611e6f565b6112e9565b6102486104c3366004611d4e565b611338565b6101c66104d6366004611e6f565b611354565b6101c66104e9366004611e6f565b6113a3565b6101c66104fc366004611de6565b611440565b8060005b818110156105365761052e84848381811061052257610522611e8a565b90506020020135611440565b600101610505565b50505050565b6007602052816000526040600020818154811061055857600080fd5b90600052602060002001600091509150505481565b60025474010000000000000000000000000000000000000000900460ff166105dc5760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064015b60405180910390fd5b60025473ffffffffffffffffffffffffffffffffffffffff166106415760405162461bcd60e51b815260206004820152601960248201527f4172676f7065747a20636f6e7472616374206e6f74207365740000000000000060448201526064016105d3565b8060005b8181101561070a57600084848381811061066157610661611e8a565b90506020028101906106739190611eb9565b356000818152600560205260409020549091506106f85760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b61070181611596565b50600101610645565b5060005b8181101561053657600084848381811061072a5761072a611e8a565b905060200281019061073c9190611eb9565b35905036600086868581811061075457610754611e8a565b90506020028101906107669190611eb9565b610774906020810190611ef7565b60025491935091507501000000000000000000000000000000000000000000900460ff1681111561080d5760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b610818838383611784565b6000838152600560205260409081902054905184917f5d0a647faddf13522b191ff485ece27591d39b63b9a4fe00d03fe6660e5e355291610860913391879087904290611faa565b60405180910390a283600101935050505061070e565b60025474010000000000000000000000000000000000000000900460ff166108e05760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064016105d3565b60025473ffffffffffffffffffffffffffffffffffffffff166109455760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b6000838152600560205260409020546109c65760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b6002547501000000000000000000000000000000000000000000900460ff16811115610a5a5760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b610a6383611596565b610a6e838383611784565b6000838152600560205260409081902054905184917f5d0a647faddf13522b191ff485ece27591d39b63b9a4fe00d03fe6660e5e355291610ab6913391879087904290611faa565b60405180910390a2505050565b610acb6119f7565b6002805460ff9092167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff16610b7d5760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b60008181526004602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610bf05760405162461bcd60e51b815260206004820152601260248201527f6e6f74206172676f7065747a206f776e6572000000000000000000000000000060448201526064016105d3565b60008181526007602052604081208054909103610c4f5760405162461bcd60e51b815260206004820152601c60248201527f6172676f7065747a546f6b656e4964206e6f74207175657374696e670000000060448201526064016105d3565b600081600081548110610c6457610c64611e8a565b600091825260208083209091015480835260068252604080842080548251818602810186019093528083529295506122b8949391929091830182828015610cca57602002820191906000526020600020905b815481526020019060010190808311610cb6575b5050835193945083925060009150505b82811015610e02576000848281518110610cf657610cf6611e8a565b60200260200101519050888103610df957600081815260046020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905584518690869084908110610d5157610d51611e8a565b602090810291909101015282610d6681612021565b6002546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810185905291955073ffffffffffffffffffffffffffffffffffffffff1691506342842e0e90606401600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b505050505b50600101610cda565b5080835103610e535760405162461bcd60e51b815260206004820152601b60248201527f6172676f7065747a546f6b656e4964206e6f7420696e2063726577000000000060448201526064016105d3565b60008167ffffffffffffffff811115610e6e57610e6e611c25565b604051908082528060200260200182016040528015610e97578160200160208202803683370190505b5090506000805b84811015610f135786868281518110610eb957610eb9611e8a565b602002602001015114610f0b57858181518110610ed857610ed8611e8a565b6020026020010151838380610eec90612056565b945081518110610efe57610efe611e8a565b6020026020010181815250505b600101610e9e565b5060008781526006602090815260409091208351610f3392850190611ad3565b5060408051600080825260208083018085528d835260079091529290209051610f5c9290611ad3565b50505050505050505050565b610f706119f7565b610f7a6000611a5e565b565b610f846119f7565b6002805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000818152600560209081526040808320546006835281842080548351818602810186019094528084526060949293919283919083018282801561103157602002820191906000526020600020905b81548152602001906001019080831161101d575b5050505050905091509150915091565b8060005b81811015610536576110a784848381811061106257611062611e8a565b90506020028101906110749190611eb9565b3585858481811061108757611087611e8a565b90506020028101906110999190611eb9565b610445906020810190611ef7565b600101611045565b60025474010000000000000000000000000000000000000000900460ff166111195760405162461bcd60e51b815260206004820152601160248201527f7175657374696e67206e6f74206f70656e00000000000000000000000000000060448201526064016105d3565b60025473ffffffffffffffffffffffffffffffffffffffff1661117e5760405162461bcd60e51b815260206004820152601060248201527f6172676f7065747a206e6f74207365740000000000000000000000000000000060448201526064016105d3565b600083815260056020526040902054156112005760405162461bcd60e51b815260206004820152602e60248201527f7175657374656420616c7265616479207374617274656420666f72205b61726760448201527f6f6e61757420746f6b656e49645d00000000000000000000000000000000000060648201526084016105d3565b6002547501000000000000000000000000000000000000000000900460ff168111156112945760405162461bcd60e51b815260206004820152602160248201527f746f6f206d616e79206372657773205b6172676f7065747a546f6b656e49647360448201527f5d0000000000000000000000000000000000000000000000000000000000000060648201526084016105d3565b61129f838383611784565b600083815260056020526040908190204290819055905184917fa50414b111ff809c8b1c3ab86f1424caabbdd5abf81be13a1e1bdab5ddaf225491610ab69133918790879061208e565b6112f16119f7565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6006602052816000526040600020818154811061055857600080fd5b61135c6119f7565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6113ab6119f7565b73ffffffffffffffffffffffffffffffffffffffff81166114345760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105d3565b61143d81611a5e565b50565b6000818152600560205260409020546114c15760405162461bcd60e51b815260206004820152602a60248201527f71756573746564206e6f74207374617274656420666f72205b6172676f6e617560448201527f7420746f6b656e49645d0000000000000000000000000000000000000000000060648201526084016105d3565b60008181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146115345760405162461bcd60e51b815260206004820152601360248201527f6e6f74206172676f6e61757473206f776e65720000000000000000000000000060448201526064016105d3565b61153d81611596565b600081815260056020908152604080832080549390558051338152918201839052429082015282907f0a0d4d9a28fcd322b79221dac93bd8b6dad1788681212be0d9da357f9a30b0789060600160405180910390a25050565b60008181526006602052604090208054600181106116de5760408051600080825260208201909252905b828110156116bb5760008482815481106115dc576115dc611e8a565b60009182526020808320909101548083526007825260409092208551929350611609929091860190611ad3565b506002546000828152600460208190526040918290205491517f42842e0e000000000000000000000000000000000000000000000000000000008152309181019190915273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018490529116906342842e0e90606401600060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b50505050816001019150506115c0565b50600084815260066020908152604090912082516116db92840190611ad3565b50505b600154600084815260036020526040908190205490517f42842e0e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018690529116906342842e0e90606401600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b50505050505050565b6000838152600360205260408082208054337fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790558051600180825281830190925283929181602001602082028036833701905050905084816000815181106117f3576117f3611e8a565b602002602001018181525050600182106119605760005b8281101561194457600085858381811061182657611826611e8a565b60209081029290920135600081815260048452604080822080547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790556007909452929092208054929350911590506118855761188582610b18565b6002546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156118fd57600080fd5b505af1158015611911573d6000803e3d6000fd5b5050506000838152600760209081526040909120865161193693509091870190611ad3565b50826001019250505061180a565b50600085815260066020526040902061195e908585611b1e565b505b6001546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff909116906342842e0e90606401600060405180830381600087803b1580156119d857600080fd5b505af11580156119ec573d6000803e3d6000fd5b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105d3565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215611b0e579160200282015b82811115611b0e578251825591602001919060010190611af3565b50611b1a929150611b59565b5090565b828054828255906000526020600020908101928215611b0e579160200282015b82811115611b0e578235825591602001919060010190611b3e565b5b80821115611b1a5760008155600101611b5a565b60008083601f840112611b8057600080fd5b50813567ffffffffffffffff811115611b9857600080fd5b6020830191508360208260051b8501011115611bb357600080fd5b9250929050565b60008060208385031215611bcd57600080fd5b823567ffffffffffffffff811115611be457600080fd5b611bf085828601611b6e565b90969095509350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c2057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215611c6a57600080fd5b611c7385611bfc565b9350611c8160208601611bfc565b925060408501359150606085013567ffffffffffffffff80821115611ca557600080fd5b818701915087601f830112611cb957600080fd5b813581811115611ccb57611ccb611c25565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611d1157611d11611c25565b816040528281528a6020848701011115611d2a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611d6157600080fd5b50508035926020909101359150565b600080600060408486031215611d8557600080fd5b83359250602084013567ffffffffffffffff811115611da357600080fd5b611daf86828701611b6e565b9497909650939450505050565b600060208284031215611dce57600080fd5b813560ff81168114611ddf57600080fd5b9392505050565b600060208284031215611df857600080fd5b5035919050565b600060208284031215611e1157600080fd5b81358015158114611ddf57600080fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015611e6257845183529383019391830191600101611e46565b5090979650505050505050565b600060208284031215611e8157600080fd5b611ddf82611bfc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112611eed57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611f2c57600080fd5b83018035915067ffffffffffffffff821115611f4757600080fd5b6020019150600581901b3603821315611bb357600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611f9157600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152846020820152608060408201526000611fe0608083018587611f5f565b90508260608301529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008161203057612030611ff2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361208757612087611ff2565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201526060604082015260006120c4606083018486611f5f565b969550505050505056fea264697066735822122066e9842c50aeebc19801b9d159b8acdae3af66e75dc4aa850faafd5254281c8a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 325,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "argonauts",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC721)228"
      },
      {
        "astId": 328,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "argopetz",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC721)228"
      },
      {
        "astId": 330,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "canQuest",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 333,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "maxCrews",
        "offset": 21,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 337,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "argonautsOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 341,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "argopetzOwners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 345,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "tokensLastQuestedAt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 350,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "questCrews",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 355,
        "contract": "contracts/ArgoQuest.sol:ArgoQuest",
        "label": "argopetzCrew",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC721)228": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}