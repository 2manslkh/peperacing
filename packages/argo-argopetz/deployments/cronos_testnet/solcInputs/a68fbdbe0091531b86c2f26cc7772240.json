{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ArgoQuest.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ArgoQuest is ERC721Holder, Ownable {\r\n    struct QuestInfo {\r\n        uint256 tokenId;\r\n        uint256[] argopetzTokenIds;\r\n    }\r\n    IERC721 public argonauts;\r\n    IERC721 public argopetz;\r\n    bool public canQuest;\r\n    uint8 public maxCrews = 5;\r\n    // Track ownership of argonauts\r\n    mapping(uint256 => address) public argonautsOwners;\r\n    // Track ownership of argopetz\r\n    mapping(uint256 => address) public argopetzOwners;\r\n    mapping(uint256 => uint256) public tokensLastQuestedAt; // argonaut tokenId => timestamp\r\n    mapping(uint256 => uint256[]) public questCrews; // argonaut tokenId => argopetz tokenIds\r\n    mapping(uint256 => uint256[]) public argopetzCrew; // argopetz tokenId => argonaut tokenId [array of 1 uint256]\r\n    uint256 private constant MAX_SUPPLY = 8888;\r\n    event QuestStarted(address owner, uint256 indexed tokenId, uint256 questStartedAt, uint256[] crews);\r\n    event QuestEdited(\r\n        address owner,\r\n        uint256 indexed tokenId,\r\n        uint256 questStartedAt,\r\n        uint256[] crews,\r\n        uint256 questEditedAt\r\n    );\r\n    event QuestStopped(address owner, uint256 indexed tokenId, uint256 questStartedAt, uint256 questStoppedAt);\r\n\r\n    constructor(address _argonauts, address _argopetz) {\r\n        argonauts = IERC721(_argonauts);\r\n        argopetz = IERC721(_argopetz);\r\n    }\r\n\r\n    function batchStartQuest(QuestInfo[] calldata questInfos) external {\r\n        uint256 batch = questInfos.length;\r\n        for (uint256 i; i < batch; ) {\r\n            startQuest(questInfos[i].tokenId, questInfos[i].argopetzTokenIds);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchEditQuest(QuestInfo[] calldata questInfos) external {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(argopetz) != address(0), \"Argopetz contract not set\");\r\n\r\n        uint256 batch = questInfos.length;\r\n        for (uint256 i; i < batch; ) {\r\n            uint256 tokenId = questInfos[i].tokenId;\r\n            require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [argonaut tokenId]\");\r\n\r\n            _resetCrew(tokenId);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < batch; ) {\r\n            uint256 tokenId = questInfos[i].tokenId;\r\n            uint256[] calldata argopetzTokenIds = questInfos[i].argopetzTokenIds;\r\n\r\n            require(argopetzTokenIds.length <= maxCrews, \"too many crews [argopetzTokenIds]\");\r\n\r\n            _addCrew(tokenId, argopetzTokenIds);\r\n            emit QuestEdited(msg.sender, tokenId, tokensLastQuestedAt[tokenId], argopetzTokenIds, block.timestamp);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchStopQuest(uint256[] calldata tokenIds) external {\r\n        uint256 batch = tokenIds.length;\r\n        for (uint256 i; i < batch; ) {\r\n            stopQuest(tokenIds[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function startQuest(uint256 tokenId, uint256[] calldata argopetzTokenIds) public {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(argopetz) != address(0), \"argopetz not set\");\r\n        require(tokensLastQuestedAt[tokenId] == 0, \"quested already started for [argonaut tokenId]\");\r\n        require(argopetzTokenIds.length <= maxCrews, \"too many crews [argopetzTokenIds]\");\r\n        _addCrew(tokenId, argopetzTokenIds);\r\n\r\n        tokensLastQuestedAt[tokenId] = block.timestamp;\r\n\r\n        emit QuestStarted(msg.sender, tokenId, block.timestamp, argopetzTokenIds);\r\n    }\r\n\r\n    function editQuest(uint256 tokenId, uint256[] calldata argopetzTokenIds) public {\r\n        require(canQuest, \"questing not open\");\r\n        require(address(argopetz) != address(0), \"argopetz not set\");\r\n        require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [argonaut tokenId]\");\r\n        require(argopetzTokenIds.length <= maxCrews, \"too many crews [argopetzTokenIds]\");\r\n\r\n        _resetCrew(tokenId);\r\n        _addCrew(tokenId, argopetzTokenIds);\r\n\r\n        emit QuestEdited(msg.sender, tokenId, tokensLastQuestedAt[tokenId], argopetzTokenIds, block.timestamp);\r\n    }\r\n\r\n    function _addCrew(uint256 tokenId, uint256[] calldata argopetzTokenIds) private {\r\n        uint256 crews = argopetzTokenIds.length;\r\n        argonautsOwners[tokenId] = msg.sender;\r\n        uint256[] memory wrapper = new uint256[](1);\r\n        wrapper[0] = tokenId;\r\n        if (crews >= 1) {\r\n            for (uint256 i; i < crews; ) {\r\n                uint256 pTokenId = argopetzTokenIds[i];\r\n                argopetzOwners[pTokenId] = msg.sender;\r\n                uint256[] storage existCheck = argopetzCrew[pTokenId];\r\n                if (existCheck.length != 0) {\r\n                    removeCrew(pTokenId);\r\n                }\r\n                argopetz.safeTransferFrom(msg.sender, address(this), pTokenId);\r\n                argopetzCrew[pTokenId] = wrapper;\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n            questCrews[tokenId] = argopetzTokenIds;\r\n        }\r\n        argonauts.safeTransferFrom(msg.sender, address(this), tokenId);\r\n    }\r\n\r\n    function removeCrew(uint256 argopetzTokenId) public {\r\n        require(address(argopetz) != address(0), \"argopetz not set\");\r\n        require(argopetzOwners[argopetzTokenId] == msg.sender, \"not argopetz owner\");\r\n\r\n        uint256[] storage existCheck = argopetzCrew[argopetzTokenId];\r\n        require(existCheck.length != 0, \"argopetzTokenId not questing\");\r\n        uint256 tokenId = existCheck[0];\r\n        uint256 empty = MAX_SUPPLY;\r\n\r\n        uint256[] memory pTokenIds = questCrews[tokenId];\r\n        uint256 crews = pTokenIds.length;\r\n        uint256 crewLength = pTokenIds.length;\r\n        for (uint256 i; i < crews; ) {\r\n            uint256 pTokenId = pTokenIds[i];\r\n            if (pTokenId == argopetzTokenId) {\r\n                argopetzOwners[pTokenId] = address(0);\r\n                pTokenIds[i] = empty;\r\n                crewLength--;\r\n                // Transfer back to owner\r\n                argopetz.safeTransferFrom(address(this), msg.sender, pTokenId);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        require(pTokenIds.length != crewLength, \"argopetzTokenId not in crew\");\r\n\r\n        uint256[] memory newCrews = new uint256[](crewLength);\r\n        uint256 activeIdx;\r\n        for (uint256 i; i < crews; ) {\r\n            if (pTokenIds[i] != empty) {\r\n                newCrews[activeIdx++] = pTokenIds[i];\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        questCrews[tokenId] = newCrews;\r\n        argopetzCrew[argopetzTokenId] = new uint256[](0);\r\n    }\r\n\r\n    function _resetCrew(uint256 tokenId) private {\r\n        uint256[] storage argopetzTokenIds = questCrews[tokenId];\r\n        uint256 crews = argopetzTokenIds.length;\r\n        if (crews >= 1) {\r\n            uint256[] memory empty = new uint256[](0);\r\n            for (uint256 i; i < crews; ) {\r\n                uint256 pTokenId = argopetzTokenIds[i];\r\n                argopetzCrew[pTokenId] = empty;\r\n                // Transfer back to owner\r\n                argopetz.safeTransferFrom(address(this), argopetzOwners[pTokenId], pTokenId);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n            questCrews[tokenId] = empty;\r\n        }\r\n        argonauts.safeTransferFrom(address(this), argonautsOwners[tokenId], tokenId);\r\n    }\r\n\r\n    function stopQuest(uint256 tokenId) public {\r\n        require(tokensLastQuestedAt[tokenId] > 0, \"quested not started for [argonaut tokenId]\");\r\n        require(argonautsOwners[tokenId] == msg.sender, \"not argonauts owner\");\r\n        _resetCrew(tokenId);\r\n\r\n        uint256 tlqa = tokensLastQuestedAt[tokenId];\r\n        tokensLastQuestedAt[tokenId] = 0;\r\n        emit QuestStopped(msg.sender, tokenId, tlqa, block.timestamp);\r\n    }\r\n\r\n    function isArgopetzQuesting(uint256 tokenId) external view returns (bool) {\r\n        uint256[] storage existCheck = argopetzCrew[tokenId];\r\n        return existCheck.length > 0;\r\n    }\r\n\r\n    function getTokenInfo(\r\n        uint256 tokenId\r\n    ) external view returns (uint256 lastQuestedAt, uint256[] memory crewTokenIds) {\r\n        return (tokensLastQuestedAt[tokenId], questCrews[tokenId]);\r\n    }\r\n\r\n    // =============== Admin ===============\r\n\r\n    function setCanQuest(bool b) external onlyOwner {\r\n        canQuest = b;\r\n    }\r\n\r\n    function setArgopetz(address addr) external onlyOwner {\r\n        argopetz = IERC721(addr);\r\n    }\r\n\r\n    function setArgonauts(address addr) external onlyOwner {\r\n        argonauts = IERC721(addr);\r\n    }\r\n\r\n    function setMaxQuest(uint8 n) external onlyOwner {\r\n        maxCrews = n;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}