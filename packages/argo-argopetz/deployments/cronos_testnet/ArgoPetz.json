{
  "address": "0x56EC8c71B5D5D6F93d6B628b7FD706ef4da7C0dF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply_",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMoreTokenIds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongFrom",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_MAX_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_SIGNER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setPublicMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newStage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9eb4edc03e0dc530993cd7a992f59cab2239c7b6341aa9c5e6f1e8d28e3ec617",
  "receipt": {
    "to": null,
    "from": "0x865F4c222D7B23365C7Eb2F4f74d1a2533CD663E",
    "contractAddress": "0x56EC8c71B5D5D6F93d6B628b7FD706ef4da7C0dF",
    "transactionIndex": 4,
    "gasUsed": "2571978",
    "logsBloom": "0x
    "blockHash": "0x55481154e3c8f7bf2883a8c1c6956e70ce6727ecf3fd832544b8bc4f372cbd0f",
    "transactionHash": "0x9eb4edc03e0dc530993cd7a992f59cab2239c7b6341aa9c5e6f1e8d28e3ec617",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 10576269,
        "transactionHash": "0x9eb4edc03e0dc530993cd7a992f59cab2239c7b6341aa9c5e6f1e8d28e3ec617",
        "address": "0x56EC8c71B5D5D6F93d6B628b7FD706ef4da7C0dF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000865f4c222d7b23365c7eb2f4f74d1a2533cd663e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x55481154e3c8f7bf2883a8c1c6956e70ce6727ecf3fd832544b8bc4f372cbd0f"
      }
    ],
    "blockNumber": 10576269,
    "cumulativeGasUsed": "3645442",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Mock Minion",
    "Minion",
    "https://testnet-api.argopetz.com/api/v1/argopetz/",
    8888,
    "0x865F4c222D7B23365C7Eb2F4f74d1a2533CD663E",
    "0x6A952f966c5DcC36A094c8AB141f027fb58F864e"
  ],
  "numDeployments": 2,
  "solcInputHash": "9e920c4dc57df6517e7a5f2bbf019a45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreTokenIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongFrom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MAX_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_SIGNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newStage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistMintPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotMinted()\":[{\"notice\":\"----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------\"}]},\"events\":{\"Transfer(address,address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- Events -----------------------------------------------------------------------\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------\"},\"getApproved(uint256)\":{\"notice\":\"----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------\"},\"name()\":{\"notice\":\"----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArgoPetz.sol\":\"ArgoPetz\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ArgoPetz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./common/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\nerror InvalidTokenId();\\r\\nerror NoMoreTokenIds();\\r\\nerror WithdrawFailed();\\r\\n\\r\\n// Cred: Elementals contract -> learning from the best!\\r\\ncontract ArgoPetz is ERC2981, ERC721, Ownable {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    uint16 public immutable MAX_SUPPLY;\\r\\n    uint16 internal _numAvailableRemainingTokens;\\r\\n    // Data structure used for Fisher Yates shuffle\\r\\n    uint16[65536] internal _availableRemainingTokens;\\r\\n    uint256 public constant PUBLIC_MAX_MINT = 20;\\r\\n    uint256 public constant WHITELIST_MAX_MINT = 5;\\r\\n    address public immutable WITHDRAW_ADDRESS;\\r\\n    address public immutable WHITELIST_SIGNER_ADDRESS;\\r\\n    mapping(address => uint256) public whitelistMintCount;\\r\\n    mapping(address => uint256) public publicMintCount;\\r\\n    uint256 public whitelistMintPrice = 1 ether;\\r\\n    uint256 public publicMintPrice = 2 ether;\\r\\n    uint8 public stage;\\r\\n    string public baseURI;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseURI,\\r\\n        uint16 maxSupply_,\\r\\n        address withdrawAddress,\\r\\n        address _whitelistSignerAddress\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        MAX_SUPPLY = maxSupply_;\\r\\n        _numAvailableRemainingTokens = maxSupply_;\\r\\n        setBaseURI(_baseURI);\\r\\n        WITHDRAW_ADDRESS = withdrawAddress;\\r\\n        WHITELIST_SIGNER_ADDRESS = _whitelistSignerAddress;\\r\\n    }\\r\\n\\r\\n    // ---------------\\r\\n    // Name and symbol\\r\\n    // ---------------\\r\\n    function setNameAndSymbol(string calldata _newName, string calldata _newSymbol) external onlyOwner {\\r\\n        name = _newName;\\r\\n        symbol = _newSymbol;\\r\\n    }\\r\\n\\r\\n    function _useRandomAvailableTokenId() internal returns (uint256) {\\r\\n        uint256 numAvailableRemainingTokens = _numAvailableRemainingTokens;\\r\\n        if (numAvailableRemainingTokens == 0) {\\r\\n            revert NoMoreTokenIds();\\r\\n        }\\r\\n\\r\\n        uint256 randomNum = _getRandomNum(numAvailableRemainingTokens);\\r\\n        uint256 randomIndex = randomNum % numAvailableRemainingTokens;\\r\\n        uint256 valAtIndex = _availableRemainingTokens[randomIndex];\\r\\n\\r\\n        uint256 result;\\r\\n        if (valAtIndex == 0) {\\r\\n            // This means the index itself is still an available token\\r\\n            result = randomIndex;\\r\\n        } else {\\r\\n            // This means the index itself is not an available token, but the val at that index is.\\r\\n            result = valAtIndex;\\r\\n        }\\r\\n\\r\\n        uint256 lastIndex = numAvailableRemainingTokens - 1;\\r\\n        if (randomIndex != lastIndex) {\\r\\n            // Replace the value at randomIndex, now that it's been used.\\r\\n            // Replace it with the data from the last index in the array, since we are going to decrease the array size afterwards.\\r\\n            uint256 lastValInArray = _availableRemainingTokens[lastIndex];\\r\\n            if (lastValInArray == 0) {\\r\\n                // This means the index itself is still an available token\\r\\n                // Cast is safe as we know that lastIndex cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastIndex);\\r\\n            } else {\\r\\n                // This means the index itself is not an available token, but the val at that index is.\\r\\n                // Cast is safe as we know that lastValInArray cannot > MAX_SUPPLY, which is a uint16\\r\\n                _availableRemainingTokens[randomIndex] = uint16(lastValInArray);\\r\\n                delete _availableRemainingTokens[lastIndex];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        --_numAvailableRemainingTokens;\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function _getRandomNum(uint256 numAvailableRemainingTokens) internal view returns (uint256) {\\r\\n        return\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        block.prevrandao,\\r\\n                        blockhash(block.number - 1),\\r\\n                        address(this),\\r\\n                        numAvailableRemainingTokens\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function whitelistMint(\\r\\n        address to,\\r\\n        uint256 _amount,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature\\r\\n    ) external payable {\\r\\n        // Check if user is whitelisted\\r\\n        require(whitelistSigned(msg.sender, nonce, signature, stage), \\\"ArgoPetz: Invalid Signature!\\\");\\r\\n\\r\\n        // Check if whitelist sale is open\\r\\n        require(stage == 1, \\\"ArgoPetz: Whitelist Mint is not open\\\");\\r\\n\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * whitelistMintPrice, \\\"ArgoPetz: Insufficient CRO!\\\");\\r\\n\\r\\n        // Check if mints does not exceed MAX_SUPPLY\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"ArgoPetz: Exceeded Max Supply for ArgoPetz!\\\");\\r\\n\\r\\n        // Check if mints does not exceed max wallet allowance for public sale\\r\\n        require(\\r\\n            whitelistMintCount[msg.sender] + _amount <= WHITELIST_MAX_MINT,\\r\\n            \\\"ArgoPetz: Wallet has already minted Max Amount for Whitelist Mint!\\\"\\r\\n        );\\r\\n\\r\\n        whitelistMintCount[msg.sender] += _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = _useRandomAvailableTokenId();\\r\\n            _safeMint(to, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function publicMint(address to, uint256 _amount) external payable {\\r\\n        // Check if public sale is open\\r\\n        require(stage == 2, \\\"ArgoPetz: Public Sale Closed!\\\");\\r\\n        // Check if enough ETH is sent\\r\\n        require(msg.value == _amount * publicMintPrice, \\\"ArgoPetz: Insufficient CRO!\\\");\\r\\n\\r\\n        // Check if mints does not exceed total max supply\\r\\n        require(totalSupply() + _amount <= MAX_SUPPLY, \\\"ArgoPetz: Max Supply for Public Mint Reached!\\\");\\r\\n        // Check if mints does not exceed max wallet allowance for public sale\\r\\n        require(\\r\\n            publicMintCount[msg.sender] + _amount <= PUBLIC_MAX_MINT,\\r\\n            \\\"ArgoPetz: Wallet has already minted Max Amount for Public Mint!\\\"\\r\\n        );\\r\\n        publicMintCount[msg.sender] += _amount;\\r\\n        for (uint256 i; i < _amount; ) {\\r\\n            uint256 tokenId = _useRandomAvailableTokenId();\\r\\n            _safeMint(to, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        bytes calldata nonce,\\r\\n        bytes calldata signature,\\r\\n        uint8 _stage\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce, _stage));\\r\\n        return WHITELIST_SIGNER_ADDRESS == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        (bool sent, ) = WITHDRAW_ADDRESS.call{ value: address(this).balance }(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Mint\\r\\n    // ------------\\r\\n\\r\\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\\r\\n        publicMintPrice = _publicMintPrice;\\r\\n    }\\r\\n\\r\\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\\r\\n        whitelistMintPrice = _whitelistMintPrice;\\r\\n    }\\r\\n\\r\\n    function setStage(uint8 _newStage) public onlyOwner {\\r\\n        stage = _newStage;\\r\\n    }\\r\\n\\r\\n    // ------------\\r\\n    // Total Supply\\r\\n    // ------------\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        unchecked {\\r\\n            // Does not need to account for burns as they aren't supported.\\r\\n            return MAX_SUPPLY - _numAvailableRemainingTokens;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // Metadata\\r\\n    // --------\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        if (_ownerOf[tokenId] == address(0)) {\\r\\n            revert InvalidTokenId();\\r\\n        }\\r\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _baseURI_) public onlyOwner {\\r\\n        baseURI = _baseURI_;\\r\\n    }\\r\\n\\r\\n    // --------\\r\\n    // EIP-2981\\r\\n    // --------\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) external onlyOwner {\\r\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    // -------\\r\\n    // EIP-165\\r\\n    // -------\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC2981) returns (bool) {\\r\\n        return ERC721.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbfbfee7442b23ea6f127b31a099c3f5e8c4833a109e998f63f365a2c8e3e953c\",\"license\":\"MIT\"},\"contracts/common/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721 {\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\r\\n\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Custom Errors\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    error NotMinted();\\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    error Unauthorized();\\r\\n\\r\\n    error WrongFrom();\\r\\n\\r\\n    error InvalidRecipient();\\r\\n\\r\\n    error UnsafeRecipient();\\r\\n\\r\\n    error AlreadyMinted();\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Metadata Storage/Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Balance/Owner Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    mapping(address => uint256) internal _balanceOf;\\r\\n\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) revert ZeroAddress();\\r\\n        return _balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Approval Storage\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC721 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function approve(address spender, uint256 id) public virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert Unauthorized();\\r\\n\\r\\n        getApproved[id] = spender;\\r\\n\\r\\n        emit Approval(owner, spender, id);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\r\\n        if (from != _ownerOf[id]) revert WrongFrom();\\r\\n\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\\r\\n            revert Unauthorized();\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            _balanceOf[from]--;\\r\\n\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC165 Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Mint/Burn Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        if (to == address(0)) revert InvalidRecipient();\\r\\n\\r\\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            _balanceOf[to]++;\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = _ownerOf[id];\\r\\n\\r\\n        if (owner == address(0)) revert NotMinted();\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            _balanceOf[owner]--;\\r\\n        }\\r\\n\\r\\n        delete _ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, address(0), id);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Internal Safe Mint Logic\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        if (to.code.length != 0) {\\r\\n            if (\\r\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\\r\\n                ERC721TokenReceiver.onERC721Received.selector\\r\\n            ) revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\r\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\r\\nabstract contract ERC721TokenReceiver {\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\r\\n        return ERC721TokenReceiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7999b2698cc38cee8f1723fd3340fef08a726f4bd6eb82761c06a06ed5478c8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052670de0b6b3a764000061100b55671bc16d674ec8000061100c553480156200002b57600080fd5b5060405162002ef838038062002ef88339810160408190526200004e916200028c565b858560026200005e8382620003eb565b5060036200006d8282620003eb565b5050506200008a62000084620000d660201b60201c565b620000da565b61ffff831660808190526008805461ffff60a01b1916600160a01b909202919091179055620000b9846200012c565b6001600160a01b0391821660a0521660c05250620004b792505050565b3390565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200013662000149565b61100e620001458282620003eb565b5050565b6008546001600160a01b03163314620001a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d257600080fd5b81516001600160401b0380821115620001ef57620001ef620001aa565b604051601f8301601f19908116603f011681019082821181831017156200021a576200021a620001aa565b816040528381526020925086838588010111156200023757600080fd5b600091505b838210156200025b57858201830151818301840152908201906200023c565b600093810190920192909252949350505050565b80516001600160a01b03811681146200028757600080fd5b919050565b60008060008060008060c08789031215620002a657600080fd5b86516001600160401b0380821115620002be57600080fd5b620002cc8a838b01620001c0565b97506020890151915080821115620002e357600080fd5b620002f18a838b01620001c0565b965060408901519150808211156200030857600080fd5b506200031789828a01620001c0565b945050606087015161ffff811681146200033057600080fd5b925062000340608088016200026f565b91506200035060a088016200026f565b90509295509295509295565b600181811c908216806200037157607f821691505b6020821081036200039257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e657600081815260208120601f850160051c81016020861015620003c15750805b601f850160051c820191505b81811015620003e257828155600101620003cd565b5050505b505050565b81516001600160401b03811115620004075762000407620001aa565b6200041f816200041884546200035c565b8462000398565b602080601f8311600181146200045757600084156200043e5750858301515b600019600386901b1c1916600185901b178555620003e2565b600085815260208120601f198616915b82811015620004885788860151825594840194600190910190840162000467565b5085821015620004a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c0516129ee6200050a60003960008181610610015261185101526000818161032e0152610b7f0152600081816103e40152818161093c01528181610f99015261132201526129ee6000f3fe6080604052600436106102305760003560e01c80636c0360eb1161012e578063aeb16768116100ab578063ce3cd9971161006f578063ce3cd997146106fc578063ce6df2b91461071c578063dc53fd921461072f578063e985e9c514610746578063f2fde38b1461078157600080fd5b8063aeb1676814610667578063b20563061461067c578063b88d4fde1461068f578063c040e6b8146106af578063c87b56dd146106dc57600080fd5b806396330b5f116100f257806396330b5f146105b0578063a22cb465146105de578063a591c4cb146105fe578063a611708e14610632578063a73467801461065257600080fd5b80636c0360eb1461053357806370a0823114610548578063715018a6146105685780638da5cb5b1461057d57806395d89b411461059b57600080fd5b806332cb6b0c116101bc57806355f804b31161018057806355f804b3146104935780635944c753146104b35780635a446215146104d35780635d82cf6e146104f35780636352211e1461051357600080fd5b806332cb6b0c146103d257806335c6aaf8146104195780633bdf4ac6146104305780633ccfd60b1461045e57806342842e0e1461047357600080fd5b8063095ea7b311610203578063095ea7b3146102fc578063122e04a81461031c57806318160ddd1461035057806323b872dd146103735780632a55205a1461039357600080fd5b806301ffc9a71461023557806304634d8d1461026a57806306fdde031461028c578063081812fc146102ae575b600080fd5b34801561024157600080fd5b5061025561025036600461208b565b6107a1565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a6102853660046120dd565b6107c1565b005b34801561029857600080fd5b506102a16107d7565b6040516102619190612134565b3480156102ba57600080fd5b506102e46102c9366004612167565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610261565b34801561030857600080fd5b5061028a610317366004612180565b610865565b34801561032857600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561035c57600080fd5b5061036561092a565b604051908152602001610261565b34801561037f57600080fd5b5061028a61038e3660046121aa565b610960565b34801561039f57600080fd5b506103b36103ae3660046121e6565b610acd565b604080516001600160a01b039093168352602083019190915201610261565b3480156103de57600080fd5b506104067f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610261565b34801561042557600080fd5b5061036561100b5481565b34801561043c57600080fd5b5061036561044b366004612208565b6110096020526000908152604090205481565b34801561046a57600080fd5b5061028a610b7b565b34801561047f57600080fd5b5061028a61048e3660046121aa565b610c12565b34801561049f57600080fd5b5061028a6104ae366004612239565b610ce5565b3480156104bf57600080fd5b5061028a6104ce3660046122ea565b610cfa565b3480156104df57600080fd5b5061028a6104ee366004612368565b610d0d565b3480156104ff57600080fd5b5061028a61050e366004612167565b610d37565b34801561051f57600080fd5b506102e461052e366004612167565b610d45565b34801561053f57600080fd5b506102a1610d80565b34801561055457600080fd5b50610365610563366004612208565b610d8e565b34801561057457600080fd5b5061028a610dd3565b34801561058957600080fd5b506008546001600160a01b03166102e4565b3480156105a757600080fd5b506102a1610de7565b3480156105bc57600080fd5b506103656105cb366004612208565b61100a6020526000908152604090205481565b3480156105ea57600080fd5b5061028a6105f93660046123d4565b610df4565b34801561060a57600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561063e57600080fd5b5061028a61064d366004612167565b610e60565b34801561065e57600080fd5b50610365601481565b34801561067357600080fd5b50610365600581565b61028a61068a366004612410565b610e6e565b34801561069b57600080fd5b5061028a6106aa36600461249a565b611128565b3480156106bb57600080fd5b5061100d546106ca9060ff1681565b60405160ff9091168152602001610261565b3480156106e857600080fd5b506102a16106f7366004612167565b6111e4565b34801561070857600080fd5b5061028a610717366004612509565b61124f565b61028a61072a366004612180565b61126e565b34801561073b57600080fd5b5061036561100c5481565b34801561075257600080fd5b5061025561076136600461252c565b600760209081526000928352604080842090915290825290205460ff1681565b34801561078d57600080fd5b5061028a61079c366004612208565b61149f565b60006107ac82611515565b806107bb57506107bb82611563565b92915050565b6107c9611598565b6107d382826115f2565b5050565b600280546107e490612556565b80601f016020809104026020016040519081016040528092919081815260200182805461081090612556565b801561085d5780601f106108325761010080835404028352916020019161085d565b820191906000526020600020905b81548152906001019060200180831161084057829003601f168201915b505050505081565b6000818152600460205260409020546001600160a01b03163381148015906108b157506001600160a01b038116600090815260076020908152604080832033845290915290205460ff16155b156108ce576040516282b42960e81b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60085461ffff600160a01b90910481167f0000000000000000000000000000000000000000000000000000000000000000031690565b6000818152600460205260409020546001600160a01b0384811691161461099a5760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b0382166109c157604051634e46966960e11b815260040160405180910390fd5b336001600160a01b038416148015906109fe57506001600160a01b038316600090815260076020908152604080832033845290915290205460ff16155b8015610a2157506000818152600660205260409020546001600160a01b03163314155b15610a3e576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526005602090815260408083208054600019019055938616808352848320805460010190558583526004825284832080546001600160a01b03199081168317909155600690925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610b425750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b61906001600160601b0316876125a6565b610b6b91906125d3565b91519350909150505b9250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114610be8576040519150601f19603f3d011682016040523d82523d6000602084013e610bed565b606091505b5050905080610c0f57604051631d42c86760e21b815260040160405180910390fd5b50565b610c1d838383610960565b6001600160a01b0382163b15610ce057604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb891906125e7565b6001600160e01b03191614610ce057604051633da6393160e01b815260040160405180910390fd5b505050565b610ced611598565b61100e6107d38282612652565b610d02611598565b610ce08383836116ac565b610d15611598565b6002610d22848683612712565b506003610d30828483612712565b5050505050565b610d3f611598565b61100c55565b6000818152600460205260409020546001600160a01b031680610d7b57604051634d5e5fb360e01b815260040160405180910390fd5b919050565b61100e80546107e490612556565b60006001600160a01b038216610db75760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205490565b610ddb611598565b610de56000611777565b565b600380546107e490612556565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e68611598565b61100b55565b61100d54610e88903390869086908690869060ff166117c9565b610ed95760405162461bcd60e51b815260206004820152601c60248201527f4172676f5065747a3a20496e76616c6964205369676e6174757265210000000060448201526064015b60405180910390fd5b61100d5460ff16600114610f3b5760405162461bcd60e51b8152602060048201526024808201527f4172676f5065747a3a2057686974656c697374204d696e74206973206e6f742060448201526337b832b760e11b6064820152608401610ed0565b61100b54610f4990866125a6565b3414610f975760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610ed0565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1685610fc561092a565b610fcf91906127d2565b11156110315760405162461bcd60e51b815260206004820152602b60248201527f4172676f5065747a3a204578636565646564204d617820537570706c7920666f60448201526a72204172676f5065747a2160a81b6064820152608401610ed0565b33600090815261100960205260409020546005906110509087906127d2565b11156110cf5760405162461bcd60e51b815260206004820152604260248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f722057686974656c697374204d696e606482015261742160f01b608482015260a401610ed0565b3360009081526110096020526040812080548792906110ef9084906127d2565b90915550600090505b8581101561111f57600061110a611887565b90506111168882611a63565b506001016110f8565b50505050505050565b611133858585610960565b6001600160a01b0384163b15610d3057604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906111799033908a908990899089906004016127e5565b6020604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc91906125e7565b6001600160e01b03191614610d3057604051633da6393160e01b815260040160405180910390fd5b6000818152600460205260409020546060906001600160a01b031661121c576040516307ed98ed60e31b815260040160405180910390fd5b61100e61122883611b2d565b604051602001611239929190612839565b6040516020818303038152906040529050919050565b611257611598565b61100d805460ff191660ff92909216919091179055565b61100d5460ff166002146112c45760405162461bcd60e51b815260206004820152601d60248201527f4172676f5065747a3a205075626c69632053616c6520436c6f736564210000006044820152606401610ed0565b61100c546112d290826125a6565b34146113205760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610ed0565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161134e61092a565b61135891906127d2565b11156113bc5760405162461bcd60e51b815260206004820152602d60248201527f4172676f5065747a3a204d617820537570706c7920666f72205075626c69632060448201526c4d696e7420526561636865642160981b6064820152608401610ed0565b33600090815261100a60205260409020546014906113db9083906127d2565b111561144f5760405162461bcd60e51b815260206004820152603f60248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f72205075626c6963204d696e7421006064820152608401610ed0565b33600090815261100a60205260408120805483929061146f9084906127d2565b90915550600090505b81811015610ce057600061148a611887565b90506114968482611a63565b50600101611478565b6114a7611598565b6001600160a01b03811661150c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ed0565b610c0f81611777565b60006301ffc9a760e01b6001600160e01b03198316148061154657506380ac58cd60e01b6001600160e01b03198316145b806107bb5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b14806107bb57506301ffc9a760e01b6001600160e01b03198316146107bb565b6008546001600160a01b03163314610de55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ed0565b6127106001600160601b038216111561161d5760405162461bcd60e51b8152600401610ed0906128c0565b6001600160a01b0382166116735760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610ed0565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6127106001600160601b03821611156116d75760405162461bcd60e51b8152600401610ed0906128c0565b6001600160a01b03821661172d5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610ed0565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080878787856040516020016117e3949392919061290a565b60405160208183030381529060405280519060200120905061184685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506118409250859150611bc09050565b90611c13565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b600854600090600160a01b900461ffff168082036118b85760405163aeb0cc9b60e01b815260040160405180910390fd5b60006118c382611c37565b905060006118d18383612947565b905060006009826201000081106118ea576118ea61295b565b601091828204019190066002029054906101000a900461ffff1661ffff16905060008160000361191b57508161191e565b50805b600061192b600187612971565b9050808414611a2257600060098262010000811061194b5761194b61295b565b601091828204019190066002029054906101000a900461ffff1661ffff169050806000036119b357816009866201000081106119895761198961295b565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550611a20565b806009866201000081106119c9576119c961295b565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600982620100008110611a0357611a0361295b565b601091828204019190066002026101000a81549061ffff02191690555b505b60088054601490611a3d90600160a01b900461ffff16612984565b91906101000a81548161ffff021916908361ffff16021790555081965050505050505090565b611a6d8282611c85565b6001600160a01b0382163b156107d357604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a4016020604051808303816000875af1158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0591906125e7565b6001600160e01b031916146107d357604051633da6393160e01b815260040160405180910390fd5b60606000611b3a83611d4d565b600101905060008167ffffffffffffffff811115611b5a57611b5a612223565b6040519080825280601f01601f191660200182016040528015611b84576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b8e57509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000806000611c228585611e25565b91509150611c2f81611e67565b509392505050565b600044611c45600143612971565b6040805160208101939093529040908201523060608201526080810183905260a00160408051601f19818403018152919052805160209091012092915050565b6001600160a01b038216611cac57604051634e46966960e11b815260040160405180910390fd5b6000818152600460205260409020546001600160a01b031615611ce257604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d8c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611db8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611dd657662386f26fc10000830492506010015b6305f5e1008310611dee576305f5e100830492506008015b6127108310611e0257612710830492506004015b60648310611e14576064830492506002015b600a83106107bb5760010192915050565b6000808251604103611e5b5760208301516040840151606085015160001a611e4f87828585611fb1565b94509450505050610b74565b50600090506002610b74565b6000816004811115611e7b57611e7b6129a2565b03611e835750565b6001816004811115611e9757611e976129a2565b03611ee45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ed0565b6002816004811115611ef857611ef86129a2565b03611f455760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ed0565b6003816004811115611f5957611f596129a2565b03610c0f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ed0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fe8575060009050600361206c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561203c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120655760006001925092505061206c565b9150600090505b94509492505050565b6001600160e01b031981168114610c0f57600080fd5b60006020828403121561209d57600080fd5b81356120a881612075565b9392505050565b80356001600160a01b0381168114610d7b57600080fd5b80356001600160601b0381168114610d7b57600080fd5b600080604083850312156120f057600080fd5b6120f9836120af565b9150612107602084016120c6565b90509250929050565b60005b8381101561212b578181015183820152602001612113565b50506000910152565b6020815260008251806020840152612153816040850160208701612110565b601f01601f19169190910160400192915050565b60006020828403121561217957600080fd5b5035919050565b6000806040838503121561219357600080fd5b61219c836120af565b946020939093013593505050565b6000806000606084860312156121bf57600080fd5b6121c8846120af565b92506121d6602085016120af565b9150604084013590509250925092565b600080604083850312156121f957600080fd5b50508035926020909101359150565b60006020828403121561221a57600080fd5b6120a8826120af565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561224b57600080fd5b813567ffffffffffffffff8082111561226357600080fd5b818401915084601f83011261227757600080fd5b81358181111561228957612289612223565b604051601f8201601f19908116603f011681019083821181831017156122b1576122b1612223565b816040528281528760208487010111156122ca57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000606084860312156122ff57600080fd5b8335925061230f602085016120af565b915061231d604085016120c6565b90509250925092565b60008083601f84011261233857600080fd5b50813567ffffffffffffffff81111561235057600080fd5b602083019150836020828501011115610b7457600080fd5b6000806000806040858703121561237e57600080fd5b843567ffffffffffffffff8082111561239657600080fd5b6123a288838901612326565b909650945060208701359150808211156123bb57600080fd5b506123c887828801612326565b95989497509550505050565b600080604083850312156123e757600080fd5b6123f0836120af565b91506020830135801515811461240557600080fd5b809150509250929050565b6000806000806000806080878903121561242957600080fd5b612432876120af565b955060208701359450604087013567ffffffffffffffff8082111561245657600080fd5b6124628a838b01612326565b9096509450606089013591508082111561247b57600080fd5b5061248889828a01612326565b979a9699509497509295939492505050565b6000806000806000608086880312156124b257600080fd5b6124bb866120af565b94506124c9602087016120af565b935060408601359250606086013567ffffffffffffffff8111156124ec57600080fd5b6124f888828901612326565b969995985093965092949392505050565b60006020828403121561251b57600080fd5b813560ff811681146120a857600080fd5b6000806040838503121561253f57600080fd5b612548836120af565b9150612107602084016120af565b600181811c9082168061256a57607f821691505b60208210810361258a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107bb576107bb612590565b634e487b7160e01b600052601260045260246000fd5b6000826125e2576125e26125bd565b500490565b6000602082840312156125f957600080fd5b81516120a881612075565b601f821115610ce057600081815260208120601f850160051c8101602086101561262b5750805b601f850160051c820191505b8181101561264a57828155600101612637565b505050505050565b815167ffffffffffffffff81111561266c5761266c612223565b6126808161267a8454612556565b84612604565b602080601f8311600181146126b5576000841561269d5750858301515b600019600386901b1c1916600185901b17855561264a565b600085815260208120601f198616915b828110156126e4578886015182559484019460019091019084016126c5565b50858210156127025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83111561272a5761272a612223565b61273e836127388354612556565b83612604565b6000601f841160018114612772576000851561275a5750838201355b600019600387901b1c1916600186901b178355610d30565b600083815260209020601f19861690835b828110156127a35786850135825560209485019460019092019101612783565b50868210156127c05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b808201808211156107bb576107bb612590565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600080845461284781612556565b6001828116801561285f5760018114612874576128a3565b60ff19841687528215158302870194506128a3565b8860005260208060002060005b8581101561289a5781548a820152908401908201612881565b50505082870194505b5050505083516128b7818360208801612110565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b600082612956576129566125bd565b500690565b634e487b7160e01b600052603260045260246000fd5b818103818111156107bb576107bb612590565b600061ffff82168061299857612998612590565b6000190192915050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220821d10d3357c6203c1369c7a0148f4cf44e65f5d6901acd7976d70beda0c0a5964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636c0360eb1161012e578063aeb16768116100ab578063ce3cd9971161006f578063ce3cd997146106fc578063ce6df2b91461071c578063dc53fd921461072f578063e985e9c514610746578063f2fde38b1461078157600080fd5b8063aeb1676814610667578063b20563061461067c578063b88d4fde1461068f578063c040e6b8146106af578063c87b56dd146106dc57600080fd5b806396330b5f116100f257806396330b5f146105b0578063a22cb465146105de578063a591c4cb146105fe578063a611708e14610632578063a73467801461065257600080fd5b80636c0360eb1461053357806370a0823114610548578063715018a6146105685780638da5cb5b1461057d57806395d89b411461059b57600080fd5b806332cb6b0c116101bc57806355f804b31161018057806355f804b3146104935780635944c753146104b35780635a446215146104d35780635d82cf6e146104f35780636352211e1461051357600080fd5b806332cb6b0c146103d257806335c6aaf8146104195780633bdf4ac6146104305780633ccfd60b1461045e57806342842e0e1461047357600080fd5b8063095ea7b311610203578063095ea7b3146102fc578063122e04a81461031c57806318160ddd1461035057806323b872dd146103735780632a55205a1461039357600080fd5b806301ffc9a71461023557806304634d8d1461026a57806306fdde031461028c578063081812fc146102ae575b600080fd5b34801561024157600080fd5b5061025561025036600461208b565b6107a1565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a6102853660046120dd565b6107c1565b005b34801561029857600080fd5b506102a16107d7565b6040516102619190612134565b3480156102ba57600080fd5b506102e46102c9366004612167565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610261565b34801561030857600080fd5b5061028a610317366004612180565b610865565b34801561032857600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561035c57600080fd5b5061036561092a565b604051908152602001610261565b34801561037f57600080fd5b5061028a61038e3660046121aa565b610960565b34801561039f57600080fd5b506103b36103ae3660046121e6565b610acd565b604080516001600160a01b039093168352602083019190915201610261565b3480156103de57600080fd5b506104067f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610261565b34801561042557600080fd5b5061036561100b5481565b34801561043c57600080fd5b5061036561044b366004612208565b6110096020526000908152604090205481565b34801561046a57600080fd5b5061028a610b7b565b34801561047f57600080fd5b5061028a61048e3660046121aa565b610c12565b34801561049f57600080fd5b5061028a6104ae366004612239565b610ce5565b3480156104bf57600080fd5b5061028a6104ce3660046122ea565b610cfa565b3480156104df57600080fd5b5061028a6104ee366004612368565b610d0d565b3480156104ff57600080fd5b5061028a61050e366004612167565b610d37565b34801561051f57600080fd5b506102e461052e366004612167565b610d45565b34801561053f57600080fd5b506102a1610d80565b34801561055457600080fd5b50610365610563366004612208565b610d8e565b34801561057457600080fd5b5061028a610dd3565b34801561058957600080fd5b506008546001600160a01b03166102e4565b3480156105a757600080fd5b506102a1610de7565b3480156105bc57600080fd5b506103656105cb366004612208565b61100a6020526000908152604090205481565b3480156105ea57600080fd5b5061028a6105f93660046123d4565b610df4565b34801561060a57600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561063e57600080fd5b5061028a61064d366004612167565b610e60565b34801561065e57600080fd5b50610365601481565b34801561067357600080fd5b50610365600581565b61028a61068a366004612410565b610e6e565b34801561069b57600080fd5b5061028a6106aa36600461249a565b611128565b3480156106bb57600080fd5b5061100d546106ca9060ff1681565b60405160ff9091168152602001610261565b3480156106e857600080fd5b506102a16106f7366004612167565b6111e4565b34801561070857600080fd5b5061028a610717366004612509565b61124f565b61028a61072a366004612180565b61126e565b34801561073b57600080fd5b5061036561100c5481565b34801561075257600080fd5b5061025561076136600461252c565b600760209081526000928352604080842090915290825290205460ff1681565b34801561078d57600080fd5b5061028a61079c366004612208565b61149f565b60006107ac82611515565b806107bb57506107bb82611563565b92915050565b6107c9611598565b6107d382826115f2565b5050565b600280546107e490612556565b80601f016020809104026020016040519081016040528092919081815260200182805461081090612556565b801561085d5780601f106108325761010080835404028352916020019161085d565b820191906000526020600020905b81548152906001019060200180831161084057829003601f168201915b505050505081565b6000818152600460205260409020546001600160a01b03163381148015906108b157506001600160a01b038116600090815260076020908152604080832033845290915290205460ff16155b156108ce576040516282b42960e81b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60085461ffff600160a01b90910481167f0000000000000000000000000000000000000000000000000000000000000000031690565b6000818152600460205260409020546001600160a01b0384811691161461099a5760405163c6de3f2560e01b815260040160405180910390fd5b6001600160a01b0382166109c157604051634e46966960e11b815260040160405180910390fd5b336001600160a01b038416148015906109fe57506001600160a01b038316600090815260076020908152604080832033845290915290205460ff16155b8015610a2157506000818152600660205260409020546001600160a01b03163314155b15610a3e576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0380841660008181526005602090815260408083208054600019019055938616808352848320805460010190558583526004825284832080546001600160a01b03199081168317909155600690925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610b425750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b61906001600160601b0316876125a6565b610b6b91906125d3565b91519350909150505b9250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d8060008114610be8576040519150601f19603f3d011682016040523d82523d6000602084013e610bed565b606091505b5050905080610c0f57604051631d42c86760e21b815260040160405180910390fd5b50565b610c1d838383610960565b6001600160a01b0382163b15610ce057604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb891906125e7565b6001600160e01b03191614610ce057604051633da6393160e01b815260040160405180910390fd5b505050565b610ced611598565b61100e6107d38282612652565b610d02611598565b610ce08383836116ac565b610d15611598565b6002610d22848683612712565b506003610d30828483612712565b5050505050565b610d3f611598565b61100c55565b6000818152600460205260409020546001600160a01b031680610d7b57604051634d5e5fb360e01b815260040160405180910390fd5b919050565b61100e80546107e490612556565b60006001600160a01b038216610db75760405163d92e233d60e01b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205490565b610ddb611598565b610de56000611777565b565b600380546107e490612556565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e68611598565b61100b55565b61100d54610e88903390869086908690869060ff166117c9565b610ed95760405162461bcd60e51b815260206004820152601c60248201527f4172676f5065747a3a20496e76616c6964205369676e6174757265210000000060448201526064015b60405180910390fd5b61100d5460ff16600114610f3b5760405162461bcd60e51b8152602060048201526024808201527f4172676f5065747a3a2057686974656c697374204d696e74206973206e6f742060448201526337b832b760e11b6064820152608401610ed0565b61100b54610f4990866125a6565b3414610f975760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610ed0565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1685610fc561092a565b610fcf91906127d2565b11156110315760405162461bcd60e51b815260206004820152602b60248201527f4172676f5065747a3a204578636565646564204d617820537570706c7920666f60448201526a72204172676f5065747a2160a81b6064820152608401610ed0565b33600090815261100960205260409020546005906110509087906127d2565b11156110cf5760405162461bcd60e51b815260206004820152604260248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f722057686974656c697374204d696e606482015261742160f01b608482015260a401610ed0565b3360009081526110096020526040812080548792906110ef9084906127d2565b90915550600090505b8581101561111f57600061110a611887565b90506111168882611a63565b506001016110f8565b50505050505050565b611133858585610960565b6001600160a01b0384163b15610d3057604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906111799033908a908990899089906004016127e5565b6020604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc91906125e7565b6001600160e01b03191614610d3057604051633da6393160e01b815260040160405180910390fd5b6000818152600460205260409020546060906001600160a01b031661121c576040516307ed98ed60e31b815260040160405180910390fd5b61100e61122883611b2d565b604051602001611239929190612839565b6040516020818303038152906040529050919050565b611257611598565b61100d805460ff191660ff92909216919091179055565b61100d5460ff166002146112c45760405162461bcd60e51b815260206004820152601d60248201527f4172676f5065747a3a205075626c69632053616c6520436c6f736564210000006044820152606401610ed0565b61100c546112d290826125a6565b34146113205760405162461bcd60e51b815260206004820152601b60248201527f4172676f5065747a3a20496e73756666696369656e742043524f2100000000006044820152606401610ed0565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161134e61092a565b61135891906127d2565b11156113bc5760405162461bcd60e51b815260206004820152602d60248201527f4172676f5065747a3a204d617820537570706c7920666f72205075626c69632060448201526c4d696e7420526561636865642160981b6064820152608401610ed0565b33600090815261100a60205260409020546014906113db9083906127d2565b111561144f5760405162461bcd60e51b815260206004820152603f60248201527f4172676f5065747a3a2057616c6c65742068617320616c7265616479206d696e60448201527f746564204d617820416d6f756e7420666f72205075626c6963204d696e7421006064820152608401610ed0565b33600090815261100a60205260408120805483929061146f9084906127d2565b90915550600090505b81811015610ce057600061148a611887565b90506114968482611a63565b50600101611478565b6114a7611598565b6001600160a01b03811661150c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ed0565b610c0f81611777565b60006301ffc9a760e01b6001600160e01b03198316148061154657506380ac58cd60e01b6001600160e01b03198316145b806107bb5750506001600160e01b031916635b5e139f60e01b1490565b60006001600160e01b0319821663152a902d60e11b14806107bb57506301ffc9a760e01b6001600160e01b03198316146107bb565b6008546001600160a01b03163314610de55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ed0565b6127106001600160601b038216111561161d5760405162461bcd60e51b8152600401610ed0906128c0565b6001600160a01b0382166116735760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401610ed0565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600055565b6127106001600160601b03821611156116d75760405162461bcd60e51b8152600401610ed0906128c0565b6001600160a01b03821661172d5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610ed0565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080878787856040516020016117e3949392919061290a565b60405160208183030381529060405280519060200120905061184685858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506118409250859150611bc09050565b90611c13565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316149150509695505050505050565b600854600090600160a01b900461ffff168082036118b85760405163aeb0cc9b60e01b815260040160405180910390fd5b60006118c382611c37565b905060006118d18383612947565b905060006009826201000081106118ea576118ea61295b565b601091828204019190066002029054906101000a900461ffff1661ffff16905060008160000361191b57508161191e565b50805b600061192b600187612971565b9050808414611a2257600060098262010000811061194b5761194b61295b565b601091828204019190066002029054906101000a900461ffff1661ffff169050806000036119b357816009866201000081106119895761198961295b565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550611a20565b806009866201000081106119c9576119c961295b565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600982620100008110611a0357611a0361295b565b601091828204019190066002026101000a81549061ffff02191690555b505b60088054601490611a3d90600160a01b900461ffff16612984565b91906101000a81548161ffff021916908361ffff16021790555081965050505050505090565b611a6d8282611c85565b6001600160a01b0382163b156107d357604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a4016020604051808303816000875af1158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0591906125e7565b6001600160e01b031916146107d357604051633da6393160e01b815260040160405180910390fd5b60606000611b3a83611d4d565b600101905060008167ffffffffffffffff811115611b5a57611b5a612223565b6040519080825280601f01601f191660200182016040528015611b84576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611b8e57509392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000806000611c228585611e25565b91509150611c2f81611e67565b509392505050565b600044611c45600143612971565b6040805160208101939093529040908201523060608201526080810183905260a00160408051601f19818403018152919052805160209091012092915050565b6001600160a01b038216611cac57604051634e46966960e11b815260040160405180910390fd5b6000818152600460205260409020546001600160a01b031615611ce257604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611d8c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611db8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611dd657662386f26fc10000830492506010015b6305f5e1008310611dee576305f5e100830492506008015b6127108310611e0257612710830492506004015b60648310611e14576064830492506002015b600a83106107bb5760010192915050565b6000808251604103611e5b5760208301516040840151606085015160001a611e4f87828585611fb1565b94509450505050610b74565b50600090506002610b74565b6000816004811115611e7b57611e7b6129a2565b03611e835750565b6001816004811115611e9757611e976129a2565b03611ee45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ed0565b6002816004811115611ef857611ef86129a2565b03611f455760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ed0565b6003816004811115611f5957611f596129a2565b03610c0f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ed0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611fe8575060009050600361206c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561203c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120655760006001925092505061206c565b9150600090505b94509492505050565b6001600160e01b031981168114610c0f57600080fd5b60006020828403121561209d57600080fd5b81356120a881612075565b9392505050565b80356001600160a01b0381168114610d7b57600080fd5b80356001600160601b0381168114610d7b57600080fd5b600080604083850312156120f057600080fd5b6120f9836120af565b9150612107602084016120c6565b90509250929050565b60005b8381101561212b578181015183820152602001612113565b50506000910152565b6020815260008251806020840152612153816040850160208701612110565b601f01601f19169190910160400192915050565b60006020828403121561217957600080fd5b5035919050565b6000806040838503121561219357600080fd5b61219c836120af565b946020939093013593505050565b6000806000606084860312156121bf57600080fd5b6121c8846120af565b92506121d6602085016120af565b9150604084013590509250925092565b600080604083850312156121f957600080fd5b50508035926020909101359150565b60006020828403121561221a57600080fd5b6120a8826120af565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561224b57600080fd5b813567ffffffffffffffff8082111561226357600080fd5b818401915084601f83011261227757600080fd5b81358181111561228957612289612223565b604051601f8201601f19908116603f011681019083821181831017156122b1576122b1612223565b816040528281528760208487010111156122ca57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000606084860312156122ff57600080fd5b8335925061230f602085016120af565b915061231d604085016120c6565b90509250925092565b60008083601f84011261233857600080fd5b50813567ffffffffffffffff81111561235057600080fd5b602083019150836020828501011115610b7457600080fd5b6000806000806040858703121561237e57600080fd5b843567ffffffffffffffff8082111561239657600080fd5b6123a288838901612326565b909650945060208701359150808211156123bb57600080fd5b506123c887828801612326565b95989497509550505050565b600080604083850312156123e757600080fd5b6123f0836120af565b91506020830135801515811461240557600080fd5b809150509250929050565b6000806000806000806080878903121561242957600080fd5b612432876120af565b955060208701359450604087013567ffffffffffffffff8082111561245657600080fd5b6124628a838b01612326565b9096509450606089013591508082111561247b57600080fd5b5061248889828a01612326565b979a9699509497509295939492505050565b6000806000806000608086880312156124b257600080fd5b6124bb866120af565b94506124c9602087016120af565b935060408601359250606086013567ffffffffffffffff8111156124ec57600080fd5b6124f888828901612326565b969995985093965092949392505050565b60006020828403121561251b57600080fd5b813560ff811681146120a857600080fd5b6000806040838503121561253f57600080fd5b612548836120af565b9150612107602084016120af565b600181811c9082168061256a57607f821691505b60208210810361258a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107bb576107bb612590565b634e487b7160e01b600052601260045260246000fd5b6000826125e2576125e26125bd565b500490565b6000602082840312156125f957600080fd5b81516120a881612075565b601f821115610ce057600081815260208120601f850160051c8101602086101561262b5750805b601f850160051c820191505b8181101561264a57828155600101612637565b505050505050565b815167ffffffffffffffff81111561266c5761266c612223565b6126808161267a8454612556565b84612604565b602080601f8311600181146126b5576000841561269d5750858301515b600019600386901b1c1916600185901b17855561264a565b600085815260208120601f198616915b828110156126e4578886015182559484019460019091019084016126c5565b50858210156127025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff83111561272a5761272a612223565b61273e836127388354612556565b83612604565b6000601f841160018114612772576000851561275a5750838201355b600019600387901b1c1916600186901b178355610d30565b600083815260209020601f19861690835b828110156127a35786850135825560209485019460019092019101612783565b50868210156127c05760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b808201808211156107bb576107bb612590565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600080845461284781612556565b6001828116801561285f5760018114612874576128a3565b60ff19841687528215158302870194506128a3565b8860005260208060002060005b8581101561289a5781548a820152908401908201612881565b50505082870194505b5050505083516128b7818360208801612110565b01949350505050565b6020808252602a908201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646040820152692073616c65507269636560b01b606082015260800190565b6001600160601b03198560601b1681528284601483013760f89190911b6001600160f81b0319166014919092019081019190915260150192915050565b600082612956576129566125bd565b500690565b634e487b7160e01b600052603260045260246000fd5b818103818111156107bb576107bb612590565b600061ffff82168061299857612998612590565b6000190192915050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220821d10d3357c6203c1369c7a0148f4cf44e65f5d6901acd7976d70beda0c0a5964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotMinted()": [
        {
          "notice": "----------------------------------------------------------------------- Custom Errors -----------------------------------------------------------------------"
        }
      ]
    },
    "events": {
      "Transfer(address,address,uint256)": {
        "notice": "----------------------------------------------------------------------- Events -----------------------------------------------------------------------"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Logic -----------------------------------------------------------------------"
      },
      "getApproved(uint256)": {
        "notice": "----------------------------------------------------------------------- ERC721 Approval Storage -----------------------------------------------------------------------"
      },
      "name()": {
        "notice": "----------------------------------------------------------------------- Metadata Storage/Logic -----------------------------------------------------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 148,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)145_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)"
      },
      {
        "astId": 2460,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2462,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2474,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2478,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2528,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "getApproved",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2534,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1817,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_numAvailableRemainingTokens",
        "offset": 20,
        "slot": "8",
        "type": "t_uint16"
      },
      {
        "astId": 1821,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "_availableRemainingTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint16)65536_storage"
      },
      {
        "astId": 1835,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "whitelistMintCount",
        "offset": 0,
        "slot": "4105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1839,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "publicMintCount",
        "offset": 0,
        "slot": "4106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1842,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "whitelistMintPrice",
        "offset": 0,
        "slot": "4107",
        "type": "t_uint256"
      },
      {
        "astId": 1845,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "publicMintPrice",
        "offset": 0,
        "slot": "4108",
        "type": "t_uint256"
      },
      {
        "astId": 1847,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "stage",
        "offset": 0,
        "slot": "4109",
        "type": "t_uint8"
      },
      {
        "astId": 1849,
        "contract": "contracts/ArgoPetz.sol:ArgoPetz",
        "label": "baseURI",
        "offset": 0,
        "slot": "4110",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)65536_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[65536]",
        "numberOfBytes": "131072"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)145_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)145_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/ArgoPetz.sol:ArgoPetz",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 144,
            "contract": "contracts/ArgoPetz.sol:ArgoPetz",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}