{
  "address": "0xd3Df91EE04ffcCcE2A2aA43908b66DC043834a59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_argopetz",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "StakedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "craftingTime",
          "type": "uint256"
        }
      ],
      "name": "StarmapCraftingTimeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeTime",
          "type": "uint256"
        }
      ],
      "name": "UnstakedNFT",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "argopetz",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedNFTCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakedNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_starmapCraftingTime",
          "type": "uint256"
        }
      ],
      "name": "setStarmapCraftingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "starmapCraftingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55d9e075870562016376336d773076e21f9548d99eba49c4b73e761c2f076a48",
  "receipt": {
    "to": null,
    "from": "0x865F4c222D7B23365C7Eb2F4f74d1a2533CD663E",
    "contractAddress": "0xd3Df91EE04ffcCcE2A2aA43908b66DC043834a59",
    "transactionIndex": 0,
    "gasUsed": "708159",
    "logsBloom": "0x
    "blockHash": "0x87ba3c53b1371bfd70c3388b9f0c5d019937cf5625917814dd5675d40249d4d0",
    "transactionHash": "0x55d9e075870562016376336d773076e21f9548d99eba49c4b73e761c2f076a48",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10470431,
        "transactionHash": "0x55d9e075870562016376336d773076e21f9548d99eba49c4b73e761c2f076a48",
        "address": "0xd3Df91EE04ffcCcE2A2aA43908b66DC043834a59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000865f4c222d7b23365c7eb2f4f74d1a2533cd663e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x87ba3c53b1371bfd70c3388b9f0c5d019937cf5625917814dd5675d40249d4d0"
      }
    ],
    "blockNumber": 10470431,
    "cumulativeGasUsed": "708159",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFA686785D49a3ff521F56D0C7CD8251C33d08c45"
  ],
  "numDeployments": 1,
  "solcInputHash": "532b00c24b456962a1f24838d5637bc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_argopetz\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StakedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"craftingTime\",\"type\":\"uint256\"}],\"name\":\"StarmapCraftingTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"name\":\"UnstakedNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"argopetz\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starmapCraftingTime\",\"type\":\"uint256\"}],\"name\":\"setStarmapCraftingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starmapCraftingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kratos\",\"kind\":\"dev\",\"methods\":{\"getStakedNFTCount(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The number of staked NFTs\"}},\"getStakedNFTs(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The IDs of the NFTs\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStarmapCraftingTime(uint256)\":{\"params\":{\"_starmapCraftingTime\":\"The starmap crafting time\"}},\"stakeNFT(uint256[])\":{\"params\":{\"_nftIds\":\"The IDs of the NFTs\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeNFT(uint256[])\":{\"params\":{\"_nftIds\":\"The IDs of the NFTs\"}}},\"title\":\"StarMapCrafting\",\"version\":1},\"userdoc\":{\"events\":{\"StakedNFT(address,uint256,uint256)\":{\"notice\":\"Event emitted when an NFT is staked\"},\"StarmapCraftingTimeSet(uint256)\":{\"notice\":\"Event emitted when crafting time is set\"},\"UnstakedNFT(address,uint256,uint256)\":{\"notice\":\"Event emitted when an NFT is unstaked\"}},\"kind\":\"user\",\"methods\":{\"getStakedNFTCount(address)\":{\"notice\":\"Get staked NFT count of a user\"},\"getStakedNFTs(address)\":{\"notice\":\"Get staked NFTs of a user\"},\"setStarmapCraftingTime(uint256)\":{\"notice\":\"Set starmap crafting time\"},\"stakeNFT(uint256[])\":{\"notice\":\"Stake NFTs\"},\"starmapCraftingTime()\":{\"notice\":\"Starmap crafting time\"},\"unstakeNFT(uint256[])\":{\"notice\":\"Unstake NFTs\"}},\"notice\":\"This contract is used to craft starmaps with Argopetz\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StarMapCrafting.sol\":\"StarMapCrafting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/StarMapCrafting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./common/SetUtils.sol\\\";\\r\\n\\r\\n/// @title StarMapCrafting\\r\\n/// @author Kratos\\r\\n/// @notice This contract is used to craft starmaps with Argopetz\\r\\n\\r\\ncontract StarMapCrafting is Ownable {\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SetUtils for EnumerableSet.UintSet;\\r\\n    using SetUtils for EnumerableSet.AddressSet;\\r\\n\\r\\n    /// @notice Mapping of (user) => (EnumerableSet of NFT tokenIds) Number of NFTs staked for each user\\r\\n    mapping(address => EnumerableSet.UintSet) internal userStakedNFTs;\\r\\n\\r\\n    /// @notice Starmap crafting time\\r\\n    uint256 public starmapCraftingTime = 3 days;\\r\\n\\r\\n    /// @notice Event emitted when an NFT is staked\\r\\n    event StakedNFT(address indexed user, uint256 indexed nftId, uint256 startTime);\\r\\n\\r\\n    /// @notice Event emitted when an NFT is unstaked\\r\\n    event UnstakedNFT(address indexed user, uint256 indexed nftId, uint256 unstakeTime);\\r\\n\\r\\n    /// @notice Event emitted when crafting time is set\\r\\n    event StarmapCraftingTimeSet(uint256 craftingTime);\\r\\n\\r\\n    IERC721 public argopetz;\\r\\n\\r\\n    constructor(address _argopetz) {\\r\\n        // Set the Argopetz token address\\r\\n        argopetz = IERC721(_argopetz);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake NFTs\\r\\n     * @param _nftIds The IDs of the NFTs\\r\\n     */\\r\\n    function stakeNFT(uint256[] calldata _nftIds) external {\\r\\n        // More than 1 NFT must be staked\\r\\n        require(_nftIds.length > 0, \\\"Must stake at least 1 NFT\\\");\\r\\n        for (uint256 i; i < _nftIds.length; ) {\\r\\n            // Add staked NFT to the stakedNFTs mapping\\r\\n            userStakedNFTs[msg.sender].add(_nftIds[i]);\\r\\n            // Transfer the NFT to this contract\\r\\n            argopetz.safeTransferFrom(msg.sender, address(this), _nftIds[i]);\\r\\n            // Emit the StakedNFT event\\r\\n            emit StakedNFT(msg.sender, _nftIds[i], block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake NFTs\\r\\n     * @param _nftIds The IDs of the NFTs\\r\\n     */\\r\\n    function unstakeNFT(uint256[] calldata _nftIds) external {\\r\\n        for (uint256 i; i < _nftIds.length; ) {\\r\\n            // Check if the NFT is staked\\r\\n            require(userStakedNFTs[msg.sender].contains(_nftIds[i]), \\\"NFT is not staked\\\");\\r\\n            // Remove the NFT from the stakedNFTs mapping\\r\\n            userStakedNFTs[msg.sender].remove(_nftIds[i]);\\r\\n            // Transfer the NFT back to the user\\r\\n            argopetz.safeTransferFrom(address(this), msg.sender, _nftIds[i]);\\r\\n            emit UnstakedNFT(msg.sender, _nftIds[i], block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get staked NFT count of a user\\r\\n     * @param _user The address of the user\\r\\n     * @return The number of staked NFTs\\r\\n     */\\r\\n    function getStakedNFTCount(address _user) external view returns (uint256) {\\r\\n        return userStakedNFTs[_user].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get staked NFTs of a user\\r\\n     * @param _user The address of the user\\r\\n     * @return The IDs of the NFTs\\r\\n     */\\r\\n    function getStakedNFTs(address _user) external view returns (uint256[] memory) {\\r\\n        return userStakedNFTs[_user].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set starmap crafting time\\r\\n     * @param _starmapCraftingTime The starmap crafting time\\r\\n     */\\r\\n    function setStarmapCraftingTime(uint256 _starmapCraftingTime) external onlyOwner {\\r\\n        starmapCraftingTime = _starmapCraftingTime;\\r\\n        // Emit event\\r\\n        emit StarmapCraftingTimeSet(_starmapCraftingTime);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x30ba898ca882ea093541a8d3d0a492bec6d8adead4ea7e4b9aefc59cc476f224\",\"license\":\"MIT\"},\"contracts/common/SetUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary SetUtils {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /// @dev Converst an iterable set of addresses to a corresponding array\\r\\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        address[] memory elements = new address[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n\\r\\n    /// @dev Converst an iterable set of uint to a corresponding array\\r\\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        uint256[] memory elements = new uint256[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaed461f20be292afd9a4c4839ed3ca31c29a41f247988ce9050ae308bce708ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526203f48060025534801561001757600080fd5b50604051610b81380380610b81833981016040819052610036916100b4565b61003f33610064565b600380546001600160a01b0319166001600160a01b03929092169190911790556100e4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c657600080fd5b81516001600160a01b03811681146100dd57600080fd5b9392505050565b610a8e806100f36000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063715018a611610066578063715018a6146101315780638453734d146101395780638da5cb5b1461014c578063b390bd911461015d578063f2fde38b1461017057600080fd5b8062ea14c8146100a2578063180f4583146100be578063182c5744146100e957806357ff239a146100fe5780636f70d21214610111575b600080fd5b6100ab60025481565b6040519081526020015b60405180910390f35b6003546100d1906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6100fc6100f73660046108d9565b610183565b005b6100fc61010c36600461094e565b610311565b61012461011f366004610967565b610354565b6040516100b59190610990565b6100fc61037e565b6100fc6101473660046108d9565b610392565b6000546001600160a01b03166100d1565b6100ab61016b366004610967565b61053c565b6100fc61017e366004610967565b61055d565b806101d55760405162461bcd60e51b815260206004820152601960248201527f4d757374207374616b65206174206c656173742031204e46540000000000000060448201526064015b60405180910390fd5b60005b8181101561030c576102138383838181106101f5576101f56109d4565b336000908152600160209081526040909120939102013590506105d6565b506003546001600160a01b03166342842e0e3330868686818110610239576102396109d4565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b505050508282828181106102ba576102ba6109d4565b90506020020135336001600160a01b03167fd4832bcae9834661799ae29001c73a6d9915f2668ab97c975b2470c6d188a97f426040516102fc91815260200190565b60405180910390a36001016101d8565b505050565b6103196105e9565b60028190556040518181527f7b9377883a93ee3b1fd4d20c61c36b427701e7783a6a2059542187ee89bf06909060200160405180910390a150565b6001600160a01b038116600090815260016020526040902060609061037890610643565b92915050565b6103866105e9565b61039060006106e3565b565b60005b8181101561030c576103d08383838181106103b2576103b26109d4565b33600090815260016020908152604090912093910201359050610733565b6104105760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081cdd185ad959607a1b60448201526064016101cc565b610443838383818110610425576104256109d4565b3360009081526001602090815260409091209391020135905061074b565b506003546001600160a01b03166342842e0e3033868686818110610469576104696109d4565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b505050508282828181106104ea576104ea6109d4565b90506020020135336001600160a01b03167f7675d67b1a43620fbbbdbe07ab3aa82cac67ccfc994ca205bd2a2fd9f0a59af34260405161052c91815260200190565b60405180910390a3600101610395565b6001600160a01b038116600090815260016020526040812061037890610757565b6105656105e9565b6001600160a01b0381166105ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cc565b6105d3816106e3565b50565b60006105e28383610761565b9392505050565b6000546001600160a01b031633146103905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cc565b6060600061065083610757565b905060008167ffffffffffffffff81111561066d5761066d6109ea565b604051908082528060200260200182016040528015610696578160200160208202803683370190505b50905060005b828110156106db576106ae85826107b0565b8282815181106106c0576106c06109d4565b60209081029190910101526106d481610a16565b905061069c565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415156105e2565b60006105e283836107bc565b6000610378825490565b60008181526001830160205260408120546107a857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610378565b506000610378565b60006105e283836108af565b600081815260018301602052604081205480156108a55760006107e0600183610a2f565b85549091506000906107f490600190610a2f565b9050818114610859576000866000018281548110610814576108146109d4565b9060005260206000200154905080876000018481548110610837576108376109d4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061086a5761086a610a42565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610378565b6000915050610378565b60008260000182815481106108c6576108c66109d4565b9060005260206000200154905092915050565b600080602083850312156108ec57600080fd5b823567ffffffffffffffff8082111561090457600080fd5b818501915085601f83011261091857600080fd5b81358181111561092757600080fd5b8660208260051b850101111561093c57600080fd5b60209290920196919550909350505050565b60006020828403121561096057600080fd5b5035919050565b60006020828403121561097957600080fd5b81356001600160a01b03811681146105e257600080fd5b6020808252825182820181905260009190848201906040850190845b818110156109c8578351835292840192918401916001016109ac565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a2857610a28610a00565b5060010190565b8181038181111561037857610378610a00565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a1a34d0f821b2df19db69e1b2b5085d308a58fd20de808b7a6be8e3e0a0ab19764736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c8063715018a611610066578063715018a6146101315780638453734d146101395780638da5cb5b1461014c578063b390bd911461015d578063f2fde38b1461017057600080fd5b8062ea14c8146100a2578063180f4583146100be578063182c5744146100e957806357ff239a146100fe5780636f70d21214610111575b600080fd5b6100ab60025481565b6040519081526020015b60405180910390f35b6003546100d1906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6100fc6100f73660046108d9565b610183565b005b6100fc61010c36600461094e565b610311565b61012461011f366004610967565b610354565b6040516100b59190610990565b6100fc61037e565b6100fc6101473660046108d9565b610392565b6000546001600160a01b03166100d1565b6100ab61016b366004610967565b61053c565b6100fc61017e366004610967565b61055d565b806101d55760405162461bcd60e51b815260206004820152601960248201527f4d757374207374616b65206174206c656173742031204e46540000000000000060448201526064015b60405180910390fd5b60005b8181101561030c576102138383838181106101f5576101f56109d4565b336000908152600160209081526040909120939102013590506105d6565b506003546001600160a01b03166342842e0e3330868686818110610239576102396109d4565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b505050508282828181106102ba576102ba6109d4565b90506020020135336001600160a01b03167fd4832bcae9834661799ae29001c73a6d9915f2668ab97c975b2470c6d188a97f426040516102fc91815260200190565b60405180910390a36001016101d8565b505050565b6103196105e9565b60028190556040518181527f7b9377883a93ee3b1fd4d20c61c36b427701e7783a6a2059542187ee89bf06909060200160405180910390a150565b6001600160a01b038116600090815260016020526040902060609061037890610643565b92915050565b6103866105e9565b61039060006106e3565b565b60005b8181101561030c576103d08383838181106103b2576103b26109d4565b33600090815260016020908152604090912093910201359050610733565b6104105760405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081cdd185ad959607a1b60448201526064016101cc565b610443838383818110610425576104256109d4565b3360009081526001602090815260409091209391020135905061074b565b506003546001600160a01b03166342842e0e3033868686818110610469576104696109d4565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156104c057600080fd5b505af11580156104d4573d6000803e3d6000fd5b505050508282828181106104ea576104ea6109d4565b90506020020135336001600160a01b03167f7675d67b1a43620fbbbdbe07ab3aa82cac67ccfc994ca205bd2a2fd9f0a59af34260405161052c91815260200190565b60405180910390a3600101610395565b6001600160a01b038116600090815260016020526040812061037890610757565b6105656105e9565b6001600160a01b0381166105ca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cc565b6105d3816106e3565b50565b60006105e28383610761565b9392505050565b6000546001600160a01b031633146103905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cc565b6060600061065083610757565b905060008167ffffffffffffffff81111561066d5761066d6109ea565b604051908082528060200260200182016040528015610696578160200160208202803683370190505b50905060005b828110156106db576106ae85826107b0565b8282815181106106c0576106c06109d4565b60209081029190910101526106d481610a16565b905061069c565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415156105e2565b60006105e283836107bc565b6000610378825490565b60008181526001830160205260408120546107a857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610378565b506000610378565b60006105e283836108af565b600081815260018301602052604081205480156108a55760006107e0600183610a2f565b85549091506000906107f490600190610a2f565b9050818114610859576000866000018281548110610814576108146109d4565b9060005260206000200154905080876000018481548110610837576108376109d4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061086a5761086a610a42565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610378565b6000915050610378565b60008260000182815481106108c6576108c66109d4565b9060005260206000200154905092915050565b600080602083850312156108ec57600080fd5b823567ffffffffffffffff8082111561090457600080fd5b818501915085601f83011261091857600080fd5b81358181111561092757600080fd5b8660208260051b850101111561093c57600080fd5b60209290920196919550909350505050565b60006020828403121561096057600080fd5b5035919050565b60006020828403121561097957600080fd5b81356001600160a01b03811681146105e257600080fd5b6020808252825182820181905260009190848201906040850190845b818110156109c8578351835292840192918401916001016109ac565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a2857610a28610a00565b5060010190565b8181038181111561037857610378610a00565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a1a34d0f821b2df19db69e1b2b5085d308a58fd20de808b7a6be8e3e0a0ab19764736f6c63430008120033",
  "devdoc": {
    "author": "Kratos",
    "kind": "dev",
    "methods": {
      "getStakedNFTCount(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The number of staked NFTs"
        }
      },
      "getStakedNFTs(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The IDs of the NFTs"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStarmapCraftingTime(uint256)": {
        "params": {
          "_starmapCraftingTime": "The starmap crafting time"
        }
      },
      "stakeNFT(uint256[])": {
        "params": {
          "_nftIds": "The IDs of the NFTs"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeNFT(uint256[])": {
        "params": {
          "_nftIds": "The IDs of the NFTs"
        }
      }
    },
    "title": "StarMapCrafting",
    "version": 1
  },
  "userdoc": {
    "events": {
      "StakedNFT(address,uint256,uint256)": {
        "notice": "Event emitted when an NFT is staked"
      },
      "StarmapCraftingTimeSet(uint256)": {
        "notice": "Event emitted when crafting time is set"
      },
      "UnstakedNFT(address,uint256,uint256)": {
        "notice": "Event emitted when an NFT is unstaked"
      }
    },
    "kind": "user",
    "methods": {
      "getStakedNFTCount(address)": {
        "notice": "Get staked NFT count of a user"
      },
      "getStakedNFTs(address)": {
        "notice": "Get staked NFTs of a user"
      },
      "setStarmapCraftingTime(uint256)": {
        "notice": "Set starmap crafting time"
      },
      "stakeNFT(uint256[])": {
        "notice": "Stake NFTs"
      },
      "starmapCraftingTime()": {
        "notice": "Starmap crafting time"
      },
      "unstakeNFT(uint256[])": {
        "notice": "Unstake NFTs"
      }
    },
    "notice": "This contract is used to craft starmaps with Argopetz",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 906,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "userStakedNFTs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)745_storage)"
      },
      {
        "astId": 910,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "starmapCraftingTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 936,
        "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
        "label": "argopetz",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)228"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)228": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)745_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)745_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)273_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 268,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 272,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)745_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 744,
            "contract": "contracts/StarMapCrafting.sol:StarMapCrafting",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)273_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}