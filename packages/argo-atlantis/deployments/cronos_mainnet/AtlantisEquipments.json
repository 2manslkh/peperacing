{
  "address": "0xfa6888F9f3602E02507a2Bbed661c8cb256949c8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256[5]",
          "name": "_stardustCost",
          "type": "uint256[5]"
        },
        {
          "internalType": "uint16[5]",
          "name": "_gemstonesRequired",
          "type": "uint16[5]"
        },
        {
          "internalType": "uint16[10]",
          "name": "_equipmentSpeeds",
          "type": "uint16[10]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IdNotExistsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpgradeError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddressRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_baseMetadataURI",
          "type": "string"
        }
      ],
      "name": "BaseMetadataURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "_equipmentSpeeds",
          "type": "uint16[]"
        }
      ],
      "name": "EquipmentSpeedsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "FuseEquipment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "_gemstonesRequired",
          "type": "uint16[]"
        }
      ],
      "name": "GemstonesRequiredUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mintCost",
          "type": "uint256"
        }
      ],
      "name": "MintCostUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IAtlantisEquipments.PaymentMode",
          "name": "_paymentMode",
          "type": "uint8"
        }
      ],
      "name": "PaymentModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "PaymentTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_stardustCosts",
          "type": "uint256[]"
        }
      ],
      "name": "StardustCostsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "TokenURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_GEMSTONES_REQUIRED",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STARDUST_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_TOKEN_IDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_amountToCreate",
          "type": "uint16"
        }
      ],
      "name": "calculateFusionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_amountToCreate",
          "type": "uint16"
        }
      ],
      "name": "calculateGemstonesCost",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "devAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "equipmentSpeeds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_amountToCreate",
          "type": "uint16"
        }
      ],
      "name": "fuseEquipment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_amountToCreate",
          "type": "uint16"
        }
      ],
      "name": "fuseEquipmentsView",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gemstonesRequired",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getElement",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getGemstoneIdFromEquipmentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getSpeed",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentMode",
      "outputs": [
        {
          "internalType": "enum IAtlantisEquipments.PaymentMode",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_equipmentSpeeds",
          "type": "uint16[]"
        }
      ],
      "name": "setEquipmentSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_gemstonesRequired",
          "type": "uint16[]"
        }
      ],
      "name": "setGemstonesRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintCost",
          "type": "uint256"
        }
      ],
      "name": "setMintCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAtlantisEquipments.PaymentMode",
          "name": "_paymentMode",
          "type": "uint8"
        }
      ],
      "name": "setPaymentMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_stardustCost",
          "type": "uint256[]"
        }
      ],
      "name": "setStardustCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stardustCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_devAddresses",
          "type": "address[]"
        }
      ],
      "name": "whitelistDevAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x346f07ca4103cdc1d468fd3c8b2c8a1628507cb8755b686b82c0473de91b7a4d",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xfa6888F9f3602E02507a2Bbed661c8cb256949c8",
    "transactionIndex": 2,
    "gasUsed": "4457167",
    "logsBloom": "0x
    "blockHash": "0x0c2cf8b0b00c9bdc237284f170a3804901c44cdfeca6d5f7657b0b9398e83f10",
    "transactionHash": "0x346f07ca4103cdc1d468fd3c8b2c8a1628507cb8755b686b82c0473de91b7a4d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8789356,
        "transactionHash": "0x346f07ca4103cdc1d468fd3c8b2c8a1628507cb8755b686b82c0473de91b7a4d",
        "address": "0xfa6888F9f3602E02507a2Bbed661c8cb256949c8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0c2cf8b0b00c9bdc237284f170a3804901c44cdfeca6d5f7657b0b9398e83f10"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 8789356,
        "transactionHash": "0x346f07ca4103cdc1d468fd3c8b2c8a1628507cb8755b686b82c0473de91b7a4d",
        "address": "0xfa6888F9f3602E02507a2Bbed661c8cb256949c8",
        "topics": [
          "0xd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d50314674456d323470687676467846566d774a63627763427a6555396b51434b636642316156316b434271642f00000000000000000000",
        "logIndex": 6,
        "blockHash": "0x0c2cf8b0b00c9bdc237284f170a3804901c44cdfeca6d5f7657b0b9398e83f10"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 8789356,
        "transactionHash": "0x346f07ca4103cdc1d468fd3c8b2c8a1628507cb8755b686b82c0473de91b7a4d",
        "address": "0xfa6888F9f3602E02507a2Bbed661c8cb256949c8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x0c2cf8b0b00c9bdc237284f170a3804901c44cdfeca6d5f7657b0b9398e83f10"
      }
    ],
    "blockNumber": 8789356,
    "cumulativeGasUsed": "4612698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Atlantis Equipment",
    "EQUIPMENT",
    "ipfs://QmP1FtEm24phvvFxFVmwJcbwcBzeU9kQCKcfB1aV1kCBqd/",
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "0x16E96b2c52C816D26FEF4991733249e81965D88D",
    "0x493a152A821c6418b62A46bEda4de941b128A4Ac",
    [
      0,
      0,
      0,
      0,
      0
    ],
    [
      1,
      3,
      5,
      7,
      9
    ],
    [
      5,
      15,
      25,
      35,
      45,
      55,
      65,
      75,
      85,
      95
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "bec2575e0acfaf1c086653f9e4f02639",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256[5]\",\"name\":\"_stardustCost\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint16[5]\",\"name\":\"_gemstonesRequired\",\"type\":\"uint16[5]\"},{\"internalType\":\"uint16[10]\",\"name\":\"_equipmentSpeeds\",\"type\":\"uint16[10]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IdNotExistsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgradeError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"_equipmentSpeeds\",\"type\":\"uint16[]\"}],\"name\":\"EquipmentSpeedsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"FuseEquipment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"_gemstonesRequired\",\"type\":\"uint16[]\"}],\"name\":\"GemstonesRequiredUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintCost\",\"type\":\"uint256\"}],\"name\":\"MintCostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IAtlantisEquipments.PaymentMode\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"PaymentModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"PaymentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_stardustCosts\",\"type\":\"uint256[]\"}],\"name\":\"StardustCostsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"TokenURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_GEMSTONES_REQUIRED\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STARDUST_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_TOKEN_IDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_amountToCreate\",\"type\":\"uint16\"}],\"name\":\"calculateFusionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_amountToCreate\",\"type\":\"uint16\"}],\"name\":\"calculateGemstonesCost\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"devAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"equipmentSpeeds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_amountToCreate\",\"type\":\"uint16\"}],\"name\":\"fuseEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_amountToCreate\",\"type\":\"uint16\"}],\"name\":\"fuseEquipmentsView\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gemstonesRequired\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGemstoneIdFromEquipmentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentMode\",\"outputs\":[{\"internalType\":\"enum IAtlantisEquipments.PaymentMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_equipmentSpeeds\",\"type\":\"uint16[]\"}],\"name\":\"setEquipmentSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_gemstonesRequired\",\"type\":\"uint16[]\"}],\"name\":\"setGemstonesRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintCost\",\"type\":\"uint256\"}],\"name\":\"setMintCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAtlantisEquipments.PaymentMode\",\"name\":\"_paymentMode\",\"type\":\"uint8\"}],\"name\":\"setPaymentMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stardustCost\",\"type\":\"uint256[]\"}],\"name\":\"setStardustCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stardustCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_devAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistDevAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Fuse 2 equipment of the same tier to receive 1 from the next tier. Equipment can be equipped on spaceships to boost their speed in a race.\",\"kind\":\"dev\",\"methods\":{\"airdrop(address,uint256,uint256,bytes)\":{\"details\":\"Airdrop some equipments to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Mint tokens for each id in _ids\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"Array of ids to mint\",\"_quantities\":\"Array of amounts of tokens to mint per id\",\"_to\":\"The address to mint tokens to\"}},\"calculateFusionCost(uint256,uint16)\":{\"params\":{\"_amountToCreate\":\"Amount of next tier equipment to create\",\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"Fusion cost\"}},\"calculateGemstonesCost(uint256,uint16)\":{\"params\":{\"_amountToCreate\":\"Amount of next tier equipment to create\",\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"Gemstone cost\"}},\"constructor\":{\"params\":{\"_name\":\"Name of contract\",\"_registry\":\"Registry of Atlantis\",\"_symbol\":\"Symbol of contract\",\"_treasury\":\"Address of treaury\",\"baseURI\":\"base URI with images\",\"owner\":\"Address of owner\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"fuseEquipment(uint256,uint16)\":{\"params\":{\"_amountToCreate\":\"Amount of next tier equipment to create\",\"_id\":\"The id of the equipment\"}},\"fuseEquipmentsView(uint256,uint16)\":{\"params\":{\"_amountToCreate\":\"Amount of next tier equipment to create\",\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"amount to fuse\"}},\"getElement(uint256)\":{\"params\":{\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"element\"}},\"getGemstoneIdFromEquipmentId(uint256)\":{\"details\":\"Get gemstone id from equipment Id\"},\"getLevel(uint256)\":{\"params\":{\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"level of equipment\"}},\"getSpeed(uint256)\":{\"params\":{\"_id\":\"Specific equipment id\"},\"returns\":{\"_0\":\"speed of equipment\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause contract in case of emergency\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setAddressRegistry(address)\":{\"details\":\"Set Address Registry contract address\",\"params\":{\"_addressRegistry\":\"Address of Address Registry contract\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBaseMetadataURI(string)\":{\"details\":\"Will update the base URL of token's URI\",\"params\":{\"_newBaseMetadataURI\":\"New base URL of token's URI\"}},\"setEquipmentSpeeds(uint16[])\":{\"params\":{\"_equipmentSpeeds\":\"Array of equipment speeds\"}},\"setGemstonesRequired(uint16[])\":{\"params\":{\"_gemstonesRequired\":\"Array of gemstonesRequired\"}},\"setStardustCosts(uint256[])\":{\"params\":{\"_stardustCost\":\"Array of stardust costs\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\",\"returns\":{\"_0\":\"uint256\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause contract in case of emergency\"},\"uri(uint256)\":{\"params\":{\"_tokenId\":\"The id of the equipment\"},\"returns\":{\"_0\":\"returns string of token metadata\"}}},\"title\":\"Atlantis - Equipment contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_GEMSTONES_REQUIRED()\":{\"notice\":\"Max number of gemstones required\"},\"MAX_MINT_COST()\":{\"notice\":\"Max mint cost\"},\"MAX_STARDUST_COST()\":{\"notice\":\"Max stardust cost\"},\"TOTAL_TOKEN_IDS()\":{\"notice\":\"Max number of tokeniDS\"},\"addressRegistry()\":{\"notice\":\"Contract address of address registry\"},\"baseTokenURI()\":{\"notice\":\"Base token URI\"},\"calculateFusionCost(uint256,uint16)\":{\"notice\":\"Calculates cost of fusing equipment\"},\"calculateGemstonesCost(uint256,uint16)\":{\"notice\":\"Calculates gemstone cost of fusing equipmenet\"},\"constructor\":{\"notice\":\"Constructor for Atlantis Equipments\"},\"devAddresses(address)\":{\"notice\":\"Whitelisted addresses who can call airdrop\"},\"equipmentSpeeds(uint256)\":{\"notice\":\"Speeds of equipment\"},\"fuseEquipment(uint256,uint16)\":{\"notice\":\"Fuse equipment\"},\"fuseEquipmentsView(uint256,uint16)\":{\"notice\":\"Calculates how much is require dto fuse to get amountToCreate\"},\"gemstonesRequired(uint256)\":{\"notice\":\"Number of gemstones required\"},\"getElement(uint256)\":{\"notice\":\"Get element from id\"},\"getLevel(uint256)\":{\"notice\":\"Get level of equipment from its id\"},\"getSpeed(uint256)\":{\"notice\":\"Get equipment speed from id\"},\"mintCost()\":{\"notice\":\"Mint cost of equipments\"},\"name()\":{\"notice\":\"Name of contract\"},\"paymentMode()\":{\"notice\":\"Current payment mode\"},\"paymentToken()\":{\"notice\":\"Current payment token\"},\"setEquipmentSpeeds(uint16[])\":{\"notice\":\"Sets speeds of equipments\"},\"setGemstonesRequired(uint16[])\":{\"notice\":\"Sets gemstones required\"},\"setStardustCosts(uint256[])\":{\"notice\":\"Sets stardust costs\"},\"stardustCost(uint256)\":{\"notice\":\"Cost of stardust required\"},\"symbol()\":{\"notice\":\"Name of symbol\"},\"treasury()\":{\"notice\":\"Address of treasury\"},\"uri(uint256)\":{\"notice\":\"Get token metadata with tokenId\"},\"withdrawERC20(address,uint256)\":{\"notice\":\"Withdraw all specified ERC20 tokens from this account to the owner\"},\"withdrawFund()\":{\"notice\":\"Withdraw all CRO from this account to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlantisEquipments.sol\":\"AtlantisEquipments\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/AtlantisEquipments.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/IAtlantisEquipments.sol\\\";\\r\\nimport \\\"./interface/IAtlantisGemstones.sol\\\";\\r\\nimport \\\"./interface/IStakingWithLock.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\nimport \\\"./common/Base64.sol\\\";\\r\\n\\r\\n/// @title Atlantis - Equipment contract\\r\\n/// @dev Fuse 2 equipment of the same tier to receive 1 from the next tier. Equipment can be equipped on spaceships to boost their speed in a race.\\r\\ncontract AtlantisEquipments is ERC1155, Pausable, Ownable, IAtlantisEquipments, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    /// @notice Current payment mode\\r\\n    PaymentMode public paymentMode;\\r\\n    /// @notice Current payment token\\r\\n    IERC20 public paymentToken;\\r\\n    /// @notice Name of contract\\r\\n    string public name;\\r\\n    /// @notice Name of symbol\\r\\n    string public symbol;\\r\\n    /// @notice Total supply for each collection ids\\r\\n    mapping(uint256 => uint256) private _totalSupply;\\r\\n    /// @notice Base token URI\\r\\n    string public baseTokenURI;\\r\\n    /// @notice Max number of tokeniDS\\r\\n    uint256 public constant TOTAL_TOKEN_IDS = 30;\\r\\n    /// @notice Mint cost of equipments\\r\\n    uint256 public mintCost = 200 ether;\\r\\n    /// @notice Contract address of address registry\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n    /// @notice Cost of stardust required\\r\\n    uint256[5] public stardustCost;\\r\\n    /// @notice Number of gemstones required\\r\\n    uint16[5] public gemstonesRequired;\\r\\n    /// @notice Speeds of equipment\\r\\n    uint16[10] public equipmentSpeeds;\\r\\n    /// @notice Nonce used for calculation purposes\\r\\n    uint256 private nonce;\\r\\n    /// @notice Address of treasury\\r\\n    address public treasury;\\r\\n    /// @notice Max number of gemstones required\\r\\n    uint16 public constant MAX_GEMSTONES_REQUIRED = 500;\\r\\n    /// @notice Max stardust cost\\r\\n    uint256 public constant MAX_STARDUST_COST = 500000 ether;\\r\\n    /// @notice Max mint cost\\r\\n    uint256 public constant MAX_MINT_COST = 10000000 ether;\\r\\n    /// @notice Whitelisted addresses who can call airdrop\\r\\n    mapping(address => bool) public devAddresses;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor for Atlantis Equipments\\r\\n     * @param _name Name of contract\\r\\n     * @param _symbol Symbol of contract\\r\\n     * @param baseURI base URI with images\\r\\n     * @param owner Address of owner\\r\\n     * @param _registry Registry of Atlantis\\r\\n     * @param _treasury Address of treaury\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory baseURI,\\r\\n        address owner,\\r\\n        AtlantisAddressRegistry _registry,\\r\\n        address _treasury,\\r\\n        uint256[5] memory _stardustCost,\\r\\n        uint16[5] memory _gemstonesRequired,\\r\\n        uint16[10] memory _equipmentSpeeds\\r\\n    ) ERC1155(baseURI) {\\r\\n        // Check that registry and treasury are not address(0)\\r\\n        require(address(_registry) != address(0), \\\"AtlantisEquipment: Registry is address(0)\\\");\\r\\n        require(_treasury != address(0), \\\"AtlantisEquipment: Treasury is address(0)\\\");\\r\\n        // Set name and symbol\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        // Set metadata uri\\r\\n        setBaseMetadataURI(baseURI);\\r\\n        // Transform ownership to the owner\\r\\n        transferOwnership(owner);\\r\\n        // Get atlantis address\\r\\n        addressRegistry = _registry;\\r\\n        // Get treasury\\r\\n        treasury = _treasury;\\r\\n        // Initialise stardustCost, gemstonesRequired and equipmentSpeeds\\r\\n        stardustCost = _stardustCost;\\r\\n        gemstonesRequired = _gemstonesRequired;\\r\\n        equipmentSpeeds = _equipmentSpeeds;\\r\\n\\r\\n        // Set default payment mode\\r\\n        paymentMode = PaymentMode.TOKEN;\\r\\n\\r\\n        // Initialise paymentToken to stardust\\r\\n        paymentToken = IERC20(addressRegistry.getStardust());\\r\\n\\r\\n        // Add owner to the devAddresses\\r\\n        devAddresses[owner] = true;\\r\\n    }\\r\\n\\r\\n    // ------------------------- VIEW FUNCTIONS ------------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Total amount of tokens in with a given id.\\r\\n     * @return uint256\\r\\n     */\\r\\n    function totalSupply(uint256 id) public view returns (uint256) {\\r\\n        return _totalSupply[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get ImageURI\\r\\n     * @param _tokenId The id of the equipment\\r\\n     * @return returns string of imageURI\\r\\n     */\\r\\n    function _getImageURI(uint256 _tokenId) internal view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    uint256(getElement(_tokenId)).toString(),\\r\\n                    \\\"/\\\",\\r\\n                    uint256(getLevel(_tokenId)).toString(),\\r\\n                    \\\".png\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get token metadata with tokenId\\r\\n     * @param _tokenId The id of the equipment\\r\\n     * @return returns string of token metadata\\r\\n     */\\r\\n    function uri(uint256 _tokenId) public view override returns (string memory) {\\r\\n        require(exists(_tokenId), \\\"Resources: URI query for nonexistent token\\\");\\r\\n        string memory _name = _tokenIdToEquipmentNameString(_tokenId);\\r\\n        string memory json = string(\\r\\n            abi.encodePacked('{\\\"name\\\": \\\"', _name, \\\" Level \\\", uint256(getLevel(_tokenId)).toString(), '\\\",')\\r\\n        );\\r\\n        // Description\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"description\\\": \\\"Welcome to the captivating realm of Atlantis, the game-verse and home of the legendary Argonauts. Equipment are valuable items which provides speed boost to your Spaceships. Fuse 2 Equipment of the same level to level it up!\\\",'\\r\\n            )\\r\\n        );\\r\\n        // Attributes\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"',\\r\\n                _name,\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": \\\"',\\r\\n                uint256(getLevel(_tokenId)).toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Speed\\\", \\\"value\\\": \\\"',\\r\\n                uint256(getSpeed(_tokenId)).toString(),\\r\\n                '\\\"}],'\\r\\n            )\\r\\n        );\\r\\n        json = Base64.encode(bytes(string(abi.encodePacked(json, '\\\"image\\\": \\\"', _getImageURI(_tokenId), '\\\"}'))));\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    // ------------------------- ADMIN FUNCTIONS ------------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Will update the base URL of token's URI\\r\\n     * @param _newBaseMetadataURI New base URL of token's URI\\r\\n     */\\r\\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyOwner {\\r\\n        baseTokenURI = _newBaseMetadataURI;\\r\\n        emit BaseMetadataURIUpdated(_newBaseMetadataURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set Address Registry contract address\\r\\n     * @param _addressRegistry Address of Address Registry contract\\r\\n     */\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\\r\\n        require(address(_addressRegistry) != address(0), \\\"AtlantisEquipments: Address Registry is address(0)\\\");\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit AddressRegistryUpdated(address(_addressRegistry));\\r\\n    }\\r\\n\\r\\n    function random() private view returns (uint) {\\r\\n        uint randomHash = uint(\\r\\n            keccak256(\\r\\n                abi.encodePacked(msg.sender, block.coinbase, block.difficulty, block.gaslimit, block.timestamp, nonce)\\r\\n            )\\r\\n        );\\r\\n        return randomHash % 3;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _quantity) public payable {\\r\\n         IStakingWithLock stakingWithLock = IStakingWithLock(addressRegistry.getStakingWithLock());\\r\\n        uint256 _id;\\r\\n        if (paymentMode == PaymentMode.CRYPTO) {\\r\\n            require(msg.value == _quantity * mintCost, \\\"AtlantisEquipments: Insufficient CRO!\\\");\\r\\n        } else {\\r\\n             // If paymentToken is stardust, burn the tokens\\r\\n            if (address(paymentToken) == addressRegistry.getStardust()) {\\r\\n                stakingWithLock.unstakeAndBurn(mintCost * _quantity);\\r\\n            }\\r\\n            else{\\r\\n            // Transfer the required tokens from the user\\r\\n            require(paymentToken.transferFrom(msg.sender, address(this), mintCost * _quantity), \\\"Transfer failed\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Loop through quantity\\r\\n        for (uint256 i = 0; i < _quantity; i++) {\\r\\n            _id = random() + 1;\\r\\n            nonce += 1;\\r\\n            _mint(_to, _id, 1, \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Set mint cost\\r\\n    function setMintCost(uint256 _newMintCost) external onlyOwner {\\r\\n        // Mint cost cannot be above max mint cost\\r\\n        require(_newMintCost <= MAX_MINT_COST, \\\"AtlantisEquipments: Mint cost cannot be above max mint cost\\\");\\r\\n        mintCost = _newMintCost;\\r\\n        emit MintCostUpdated(_newMintCost);\\r\\n    }\\r\\n\\r\\n    // Set payment mode\\r\\n    function setPaymentMode(PaymentMode _paymentMode) public onlyOwner {\\r\\n        paymentMode = _paymentMode;\\r\\n        emit PaymentModeUpdated(_paymentMode);\\r\\n    }\\r\\n\\r\\n    // Set payment token\\r\\n    function setPaymentToken(IERC20 _paymentToken) public onlyOwner {\\r\\n        // Cannot be 0\\r\\n        require(address(_paymentToken) != address(0), \\\"AtlantisEquipments: Payment token cannot be address(0)\\\");\\r\\n        paymentToken = _paymentToken;\\r\\n        emit PaymentTokenUpdated(address(_paymentToken));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint tokens for each id in _ids\\r\\n     * @param _to          The address to mint tokens to\\r\\n     * @param _ids         Array of ids to mint\\r\\n     * @param _quantities  Array of amounts of tokens to mint per id\\r\\n     * @param _data        Data to pass if receiver is contract\\r\\n     */\\r\\n    function batchMint(\\r\\n        address _to,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _quantities,\\r\\n        bytes memory _data\\r\\n    ) public onlyOwner {\\r\\n        _mintBatch(_to, _ids, _quantities, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw all CRO from this account to the owner\\r\\n     */\\r\\n    function withdrawFund() external onlyOwner {\\r\\n        (bool success, ) = payable(treasury).call{ value: address(this).balance }(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n      /**\\r\\n     * @notice Withdraw all specified ERC20 tokens from this account to the owner\\r\\n     */\\r\\n    function withdrawERC20(address _token, uint256 _amount) external onlyOwner {\\r\\n        require(_token != address(0), \\\"Token is address(0)\\\");\\r\\n        IERC20 token = IERC20(_token);\\r\\n        require(token.transfer(treasury, _amount), \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    // ------------------------- INTERNAL FUNCTIONS ------------------------------\\r\\n\\r\\n    /// @dev Gets baseToken URI\\r\\n    function _baseURI() internal view returns (string memory) {\\r\\n        return baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override(ERC1155) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\r\\n        if (from == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                _totalSupply[ids[i]] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                uint256 id = ids[i];\\r\\n                uint256 amount = amounts[i];\\r\\n                uint256 supply = _totalSupply[id];\\r\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n                unchecked {\\r\\n                    _totalSupply[id] = supply - amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates whether any token exist with a given id, or not.\\r\\n     */\\r\\n    function exists(uint256 _id) public view virtual returns (bool) {\\r\\n        return _id > 0 && _id <= TOTAL_TOKEN_IDS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get gemstone id from equipment Id\\r\\n     */\\r\\n    function getGemstoneIdFromEquipmentId(uint256 _id) public pure returns (uint256) {\\r\\n        if (_id > 27) {\\r\\n            revert UpgradeError();\\r\\n        }\\r\\n        uint256 _element = (_id % 3);\\r\\n        uint256 _gemstoneId;\\r\\n        if (_element == 1) {\\r\\n            _gemstoneId = 10;\\r\\n        } else if (_element == 2) {\\r\\n            _gemstoneId = 11;\\r\\n        } else if (_element == 0) {\\r\\n            _gemstoneId = 12;\\r\\n        }\\r\\n        return _gemstoneId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get equipment name from tokenId\\r\\n     * @param _tokenId The id of the equipment\\r\\n     */\\r\\n    function _tokenIdToEquipmentNameString(uint256 _tokenId) internal pure returns (string memory) {\\r\\n        uint256 _element = (_tokenId % 3);\\r\\n        string memory _elementName;\\r\\n        if (_element == 1) {\\r\\n            _elementName = \\\"Inferno Thrusters\\\";\\r\\n        } else if (_element == 2) {\\r\\n            _elementName = \\\"Thunderbolt Wings\\\";\\r\\n        } else if (_element == 0) {\\r\\n            _elementName = \\\"Argonium Exoshell\\\";\\r\\n        }\\r\\n        return _elementName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fuse equipment\\r\\n     * @param _id The id of the equipment\\r\\n     * @param _amountToCreate Amount of next tier equipment to create\\r\\n     */\\r\\n    function fuseEquipment(uint256 _id, uint16 _amountToCreate) external nonReentrant {\\r\\n        IAtlantisGemstones atlantisGemstones = IAtlantisGemstones(addressRegistry.getGemstones());\\r\\n        IStakingWithLock stakingWithLock = IStakingWithLock(addressRegistry.getStakingWithLock());\\r\\n        // Total fusion cost\\r\\n        uint256 _fusionCost = calculateFusionCost(_id, _amountToCreate);\\r\\n\\r\\n        // gemstone cost\\r\\n        uint256 _gemstoneCost = calculateGemstonesCost(_id, _amountToCreate);\\r\\n        // Calculate Equipment required to fuse\\r\\n        uint256 _amountToBurn = fuseEquipmentsView(_id, _amountToCreate);\\r\\n        uint256 _toId = _id + 3;\\r\\n        _burn(msg.sender, _id, _amountToBurn);\\r\\n        // Mint new Equipment\\r\\n        _mint(msg.sender, _toId, _amountToCreate, \\\"\\\");\\r\\n        // Burn Gemstone\\r\\n        atlantisGemstones.burn(msg.sender, getGemstoneIdFromEquipmentId(_id), _gemstoneCost);\\r\\n        // Burn stardust if _fusionCost is more than 0\\r\\n        if (_fusionCost > 0) {\\r\\n            stakingWithLock.unstakeAndBurn(_fusionCost);\\r\\n        }\\r\\n        // Emit fuse event\\r\\n        emit FuseEquipment(msg.sender, _toId, _amountToCreate, totalSupply(_toId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get equipment speed from id\\r\\n     * @param _id Specific equipment id\\r\\n     * @return speed of equipment\\r\\n     */\\r\\n    function getSpeed(uint256 _id) public view returns (uint16) {\\r\\n        if (_id > 30) {\\r\\n            revert IdNotExistsError();\\r\\n        } else if (_id == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint8 _level = getLevel(_id);\\r\\n        return equipmentSpeeds[_level - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get level of equipment from its id\\r\\n     * @param _id Specific equipment id\\r\\n     * @return level of equipment\\r\\n     */\\r\\n    function getLevel(uint256 _id) public pure returns (uint8) {\\r\\n        if (_id > 30) {\\r\\n            revert IdNotExistsError();\\r\\n        } else if (_id == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        // Logic above level 5\\r\\n        uint8 _level;\\r\\n        if ((_id % 3) == 0) {\\r\\n            _level = uint8(_id) / 3;\\r\\n        } else {\\r\\n            _level = uint8(_id) / 3 + 1;\\r\\n        }\\r\\n\\r\\n        return _level;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get element from id\\r\\n     * @param _id Specific equipment id\\r\\n     * @return element\\r\\n     */\\r\\n    function getElement(uint256 _id) public pure returns (uint8) {\\r\\n        if (_id > 30 || _id == 0) {\\r\\n            revert IdNotExistsError();\\r\\n        }\\r\\n        uint8 _element = uint8(_id) % 3;\\r\\n        return _element;\\r\\n    }\\r\\n\\r\\n    /** Token Ids\\r\\n     * 1 2 3 Fire Lightning Steel Equipment Level 1\\r\\n     * 4 5 6 Fire Lightning Steel Equipment Level 2\\r\\n     * 7 8 9 Fire Lightning Steel Equipment Level 3\\r\\n     * 10 11 12 Fire Lightning Steel Equipment Level 4\\r\\n     * 13 14 15 Fire Lightning Steel Equipment Level 5\\r\\n     * 16 17 18 Fire Lightning Steel Equipment Level 6\\r\\n     * 19 20 21 Fire Lightning Steel Equipment Level 7\\r\\n     * 22 23 24 Fire Lightning Steel Equipment Level 8\\r\\n     * 25 26 27 Fire Lightning Steel Equipment Level 9\\r\\n     * 28 29 30 Fire Lightning Steel Equipment Level 10\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates cost of fusing equipment\\r\\n     * @param _id Specific equipment id\\r\\n     * @param _amountToCreate Amount of next tier equipment to create\\r\\n     * @return Fusion cost\\r\\n     */\\r\\n    function calculateFusionCost(uint256 _id, uint16 _amountToCreate) public view returns (uint256) {\\r\\n        // Logic for level 1 - 4\\r\\n        if (_id < 13) {\\r\\n            return 0;\\r\\n        } else if (_id > 27) {\\r\\n            revert UpgradeError();\\r\\n        }\\r\\n        // Logic above level 5\\r\\n        uint8 _level = getLevel(_id);\\r\\n        return uint256(_amountToCreate) * stardustCost[_level - 5];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates gemstone cost of fusing equipmenet\\r\\n     * @param _id Specific equipment id\\r\\n     * @param _amountToCreate Amount of next tier equipment to create\\r\\n     * @return Gemstone cost\\r\\n     */\\r\\n    function calculateGemstonesCost(uint256 _id, uint16 _amountToCreate) public view returns (uint16) {\\r\\n        // Logic for level 1 - 4\\r\\n        if (_id < 13) {\\r\\n            return 0;\\r\\n        }\\r\\n        // Logic above level 5\\r\\n        uint8 _level;\\r\\n        if ((_id % 3) == 0) {\\r\\n            _level = uint8(_id) / 3;\\r\\n        } else {\\r\\n            _level = uint8(_id) / 3 + 1;\\r\\n        }\\r\\n        return _amountToCreate * gemstonesRequired[_level - 5];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates how much is require dto fuse to get amountToCreate\\r\\n     * @param _id Specific equipment id\\r\\n     * @param _amountToCreate Amount of next tier equipment to create\\r\\n     * @return amount to fuse\\r\\n     */\\r\\n    function fuseEquipmentsView(uint256 _id, uint16 _amountToCreate) public view override returns (uint16) {\\r\\n        if (!exists(_id) || _amountToCreate == 0) {\\r\\n            revert UpgradeError();\\r\\n        }\\r\\n        // Get amount of gemstones to fuse\\r\\n        uint16 amountToFuse = 2 * _amountToCreate;\\r\\n        return amountToFuse;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets stardust costs\\r\\n     * @param _stardustCost Array of stardust costs\\r\\n     */\\r\\n    function setStardustCosts(uint256[] calldata _stardustCost) external onlyOwner {\\r\\n        // Loop through and set stardust\\r\\n        for (uint256 i = 0; i < _stardustCost.length; i++) {\\r\\n            // Check if the provided value is within the allowed range\\r\\n            require(_stardustCost[i] <= MAX_STARDUST_COST, \\\"Value exceeds the maximum allowed\\\");\\r\\n            stardustCost[i] = _stardustCost[i];\\r\\n        }\\r\\n        emit StardustCostsUpdated(_stardustCost);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets gemstones required\\r\\n     * @param _gemstonesRequired Array of gemstonesRequired\\r\\n     */\\r\\n    function setGemstonesRequired(uint16[] memory _gemstonesRequired) external onlyOwner {\\r\\n        // Loop through and set gemstonesRequired\\r\\n        for (uint8 i = 0; i < _gemstonesRequired.length; i++) {\\r\\n            // Check if the provided value is within the allowed range\\r\\n            require(_gemstonesRequired[i] <= MAX_GEMSTONES_REQUIRED, \\\"Value exceeds the maximum allowed\\\");\\r\\n            gemstonesRequired[i] = _gemstonesRequired[i];\\r\\n        }\\r\\n        emit GemstonesRequiredUpdated(_gemstonesRequired);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets speeds of equipments\\r\\n     * @param _equipmentSpeeds Array of equipment speeds\\r\\n     */\\r\\n    function setEquipmentSpeeds(uint16[] memory _equipmentSpeeds) external onlyOwner {\\r\\n        // Loop through and set equipmentSpeeds\\r\\n        for (uint8 i = 0; i < _equipmentSpeeds.length; i++) {\\r\\n            equipmentSpeeds[i] = _equipmentSpeeds[i];\\r\\n        }\\r\\n        emit EquipmentSpeedsUpdated(_equipmentSpeeds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Airdrop some equipments to an address\\r\\n     * @param _to          Address of the future owner of the token\\r\\n     * @param _id          Token ID to mint\\r\\n     * @param _quantity    Amount of tokens to mint\\r\\n     * @param _data        Data to pass if receiver is contract\\r\\n     */\\r\\n    function airdrop(address _to, uint256 _id, uint256 _quantity, bytes memory _data) external {\\r\\n        // Only whitelisted addresses can call this function\\r\\n        require(devAddresses[msg.sender], \\\"Only whitelisted addresses can call this function\\\");\\r\\n        _mint(_to, _id, _quantity, _data);\\r\\n    }\\r\\n\\r\\n    // Whitelist dev addresses\\r\\n    function whitelistDevAddresses(address[] memory _devAddresses) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _devAddresses.length; i++) {\\r\\n            devAddresses[_devAddresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause contract in case of emergency\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause contract in case of emergency\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b7f201e32bed5b9d5951e4d7fdf38e2363d7be973e1383247e6cc8eb3792c87\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a989d8dbb30529182950111aa77902fa22b4472c93588f1240b0524a423fbbd\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisEquipments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IAtlantisEquipments {\\r\\n    // ------------------------- EVENTS --------------------------\\r\\n    event FuseEquipment(address indexed _from, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\\r\\n    event BaseMetadataURIUpdated(string _baseMetadataURI);\\r\\n    event TokenURIUpdated(uint256 indexed _id, string _tokenURI);\\r\\n    event AddressRegistryUpdated(address _address);\\r\\n    event StardustCostsUpdated(uint256[] _stardustCosts);\\r\\n    event GemstonesRequiredUpdated(uint16[] _gemstonesRequired);\\r\\n    event EquipmentSpeedsUpdated(uint16[] _equipmentSpeeds);\\r\\n    event MintCostUpdated(uint256 _mintCost);\\r\\n    event PaymentModeUpdated(PaymentMode _paymentMode);\\r\\n    event PaymentTokenUpdated(address _paymentToken);\\r\\n    // ------------------------- ERRORS --------------------------\\r\\n    error UpgradeError();\\r\\n    error IdNotExistsError();\\r\\n\\r\\n    /// @notice Enum for payment mode\\r\\n    enum PaymentMode {\\r\\n        CRYPTO,\\r\\n        TOKEN\\r\\n    }\\r\\n\\r\\n    function fuseEquipment(uint256 _id, uint16 _amountToCreate) external;\\r\\n\\r\\n    function calculateFusionCost(uint256 _id, uint16 _amountToCreate) external view returns (uint256);\\r\\n\\r\\n    function fuseEquipmentsView(uint256 _id, uint16 _amountToCreate) external view returns (uint16);\\r\\n\\r\\n    function getLevel(uint256 _id) external pure returns (uint8);\\r\\n\\r\\n    function getSpeed(uint256 _id) external view returns (uint16);\\r\\n\\r\\n    function setStardustCosts(uint256[] calldata _stardustCost) external;\\r\\n\\r\\n    function getElement(uint256 _id) external pure returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x842469eb6fc7674b2a89e3ff3b1301118c32218fb06cfe6abc69edf1c9e5164c\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisGemstones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAtlantisGemstones is IERC1155 {\\r\\n    error NonExistentToken();\\r\\n    error OnlyAtlantisOrOwner();\\r\\n    error InvalidInputAmount();\\r\\n    error InvalidElement();\\r\\n    error InvalidUpgrade();\\r\\n\\r\\n    function fuseGemstones(uint8 _id, uint8 _toId, uint256 _amountToCreate) external;\\r\\n\\r\\n    function burn(address _user, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    event FusionCostUpdated(uint256 _newCost);\\r\\n    event BaseMetadataURIUpdated(string _newBaseMetadataURI);\\r\\n    event AddressRegistryUpdated(address _newAddressRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc7172913c331940714918bcb007f6c96be405e04a88a7706a5cdf39aaaf4a34\",\"license\":\"MIT\"},\"contracts/interface/IStakingWithLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n\\r\\ninterface IStakingWithLock {\\r\\n     function unstakeAndBurn(uint256 _amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8e687f098a3f0de38b65232ede9973f0ffe81a0fe6ded9deeb784c1e1389280d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052680ad78ebc5ac6200000600a553480156200001e57600080fd5b50604051620051973803806200519783398101604081905262000041916200078a565b866200004d816200029f565b506003805460ff191690556200006333620002b1565b60016004556001600160a01b038516620000d65760405162461bcd60e51b815260206004820152602960248201527f41746c616e74697345717569706d656e743a205265676973747279206973206160448201526864647265737328302960b81b60648201526084015b60405180910390fd5b6001600160a01b038416620001405760405162461bcd60e51b815260206004820152602960248201527f41746c616e74697345717569706d656e743a205472656173757279206973206160448201526864647265737328302960b81b6064820152608401620000cd565b60066200014e8a826200091f565b5060076200015d89826200091f565b5062000169876200030b565b620001748662000360565b600b80546001600160a01b038088166001600160a01b0319928316179092556014805492871692909116919091179055620001b3600c84600562000443565b50620001c3601183600562000486565b50620001d3601282600a62000486565b506005805460ff19166001179055600b546040805163301c981160e21b815290516001600160a01b039092169163c0726044916004808201926020929091908290030181865afa1580156200022c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002529190620009eb565b60058054610100600160a81b0319166101006001600160a01b0393841602179055959095166000908152601560205260409020805460ff191660011790555062000a479650505050505050565b6002620002ad82826200091f565b5050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000315620003df565b60096200032382826200091f565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d98160405162000355919062000a12565b60405180910390a150565b6200036a620003df565b6001600160a01b038116620003d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000cd565b620003dc81620002b1565b50565b6003546001600160a01b03610100909104163314620004415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000cd565b565b826005810192821562000474579160200282015b828111156200047457825182559160200191906001019062000457565b506200048292915062000519565b5090565b600183019183908215620004745791602002820160005b83821115620004df57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200049d565b80156200050f5782816101000a81549061ffff0219169055600201602081600101049283019260010302620004df565b5050620004829291505b5b808211156200048257600081556001016200051a565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200056b576200056b62000530565b60405290565b60005b838110156200058e57818101518382015260200162000574565b50506000910152565b600082601f830112620005a957600080fd5b81516001600160401b0380821115620005c657620005c662000530565b604051601f8301601f19908116603f01168101908282118183101715620005f157620005f162000530565b816040528381528660208588010111156200060b57600080fd5b6200061e84602083016020890162000571565b9695505050505050565b6001600160a01b0381168114620003dc57600080fd5b80516200064b8162000628565b919050565b600082601f8301126200066257600080fd5b6200066c62000546565b8060a08401858111156200067f57600080fd5b845b818110156200069b57805184526020938401930162000681565b509095945050505050565b805161ffff811681146200064b57600080fd5b600082601f830112620006cb57600080fd5b620006d562000546565b8060a0840185811115620006e857600080fd5b845b818110156200069b57620006fe81620006a6565b845260209384019301620006ea565b600082601f8301126200071f57600080fd5b6040516101408082016001600160401b038111838210171562000746576200074662000530565b604052830181858211156200075a57600080fd5b845b828110156200077f576200077081620006a6565b8252602091820191016200075c565b509195945050505050565b60008060008060008060008060006103408a8c031215620007aa57600080fd5b89516001600160401b0380821115620007c257600080fd5b620007d08d838e0162000597565b9a5060208c0151915080821115620007e757600080fd5b620007f58d838e0162000597565b995060408c01519150808211156200080c57600080fd5b506200081b8c828d0162000597565b9750506200082c60608b016200063e565b95506200083c60808b016200063e565b94506200084c60a08b016200063e565b93506200085d8b60c08c0162000650565b92506200086f8b6101608c01620006b9565b9150620008818b6102008c016200070d565b90509295985092959850929598565b600181811c90821680620008a557607f821691505b602082108103620008c657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200091a57600081815260208120601f850160051c81016020861015620008f55750805b601f850160051c820191505b81811015620009165782815560010162000901565b5050505b505050565b81516001600160401b038111156200093b576200093b62000530565b62000953816200094c845462000890565b84620008cc565b602080601f8311600181146200098b5760008415620009725750858301515b600019600386901b1c1916600185901b17855562000916565b600085815260208120601f198616915b82811015620009bc578886015182559484019460019091019084016200099b565b5085821015620009db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620009fe57600080fd5b815162000a0b8162000628565b9392505050565b602081526000825180602084015262000a3381604085016020870162000571565b601f01601f19169190910160400192915050565b6147408062000a576000396000f3fe6080604052600436106103345760003560e01c80638545f4ea116101ab578063d547cfb7116100f7578063ecade89511610095578063f3ad65f41161006f578063f3ad65f4146109d0578063f3e863bc146109f0578063f679303314610a10578063f9a59eb714610a2657600080fd5b8063ecade89514610970578063f242432a14610990578063f2fde38b146109b057600080fd5b8063e07fa3c1116100d1578063e07fa3c1146108d4578063e0de617d146108e9578063e118ee2014610907578063e985e9c51461092757600080fd5b8063d547cfb71461088a578063dc6ece2a1461089f578063de8bce9d146108b457600080fd5b8063a22cb46511610164578063bd85b0391161013e578063bd85b03914610807578063bdb4b84814610834578063c77d51e01461084a578063c7a8bc8d1461086a57600080fd5b8063a22cb46514610797578063b3d8eb4b146107b7578063b48ab8b6146107e757600080fd5b80638545f4ea146106d857806386481d40146106f85780638da5cb5b1461071857806395d89b411461073b5780639c3d78e314610750578063a1db97821461077757600080fd5b80634892ecaa116102855780635c975abb11610223578063715018a6116101fd578063715018a61461066e5780637e518ec8146106835780638456cb59146106a3578063847b0dc0146106b857600080fd5b80635c975abb1461061657806361d027b31461062e5780636a326ab11461064e57600080fd5b80634e1273f41161025f5780634e1273f4146105895780634f558e79146105b657806352207c4a146105d6578063533eb22d146105f657600080fd5b80634892ecaa146105295780634b93f753146105495780634ca2aa4d1461056957600080fd5b80633013ce29116102f257806332bb3878116102cc57806332bb3878146104b05780633a7d22bc146104cf5780633f4ba83a1461050157806340c10f191461051657600080fd5b80633013ce2914610420578063313995f11461045d578063319811651461047d57600080fd5b8062fdd58e1461033957806301ffc9a71461036c57806306fdde031461039c5780630e89341c146103be57806327c7812c146103de5780632eb2c2d614610400575b600080fd5b34801561034557600080fd5b506103596103543660046133dc565b610a46565b6040519081526020015b60405180910390f35b34801561037857600080fd5b5061038c61038736600461341e565b610adf565b6040519015158152602001610363565b3480156103a857600080fd5b506103b1610b2f565b604051610363919061348b565b3480156103ca57600080fd5b506103b16103d936600461349e565b610bbd565b3480156103ea57600080fd5b506103fe6103f93660046134b7565b610d33565b005b34801561040c57600080fd5b506103fe61041b366004613627565b610e00565b34801561042c57600080fd5b506005546104459061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610363565b34801561046957600080fd5b506103fe6104783660046136eb565b610e4c565b34801561048957600080fd5b5061049d61049836600461349e565b610efe565b60405161ffff9091168152602001610363565b3480156104bc57600080fd5b506103596a084595161401484a00000081565b3480156104db57600080fd5b506104ef6104ea36600461349e565b610f2c565b60405160ff9091168152602001610363565b34801561050d57600080fd5b506103fe610f6d565b6103fe6105243660046133dc565b610f7f565b34801561053557600080fd5b506103fe6105443660046137fc565b6112b1565b34801561055557600080fd5b5061049d61056436600461349e565b611325565b34801561057557600080fd5b506103fe6105843660046136eb565b6113a8565b34801561059557600080fd5b506105a96105a4366004613830565b6114a0565b60405161036391906138ce565b3480156105c257600080fd5b5061038c6105d136600461349e565b6115c9565b3480156105e257600080fd5b5061049d6105f136600461349e565b6115dd565b34801561060257600080fd5b506103fe6106113660046138e1565b6115ed565b34801561062257600080fd5b5060035460ff1661038c565b34801561063a57600080fd5b50601454610445906001600160a01b031681565b34801561065a57600080fd5b506103fe6106693660046134b7565b611894565b34801561067a57600080fd5b506103fe611967565b34801561068f57600080fd5b506103fe61069e36600461390d565b611979565b3480156106af57600080fd5b506103fe6119bd565b3480156106c457600080fd5b506103596106d33660046138e1565b6119cd565b3480156106e457600080fd5b506103fe6106f336600461349e565b611a47565b34801561070457600080fd5b506104ef61071336600461349e565b611b05565b34801561072457600080fd5b5060035461010090046001600160a01b0316610445565b34801561074757600080fd5b506103b1611b75565b34801561075c57600080fd5b5060055461076a9060ff1681565b604051610363919061396b565b34801561078357600080fd5b506103fe6107923660046133dc565b611b82565b3480156107a357600080fd5b506103fe6107b23660046139a1565b611c6f565b3480156107c357600080fd5b5061038c6107d23660046134b7565b60156020526000908152604090205460ff1681565b3480156107f357600080fd5b506103fe6108023660046139da565b611c7a565b34801561081357600080fd5b5061035961082236600461349e565b60009081526008602052604090205490565b34801561084057600080fd5b50610359600a5481565b34801561085657600080fd5b5061049d6108653660046138e1565b611c94565b34801561087657600080fd5b5061035961088536600461349e565b611cd8565b34801561089657600080fd5b506103b1611cef565b3480156108ab57600080fd5b50610359601e81565b3480156108c057600080fd5b5061049d6108cf3660046138e1565b611cfc565b3480156108e057600080fd5b506103fe611d93565b3480156108f557600080fd5b506103596969e10de76676d080000081565b34801561091357600080fd5b506103fe610922366004613a74565b611e11565b34801561093357600080fd5b5061038c610942366004613aca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561097c57600080fd5b506103fe61098b366004613af8565b611e96565b34801561099c57600080fd5b506103fe6109ab366004613b6c565b611f69565b3480156109bc57600080fd5b506103fe6109cb3660046134b7565b611fae565b3480156109dc57600080fd5b50600b54610445906001600160a01b031681565b3480156109fc57600080fd5b50610359610a0b36600461349e565b612024565b348015610a1c57600080fd5b5061049d6101f481565b348015610a3257600080fd5b506103fe610a41366004613bd4565b61208b565b60006001600160a01b038316610ab65760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b1480610b1057506001600160e01b031982166303a24d0760e21b145b80610ad957506301ffc9a760e01b6001600160e01b0319831614610ad9565b60068054610b3c90613bf5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6890613bf5565b8015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b505050505081565b6060610bc8826115c9565b610c275760405162461bcd60e51b815260206004820152602a60248201527f5265736f75726365733a2055524920717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610aad565b6000610c32836120e5565b9050600081610c4b610c4386611b05565b60ff1661219c565b604051602001610c5c929190613c4b565b604051602081830303815290604052905080604051602001610c7e9190613cb3565b60405160208183030381529060405290508082610c9d610c4387611b05565b610cb2610ca988611325565b61ffff1661219c565b604051602001610cc59493929190613df3565b6040516020818303038152906040529050610d0881610ce38661222e565b604051602001610cf4929190613f08565b604051602081830303815290604052612278565b905080604051602001610d1b9190613f5c565b60405160208183030381529060405292505050919050565b610d3b6123de565b6001600160a01b038116610dac5760405162461bcd60e51b815260206004820152603260248201527f41746c616e74697345717569706d656e74733a2041646472657373205265676960448201527173747279206973206164647265737328302960701b6064820152608401610aad565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b6001600160a01b038516331480610e1c5750610e1c8533610942565b610e385760405162461bcd60e51b8152600401610aad90613fa1565b610e45858585858561243e565b5050505050565b610e546123de565b60005b81518160ff161015610ece57818160ff1681518110610e7857610e78613fef565b602002602001015160128260ff16600a8110610e9657610e96613fef565b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080610ec69061401b565b915050610e57565b507f40a0311c2c005469b2aab4491d4af898bca63a29e93bb1bad934393cfb9ef5a181604051610df5919061403a565b60118160058110610f0e57600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6000601e821180610f3b575081155b15610f5957604051630d77971360e11b815260040160405180910390fd5b6000610f66600384614098565b9392505050565b610f756123de565b610f7d6125e8565b565b600b5460408051638cc84db760e01b815290516000926001600160a01b031691638cc84db79160048083019260209291908290030181865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed91906140ba565b905060008060055460ff16600181111561100957611009613955565b0361107c57600a5461101b90846140d7565b34146110775760405162461bcd60e51b815260206004820152602560248201527f41746c616e74697345717569706d656e74733a20496e73756666696369656e746044820152642043524f2160d81b6064820152608401610aad565b611249565b600b60009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f391906140ba565b6005546001600160a01b039182166101009091049091160361118157816001600160a01b031663a7b8b49184600a5461112c91906140d7565b6040518263ffffffff1660e01b815260040161114a91815260200190565b600060405180830381600087803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b50505050611249565b600560019054906101000a90046001600160a01b03166001600160a01b03166323b872dd333086600a546111b591906140d7565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d91906140ee565b6112495760405162461bcd60e51b8152600401610aad9061410b565b60005b83811015610e455761125c61263a565b611267906001614134565b915060016013600082825461127c9190614134565b9250508190555061129f85836001604051806020016040528060008152506126b1565b806112a981614147565b91505061124c565b6112b96123de565b60005b8151811015611321576001601560008484815181106112dd576112dd613fef565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061131981614147565b9150506112bc565b5050565b6000601e82111561134957604051630d77971360e11b815260040160405180910390fd5b8160000361135957506000919050565b600061136483611b05565b90506012611373600183614160565b60ff16600a811061138657611386613fef565b601091828204019190066002029054906101000a900461ffff16915050919050565b6113b06123de565b60005b81518160ff161015611470576101f461ffff16828260ff16815181106113db576113db613fef565b602002602001015161ffff1611156114055760405162461bcd60e51b8152600401610aad90614179565b818160ff168151811061141a5761141a613fef565b602002602001015160118260ff166005811061143857611438613fef565b601091828204019190066002026101000a81548161ffff021916908361ffff16021790555080806114689061401b565b9150506113b3565b507fe81577211d9975f00cfe41bcbbe40e08403891b18b369494e80a7debc13054d081604051610df5919061403a565b606081518351146115055760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610aad565b600083516001600160401b03811115611520576115206134d4565b604051908082528060200260200182016040528015611549578160200160208202803683370190505b50905060005b84518110156115c15761159485828151811061156d5761156d613fef565b602002602001015185838151811061158757611587613fef565b6020026020010151610a46565b8282815181106115a6576115a6613fef565b60209081029190910101526115ba81614147565b905061154f565b509392505050565b60008082118015610ad9575050601e101590565b601281600a8110610f0e57600080fd5b6115f561279a565b600b5460408051633c36884360e11b815290516000926001600160a01b03169163786d10869160048083019260209291908290030181865afa15801561163f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166391906140ba565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b0316638cc84db76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de91906140ba565b905060006116ec85856119cd565b905060006116fa8686611cfc565b61ffff169050600061170c8787611c94565b61ffff169050600061171f886003614134565b905061172c3389846127f3565b61174b33828961ffff16604051806020016040528060008152506126b1565b856001600160a01b031663f5298aca336117648b612024565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101869052606401600060405180830381600087803b1580156117b157600080fd5b505af11580156117c5573d6000803e3d6000fd5b50505050600084111561182d5760405163a7b8b49160e01b8152600481018590526001600160a01b0386169063a7b8b49190602401600060405180830381600087803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b505050505b80337fdf12b4bb90c3369aed19b118de446a1d58b668c901813629a6baf8190c739205896118678460009081526008602052604090205490565b6040805161ffff909316835260208301919091520160405180910390a35050505050506113216001600455565b61189c6123de565b6001600160a01b0381166119115760405162461bcd60e51b815260206004820152603660248201527f41746c616e74697345717569706d656e74733a205061796d656e7420746f6b656044820152756e2063616e6e6f74206265206164647265737328302960501b6064820152608401610aad565b60058054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fbd4032c1c91da2791730ea1bbc82c6b6f857da7c0a8318143d19ef74e62cd91390602001610df5565b61196f6123de565b610f7d6000612983565b6119816123de565b600961198d8282614200565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d981604051610df5919061348b565b6119c56123de565b610f7d6129dd565b6000600d8310156119e057506000610ad9565b601b831115611a0257604051632e23e9d160e01b815260040160405180910390fd5b6000611a0d84611b05565b9050600c611a1c600583614160565b60ff1660058110611a2f57611a2f613fef565b0154611a3f9061ffff85166140d7565b949350505050565b611a4f6123de565b6a084595161401484a000000811115611ad05760405162461bcd60e51b815260206004820152603b60248201527f41746c616e74697345717569706d656e74733a204d696e7420636f737420636160448201527f6e6e6f742062652061626f7665206d6178206d696e7420636f737400000000006064820152608401610aad565b600a8190556040518181527fde03a6195f6a732ff0af69781292526beecc585b4278fa1baa4d9dd578f88a5c90602001610df5565b6000601e821115611b2957604051630d77971360e11b815260040160405180910390fd5b81600003611b3957506000919050565b6000611b466003846142bf565b600003611b5f57611b586003846142d3565b9050610ad9565b611b6a6003846142d3565b610f669060016142f5565b60078054610b3c90613bf5565b611b8a6123de565b6001600160a01b038216611bd65760405162461bcd60e51b8152602060048201526013602482015272546f6b656e206973206164647265737328302960681b6044820152606401610aad565b60145460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101839052839182169063a9059cbb906044016020604051808303816000875af1158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e91906140ee565b611c6a5760405162461bcd60e51b8152600401610aad9061410b565b505050565b611321338383612a1a565b611c826123de565b611c8e84848484612afa565b50505050565b6000611c9f836115c9565b1580611cad575061ffff8216155b15611ccb57604051632e23e9d160e01b815260040160405180910390fd5b6000611a3f83600261430e565b600c8160058110611ce857600080fd5b0154905081565b60098054610b3c90613bf5565b6000600d831015611d0f57506000610ad9565b6000611d1c6003856142bf565b600003611d3557611d2e6003856142d3565b9050611d4e565b611d406003856142d3565b611d4b9060016142f5565b90505b6011611d5b600583614160565b60ff1660058110611d6e57611d6e613fef565b601091828204019190066002029054906101000a900461ffff1683611a3f919061430e565b611d9b6123de565b6014546040516000916001600160a01b03169047908381818185875af1925050503d8060008114611de8576040519150601f19603f3d011682016040523d82523d6000602084013e611ded565b606091505b5050905080611e0e5760405162461bcd60e51b8152600401610aad9061410b565b50565b3360009081526015602052604090205460ff16611e8a5760405162461bcd60e51b815260206004820152603160248201527f4f6e6c792077686974656c6973746564206164647265737365732063616e206360448201527030b636103a3434b990333ab731ba34b7b760791b6064820152608401610aad565b611c8e848484846126b1565b611e9e6123de565b60005b81811015611f2b576969e10de76676d0800000838383818110611ec657611ec6613fef565b905060200201351115611eeb5760405162461bcd60e51b8152600401610aad90614179565b828282818110611efd57611efd613fef565b90506020020135600c8260058110611f1757611f17613fef565b015580611f2381614147565b915050611ea1565b507f3212cb4e709caad2e535420b446765407f0f1d0ae3f8d28bfaa2af32d93267ac8282604051611f5d929190614334565b60405180910390a15050565b6001600160a01b038516331480611f855750611f858533610942565b611fa15760405162461bcd60e51b8152600401610aad90613fa1565b610e458585858585612c54565b611fb66123de565b6001600160a01b03811661201b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aad565b611e0e81612983565b6000601b82111561204857604051632e23e9d160e01b815260040160405180910390fd5b60006120556003846142bf565b90506000816001036120695750600a610f66565b816002036120795750600b610f66565b81600003610f665750600c9392505050565b6120936123de565b6005805482919060ff1916600183818111156120b1576120b1613955565b02179055507ff7e655920d70e25761347ac15a1c87f9e9b6d2e70286b2042389a0564e20bacb81604051610df5919061396b565b606060006120f46003846142bf565b905060608160010361212e5750604080518082019091526011815270496e6665726e6f2054687275737465727360781b6020820152610f66565b8160020361216457506040805180820190915260118152705468756e646572626f6c742057696e677360781b6020820152610f66565b81600003610f665750604080518082019091526011815270105c99dbdb9a5d5b48115e1bdcda195b1b607a1b60208201529392505050565b606060006121a983612d8c565b60010190506000816001600160401b038111156121c8576121c86134d4565b6040519080825280601f01601f1916602001820160405280156121f2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846121fc57509392505050565b6060612238612e64565b612244610c4384610f2c565b612250610c4385611b05565b6040516020016122629392919061436d565b6040516020818303038152906040529050919050565b6060815160000361229757505060408051602081019091526000815290565b60006040518060600160405280604081526020016146cb60409139905060006003845160026122c69190614134565b6122d091906143ce565b6122db9060046140d7565b905060006122ea826020614134565b6001600160401b03811115612301576123016134d4565b6040519080825280601f01601f19166020018201604052801561232b576020820181803683370190505b509050818152600183018586518101602084015b818310156123995760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161233f565b6003895106600181146123b357600281146123c4576123d0565b613d3d60f01b6001198301526123d0565b603d60f81b6000198301525b509398975050505050505050565b6003546001600160a01b03610100909104163314610f7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aad565b815183511461245f5760405162461bcd60e51b8152600401610aad906143e2565b6001600160a01b0384166124855760405162461bcd60e51b8152600401610aad9061442a565b33612494818787878787612ef6565b60005b845181101561257a5760008582815181106124b4576124b4613fef565b6020026020010151905060008583815181106124d2576124d2613fef565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156125225760405162461bcd60e51b8152600401610aad9061446f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061255f908490614134565b925050819055505050508061257390614147565b9050612497565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125ca9291906144b9565b60405180910390a46125e08187878787876130d7565b505050505050565b6125f0613232565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6013546040516bffffffffffffffffffffffff1933606090811b8216602084015241901b16603482015244604882015245606882015242608882015260a8810191909152600090819060c80160408051601f19818403018152919052805160209091012090506126ab6003826142bf565b91505090565b6001600160a01b0384166126d75760405162461bcd60e51b8152600401610aad906144e7565b3360006126e38561327b565b905060006126f08561327b565b905061270183600089858589612ef6565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290612731908490614134565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612791836000898989896132c6565b50505050505050565b6002600454036127ec5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aad565b6002600455565b6001600160a01b0383166128555760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610aad565b3360006128618461327b565b9050600061286e8461327b565b905061288e83876000858560405180602001604052806000815250612ef6565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561290b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610aad565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052612791565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6129e5613381565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861261d3390565b816001600160a01b0316836001600160a01b031603612a8d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610aad565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612b205760405162461bcd60e51b8152600401610aad906144e7565b8151835114612b415760405162461bcd60e51b8152600401610aad906143e2565b33612b5181600087878787612ef6565b60005b8451811015612bec57838181518110612b6f57612b6f613fef565b6020026020010151600080878481518110612b8c57612b8c613fef565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612bd49190614134565b90915550819050612be481614147565b915050612b54565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612c3d9291906144b9565b60405180910390a4610e45816000878787876130d7565b6001600160a01b038416612c7a5760405162461bcd60e51b8152600401610aad9061442a565b336000612c868561327b565b90506000612c938561327b565b9050612ca3838989858589612ef6565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015612ce45760405162461bcd60e51b8152600401610aad9061446f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612d21908490614134565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612d81848a8a8a8a8a6132c6565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612dcb5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612df7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e1557662386f26fc10000830492506010015b6305f5e1008310612e2d576305f5e100830492506008015b6127108310612e4157612710830492506004015b60648310612e53576064830492506002015b600a8310610ad95760010192915050565b606060098054612e7390613bf5565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9f90613bf5565b8015612eec5780601f10612ec157610100808354040283529160200191612eec565b820191906000526020600020905b815481529060010190602001808311612ecf57829003601f168201915b5050505050905090565b60035460ff1615612f5e5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610aad565b6001600160a01b038516612fe55760005b8351811015612fe357828181518110612f8a57612f8a613fef565b602002602001015160086000868481518110612fa857612fa8613fef565b602002602001015181526020019081526020016000206000828254612fcd9190614134565b90915550612fdc905081614147565b9050612f6f565b505b6001600160a01b0384166125e05760005b835181101561279157600084828151811061301357613013613fef565b60200260200101519050600084838151811061303157613031613fef565b60200260200101519050600060086000848152602001908152602001600020549050818110156130b45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610aad565b600092835260086020526040909220910390556130d081614147565b9050612ff6565b6001600160a01b0384163b156125e05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061311b9089908990889088908890600401614528565b6020604051808303816000875af1925050508015613156575060408051601f3d908101601f1916820190925261315391810190614586565b60015b613202576131626145a3565b806308c379a00361319b57506131766145bf565b80613181575061319d565b8060405162461bcd60e51b8152600401610aad919061348b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610aad565b6001600160e01b0319811663bc197c8160e01b146127915760405162461bcd60e51b8152600401610aad90614648565b60035460ff16610f7d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aad565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106132b5576132b5613fef565b602090810291909101015292915050565b6001600160a01b0384163b156125e05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061330a9089908990889088908890600401614690565b6020604051808303816000875af1925050508015613345575060408051601f3d908101601f1916820190925261334291810190614586565b60015b613351576131626145a3565b6001600160e01b0319811663f23a6e6160e01b146127915760405162461bcd60e51b8152600401610aad90614648565b60035460ff1615610f7d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610aad565b6001600160a01b0381168114611e0e57600080fd5b600080604083850312156133ef57600080fd5b82356133fa816133c7565b946020939093013593505050565b6001600160e01b031981168114611e0e57600080fd5b60006020828403121561343057600080fd5b8135610f6681613408565b60005b8381101561345657818101518382015260200161343e565b50506000910152565b6000815180845261347781602086016020860161343b565b601f01601f19169290920160200192915050565b602081526000610f66602083018461345f565b6000602082840312156134b057600080fd5b5035919050565b6000602082840312156134c957600080fd5b8135610f66816133c7565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561350f5761350f6134d4565b6040525050565b60006001600160401b0382111561352f5761352f6134d4565b5060051b60200190565b600082601f83011261354a57600080fd5b8135602061355782613516565b60405161356482826134ea565b83815260059390931b850182019282810191508684111561358457600080fd5b8286015b8481101561359f5780358352918301918301613588565b509695505050505050565b60006001600160401b038311156135c3576135c36134d4565b6040516135da601f8501601f1916602001826134ea565b8091508381528484840111156135ef57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261361857600080fd5b610f66838335602085016135aa565b600080600080600060a0868803121561363f57600080fd5b853561364a816133c7565b9450602086013561365a816133c7565b935060408601356001600160401b038082111561367657600080fd5b61368289838a01613539565b9450606088013591508082111561369857600080fd5b6136a489838a01613539565b935060808801359150808211156136ba57600080fd5b506136c788828901613607565b9150509295509295909350565b803561ffff811681146136e657600080fd5b919050565b600060208083850312156136fe57600080fd5b82356001600160401b0381111561371457600080fd5b8301601f8101851361372557600080fd5b803561373081613516565b60405161373d82826134ea565b82815260059290921b830184019184810191508783111561375d57600080fd5b928401925b8284101561378257613773846136d4565b82529284019290840190613762565b979650505050505050565b600082601f83011261379e57600080fd5b813560206137ab82613516565b6040516137b882826134ea565b83815260059390931b85018201928281019150868411156137d857600080fd5b8286015b8481101561359f5780356137ef816133c7565b83529183019183016137dc565b60006020828403121561380e57600080fd5b81356001600160401b0381111561382457600080fd5b611a3f8482850161378d565b6000806040838503121561384357600080fd5b82356001600160401b038082111561385a57600080fd5b6138668683870161378d565b9350602085013591508082111561387c57600080fd5b5061388985828601613539565b9150509250929050565b600081518084526020808501945080840160005b838110156138c3578151875295820195908201906001016138a7565b509495945050505050565b602081526000610f666020830184613893565b600080604083850312156138f457600080fd5b82359150613904602084016136d4565b90509250929050565b60006020828403121561391f57600080fd5b81356001600160401b0381111561393557600080fd5b8201601f8101841361394657600080fd5b611a3f848235602084016135aa565b634e487b7160e01b600052602160045260246000fd5b602081016002831061398d57634e487b7160e01b600052602160045260246000fd5b91905290565b8015158114611e0e57600080fd5b600080604083850312156139b457600080fd5b82356139bf816133c7565b915060208301356139cf81613993565b809150509250929050565b600080600080608085870312156139f057600080fd5b84356139fb816133c7565b935060208501356001600160401b0380821115613a1757600080fd5b613a2388838901613539565b94506040870135915080821115613a3957600080fd5b613a4588838901613539565b93506060870135915080821115613a5b57600080fd5b50613a6887828801613607565b91505092959194509250565b60008060008060808587031215613a8a57600080fd5b8435613a95816133c7565b9350602085013592506040850135915060608501356001600160401b03811115613abe57600080fd5b613a6887828801613607565b60008060408385031215613add57600080fd5b8235613ae8816133c7565b915060208301356139cf816133c7565b60008060208385031215613b0b57600080fd5b82356001600160401b0380821115613b2257600080fd5b818501915085601f830112613b3657600080fd5b813581811115613b4557600080fd5b8660208260051b8501011115613b5a57600080fd5b60209290920196919550909350505050565b600080600080600060a08688031215613b8457600080fd5b8535613b8f816133c7565b94506020860135613b9f816133c7565b9350604086013592506060860135915060808601356001600160401b03811115613bc857600080fd5b6136c788828901613607565b600060208284031215613be657600080fd5b813560028110610f6657600080fd5b600181811c90821680613c0957607f821691505b602082108103613c2957634e487b7160e01b600052602260045260246000fd5b50919050565b60008151613c4181856020860161343b565b9290920192915050565b693d913730b6b2911d101160b11b81528251600090613c7181600a85016020880161343b565b660102632bb32b6160cd1b600a918401918201528351613c9881601184016020880161343b565b61088b60f21b60119290910191820152601301949350505050565b60008251613cc581846020870161343b565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e2045717569706d656e74206172652060608201527f76616c7561626c65206974656d732077686963682070726f766964657320737060808201527f65656420626f6f737420746f20796f757220537061636573686970732e20467560a08201527f736520322045717569706d656e74206f66207468652073616d65206c6576656c60c082015271081d1bc81b195d995b081a5d081d5c08488b60721b60e082015260f201919050565b60008551613e05818460208a0161343b565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a20225481526f3cb832911610113b30b63ab2911d101160811b60208201528551613e59816030840160208a0161343b565b62089f4b60ea1b6030929091019182018190527f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a603383015261101160f11b605383018190528651613eb2816055860160208b0161343b565b60559301928301919091527f7b2274726169745f74797065223a20225370656564222c202276616c7565223a60588301526078820152613782613ef8607a830186613c2f565b63089f574b60e21b815260040190565b60008351613f1a81846020880161343b565b691134b6b0b3b2911d101160b11b9083019081528351613f4181600a84016020880161343b565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613f9481601d85016020870161343b565b91909101601d0192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361403157614031614005565b60010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561407657835161ffff1683529284019291840191600101614056565b50909695505050505050565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806140ab576140ab614082565b8060ff84160691505092915050565b6000602082840312156140cc57600080fd5b8151610f66816133c7565b8082028115828204841417610ad957610ad9614005565b60006020828403121561410057600080fd5b8151610f6681613993565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b80820180821115610ad957610ad9614005565b60006001820161415957614159614005565b5060010190565b60ff8281168282160390811115610ad957610ad9614005565b60208082526021908201527f56616c7565206578636565647320746865206d6178696d756d20616c6c6f77656040820152601960fa1b606082015260800190565b601f821115611c6a57600081815260208120601f850160051c810160208610156141e15750805b601f850160051c820191505b818110156125e0578281556001016141ed565b81516001600160401b03811115614219576142196134d4565b61422d816142278454613bf5565b846141ba565b602080601f831160018114614262576000841561424a5750858301515b600019600386901b1c1916600185901b1785556125e0565b600085815260208120601f198616915b8281101561429157888601518255948401946001909101908401614272565b50858210156142af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826142ce576142ce614082565b500690565b600060ff8316806142e6576142e6614082565b8060ff84160491505092915050565b60ff8181168382160190811115610ad957610ad9614005565b61ffff81811683821602808216919082811461432c5761432c614005565b505092915050565b6020808252810182905260006001600160fb1b0383111561435457600080fd5b8260051b80856040850137919091016040019392505050565b6000845161437f81846020890161343b565b84519083019061439381836020890161343b565b602f60f81b910190815283516143b081600184016020880161343b565b632e706e6760e01b6001929091019182015260050195945050505050565b6000826143dd576143dd614082565b500490565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006144cc6040830185613893565b82810360208401526144de8185613893565b95945050505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061455490830186613893565b82810360608401526145668186613893565b9050828103608084015261457a818561345f565b98975050505050505050565b60006020828403121561459857600080fd5b8151610f6681613408565b600060033d11156145bc5760046000803e5060005160e01c5b90565b600060443d10156145cd5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156145fc57505050505090565b82850191508151818111156146145750505050505090565b843d870101602082850101111561462e5750505050505090565b61463d602082860101876134ea565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137829083018461345f56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122091bb73427ae6a7e1b548061b288f71a2ba1fb35510e86773879d1383dd30252764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103345760003560e01c80638545f4ea116101ab578063d547cfb7116100f7578063ecade89511610095578063f3ad65f41161006f578063f3ad65f4146109d0578063f3e863bc146109f0578063f679303314610a10578063f9a59eb714610a2657600080fd5b8063ecade89514610970578063f242432a14610990578063f2fde38b146109b057600080fd5b8063e07fa3c1116100d1578063e07fa3c1146108d4578063e0de617d146108e9578063e118ee2014610907578063e985e9c51461092757600080fd5b8063d547cfb71461088a578063dc6ece2a1461089f578063de8bce9d146108b457600080fd5b8063a22cb46511610164578063bd85b0391161013e578063bd85b03914610807578063bdb4b84814610834578063c77d51e01461084a578063c7a8bc8d1461086a57600080fd5b8063a22cb46514610797578063b3d8eb4b146107b7578063b48ab8b6146107e757600080fd5b80638545f4ea146106d857806386481d40146106f85780638da5cb5b1461071857806395d89b411461073b5780639c3d78e314610750578063a1db97821461077757600080fd5b80634892ecaa116102855780635c975abb11610223578063715018a6116101fd578063715018a61461066e5780637e518ec8146106835780638456cb59146106a3578063847b0dc0146106b857600080fd5b80635c975abb1461061657806361d027b31461062e5780636a326ab11461064e57600080fd5b80634e1273f41161025f5780634e1273f4146105895780634f558e79146105b657806352207c4a146105d6578063533eb22d146105f657600080fd5b80634892ecaa146105295780634b93f753146105495780634ca2aa4d1461056957600080fd5b80633013ce29116102f257806332bb3878116102cc57806332bb3878146104b05780633a7d22bc146104cf5780633f4ba83a1461050157806340c10f191461051657600080fd5b80633013ce2914610420578063313995f11461045d578063319811651461047d57600080fd5b8062fdd58e1461033957806301ffc9a71461036c57806306fdde031461039c5780630e89341c146103be57806327c7812c146103de5780632eb2c2d614610400575b600080fd5b34801561034557600080fd5b506103596103543660046133dc565b610a46565b6040519081526020015b60405180910390f35b34801561037857600080fd5b5061038c61038736600461341e565b610adf565b6040519015158152602001610363565b3480156103a857600080fd5b506103b1610b2f565b604051610363919061348b565b3480156103ca57600080fd5b506103b16103d936600461349e565b610bbd565b3480156103ea57600080fd5b506103fe6103f93660046134b7565b610d33565b005b34801561040c57600080fd5b506103fe61041b366004613627565b610e00565b34801561042c57600080fd5b506005546104459061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610363565b34801561046957600080fd5b506103fe6104783660046136eb565b610e4c565b34801561048957600080fd5b5061049d61049836600461349e565b610efe565b60405161ffff9091168152602001610363565b3480156104bc57600080fd5b506103596a084595161401484a00000081565b3480156104db57600080fd5b506104ef6104ea36600461349e565b610f2c565b60405160ff9091168152602001610363565b34801561050d57600080fd5b506103fe610f6d565b6103fe6105243660046133dc565b610f7f565b34801561053557600080fd5b506103fe6105443660046137fc565b6112b1565b34801561055557600080fd5b5061049d61056436600461349e565b611325565b34801561057557600080fd5b506103fe6105843660046136eb565b6113a8565b34801561059557600080fd5b506105a96105a4366004613830565b6114a0565b60405161036391906138ce565b3480156105c257600080fd5b5061038c6105d136600461349e565b6115c9565b3480156105e257600080fd5b5061049d6105f136600461349e565b6115dd565b34801561060257600080fd5b506103fe6106113660046138e1565b6115ed565b34801561062257600080fd5b5060035460ff1661038c565b34801561063a57600080fd5b50601454610445906001600160a01b031681565b34801561065a57600080fd5b506103fe6106693660046134b7565b611894565b34801561067a57600080fd5b506103fe611967565b34801561068f57600080fd5b506103fe61069e36600461390d565b611979565b3480156106af57600080fd5b506103fe6119bd565b3480156106c457600080fd5b506103596106d33660046138e1565b6119cd565b3480156106e457600080fd5b506103fe6106f336600461349e565b611a47565b34801561070457600080fd5b506104ef61071336600461349e565b611b05565b34801561072457600080fd5b5060035461010090046001600160a01b0316610445565b34801561074757600080fd5b506103b1611b75565b34801561075c57600080fd5b5060055461076a9060ff1681565b604051610363919061396b565b34801561078357600080fd5b506103fe6107923660046133dc565b611b82565b3480156107a357600080fd5b506103fe6107b23660046139a1565b611c6f565b3480156107c357600080fd5b5061038c6107d23660046134b7565b60156020526000908152604090205460ff1681565b3480156107f357600080fd5b506103fe6108023660046139da565b611c7a565b34801561081357600080fd5b5061035961082236600461349e565b60009081526008602052604090205490565b34801561084057600080fd5b50610359600a5481565b34801561085657600080fd5b5061049d6108653660046138e1565b611c94565b34801561087657600080fd5b5061035961088536600461349e565b611cd8565b34801561089657600080fd5b506103b1611cef565b3480156108ab57600080fd5b50610359601e81565b3480156108c057600080fd5b5061049d6108cf3660046138e1565b611cfc565b3480156108e057600080fd5b506103fe611d93565b3480156108f557600080fd5b506103596969e10de76676d080000081565b34801561091357600080fd5b506103fe610922366004613a74565b611e11565b34801561093357600080fd5b5061038c610942366004613aca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561097c57600080fd5b506103fe61098b366004613af8565b611e96565b34801561099c57600080fd5b506103fe6109ab366004613b6c565b611f69565b3480156109bc57600080fd5b506103fe6109cb3660046134b7565b611fae565b3480156109dc57600080fd5b50600b54610445906001600160a01b031681565b3480156109fc57600080fd5b50610359610a0b36600461349e565b612024565b348015610a1c57600080fd5b5061049d6101f481565b348015610a3257600080fd5b506103fe610a41366004613bd4565b61208b565b60006001600160a01b038316610ab65760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b1480610b1057506001600160e01b031982166303a24d0760e21b145b80610ad957506301ffc9a760e01b6001600160e01b0319831614610ad9565b60068054610b3c90613bf5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6890613bf5565b8015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b505050505081565b6060610bc8826115c9565b610c275760405162461bcd60e51b815260206004820152602a60248201527f5265736f75726365733a2055524920717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610aad565b6000610c32836120e5565b9050600081610c4b610c4386611b05565b60ff1661219c565b604051602001610c5c929190613c4b565b604051602081830303815290604052905080604051602001610c7e9190613cb3565b60405160208183030381529060405290508082610c9d610c4387611b05565b610cb2610ca988611325565b61ffff1661219c565b604051602001610cc59493929190613df3565b6040516020818303038152906040529050610d0881610ce38661222e565b604051602001610cf4929190613f08565b604051602081830303815290604052612278565b905080604051602001610d1b9190613f5c565b60405160208183030381529060405292505050919050565b610d3b6123de565b6001600160a01b038116610dac5760405162461bcd60e51b815260206004820152603260248201527f41746c616e74697345717569706d656e74733a2041646472657373205265676960448201527173747279206973206164647265737328302960701b6064820152608401610aad565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b6001600160a01b038516331480610e1c5750610e1c8533610942565b610e385760405162461bcd60e51b8152600401610aad90613fa1565b610e45858585858561243e565b5050505050565b610e546123de565b60005b81518160ff161015610ece57818160ff1681518110610e7857610e78613fef565b602002602001015160128260ff16600a8110610e9657610e96613fef565b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080610ec69061401b565b915050610e57565b507f40a0311c2c005469b2aab4491d4af898bca63a29e93bb1bad934393cfb9ef5a181604051610df5919061403a565b60118160058110610f0e57600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6000601e821180610f3b575081155b15610f5957604051630d77971360e11b815260040160405180910390fd5b6000610f66600384614098565b9392505050565b610f756123de565b610f7d6125e8565b565b600b5460408051638cc84db760e01b815290516000926001600160a01b031691638cc84db79160048083019260209291908290030181865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed91906140ba565b905060008060055460ff16600181111561100957611009613955565b0361107c57600a5461101b90846140d7565b34146110775760405162461bcd60e51b815260206004820152602560248201527f41746c616e74697345717569706d656e74733a20496e73756666696369656e746044820152642043524f2160d81b6064820152608401610aad565b611249565b600b60009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f391906140ba565b6005546001600160a01b039182166101009091049091160361118157816001600160a01b031663a7b8b49184600a5461112c91906140d7565b6040518263ffffffff1660e01b815260040161114a91815260200190565b600060405180830381600087803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b50505050611249565b600560019054906101000a90046001600160a01b03166001600160a01b03166323b872dd333086600a546111b591906140d7565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d91906140ee565b6112495760405162461bcd60e51b8152600401610aad9061410b565b60005b83811015610e455761125c61263a565b611267906001614134565b915060016013600082825461127c9190614134565b9250508190555061129f85836001604051806020016040528060008152506126b1565b806112a981614147565b91505061124c565b6112b96123de565b60005b8151811015611321576001601560008484815181106112dd576112dd613fef565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061131981614147565b9150506112bc565b5050565b6000601e82111561134957604051630d77971360e11b815260040160405180910390fd5b8160000361135957506000919050565b600061136483611b05565b90506012611373600183614160565b60ff16600a811061138657611386613fef565b601091828204019190066002029054906101000a900461ffff16915050919050565b6113b06123de565b60005b81518160ff161015611470576101f461ffff16828260ff16815181106113db576113db613fef565b602002602001015161ffff1611156114055760405162461bcd60e51b8152600401610aad90614179565b818160ff168151811061141a5761141a613fef565b602002602001015160118260ff166005811061143857611438613fef565b601091828204019190066002026101000a81548161ffff021916908361ffff16021790555080806114689061401b565b9150506113b3565b507fe81577211d9975f00cfe41bcbbe40e08403891b18b369494e80a7debc13054d081604051610df5919061403a565b606081518351146115055760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610aad565b600083516001600160401b03811115611520576115206134d4565b604051908082528060200260200182016040528015611549578160200160208202803683370190505b50905060005b84518110156115c15761159485828151811061156d5761156d613fef565b602002602001015185838151811061158757611587613fef565b6020026020010151610a46565b8282815181106115a6576115a6613fef565b60209081029190910101526115ba81614147565b905061154f565b509392505050565b60008082118015610ad9575050601e101590565b601281600a8110610f0e57600080fd5b6115f561279a565b600b5460408051633c36884360e11b815290516000926001600160a01b03169163786d10869160048083019260209291908290030181865afa15801561163f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166391906140ba565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b0316638cc84db76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116de91906140ba565b905060006116ec85856119cd565b905060006116fa8686611cfc565b61ffff169050600061170c8787611c94565b61ffff169050600061171f886003614134565b905061172c3389846127f3565b61174b33828961ffff16604051806020016040528060008152506126b1565b856001600160a01b031663f5298aca336117648b612024565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101869052606401600060405180830381600087803b1580156117b157600080fd5b505af11580156117c5573d6000803e3d6000fd5b50505050600084111561182d5760405163a7b8b49160e01b8152600481018590526001600160a01b0386169063a7b8b49190602401600060405180830381600087803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b505050505b80337fdf12b4bb90c3369aed19b118de446a1d58b668c901813629a6baf8190c739205896118678460009081526008602052604090205490565b6040805161ffff909316835260208301919091520160405180910390a35050505050506113216001600455565b61189c6123de565b6001600160a01b0381166119115760405162461bcd60e51b815260206004820152603660248201527f41746c616e74697345717569706d656e74733a205061796d656e7420746f6b656044820152756e2063616e6e6f74206265206164647265737328302960501b6064820152608401610aad565b60058054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fbd4032c1c91da2791730ea1bbc82c6b6f857da7c0a8318143d19ef74e62cd91390602001610df5565b61196f6123de565b610f7d6000612983565b6119816123de565b600961198d8282614200565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d981604051610df5919061348b565b6119c56123de565b610f7d6129dd565b6000600d8310156119e057506000610ad9565b601b831115611a0257604051632e23e9d160e01b815260040160405180910390fd5b6000611a0d84611b05565b9050600c611a1c600583614160565b60ff1660058110611a2f57611a2f613fef565b0154611a3f9061ffff85166140d7565b949350505050565b611a4f6123de565b6a084595161401484a000000811115611ad05760405162461bcd60e51b815260206004820152603b60248201527f41746c616e74697345717569706d656e74733a204d696e7420636f737420636160448201527f6e6e6f742062652061626f7665206d6178206d696e7420636f737400000000006064820152608401610aad565b600a8190556040518181527fde03a6195f6a732ff0af69781292526beecc585b4278fa1baa4d9dd578f88a5c90602001610df5565b6000601e821115611b2957604051630d77971360e11b815260040160405180910390fd5b81600003611b3957506000919050565b6000611b466003846142bf565b600003611b5f57611b586003846142d3565b9050610ad9565b611b6a6003846142d3565b610f669060016142f5565b60078054610b3c90613bf5565b611b8a6123de565b6001600160a01b038216611bd65760405162461bcd60e51b8152602060048201526013602482015272546f6b656e206973206164647265737328302960681b6044820152606401610aad565b60145460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101839052839182169063a9059cbb906044016020604051808303816000875af1158015611c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4e91906140ee565b611c6a5760405162461bcd60e51b8152600401610aad9061410b565b505050565b611321338383612a1a565b611c826123de565b611c8e84848484612afa565b50505050565b6000611c9f836115c9565b1580611cad575061ffff8216155b15611ccb57604051632e23e9d160e01b815260040160405180910390fd5b6000611a3f83600261430e565b600c8160058110611ce857600080fd5b0154905081565b60098054610b3c90613bf5565b6000600d831015611d0f57506000610ad9565b6000611d1c6003856142bf565b600003611d3557611d2e6003856142d3565b9050611d4e565b611d406003856142d3565b611d4b9060016142f5565b90505b6011611d5b600583614160565b60ff1660058110611d6e57611d6e613fef565b601091828204019190066002029054906101000a900461ffff1683611a3f919061430e565b611d9b6123de565b6014546040516000916001600160a01b03169047908381818185875af1925050503d8060008114611de8576040519150601f19603f3d011682016040523d82523d6000602084013e611ded565b606091505b5050905080611e0e5760405162461bcd60e51b8152600401610aad9061410b565b50565b3360009081526015602052604090205460ff16611e8a5760405162461bcd60e51b815260206004820152603160248201527f4f6e6c792077686974656c6973746564206164647265737365732063616e206360448201527030b636103a3434b990333ab731ba34b7b760791b6064820152608401610aad565b611c8e848484846126b1565b611e9e6123de565b60005b81811015611f2b576969e10de76676d0800000838383818110611ec657611ec6613fef565b905060200201351115611eeb5760405162461bcd60e51b8152600401610aad90614179565b828282818110611efd57611efd613fef565b90506020020135600c8260058110611f1757611f17613fef565b015580611f2381614147565b915050611ea1565b507f3212cb4e709caad2e535420b446765407f0f1d0ae3f8d28bfaa2af32d93267ac8282604051611f5d929190614334565b60405180910390a15050565b6001600160a01b038516331480611f855750611f858533610942565b611fa15760405162461bcd60e51b8152600401610aad90613fa1565b610e458585858585612c54565b611fb66123de565b6001600160a01b03811661201b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aad565b611e0e81612983565b6000601b82111561204857604051632e23e9d160e01b815260040160405180910390fd5b60006120556003846142bf565b90506000816001036120695750600a610f66565b816002036120795750600b610f66565b81600003610f665750600c9392505050565b6120936123de565b6005805482919060ff1916600183818111156120b1576120b1613955565b02179055507ff7e655920d70e25761347ac15a1c87f9e9b6d2e70286b2042389a0564e20bacb81604051610df5919061396b565b606060006120f46003846142bf565b905060608160010361212e5750604080518082019091526011815270496e6665726e6f2054687275737465727360781b6020820152610f66565b8160020361216457506040805180820190915260118152705468756e646572626f6c742057696e677360781b6020820152610f66565b81600003610f665750604080518082019091526011815270105c99dbdb9a5d5b48115e1bdcda195b1b607a1b60208201529392505050565b606060006121a983612d8c565b60010190506000816001600160401b038111156121c8576121c86134d4565b6040519080825280601f01601f1916602001820160405280156121f2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846121fc57509392505050565b6060612238612e64565b612244610c4384610f2c565b612250610c4385611b05565b6040516020016122629392919061436d565b6040516020818303038152906040529050919050565b6060815160000361229757505060408051602081019091526000815290565b60006040518060600160405280604081526020016146cb60409139905060006003845160026122c69190614134565b6122d091906143ce565b6122db9060046140d7565b905060006122ea826020614134565b6001600160401b03811115612301576123016134d4565b6040519080825280601f01601f19166020018201604052801561232b576020820181803683370190505b509050818152600183018586518101602084015b818310156123995760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161233f565b6003895106600181146123b357600281146123c4576123d0565b613d3d60f01b6001198301526123d0565b603d60f81b6000198301525b509398975050505050505050565b6003546001600160a01b03610100909104163314610f7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aad565b815183511461245f5760405162461bcd60e51b8152600401610aad906143e2565b6001600160a01b0384166124855760405162461bcd60e51b8152600401610aad9061442a565b33612494818787878787612ef6565b60005b845181101561257a5760008582815181106124b4576124b4613fef565b6020026020010151905060008583815181106124d2576124d2613fef565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156125225760405162461bcd60e51b8152600401610aad9061446f565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061255f908490614134565b925050819055505050508061257390614147565b9050612497565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125ca9291906144b9565b60405180910390a46125e08187878787876130d7565b505050505050565b6125f0613232565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6013546040516bffffffffffffffffffffffff1933606090811b8216602084015241901b16603482015244604882015245606882015242608882015260a8810191909152600090819060c80160408051601f19818403018152919052805160209091012090506126ab6003826142bf565b91505090565b6001600160a01b0384166126d75760405162461bcd60e51b8152600401610aad906144e7565b3360006126e38561327b565b905060006126f08561327b565b905061270183600089858589612ef6565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290612731908490614134565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612791836000898989896132c6565b50505050505050565b6002600454036127ec5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610aad565b6002600455565b6001600160a01b0383166128555760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610aad565b3360006128618461327b565b9050600061286e8461327b565b905061288e83876000858560405180602001604052806000815250612ef6565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561290b5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610aad565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052612791565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6129e5613381565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861261d3390565b816001600160a01b0316836001600160a01b031603612a8d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610aad565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612b205760405162461bcd60e51b8152600401610aad906144e7565b8151835114612b415760405162461bcd60e51b8152600401610aad906143e2565b33612b5181600087878787612ef6565b60005b8451811015612bec57838181518110612b6f57612b6f613fef565b6020026020010151600080878481518110612b8c57612b8c613fef565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612bd49190614134565b90915550819050612be481614147565b915050612b54565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612c3d9291906144b9565b60405180910390a4610e45816000878787876130d7565b6001600160a01b038416612c7a5760405162461bcd60e51b8152600401610aad9061442a565b336000612c868561327b565b90506000612c938561327b565b9050612ca3838989858589612ef6565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015612ce45760405162461bcd60e51b8152600401610aad9061446f565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612d21908490614134565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612d81848a8a8a8a8a6132c6565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612dcb5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612df7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e1557662386f26fc10000830492506010015b6305f5e1008310612e2d576305f5e100830492506008015b6127108310612e4157612710830492506004015b60648310612e53576064830492506002015b600a8310610ad95760010192915050565b606060098054612e7390613bf5565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9f90613bf5565b8015612eec5780601f10612ec157610100808354040283529160200191612eec565b820191906000526020600020905b815481529060010190602001808311612ecf57829003601f168201915b5050505050905090565b60035460ff1615612f5e5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610aad565b6001600160a01b038516612fe55760005b8351811015612fe357828181518110612f8a57612f8a613fef565b602002602001015160086000868481518110612fa857612fa8613fef565b602002602001015181526020019081526020016000206000828254612fcd9190614134565b90915550612fdc905081614147565b9050612f6f565b505b6001600160a01b0384166125e05760005b835181101561279157600084828151811061301357613013613fef565b60200260200101519050600084838151811061303157613031613fef565b60200260200101519050600060086000848152602001908152602001600020549050818110156130b45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610aad565b600092835260086020526040909220910390556130d081614147565b9050612ff6565b6001600160a01b0384163b156125e05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061311b9089908990889088908890600401614528565b6020604051808303816000875af1925050508015613156575060408051601f3d908101601f1916820190925261315391810190614586565b60015b613202576131626145a3565b806308c379a00361319b57506131766145bf565b80613181575061319d565b8060405162461bcd60e51b8152600401610aad919061348b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610aad565b6001600160e01b0319811663bc197c8160e01b146127915760405162461bcd60e51b8152600401610aad90614648565b60035460ff16610f7d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aad565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106132b5576132b5613fef565b602090810291909101015292915050565b6001600160a01b0384163b156125e05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061330a9089908990889088908890600401614690565b6020604051808303816000875af1925050508015613345575060408051601f3d908101601f1916820190925261334291810190614586565b60015b613351576131626145a3565b6001600160e01b0319811663f23a6e6160e01b146127915760405162461bcd60e51b8152600401610aad90614648565b60035460ff1615610f7d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610aad565b6001600160a01b0381168114611e0e57600080fd5b600080604083850312156133ef57600080fd5b82356133fa816133c7565b946020939093013593505050565b6001600160e01b031981168114611e0e57600080fd5b60006020828403121561343057600080fd5b8135610f6681613408565b60005b8381101561345657818101518382015260200161343e565b50506000910152565b6000815180845261347781602086016020860161343b565b601f01601f19169290920160200192915050565b602081526000610f66602083018461345f565b6000602082840312156134b057600080fd5b5035919050565b6000602082840312156134c957600080fd5b8135610f66816133c7565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561350f5761350f6134d4565b6040525050565b60006001600160401b0382111561352f5761352f6134d4565b5060051b60200190565b600082601f83011261354a57600080fd5b8135602061355782613516565b60405161356482826134ea565b83815260059390931b850182019282810191508684111561358457600080fd5b8286015b8481101561359f5780358352918301918301613588565b509695505050505050565b60006001600160401b038311156135c3576135c36134d4565b6040516135da601f8501601f1916602001826134ea565b8091508381528484840111156135ef57600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261361857600080fd5b610f66838335602085016135aa565b600080600080600060a0868803121561363f57600080fd5b853561364a816133c7565b9450602086013561365a816133c7565b935060408601356001600160401b038082111561367657600080fd5b61368289838a01613539565b9450606088013591508082111561369857600080fd5b6136a489838a01613539565b935060808801359150808211156136ba57600080fd5b506136c788828901613607565b9150509295509295909350565b803561ffff811681146136e657600080fd5b919050565b600060208083850312156136fe57600080fd5b82356001600160401b0381111561371457600080fd5b8301601f8101851361372557600080fd5b803561373081613516565b60405161373d82826134ea565b82815260059290921b830184019184810191508783111561375d57600080fd5b928401925b8284101561378257613773846136d4565b82529284019290840190613762565b979650505050505050565b600082601f83011261379e57600080fd5b813560206137ab82613516565b6040516137b882826134ea565b83815260059390931b85018201928281019150868411156137d857600080fd5b8286015b8481101561359f5780356137ef816133c7565b83529183019183016137dc565b60006020828403121561380e57600080fd5b81356001600160401b0381111561382457600080fd5b611a3f8482850161378d565b6000806040838503121561384357600080fd5b82356001600160401b038082111561385a57600080fd5b6138668683870161378d565b9350602085013591508082111561387c57600080fd5b5061388985828601613539565b9150509250929050565b600081518084526020808501945080840160005b838110156138c3578151875295820195908201906001016138a7565b509495945050505050565b602081526000610f666020830184613893565b600080604083850312156138f457600080fd5b82359150613904602084016136d4565b90509250929050565b60006020828403121561391f57600080fd5b81356001600160401b0381111561393557600080fd5b8201601f8101841361394657600080fd5b611a3f848235602084016135aa565b634e487b7160e01b600052602160045260246000fd5b602081016002831061398d57634e487b7160e01b600052602160045260246000fd5b91905290565b8015158114611e0e57600080fd5b600080604083850312156139b457600080fd5b82356139bf816133c7565b915060208301356139cf81613993565b809150509250929050565b600080600080608085870312156139f057600080fd5b84356139fb816133c7565b935060208501356001600160401b0380821115613a1757600080fd5b613a2388838901613539565b94506040870135915080821115613a3957600080fd5b613a4588838901613539565b93506060870135915080821115613a5b57600080fd5b50613a6887828801613607565b91505092959194509250565b60008060008060808587031215613a8a57600080fd5b8435613a95816133c7565b9350602085013592506040850135915060608501356001600160401b03811115613abe57600080fd5b613a6887828801613607565b60008060408385031215613add57600080fd5b8235613ae8816133c7565b915060208301356139cf816133c7565b60008060208385031215613b0b57600080fd5b82356001600160401b0380821115613b2257600080fd5b818501915085601f830112613b3657600080fd5b813581811115613b4557600080fd5b8660208260051b8501011115613b5a57600080fd5b60209290920196919550909350505050565b600080600080600060a08688031215613b8457600080fd5b8535613b8f816133c7565b94506020860135613b9f816133c7565b9350604086013592506060860135915060808601356001600160401b03811115613bc857600080fd5b6136c788828901613607565b600060208284031215613be657600080fd5b813560028110610f6657600080fd5b600181811c90821680613c0957607f821691505b602082108103613c2957634e487b7160e01b600052602260045260246000fd5b50919050565b60008151613c4181856020860161343b565b9290920192915050565b693d913730b6b2911d101160b11b81528251600090613c7181600a85016020880161343b565b660102632bb32b6160cd1b600a918401918201528351613c9881601184016020880161343b565b61088b60f21b60119290910191820152601301949350505050565b60008251613cc581846020870161343b565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e2045717569706d656e74206172652060608201527f76616c7561626c65206974656d732077686963682070726f766964657320737060808201527f65656420626f6f737420746f20796f757220537061636573686970732e20467560a08201527f736520322045717569706d656e74206f66207468652073616d65206c6576656c60c082015271081d1bc81b195d995b081a5d081d5c08488b60721b60e082015260f201919050565b60008551613e05818460208a0161343b565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a20225481526f3cb832911610113b30b63ab2911d101160811b60208201528551613e59816030840160208a0161343b565b62089f4b60ea1b6030929091019182018190527f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a603383015261101160f11b605383018190528651613eb2816055860160208b0161343b565b60559301928301919091527f7b2274726169745f74797065223a20225370656564222c202276616c7565223a60588301526078820152613782613ef8607a830186613c2f565b63089f574b60e21b815260040190565b60008351613f1a81846020880161343b565b691134b6b0b3b2911d101160b11b9083019081528351613f4181600a84016020880161343b565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613f9481601d85016020870161343b565b91909101601d0192915050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361403157614031614005565b60010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561407657835161ffff1683529284019291840191600101614056565b50909695505050505050565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806140ab576140ab614082565b8060ff84160691505092915050565b6000602082840312156140cc57600080fd5b8151610f66816133c7565b8082028115828204841417610ad957610ad9614005565b60006020828403121561410057600080fd5b8151610f6681613993565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b80820180821115610ad957610ad9614005565b60006001820161415957614159614005565b5060010190565b60ff8281168282160390811115610ad957610ad9614005565b60208082526021908201527f56616c7565206578636565647320746865206d6178696d756d20616c6c6f77656040820152601960fa1b606082015260800190565b601f821115611c6a57600081815260208120601f850160051c810160208610156141e15750805b601f850160051c820191505b818110156125e0578281556001016141ed565b81516001600160401b03811115614219576142196134d4565b61422d816142278454613bf5565b846141ba565b602080601f831160018114614262576000841561424a5750858301515b600019600386901b1c1916600185901b1785556125e0565b600085815260208120601f198616915b8281101561429157888601518255948401946001909101908401614272565b50858210156142af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826142ce576142ce614082565b500690565b600060ff8316806142e6576142e6614082565b8060ff84160491505092915050565b60ff8181168382160190811115610ad957610ad9614005565b61ffff81811683821602808216919082811461432c5761432c614005565b505092915050565b6020808252810182905260006001600160fb1b0383111561435457600080fd5b8260051b80856040850137919091016040019392505050565b6000845161437f81846020890161343b565b84519083019061439381836020890161343b565b602f60f81b910190815283516143b081600184016020880161343b565b632e706e6760e01b6001929091019182015260050195945050505050565b6000826143dd576143dd614082565b500490565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006144cc6040830185613893565b82810360208401526144de8185613893565b95945050505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061455490830186613893565b82810360608401526145668186613893565b9050828103608084015261457a818561345f565b98975050505050505050565b60006020828403121561459857600080fd5b8151610f6681613408565b600060033d11156145bc5760046000803e5060005160e01c5b90565b600060443d10156145cd5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156145fc57505050505090565b82850191508151818111156146145750505050505090565b843d870101602082850101111561462e5750505050505090565b61463d602082860101876134ea565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137829083018461345f56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122091bb73427ae6a7e1b548061b288f71a2ba1fb35510e86773879d1383dd30252764736f6c63430008110033",
  "devdoc": {
    "details": "Fuse 2 equipment of the same tier to receive 1 from the next tier. Equipment can be equipped on spaceships to boost their speed in a race.",
    "kind": "dev",
    "methods": {
      "airdrop(address,uint256,uint256,bytes)": {
        "details": "Airdrop some equipments to an address",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(address,uint256[],uint256[],bytes)": {
        "details": "Mint tokens for each id in _ids",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_ids": "Array of ids to mint",
          "_quantities": "Array of amounts of tokens to mint per id",
          "_to": "The address to mint tokens to"
        }
      },
      "calculateFusionCost(uint256,uint16)": {
        "params": {
          "_amountToCreate": "Amount of next tier equipment to create",
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "Fusion cost"
        }
      },
      "calculateGemstonesCost(uint256,uint16)": {
        "params": {
          "_amountToCreate": "Amount of next tier equipment to create",
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "Gemstone cost"
        }
      },
      "constructor": {
        "params": {
          "_name": "Name of contract",
          "_registry": "Registry of Atlantis",
          "_symbol": "Symbol of contract",
          "_treasury": "Address of treaury",
          "baseURI": "base URI with images",
          "owner": "Address of owner"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "fuseEquipment(uint256,uint16)": {
        "params": {
          "_amountToCreate": "Amount of next tier equipment to create",
          "_id": "The id of the equipment"
        }
      },
      "fuseEquipmentsView(uint256,uint16)": {
        "params": {
          "_amountToCreate": "Amount of next tier equipment to create",
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "amount to fuse"
        }
      },
      "getElement(uint256)": {
        "params": {
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "element"
        }
      },
      "getGemstoneIdFromEquipmentId(uint256)": {
        "details": "Get gemstone id from equipment Id"
      },
      "getLevel(uint256)": {
        "params": {
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "level of equipment"
        }
      },
      "getSpeed(uint256)": {
        "params": {
          "_id": "Specific equipment id"
        },
        "returns": {
          "_0": "speed of equipment"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause contract in case of emergency"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setAddressRegistry(address)": {
        "details": "Set Address Registry contract address",
        "params": {
          "_addressRegistry": "Address of Address Registry contract"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBaseMetadataURI(string)": {
        "details": "Will update the base URL of token's URI",
        "params": {
          "_newBaseMetadataURI": "New base URL of token's URI"
        }
      },
      "setEquipmentSpeeds(uint16[])": {
        "params": {
          "_equipmentSpeeds": "Array of equipment speeds"
        }
      },
      "setGemstonesRequired(uint16[])": {
        "params": {
          "_gemstonesRequired": "Array of gemstonesRequired"
        }
      },
      "setStardustCosts(uint256[])": {
        "params": {
          "_stardustCost": "Array of stardust costs"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id.",
        "returns": {
          "_0": "uint256"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause contract in case of emergency"
      },
      "uri(uint256)": {
        "params": {
          "_tokenId": "The id of the equipment"
        },
        "returns": {
          "_0": "returns string of token metadata"
        }
      }
    },
    "title": "Atlantis - Equipment contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_GEMSTONES_REQUIRED()": {
        "notice": "Max number of gemstones required"
      },
      "MAX_MINT_COST()": {
        "notice": "Max mint cost"
      },
      "MAX_STARDUST_COST()": {
        "notice": "Max stardust cost"
      },
      "TOTAL_TOKEN_IDS()": {
        "notice": "Max number of tokeniDS"
      },
      "addressRegistry()": {
        "notice": "Contract address of address registry"
      },
      "baseTokenURI()": {
        "notice": "Base token URI"
      },
      "calculateFusionCost(uint256,uint16)": {
        "notice": "Calculates cost of fusing equipment"
      },
      "calculateGemstonesCost(uint256,uint16)": {
        "notice": "Calculates gemstone cost of fusing equipmenet"
      },
      "constructor": {
        "notice": "Constructor for Atlantis Equipments"
      },
      "devAddresses(address)": {
        "notice": "Whitelisted addresses who can call airdrop"
      },
      "equipmentSpeeds(uint256)": {
        "notice": "Speeds of equipment"
      },
      "fuseEquipment(uint256,uint16)": {
        "notice": "Fuse equipment"
      },
      "fuseEquipmentsView(uint256,uint16)": {
        "notice": "Calculates how much is require dto fuse to get amountToCreate"
      },
      "gemstonesRequired(uint256)": {
        "notice": "Number of gemstones required"
      },
      "getElement(uint256)": {
        "notice": "Get element from id"
      },
      "getLevel(uint256)": {
        "notice": "Get level of equipment from its id"
      },
      "getSpeed(uint256)": {
        "notice": "Get equipment speed from id"
      },
      "mintCost()": {
        "notice": "Mint cost of equipments"
      },
      "name()": {
        "notice": "Name of contract"
      },
      "paymentMode()": {
        "notice": "Current payment mode"
      },
      "paymentToken()": {
        "notice": "Current payment token"
      },
      "setEquipmentSpeeds(uint16[])": {
        "notice": "Sets speeds of equipments"
      },
      "setGemstonesRequired(uint16[])": {
        "notice": "Sets gemstones required"
      },
      "setStardustCosts(uint256[])": {
        "notice": "Sets stardust costs"
      },
      "stardustCost(uint256)": {
        "notice": "Cost of stardust required"
      },
      "symbol()": {
        "notice": "Name of symbol"
      },
      "treasury()": {
        "notice": "Address of treasury"
      },
      "uri(uint256)": {
        "notice": "Get token metadata with tokenId"
      },
      "withdrawERC20(address,uint256)": {
        "notice": "Withdraw all specified ERC20 tokens from this account to the owner"
      },
      "withdrawFund()": {
        "notice": "Withdraw all CRO from this account to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 300,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 306,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 308,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3995,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "paymentMode",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(PaymentMode)5653"
      },
      {
        "astId": 3999,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "paymentToken",
        "offset": 1,
        "slot": "5",
        "type": "t_contract(IERC20)1753"
      },
      {
        "astId": 4002,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4005,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 4010,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4013,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 4021,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "mintCost",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4025,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(AtlantisAddressRegistry)3960"
      },
      {
        "astId": 4030,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "stardustCost",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 4035,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "gemstonesRequired",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint16)5_storage"
      },
      {
        "astId": 4040,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "equipmentSpeeds",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint16)10_storage"
      },
      {
        "astId": 4043,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "nonce",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4046,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "treasury",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 4063,
        "contract": "contracts/AtlantisEquipments.sol:AtlantisEquipments",
        "label": "devAddresses",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)10_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[10]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)5_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[5]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AtlantisAddressRegistry)3960": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1753": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentMode)5653": {
        "encoding": "inplace",
        "label": "enum IAtlantisEquipments.PaymentMode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}