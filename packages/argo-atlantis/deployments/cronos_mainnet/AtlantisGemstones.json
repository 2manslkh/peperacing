{
  "address": "0xcbB22330413bE9C5dE7d80BBA4B14CE99d9F3aBa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IdNotExistsError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidElement",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInputAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidUpgrade",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAtlantisOrOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAddressRegistry",
          "type": "address"
        }
      ],
      "name": "AddressRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "BaseMetadataURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "FuseGemstone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "FusionCostUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "MintGemstone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUSION_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_TOKEN_IDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_toId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amountToCreate",
          "type": "uint256"
        }
      ],
      "name": "calculateFusionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_toId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amountToCreate",
          "type": "uint256"
        }
      ],
      "name": "calculateGemstoneCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "devAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_id",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_toId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amountToCreate",
          "type": "uint256"
        }
      ],
      "name": "fuseGemstones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getElement",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getTier",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "name": "setFusionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_devAddresses",
          "type": "address[]"
        }
      ],
      "name": "whitelistDevAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7aecd7478f38553869f111dab5d6799de7b8a99698dacf9f1a0a361bb1e1cf5d",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xcbB22330413bE9C5dE7d80BBA4B14CE99d9F3aBa",
    "transactionIndex": 0,
    "gasUsed": "3287188",
    "logsBloom": "0x
    "blockHash": "0xc6975591d855a2c3a0c480caf32f63d893fe96f62eb00fa0bfab86beb3156c3f",
    "transactionHash": "0x7aecd7478f38553869f111dab5d6799de7b8a99698dacf9f1a0a361bb1e1cf5d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8788076,
        "transactionHash": "0x7aecd7478f38553869f111dab5d6799de7b8a99698dacf9f1a0a361bb1e1cf5d",
        "address": "0xcbB22330413bE9C5dE7d80BBA4B14CE99d9F3aBa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc6975591d855a2c3a0c480caf32f63d893fe96f62eb00fa0bfab86beb3156c3f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8788076,
        "transactionHash": "0x7aecd7478f38553869f111dab5d6799de7b8a99698dacf9f1a0a361bb1e1cf5d",
        "address": "0xcbB22330413bE9C5dE7d80BBA4B14CE99d9F3aBa",
        "topics": [
          "0xd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d61486264696257674b5952546f6173656f4a58704567473967556b3170484a683357777241703358735676642f00000000000000000000",
        "logIndex": 1,
        "blockHash": "0xc6975591d855a2c3a0c480caf32f63d893fe96f62eb00fa0bfab86beb3156c3f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8788076,
        "transactionHash": "0x7aecd7478f38553869f111dab5d6799de7b8a99698dacf9f1a0a361bb1e1cf5d",
        "address": "0xcbB22330413bE9C5dE7d80BBA4B14CE99d9F3aBa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc6975591d855a2c3a0c480caf32f63d893fe96f62eb00fa0bfab86beb3156c3f"
      }
    ],
    "blockNumber": 8788076,
    "cumulativeGasUsed": "3287188",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Atlantis Gemstones",
    "GEMSTONES",
    "ipfs://QmaHbdibWgKYRToaseoJXpEgG9gUk1pHJh3WwrAp3XsVvd/",
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "0x16E96b2c52C816D26FEF4991733249e81965D88D"
  ],
  "numDeployments": 1,
  "solcInputHash": "86e2ac704f829300f438d3fb9b6ab693",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IdNotExistsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidElement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpgrade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAtlantisOrOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddressRegistry\",\"type\":\"address\"}],\"name\":\"AddressRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"FuseGemstone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"FusionCostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"MintGemstone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUSION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_TOKEN_IDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_toId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountToCreate\",\"type\":\"uint256\"}],\"name\":\"calculateFusionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_toId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountToCreate\",\"type\":\"uint256\"}],\"name\":\"calculateGemstoneCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"devAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_toId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountToCreate\",\"type\":\"uint256\"}],\"name\":\"fuseGemstones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setFusionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_devAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistDevAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Fuse 3 gemstones of the same tier to receive 1 from the next tier. Gemstones can be used to upgrade planets and are also required for certain levels of equipment fusion.\",\"kind\":\"dev\",\"methods\":{\"airdrop(address,uint256,uint256,bytes)\":{\"details\":\"Airdrops some gemstones to an address; for giveaways\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"baseURI()\":{\"details\":\"Gets baseToken URI\"},\"burn(address,uint256,uint256)\":{\"details\":\"Burns some amount of tokens from an address\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.There are only Gemstones with tokenIds 1-12\"},\"fuseGemstones(uint8,uint8,uint256)\":{\"details\":\"Fuse 3 Gemstones to get another Gemstone of a higher tier\",\"params\":{\"_amountToCreate\":\"The amount of Gemstones to create Gemstone Upgrade Sheet           Tier 1 -> Tier 2 -> Tier 3 -> Tier 4 FIRE      ID 1   -> ID 4   -> ID 7   -> ID 10 LIGHTNING ID 2   -> ID 5   -> ID 8   -> ID 11 STEEL     ID 3   -> ID 6   -> ID 9   -> ID 12\",\"_id\":\"The Gemstone id\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause contract in case of emergency\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setAddressRegistry(address)\":{\"params\":{\"_addressRegistry\":\"The address of the Address Registry\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBaseMetadataURI(string)\":{\"details\":\"Will update the base URL of token's URI\",\"params\":{\"_newBaseMetadataURI\":\"New base URL of token's URI\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause contract in case of emergency\"}},\"title\":\"Atlantis - Gemstones contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FUSION_COST()\":{\"notice\":\"Stardust fusion cost\"},\"TOTAL_TOKEN_IDS()\":{\"notice\":\"Total amount of Ids\"},\"addressRegistry()\":{\"notice\":\"Address registry contract\"},\"baseTokenURI()\":{\"notice\":\"Base token URI\"},\"devAddresses(address)\":{\"notice\":\"Whitelisted addresses who can call airdrop\"},\"name()\":{\"notice\":\"Name of contract\"},\"setAddressRegistry(address)\":{\"notice\":\"Set the Address Registry\"},\"symbol()\":{\"notice\":\"Symbol of contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlantisGemstones.sol\":\"AtlantisGemstones\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/AtlantisGemstones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/IStakingWithLock.sol\\\";\\r\\nimport { IAtlantisGemstones } from \\\"./interface/IAtlantisGemstones.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\nimport \\\"./common/Base64.sol\\\";\\r\\n\\r\\n/// @title Atlantis - Gemstones contract\\r\\n/// @dev Fuse 3 gemstones of the same tier to receive 1 from the next tier. Gemstones can be used to upgrade planets and are also required for certain levels of equipment fusion.\\r\\ncontract AtlantisGemstones is ERC1155, Pausable, Ownable, IAtlantisGemstones, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    /// @notice Address registry contract\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n    /// @notice Name of contract\\r\\n    string public name;\\r\\n    /// @notice Symbol of contract\\r\\n    string public symbol;\\r\\n    /// @notice Base token URI\\r\\n    string public baseTokenURI;\\r\\n    /// @notice Total amount of Ids\\r\\n    uint256 public constant TOTAL_TOKEN_IDS = 12;\\r\\n    /// @notice Total supply of each tokenId\\r\\n    mapping(uint256 => uint256) private _totalSupply;\\r\\n    /// @notice Stardust fusion cost\\r\\n    uint256 public FUSION_COST = 200 ether;\\r\\n    /// @notice Whitelisted addresses who can call airdrop\\r\\n    mapping(address => bool) public devAddresses;\\r\\n    // ------------------------- EVENTS --------------------------\\r\\n    event MintGemstone(address indexed _to, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\\r\\n    event FuseGemstone(address indexed _from, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\\r\\n    error IdNotExistsError();\\r\\n\\r\\n    // ----------------------- MODIFIERS -------------------------\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _uri,\\r\\n        address owner,\\r\\n        address _registry\\r\\n    ) ERC1155(_uri) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        addressRegistry = AtlantisAddressRegistry(_registry);\\r\\n\\r\\n        setBaseMetadataURI(_uri);\\r\\n        transferOwnership(owner);\\r\\n        devAddresses[owner] = true;\\r\\n    }\\r\\n\\r\\n    // ------------------------- PUBLIC FUNCTIONS ------------------------------\\r\\n    /**\\r\\n     * @dev Fuse 3 Gemstones to get another Gemstone of a higher tier\\r\\n     * @param _id The Gemstone id\\r\\n     * @param _amountToCreate The amount of Gemstones to create\\r\\n     * Gemstone Upgrade Sheet\\r\\n     *           Tier 1 -> Tier 2 -> Tier 3 -> Tier 4\\r\\n     * FIRE      ID 1   -> ID 4   -> ID 7   -> ID 10\\r\\n     * LIGHTNING ID 2   -> ID 5   -> ID 8   -> ID 11\\r\\n     * STEEL     ID 3   -> ID 6   -> ID 9   -> ID 12\\r\\n     */\\r\\n    function fuseGemstones(uint8 _id, uint8 _toId, uint256 _amountToCreate) external nonReentrant whenNotPaused {\\r\\n        IStakingWithLock stakingWithLock = IStakingWithLock(addressRegistry.getStakingWithLock());\\r\\n        // Calculate Gemstone required to fuse\\r\\n        uint256 _amountToBurn = calculateGemstoneCost(_id, _toId, _amountToCreate);\\r\\n        // Burn Gemstones\\r\\n        _burn(msg.sender, _id, _amountToBurn);\\r\\n        // Mint new Gemstone\\r\\n        _mint(msg.sender, _toId, _amountToCreate, \\\"\\\");\\r\\n        // Total fusion cost\\r\\n        uint256 fusionCost = calculateFusionCost(_id, _toId, _amountToCreate);\\r\\n        // Burn stardust\\r\\n        stakingWithLock.unstakeAndBurn(fusionCost);\\r\\n        // Emit fuse event\\r\\n        emit FuseGemstone(msg.sender, _toId, _amountToCreate, totalSupply(_toId));\\r\\n    }\\r\\n\\r\\n    // View function to calculate fusion cost\\r\\n    function calculateFusionCost(uint8 _id, uint8 _toId, uint256 _amountToCreate) public view returns (uint256) {\\r\\n        // Calculate Gemstone required to fuse\\r\\n        uint256 _amountToBurn = calculateGemstoneCost(_id, _toId, _amountToCreate);\\r\\n        return (_amountToBurn * FUSION_COST) / 3;\\r\\n    }\\r\\n\\r\\n    // View function to see how many Gemstones required to fuse to amountToCreate\\r\\n    function calculateGemstoneCost(uint8 _id, uint8 _toId, uint256 _amountToCreate) public view returns (uint256) {\\r\\n        if (_amountToCreate == 0) revert InvalidInputAmount();\\r\\n        if (!exists(_id) || !exists(_toId)) revert NonExistentToken();\\r\\n        if ((_toId % 3 != _id % 3)) revert InvalidElement();\\r\\n\\r\\n        if (_id >= _toId) revert InvalidUpgrade();\\r\\n\\r\\n        // Require toId to be more than id\\r\\n        // Require toId to be in multiples of 3 more than id\\r\\n        // Calculate how many Gemstones to fuse to get toId\\r\\n        // Get tier difference\\r\\n        uint8 tierDifference = (_toId - _id) / 3;\\r\\n        // Get amount of Gemstones to fuse\\r\\n        uint256 amountToFuse = 3 ** tierDifference * _amountToCreate;\\r\\n        return amountToFuse;\\r\\n    }\\r\\n\\r\\n    // Setter for fusion cost\\r\\n    function setFusionCost(uint256 _cost) external onlyOwner {\\r\\n        FUSION_COST = _cost;\\r\\n        emit FusionCostUpdated(_cost);\\r\\n    }\\r\\n\\r\\n    // Get element from id\\r\\n    function getElement(uint256 _id) public pure returns (uint8) {\\r\\n        if (_id > 12 || _id == 0) {\\r\\n            revert IdNotExistsError();\\r\\n        }\\r\\n        uint8 _element = uint8(_id) % 3;\\r\\n        return _element;\\r\\n    }\\r\\n\\r\\n    function _tokenIdtoElementString(uint256 _id) internal pure returns (string memory) {\\r\\n        if (_id > 12) {\\r\\n            revert IdNotExistsError();\\r\\n        }\\r\\n        uint8 _element = uint8(_id) % 3;\\r\\n        if (_element == 0) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (_element == 1) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else {\\r\\n            return \\\"Lightning\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Get tier from id\\r\\n    function getTier(uint256 _id) public pure returns (uint8) {\\r\\n        if (_id > 12) {\\r\\n            revert IdNotExistsError();\\r\\n        }\\r\\n        uint8 _tier = uint8(_id) / 3;\\r\\n        if (uint8(_id) % 3 == 0) {\\r\\n            return _tier;\\r\\n        } else {\\r\\n            return _tier + 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints some amount of tokens to an address\\r\\n     * @param _to          Address of the future owner of the token\\r\\n     * @param _id          Token ID to mint\\r\\n     * @param _quantity    Amount of tokens to mint\\r\\n     */\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity) external {\\r\\n        if (!(addressRegistry.isControllerContract(msg.sender) || msg.sender == owner())) revert OnlyAtlantisOrOwner();\\r\\n        if (!exists(_id)) revert NonExistentToken();\\r\\n        _mint(_to, _id, _quantity, \\\"\\\");\\r\\n        // emit Mint event\\r\\n        emit MintGemstone(_to, _id, _quantity, totalSupply(_id));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns some amount of tokens from an address\\r\\n     */\\r\\n    function burn(address _user, uint256 _id, uint256 _quantity) external {\\r\\n        if (!(addressRegistry.isControllerContract(msg.sender) || msg.sender == owner())) revert OnlyAtlantisOrOwner();\\r\\n        if (!exists(_id)) revert NonExistentToken();\\r\\n        _burn(_user, _id, _quantity);\\r\\n    }\\r\\n\\r\\n    // ------------------------- PUBLIC VIEW FUNCTIONS ------------------------------\\r\\n    // Get Image Uri\\r\\n    /**\\r\\n     * @notice Get ImageURI\\r\\n     * @param _tokenId The Gemstone id\\r\\n     */\\r\\n    function _getImageURI(uint256 _tokenId) internal view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    uint256(getElement(_tokenId)).toString(),\\r\\n                    \\\"/\\\",\\r\\n                    uint256(getTier(_tokenId)).toString(),\\r\\n                    \\\".png\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _tokenId) public view override returns (string memory) {\\r\\n        if (!exists(_tokenId)) revert NonExistentToken();\\r\\n        string memory element = _tokenIdtoElementString(_tokenId);\\r\\n        string memory json = string(\\r\\n            abi.encodePacked('{\\\"name\\\": \\\"', element, \\\" Gemstone Tier \\\", uint256(getTier(_tokenId)).toString(), '\\\",')\\r\\n        );\\r\\n        // Description\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"description\\\": \\\"Welcome to the captivating realm of Atlantis, the game-verse and home of the legendary Argonauts. Gemstones are powerful resources in Atlantis and exist in four different tiers. Acquire Gemstones to level up your planets and equipment parts. Fuse 3 Gemstones of the same tier to get a higher tier Gemstone!\\\",'\\r\\n            )\\r\\n        );\\r\\n        // Attributes\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Element\\\", \\\"value\\\": \\\"',\\r\\n                element,\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Tier\\\", \\\"value\\\": \\\"',\\r\\n                uint256(getTier(_tokenId)).toString(),\\r\\n                '\\\"}],'\\r\\n            )\\r\\n        );\\r\\n        json = Base64.encode(bytes(string(abi.encodePacked(json, '\\\"image\\\": \\\"', _getImageURI(_tokenId), '\\\"}'))));\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    // ------------------------- ADMIN FUNCTIONS ------------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Will update the base URL of token's URI\\r\\n     * @param _newBaseMetadataURI New base URL of token's URI\\r\\n     */\\r\\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyOwner {\\r\\n        baseTokenURI = _newBaseMetadataURI;\\r\\n        emit BaseMetadataURIUpdated(_newBaseMetadataURI);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Address Registry\\r\\n     * @param _addressRegistry The address of the Address Registry\\r\\n     */\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\\r\\n        // Require that the address is not null\\r\\n        require(address(_addressRegistry) != address(0), \\\"Address cannot be null\\\");\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit AddressRegistryUpdated(address(_addressRegistry));\\r\\n    }\\r\\n\\r\\n    // ------------------------- INTERNAL FUNCTIONS ------------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Gets baseToken URI\\r\\n     */\\r\\n    function _baseURI() internal view returns (string memory) {\\r\\n        return baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets baseToken URI\\r\\n     */\\r\\n    function baseURI() external view returns (string memory) {\\r\\n        return baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Total amount of tokens in with a given id.\\r\\n     */\\r\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\r\\n        return _totalSupply[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates whether any token exist with a given id, or not.\\r\\n     * @dev There are only Gemstones with tokenIds 1-12\\r\\n     */\\r\\n    function exists(uint256 _id) public view virtual returns (bool) {\\r\\n        return _id > 0 && _id <= TOTAL_TOKEN_IDS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override(ERC1155) {\\r\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n\\r\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                _totalSupply[ids[i]] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to == address(0)) {\\r\\n            for (uint256 i = 0; i < ids.length; ++i) {\\r\\n                uint256 id = ids[i];\\r\\n                uint256 amount = amounts[i];\\r\\n                uint256 supply = _totalSupply[id];\\r\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\r\\n                unchecked {\\r\\n                    _totalSupply[id] = supply - amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Airdrops some gemstones to an address; for giveaways\\r\\n     * @param _to          Address of the future owner of the token\\r\\n     * @param _id          Token ID to mint\\r\\n     * @param _quantity    Amount of tokens to mint\\r\\n     * @param _data        Data to pass if receiver is contract\\r\\n     */\\r\\n    function airdrop(address _to, uint256 _id, uint256 _quantity, bytes memory _data) external {\\r\\n        // Only whitelisted addresses can call this function\\r\\n        require(devAddresses[msg.sender], \\\"Only whitelisted addresses can call this function\\\");\\r\\n        // Only allow ids from 1-12\\r\\n        if (!exists(_id)) revert NonExistentToken();\\r\\n        _mint(_to, _id, _quantity, _data);\\r\\n    }\\r\\n\\r\\n    // Whitelist dev addresses\\r\\n    function whitelistDevAddresses(address[] memory _devAddresses) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _devAddresses.length; i++) {\\r\\n            devAddresses[_devAddresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pause contract in case of emergency\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpause contract in case of emergency\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1b90ba98d8e4b97b68dc20270cb3444bc8a999de48cb5e89b547ebce5e81da9e\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a989d8dbb30529182950111aa77902fa22b4472c93588f1240b0524a423fbbd\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisGemstones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAtlantisGemstones is IERC1155 {\\r\\n    error NonExistentToken();\\r\\n    error OnlyAtlantisOrOwner();\\r\\n    error InvalidInputAmount();\\r\\n    error InvalidElement();\\r\\n    error InvalidUpgrade();\\r\\n\\r\\n    function fuseGemstones(uint8 _id, uint8 _toId, uint256 _amountToCreate) external;\\r\\n\\r\\n    function burn(address _user, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    event FusionCostUpdated(uint256 _newCost);\\r\\n    event BaseMetadataURIUpdated(string _newBaseMetadataURI);\\r\\n    event AddressRegistryUpdated(address _newAddressRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc7172913c331940714918bcb007f6c96be405e04a88a7706a5cdf39aaaf4a34\",\"license\":\"MIT\"},\"contracts/interface/IStakingWithLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n\\r\\ninterface IStakingWithLock {\\r\\n     function unstakeAndBurn(uint256 _amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8e687f098a3f0de38b65232ede9973f0ffe81a0fe6ded9deeb784c1e1389280d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052680ad78ebc5ac6200000600a553480156200001e57600080fd5b5060405162003a7438038062003a74833981016040819052620000419162000376565b826200004d81620000e4565b506003805460ff191690556200006333620000f6565b60016004556006620000768682620004bc565b506007620000858582620004bc565b50600580546001600160a01b0319166001600160a01b038316179055620000ac8362000150565b620000b782620001a5565b506001600160a01b03166000908152600b60205260409020805460ff1916600117905550620005bd915050565b6002620000f28282620004bc565b5050565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200015a62000228565b6008620001688282620004bc565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d9816040516200019a919062000588565b60405180910390a150565b620001af62000228565b6001600160a01b0381166200021a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200022581620000f6565b50565b6003546001600160a01b036101009091041633146200028a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000211565b565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002bf578181015183820152602001620002a5565b50506000910152565b600082601f830112620002da57600080fd5b81516001600160401b0380821115620002f757620002f76200028c565b604051601f8301601f19908116603f011681019082821181831017156200032257620003226200028c565b816040528381528660208588010111156200033c57600080fd5b6200034f846020830160208901620002a2565b9695505050505050565b80516001600160a01b03811681146200037157600080fd5b919050565b600080600080600060a086880312156200038f57600080fd5b85516001600160401b0380821115620003a757600080fd5b620003b589838a01620002c8565b96506020880151915080821115620003cc57600080fd5b620003da89838a01620002c8565b95506040880151915080821115620003f157600080fd5b506200040088828901620002c8565b935050620004116060870162000359565b9150620004216080870162000359565b90509295509295909350565b600181811c908216806200044257607f821691505b6020821081036200046357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004b757600081815260208120601f850160051c81016020861015620004925750805b601f850160051c820191505b81811015620004b3578281556001016200049e565b5050505b505050565b81516001600160401b03811115620004d857620004d86200028c565b620004f081620004e984546200042d565b8462000469565b602080601f8311600181146200052857600084156200050f5750858301515b600019600386901b1c1916600185901b178555620004b3565b600085815260208120601f198616915b82811015620005595788860151825594840194600190910190840162000538565b5085821015620005785787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260008251806020840152620005a9816040850160208701620002a2565b601f01601f19169190910160400192915050565b6134a780620005cd6000396000f3fe608060405234801561001057600080fd5b506004361061021b5760003560e01c80636c0360eb11610125578063bd85b039116100ad578063e985e9c51161007c578063e985e9c514610488578063f242432a146104c4578063f2fde38b146104d7578063f3ad65f4146104ea578063f5298aca146104fd57600080fd5b8063bd85b03914610445578063d547cfb714610465578063dc6ece2a1461046d578063e118ee201461047557600080fd5b80638a4e1f7c116100f45780638a4e1f7c146103ca5780638da5cb5b146103dd57806395d89b4114610407578063a22cb4651461040f578063b3d8eb4b1461042257600080fd5b80636c0360eb1461039f578063715018a6146103a75780637e518ec8146103af5780638456cb59146103c257600080fd5b80632eb2c2d6116101a857806349e2fd0d1161017757806349e2fd0d1461033b5780634e1273f41461034e5780634f062c5a1461036e5780634f558e79146103815780635c975abb1461039457600080fd5b80632eb2c2d6146102e85780633a7d22bc146102fb5780633f4ba83a146103205780634892ecaa1461032857600080fd5b8063089b10b8116101ef578063089b10b8146102875780630e89341c1461029a578063156e29f6146102ad57806315ead29a146102c257806327c7812c146102d557600080fd5b8062fdd58e1461022057806301ffc9a714610246578063069b43ec1461026957806306fdde0314610272575b600080fd5b61023361022e3660046123be565b610510565b6040519081526020015b60405180910390f35b610259610254366004612400565b6105a9565b604051901515815260200161023d565b610233600a5481565b61027a6105f9565b60405161023d919061246d565b610233610295366004612496565b610687565b61027a6102a83660046124d2565b610785565b6102c06102bb3660046124eb565b6108a3565b005b6102c06102d0366004612496565b6109fa565b6102c06102e3366004612520565b610b7d565b6102c06102f6366004612690565b610c28565b61030e6103093660046124d2565b610c74565b60405160ff909116815260200161023d565b6102c0610cb5565b6102c06103363660046127ac565b610cc7565b6102c06103493660046124d2565b610d3b565b61036161035c3660046127e8565b610d78565b60405161023d9190612886565b61030e61037c3660046124d2565b610ea1565b61025961038f3660046124d2565b610f00565b60035460ff16610259565b61027a610f14565b6102c0610fa6565b6102c06103bd366004612899565b610fb8565b6102c0610ffc565b6102336103d8366004612496565b61100c565b60035461010090046001600160a01b03165b6040516001600160a01b03909116815260200161023d565b61027a61103f565b6102c061041d3660046128ef565b61104c565b610259610430366004612520565b600b6020526000908152604090205460ff1681565b6102336104533660046124d2565b60009081526009602052604090205490565b61027a611057565b610233600c81565b6102c0610483366004612928565b611064565b61025961049636600461298a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102c06104d23660046129b8565b611115565b6102c06104e5366004612520565b61115a565b6005546103ef906001600160a01b031681565b6102c061050b3660046124eb565b6111d3565b60006001600160a01b0383166105805760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806105da57506001600160e01b031982166303a24d0760e21b145b806105a357506301ffc9a760e01b6001600160e01b03198316146105a3565b6006805461060690612a20565b80601f016020809104026020016040519081016040528092919081815260200182805461063290612a20565b801561067f5780601f106106545761010080835404028352916020019161067f565b820191906000526020600020905b81548152906001019060200180831161066257829003601f168201915b505050505081565b6000816000036106aa5760405163340dabef60e01b815260040160405180910390fd5b6106b68460ff16610f00565b15806106cb57506106c98360ff16610f00565b155b156106e957604051634a1850bf60e11b815260040160405180910390fd5b6106f4600385612a6a565b60ff16610702600385612a6a565b60ff161461072357604051630dee7a0b60e11b815260040160405180910390fd5b8260ff168460ff16106107495760405163012fa17760e61b815260040160405180910390fd5b600060036107578686612aa2565b6107619190612abb565b9050600083610771836003612bc1565b61077b9190612bd0565b9695505050505050565b606061079082610f00565b6107ad57604051634a1850bf60e11b815260040160405180910390fd5b60006107b8836112b9565b90506000816107d16107c986610ea1565b60ff1661136e565b6040516020016107e2929190612be7565b6040516020818303038152906040529050806040516020016108049190612c57565b604051602081830303815290604052905080826108236107c987610ea1565b60405160200161083593929190612dff565b60405160208183030381529060405290506108788161085386611400565b604051602001610864929190612eda565b60405160208183030381529060405261144a565b90508060405160200161088b9190612f2e565b60405160208183030381529060405292505050919050565b600554604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190612f73565b8061093b575060035461010090046001600160a01b03166001600160a01b0316336001600160a01b0316145b61095857604051630e1c193960e41b815260040160405180910390fd5b61096182610f00565b61097e57604051634a1850bf60e11b815260040160405180910390fd5b610999838383604051806020016040528060008152506115b0565b81836001600160a01b03167f6a149bd3ca2c7675eee825c1ef07056be81cc83753d4cf7dda452edacba32c2c836109dc8660009081526009602052604090205490565b604080519283526020830191909152015b60405180910390a3505050565b610a026116d3565b610a0a61172c565b60055460408051638cc84db760e01b815290516000926001600160a01b031691638cc84db79160048083019260209291908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a789190612f90565b90506000610a87858585610687565b9050610a97338660ff1683611772565b610ab5338560ff1685604051806020016040528060008152506115b0565b6000610ac286868661100c565b60405163a7b8b49160e01b8152600481018290529091506001600160a01b0384169063a7b8b49190602401600060405180830381600087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b5050505060ff851660008181526009602090815260409182902054825188815291820152815133927fac82c4d8149c9adb8f40d48656b669957208d067051b765d5fbe22525bd75213928290030190a3505050610b786001600455565b505050565b610b85611902565b6001600160a01b038116610bd45760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b6044820152606401610577565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b6001600160a01b038516331480610c445750610c448533610496565b610c605760405162461bcd60e51b815260040161057790612fad565b610c6d8585858585611962565b5050505050565b6000600c821180610c83575081155b15610ca157604051630d77971360e11b815260040160405180910390fd5b6000610cae600384612a6a565b9392505050565b610cbd611902565b610cc5611b4d565b565b610ccf611902565b60005b8151811015610d37576001600b6000848481518110610cf357610cf3612ffb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d2f81613011565b915050610cd2565b5050565b610d43611902565b600a8190556040518181527f90a1302aadb00206593b1b16e0abae07b8018b10388a547d6d6c40b290ef41ad90602001610c1d565b60608151835114610ddd5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610577565b600083516001600160401b03811115610df857610df861253d565b604051908082528060200260200182016040528015610e21578160200160208202803683370190505b50905060005b8451811015610e9957610e6c858281518110610e4557610e45612ffb565b6020026020010151858381518110610e5f57610e5f612ffb565b6020026020010151610510565b828281518110610e7e57610e7e612ffb565b6020908102919091010152610e9281613011565b9050610e27565b509392505050565b6000600c821115610ec557604051630d77971360e11b815260040160405180910390fd5b6000610ed2600384612abb565b9050610edf600384612a6a565b60ff16600003610eef5792915050565b610cae81600161302a565b50919050565b600080821180156105a3575050600c101590565b606060088054610f2390612a20565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4f90612a20565b8015610f9c5780601f10610f7157610100808354040283529160200191610f9c565b820191906000526020600020905b815481529060010190602001808311610f7f57829003601f168201915b5050505050905090565b610fae611902565b610cc56000611b9f565b610fc0611902565b6008610fcc8282613089565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d981604051610c1d919061246d565b611004611902565b610cc5611bf9565b60008061101a858585610687565b90506003600a548261102c9190612bd0565b6110369190613148565b95945050505050565b6007805461060690612a20565b610d37338383611c36565b6008805461060690612a20565b336000908152600b602052604090205460ff166110dd5760405162461bcd60e51b815260206004820152603160248201527f4f6e6c792077686974656c6973746564206164647265737365732063616e206360448201527030b636103a3434b990333ab731ba34b7b760791b6064820152608401610577565b6110e683610f00565b61110357604051634a1850bf60e11b815260040160405180910390fd5b61110f848484846115b0565b50505050565b6001600160a01b03851633148061113157506111318533610496565b61114d5760405162461bcd60e51b815260040161057790612fad565b610c6d8585858585611d0e565b611162611902565b6001600160a01b0381166111c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610577565b6111d081611b9f565b50565b600554604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190612f73565b8061126b575060035461010090046001600160a01b03166001600160a01b0316336001600160a01b0316145b61128857604051630e1c193960e41b815260040160405180910390fd5b61129182610f00565b6112ae57604051634a1850bf60e11b815260040160405180910390fd5b610b78838383611772565b6060600c8211156112dd57604051630d77971360e11b815260040160405180910390fd5b60006112ea600384612a6a565b90508060ff1660000361131a57505060408051808201909152600581526414dd19595b60da1b6020820152919050565b8060ff166001036113475750506040805180820190915260048152634669726560e01b6020820152919050565b50506040805180820190915260098152684c696768746e696e6760b81b6020820152919050565b6060600061137b83611e46565b60010190506000816001600160401b0381111561139a5761139a61253d565b6040519080825280601f01601f1916602001820160405280156113c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846113ce57509392505050565b606061140a610f14565b6114166107c984610c74565b6114226107c985610ea1565b6040516020016114349392919061315c565b6040516020818303038152906040529050919050565b6060815160000361146957505060408051602081019091526000815290565b6000604051806060016040528060408152602001613432604091399050600060038451600261149891906131bd565b6114a29190613148565b6114ad906004612bd0565b905060006114bc8260206131bd565b6001600160401b038111156114d3576114d361253d565b6040519080825280601f01601f1916602001820160405280156114fd576020820181803683370190505b509050818152600183018586518101602084015b8183101561156b5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611511565b6003895106600181146115855760028114611596576115a2565b613d3d60f01b6001198301526115a2565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b0384166116105760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610577565b33600061161c85611f1e565b9050600061162985611f1e565b905061163a83600089858589611f69565b6000868152602081815260408083206001600160a01b038b1684529091528120805487929061166a9084906131bd565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116ca8360008989898961214a565b50505050505050565b6002600454036117255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610577565b6002600455565b60035460ff1615610cc55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610577565b6001600160a01b0383166117d45760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610577565b3360006117e084611f1e565b905060006117ed84611f1e565b905061180d83876000858560405180602001604052806000815250611f69565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561188a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610577565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526116ca565b6003546001600160a01b03610100909104163314610cc55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b81518351146119c45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610577565b6001600160a01b0384166119ea5760405162461bcd60e51b8152600401610577906131d0565b336119f9818787878787611f69565b60005b8451811015611adf576000858281518110611a1957611a19612ffb565b602002602001015190506000858381518110611a3757611a37612ffb565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a875760405162461bcd60e51b815260040161057790613215565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ac49084906131bd565b9250508190555050505080611ad890613011565b90506119fc565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2f92919061325f565b60405180910390a4611b458187878787876122a5565b505050505050565b611b55612360565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c0161172c565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b823390565b816001600160a01b0316836001600160a01b031603611ca95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610577565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016109ed565b6001600160a01b038416611d345760405162461bcd60e51b8152600401610577906131d0565b336000611d4085611f1e565b90506000611d4d85611f1e565b9050611d5d838989858589611f69565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d9e5760405162461bcd60e51b815260040161057790613215565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ddb9084906131bd565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e3b848a8a8a8a8a61214a565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e855772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611eb1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ecf57662386f26fc10000830492506010015b6305f5e1008310611ee7576305f5e100830492506008015b6127108310611efb57612710830492506004015b60648310611f0d576064830492506002015b600a83106105a35760010192915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f5857611f58612ffb565b602090810291909101015292915050565b60035460ff1615611fd15760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610577565b6001600160a01b0385166120585760005b835181101561205657828181518110611ffd57611ffd612ffb565b60200260200101516009600086848151811061201b5761201b612ffb565b60200260200101518152602001908152602001600020600082825461204091906131bd565b9091555061204f905081613011565b9050611fe2565b505b6001600160a01b038416611b455760005b83518110156116ca57600084828151811061208657612086612ffb565b6020026020010151905060008483815181106120a4576120a4612ffb565b60200260200101519050600060096000848152602001908152602001600020549050818110156121275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610577565b6000928352600960205260409092209103905561214381613011565b9050612069565b6001600160a01b0384163b15611b455760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061218e9089908990889088908890600401613284565b6020604051808303816000875af19250505080156121c9575060408051601f3d908101601f191682019092526121c6918101906132c9565b60015b612275576121d56132e6565b806308c379a00361220e57506121e9613302565b806121f45750612210565b8060405162461bcd60e51b8152600401610577919061246d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610577565b6001600160e01b0319811663f23a6e6160e01b146116ca5760405162461bcd60e51b81526004016105779061338b565b6001600160a01b0384163b15611b455760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122e990899089908890889088906004016133d3565b6020604051808303816000875af1925050508015612324575060408051601f3d908101601f19168201909252612321918101906132c9565b60015b612330576121d56132e6565b6001600160e01b0319811663bc197c8160e01b146116ca5760405162461bcd60e51b81526004016105779061338b565b60035460ff16610cc55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610577565b6001600160a01b03811681146111d057600080fd5b600080604083850312156123d157600080fd5b82356123dc816123a9565b946020939093013593505050565b6001600160e01b0319811681146111d057600080fd5b60006020828403121561241257600080fd5b8135610cae816123ea565b60005b83811015612438578181015183820152602001612420565b50506000910152565b6000815180845261245981602086016020860161241d565b601f01601f19169290920160200192915050565b602081526000610cae6020830184612441565b803560ff8116811461249157600080fd5b919050565b6000806000606084860312156124ab57600080fd5b6124b484612480565b92506124c260208501612480565b9150604084013590509250925092565b6000602082840312156124e457600080fd5b5035919050565b60008060006060848603121561250057600080fd5b833561250b816123a9565b95602085013595506040909401359392505050565b60006020828403121561253257600080fd5b8135610cae816123a9565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125785761257861253d565b6040525050565b60006001600160401b038211156125985761259861253d565b5060051b60200190565b600082601f8301126125b357600080fd5b813560206125c08261257f565b6040516125cd8282612553565b83815260059390931b85018201928281019150868411156125ed57600080fd5b8286015b8481101561260857803583529183019183016125f1565b509695505050505050565b60006001600160401b0383111561262c5761262c61253d565b604051612643601f8501601f191660200182612553565b80915083815284848401111561265857600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261268157600080fd5b610cae83833560208501612613565b600080600080600060a086880312156126a857600080fd5b85356126b3816123a9565b945060208601356126c3816123a9565b935060408601356001600160401b03808211156126df57600080fd5b6126eb89838a016125a2565b9450606088013591508082111561270157600080fd5b61270d89838a016125a2565b9350608088013591508082111561272357600080fd5b5061273088828901612670565b9150509295509295909350565b600082601f83011261274e57600080fd5b8135602061275b8261257f565b6040516127688282612553565b83815260059390931b850182019282810191508684111561278857600080fd5b8286015b8481101561260857803561279f816123a9565b835291830191830161278c565b6000602082840312156127be57600080fd5b81356001600160401b038111156127d457600080fd5b6127e08482850161273d565b949350505050565b600080604083850312156127fb57600080fd5b82356001600160401b038082111561281257600080fd5b61281e8683870161273d565b9350602085013591508082111561283457600080fd5b50612841858286016125a2565b9150509250929050565b600081518084526020808501945080840160005b8381101561287b5781518752958201959082019060010161285f565b509495945050505050565b602081526000610cae602083018461284b565b6000602082840312156128ab57600080fd5b81356001600160401b038111156128c157600080fd5b8201601f810184136128d257600080fd5b6127e084823560208401612613565b80151581146111d057600080fd5b6000806040838503121561290257600080fd5b823561290d816123a9565b9150602083013561291d816128e1565b809150509250929050565b6000806000806080858703121561293e57600080fd5b8435612949816123a9565b9350602085013592506040850135915060608501356001600160401b0381111561297257600080fd5b61297e87828801612670565b91505092959194509250565b6000806040838503121561299d57600080fd5b82356129a8816123a9565b9150602083013561291d816123a9565b600080600080600060a086880312156129d057600080fd5b85356129db816123a9565b945060208601356129eb816123a9565b9350604086013592506060860135915060808601356001600160401b03811115612a1457600080fd5b61273088828901612670565b600181811c90821680612a3457607f821691505b602082108103610efa57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060ff831680612a7d57612a7d612a54565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105a3576105a3612a8c565b600060ff831680612ace57612ace612a54565b8060ff84160491505092915050565b600181815b80851115612b18578160001904821115612afe57612afe612a8c565b80851615612b0b57918102915b93841c9390800290612ae2565b509250929050565b600082612b2f575060016105a3565b81612b3c575060006105a3565b8160018114612b525760028114612b5c57612b78565b60019150506105a3565b60ff841115612b6d57612b6d612a8c565b50506001821b6105a3565b5060208310610133831016604e8410600b8410161715612b9b575081810a6105a3565b612ba58383612add565b8060001904821115612bb957612bb9612a8c565b029392505050565b6000610cae60ff841683612b20565b80820281158282048414176105a3576105a3612a8c565b693d913730b6b2911d101160b11b81528251600090612c0d81600a85016020880161241d565b6e01023b2b6b9ba37b732902a34b2b91608d1b600a918401918201528351612c3c81601984016020880161241d565b61088b60f21b60199290910191820152601b01949350505050565b60008251612c6981846020870161241d565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e2047656d73746f6e6573206172652060608201527f706f77657266756c207265736f757263657320696e2041746c616e746973206160808201527f6e6420657869737420696e20666f757220646966666572656e7420746965727360a08201527f2e20416371756972652047656d73746f6e657320746f206c6576656c2075702060c08201527f796f757220706c616e65747320616e642065717569706d656e7420706172747360e08201527f2e204675736520332047656d73746f6e6573206f66207468652073616d6520746101008201527f69657220746f2067657420612068696768657220746965722047656d73746f6e610120820152631948488b60e21b61014082015261014401919050565b60008451612e1181846020890161241d565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a2022458152723632b6b2b73a111610113b30b63ab2911d101160691b60208201528451612e6881603384016020890161241d565b62089f4b60ea1b603392909101918201527f7b2274726169745f74797065223a202254696572222c202276616c7565223a206036820152601160f91b60568201528351612ebc81605784016020880161241d565b63089f574b60e21b60579290910191820152605b0195945050505050565b60008351612eec81846020880161241d565b691134b6b0b3b2911d101160b11b9083019081528351612f1381600a84016020880161241d565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f6681601d85016020870161241d565b91909101601d0192915050565b600060208284031215612f8557600080fd5b8151610cae816128e1565b600060208284031215612fa257600080fd5b8151610cae816123a9565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161302357613023612a8c565b5060010190565b60ff81811683821601908111156105a3576105a3612a8c565b601f821115610b7857600081815260208120601f850160051c8101602086101561306a5750805b601f850160051c820191505b81811015611b4557828155600101613076565b81516001600160401b038111156130a2576130a261253d565b6130b6816130b08454612a20565b84613043565b602080601f8311600181146130eb57600084156130d35750858301515b600019600386901b1c1916600185901b178555611b45565b600085815260208120601f198616915b8281101561311a578886015182559484019460019091019084016130fb565b50858210156131385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261315757613157612a54565b500490565b6000845161316e81846020890161241d565b84519083019061318281836020890161241d565b602f60f81b9101908152835161319f81600184016020880161241d565b632e706e6760e01b6001929091019182015260050195945050505050565b808201808211156105a3576105a3612a8c565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000613272604083018561284b565b8281036020840152611036818561284b565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132be90830184612441565b979650505050505050565b6000602082840312156132db57600080fd5b8151610cae816123ea565b600060033d11156132ff5760046000803e5060005160e01c5b90565b600060443d10156133105790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561333f57505050505090565b82850191508151818111156133575750505050505090565b843d87010160208285010111156133715750505050505090565b61338060208286010187612553565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906133ff9083018661284b565b8281036060840152613411818661284b565b905082810360808401526134258185612441565b9897505050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207fafd0a41515ed5e3e605092cf92209b2321e4ecee638b1276385a0f50f4bc3364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021b5760003560e01c80636c0360eb11610125578063bd85b039116100ad578063e985e9c51161007c578063e985e9c514610488578063f242432a146104c4578063f2fde38b146104d7578063f3ad65f4146104ea578063f5298aca146104fd57600080fd5b8063bd85b03914610445578063d547cfb714610465578063dc6ece2a1461046d578063e118ee201461047557600080fd5b80638a4e1f7c116100f45780638a4e1f7c146103ca5780638da5cb5b146103dd57806395d89b4114610407578063a22cb4651461040f578063b3d8eb4b1461042257600080fd5b80636c0360eb1461039f578063715018a6146103a75780637e518ec8146103af5780638456cb59146103c257600080fd5b80632eb2c2d6116101a857806349e2fd0d1161017757806349e2fd0d1461033b5780634e1273f41461034e5780634f062c5a1461036e5780634f558e79146103815780635c975abb1461039457600080fd5b80632eb2c2d6146102e85780633a7d22bc146102fb5780633f4ba83a146103205780634892ecaa1461032857600080fd5b8063089b10b8116101ef578063089b10b8146102875780630e89341c1461029a578063156e29f6146102ad57806315ead29a146102c257806327c7812c146102d557600080fd5b8062fdd58e1461022057806301ffc9a714610246578063069b43ec1461026957806306fdde0314610272575b600080fd5b61023361022e3660046123be565b610510565b6040519081526020015b60405180910390f35b610259610254366004612400565b6105a9565b604051901515815260200161023d565b610233600a5481565b61027a6105f9565b60405161023d919061246d565b610233610295366004612496565b610687565b61027a6102a83660046124d2565b610785565b6102c06102bb3660046124eb565b6108a3565b005b6102c06102d0366004612496565b6109fa565b6102c06102e3366004612520565b610b7d565b6102c06102f6366004612690565b610c28565b61030e6103093660046124d2565b610c74565b60405160ff909116815260200161023d565b6102c0610cb5565b6102c06103363660046127ac565b610cc7565b6102c06103493660046124d2565b610d3b565b61036161035c3660046127e8565b610d78565b60405161023d9190612886565b61030e61037c3660046124d2565b610ea1565b61025961038f3660046124d2565b610f00565b60035460ff16610259565b61027a610f14565b6102c0610fa6565b6102c06103bd366004612899565b610fb8565b6102c0610ffc565b6102336103d8366004612496565b61100c565b60035461010090046001600160a01b03165b6040516001600160a01b03909116815260200161023d565b61027a61103f565b6102c061041d3660046128ef565b61104c565b610259610430366004612520565b600b6020526000908152604090205460ff1681565b6102336104533660046124d2565b60009081526009602052604090205490565b61027a611057565b610233600c81565b6102c0610483366004612928565b611064565b61025961049636600461298a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102c06104d23660046129b8565b611115565b6102c06104e5366004612520565b61115a565b6005546103ef906001600160a01b031681565b6102c061050b3660046124eb565b6111d3565b60006001600160a01b0383166105805760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806105da57506001600160e01b031982166303a24d0760e21b145b806105a357506301ffc9a760e01b6001600160e01b03198316146105a3565b6006805461060690612a20565b80601f016020809104026020016040519081016040528092919081815260200182805461063290612a20565b801561067f5780601f106106545761010080835404028352916020019161067f565b820191906000526020600020905b81548152906001019060200180831161066257829003601f168201915b505050505081565b6000816000036106aa5760405163340dabef60e01b815260040160405180910390fd5b6106b68460ff16610f00565b15806106cb57506106c98360ff16610f00565b155b156106e957604051634a1850bf60e11b815260040160405180910390fd5b6106f4600385612a6a565b60ff16610702600385612a6a565b60ff161461072357604051630dee7a0b60e11b815260040160405180910390fd5b8260ff168460ff16106107495760405163012fa17760e61b815260040160405180910390fd5b600060036107578686612aa2565b6107619190612abb565b9050600083610771836003612bc1565b61077b9190612bd0565b9695505050505050565b606061079082610f00565b6107ad57604051634a1850bf60e11b815260040160405180910390fd5b60006107b8836112b9565b90506000816107d16107c986610ea1565b60ff1661136e565b6040516020016107e2929190612be7565b6040516020818303038152906040529050806040516020016108049190612c57565b604051602081830303815290604052905080826108236107c987610ea1565b60405160200161083593929190612dff565b60405160208183030381529060405290506108788161085386611400565b604051602001610864929190612eda565b60405160208183030381529060405261144a565b90508060405160200161088b9190612f2e565b60405160208183030381529060405292505050919050565b600554604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190612f73565b8061093b575060035461010090046001600160a01b03166001600160a01b0316336001600160a01b0316145b61095857604051630e1c193960e41b815260040160405180910390fd5b61096182610f00565b61097e57604051634a1850bf60e11b815260040160405180910390fd5b610999838383604051806020016040528060008152506115b0565b81836001600160a01b03167f6a149bd3ca2c7675eee825c1ef07056be81cc83753d4cf7dda452edacba32c2c836109dc8660009081526009602052604090205490565b604080519283526020830191909152015b60405180910390a3505050565b610a026116d3565b610a0a61172c565b60055460408051638cc84db760e01b815290516000926001600160a01b031691638cc84db79160048083019260209291908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a789190612f90565b90506000610a87858585610687565b9050610a97338660ff1683611772565b610ab5338560ff1685604051806020016040528060008152506115b0565b6000610ac286868661100c565b60405163a7b8b49160e01b8152600481018290529091506001600160a01b0384169063a7b8b49190602401600060405180830381600087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b5050505060ff851660008181526009602090815260409182902054825188815291820152815133927fac82c4d8149c9adb8f40d48656b669957208d067051b765d5fbe22525bd75213928290030190a3505050610b786001600455565b505050565b610b85611902565b6001600160a01b038116610bd45760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc818d85b9b9bdd081899481b9d5b1b60521b6044820152606401610577565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b6001600160a01b038516331480610c445750610c448533610496565b610c605760405162461bcd60e51b815260040161057790612fad565b610c6d8585858585611962565b5050505050565b6000600c821180610c83575081155b15610ca157604051630d77971360e11b815260040160405180910390fd5b6000610cae600384612a6a565b9392505050565b610cbd611902565b610cc5611b4d565b565b610ccf611902565b60005b8151811015610d37576001600b6000848481518110610cf357610cf3612ffb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d2f81613011565b915050610cd2565b5050565b610d43611902565b600a8190556040518181527f90a1302aadb00206593b1b16e0abae07b8018b10388a547d6d6c40b290ef41ad90602001610c1d565b60608151835114610ddd5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610577565b600083516001600160401b03811115610df857610df861253d565b604051908082528060200260200182016040528015610e21578160200160208202803683370190505b50905060005b8451811015610e9957610e6c858281518110610e4557610e45612ffb565b6020026020010151858381518110610e5f57610e5f612ffb565b6020026020010151610510565b828281518110610e7e57610e7e612ffb565b6020908102919091010152610e9281613011565b9050610e27565b509392505050565b6000600c821115610ec557604051630d77971360e11b815260040160405180910390fd5b6000610ed2600384612abb565b9050610edf600384612a6a565b60ff16600003610eef5792915050565b610cae81600161302a565b50919050565b600080821180156105a3575050600c101590565b606060088054610f2390612a20565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4f90612a20565b8015610f9c5780601f10610f7157610100808354040283529160200191610f9c565b820191906000526020600020905b815481529060010190602001808311610f7f57829003601f168201915b5050505050905090565b610fae611902565b610cc56000611b9f565b610fc0611902565b6008610fcc8282613089565b507fd926fde11e1623e83f8becaf0d50ebe506b5bb4b70570742a0bb36901f65a5d981604051610c1d919061246d565b611004611902565b610cc5611bf9565b60008061101a858585610687565b90506003600a548261102c9190612bd0565b6110369190613148565b95945050505050565b6007805461060690612a20565b610d37338383611c36565b6008805461060690612a20565b336000908152600b602052604090205460ff166110dd5760405162461bcd60e51b815260206004820152603160248201527f4f6e6c792077686974656c6973746564206164647265737365732063616e206360448201527030b636103a3434b990333ab731ba34b7b760791b6064820152608401610577565b6110e683610f00565b61110357604051634a1850bf60e11b815260040160405180910390fd5b61110f848484846115b0565b50505050565b6001600160a01b03851633148061113157506111318533610496565b61114d5760405162461bcd60e51b815260040161057790612fad565b610c6d8585858585611d0e565b611162611902565b6001600160a01b0381166111c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610577565b6111d081611b9f565b50565b600554604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190612f73565b8061126b575060035461010090046001600160a01b03166001600160a01b0316336001600160a01b0316145b61128857604051630e1c193960e41b815260040160405180910390fd5b61129182610f00565b6112ae57604051634a1850bf60e11b815260040160405180910390fd5b610b78838383611772565b6060600c8211156112dd57604051630d77971360e11b815260040160405180910390fd5b60006112ea600384612a6a565b90508060ff1660000361131a57505060408051808201909152600581526414dd19595b60da1b6020820152919050565b8060ff166001036113475750506040805180820190915260048152634669726560e01b6020820152919050565b50506040805180820190915260098152684c696768746e696e6760b81b6020820152919050565b6060600061137b83611e46565b60010190506000816001600160401b0381111561139a5761139a61253d565b6040519080825280601f01601f1916602001820160405280156113c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846113ce57509392505050565b606061140a610f14565b6114166107c984610c74565b6114226107c985610ea1565b6040516020016114349392919061315c565b6040516020818303038152906040529050919050565b6060815160000361146957505060408051602081019091526000815290565b6000604051806060016040528060408152602001613432604091399050600060038451600261149891906131bd565b6114a29190613148565b6114ad906004612bd0565b905060006114bc8260206131bd565b6001600160401b038111156114d3576114d361253d565b6040519080825280601f01601f1916602001820160405280156114fd576020820181803683370190505b509050818152600183018586518101602084015b8183101561156b5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611511565b6003895106600181146115855760028114611596576115a2565b613d3d60f01b6001198301526115a2565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b0384166116105760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610577565b33600061161c85611f1e565b9050600061162985611f1e565b905061163a83600089858589611f69565b6000868152602081815260408083206001600160a01b038b1684529091528120805487929061166a9084906131bd565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116ca8360008989898961214a565b50505050505050565b6002600454036117255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610577565b6002600455565b60035460ff1615610cc55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610577565b6001600160a01b0383166117d45760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610577565b3360006117e084611f1e565b905060006117ed84611f1e565b905061180d83876000858560405180602001604052806000815250611f69565b6000858152602081815260408083206001600160a01b038a1684529091529020548481101561188a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610577565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526116ca565b6003546001600160a01b03610100909104163314610cc55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b81518351146119c45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610577565b6001600160a01b0384166119ea5760405162461bcd60e51b8152600401610577906131d0565b336119f9818787878787611f69565b60005b8451811015611adf576000858281518110611a1957611a19612ffb565b602002602001015190506000858381518110611a3757611a37612ffb565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a875760405162461bcd60e51b815260040161057790613215565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ac49084906131bd565b9250508190555050505080611ad890613011565b90506119fc565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2f92919061325f565b60405180910390a4611b458187878787876122a5565b505050505050565b611b55612360565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c0161172c565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b823390565b816001600160a01b0316836001600160a01b031603611ca95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610577565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016109ed565b6001600160a01b038416611d345760405162461bcd60e51b8152600401610577906131d0565b336000611d4085611f1e565b90506000611d4d85611f1e565b9050611d5d838989858589611f69565b6000868152602081815260408083206001600160a01b038c16845290915290205485811015611d9e5760405162461bcd60e51b815260040161057790613215565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611ddb9084906131bd565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e3b848a8a8a8a8a61214a565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611e855772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611eb1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ecf57662386f26fc10000830492506010015b6305f5e1008310611ee7576305f5e100830492506008015b6127108310611efb57612710830492506004015b60648310611f0d576064830492506002015b600a83106105a35760010192915050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611f5857611f58612ffb565b602090810291909101015292915050565b60035460ff1615611fd15760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610577565b6001600160a01b0385166120585760005b835181101561205657828181518110611ffd57611ffd612ffb565b60200260200101516009600086848151811061201b5761201b612ffb565b60200260200101518152602001908152602001600020600082825461204091906131bd565b9091555061204f905081613011565b9050611fe2565b505b6001600160a01b038416611b455760005b83518110156116ca57600084828151811061208657612086612ffb565b6020026020010151905060008483815181106120a4576120a4612ffb565b60200260200101519050600060096000848152602001908152602001600020549050818110156121275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f74604482015267616c537570706c7960c01b6064820152608401610577565b6000928352600960205260409092209103905561214381613011565b9050612069565b6001600160a01b0384163b15611b455760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061218e9089908990889088908890600401613284565b6020604051808303816000875af19250505080156121c9575060408051601f3d908101601f191682019092526121c6918101906132c9565b60015b612275576121d56132e6565b806308c379a00361220e57506121e9613302565b806121f45750612210565b8060405162461bcd60e51b8152600401610577919061246d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610577565b6001600160e01b0319811663f23a6e6160e01b146116ca5760405162461bcd60e51b81526004016105779061338b565b6001600160a01b0384163b15611b455760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122e990899089908890889088906004016133d3565b6020604051808303816000875af1925050508015612324575060408051601f3d908101601f19168201909252612321918101906132c9565b60015b612330576121d56132e6565b6001600160e01b0319811663bc197c8160e01b146116ca5760405162461bcd60e51b81526004016105779061338b565b60035460ff16610cc55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610577565b6001600160a01b03811681146111d057600080fd5b600080604083850312156123d157600080fd5b82356123dc816123a9565b946020939093013593505050565b6001600160e01b0319811681146111d057600080fd5b60006020828403121561241257600080fd5b8135610cae816123ea565b60005b83811015612438578181015183820152602001612420565b50506000910152565b6000815180845261245981602086016020860161241d565b601f01601f19169290920160200192915050565b602081526000610cae6020830184612441565b803560ff8116811461249157600080fd5b919050565b6000806000606084860312156124ab57600080fd5b6124b484612480565b92506124c260208501612480565b9150604084013590509250925092565b6000602082840312156124e457600080fd5b5035919050565b60008060006060848603121561250057600080fd5b833561250b816123a9565b95602085013595506040909401359392505050565b60006020828403121561253257600080fd5b8135610cae816123a9565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156125785761257861253d565b6040525050565b60006001600160401b038211156125985761259861253d565b5060051b60200190565b600082601f8301126125b357600080fd5b813560206125c08261257f565b6040516125cd8282612553565b83815260059390931b85018201928281019150868411156125ed57600080fd5b8286015b8481101561260857803583529183019183016125f1565b509695505050505050565b60006001600160401b0383111561262c5761262c61253d565b604051612643601f8501601f191660200182612553565b80915083815284848401111561265857600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261268157600080fd5b610cae83833560208501612613565b600080600080600060a086880312156126a857600080fd5b85356126b3816123a9565b945060208601356126c3816123a9565b935060408601356001600160401b03808211156126df57600080fd5b6126eb89838a016125a2565b9450606088013591508082111561270157600080fd5b61270d89838a016125a2565b9350608088013591508082111561272357600080fd5b5061273088828901612670565b9150509295509295909350565b600082601f83011261274e57600080fd5b8135602061275b8261257f565b6040516127688282612553565b83815260059390931b850182019282810191508684111561278857600080fd5b8286015b8481101561260857803561279f816123a9565b835291830191830161278c565b6000602082840312156127be57600080fd5b81356001600160401b038111156127d457600080fd5b6127e08482850161273d565b949350505050565b600080604083850312156127fb57600080fd5b82356001600160401b038082111561281257600080fd5b61281e8683870161273d565b9350602085013591508082111561283457600080fd5b50612841858286016125a2565b9150509250929050565b600081518084526020808501945080840160005b8381101561287b5781518752958201959082019060010161285f565b509495945050505050565b602081526000610cae602083018461284b565b6000602082840312156128ab57600080fd5b81356001600160401b038111156128c157600080fd5b8201601f810184136128d257600080fd5b6127e084823560208401612613565b80151581146111d057600080fd5b6000806040838503121561290257600080fd5b823561290d816123a9565b9150602083013561291d816128e1565b809150509250929050565b6000806000806080858703121561293e57600080fd5b8435612949816123a9565b9350602085013592506040850135915060608501356001600160401b0381111561297257600080fd5b61297e87828801612670565b91505092959194509250565b6000806040838503121561299d57600080fd5b82356129a8816123a9565b9150602083013561291d816123a9565b600080600080600060a086880312156129d057600080fd5b85356129db816123a9565b945060208601356129eb816123a9565b9350604086013592506060860135915060808601356001600160401b03811115612a1457600080fd5b61273088828901612670565b600181811c90821680612a3457607f821691505b602082108103610efa57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060ff831680612a7d57612a7d612a54565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105a3576105a3612a8c565b600060ff831680612ace57612ace612a54565b8060ff84160491505092915050565b600181815b80851115612b18578160001904821115612afe57612afe612a8c565b80851615612b0b57918102915b93841c9390800290612ae2565b509250929050565b600082612b2f575060016105a3565b81612b3c575060006105a3565b8160018114612b525760028114612b5c57612b78565b60019150506105a3565b60ff841115612b6d57612b6d612a8c565b50506001821b6105a3565b5060208310610133831016604e8410600b8410161715612b9b575081810a6105a3565b612ba58383612add565b8060001904821115612bb957612bb9612a8c565b029392505050565b6000610cae60ff841683612b20565b80820281158282048414176105a3576105a3612a8c565b693d913730b6b2911d101160b11b81528251600090612c0d81600a85016020880161241d565b6e01023b2b6b9ba37b732902a34b2b91608d1b600a918401918201528351612c3c81601984016020880161241d565b61088b60f21b60199290910191820152601b01949350505050565b60008251612c6981846020870161241d565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e2047656d73746f6e6573206172652060608201527f706f77657266756c207265736f757263657320696e2041746c616e746973206160808201527f6e6420657869737420696e20666f757220646966666572656e7420746965727360a08201527f2e20416371756972652047656d73746f6e657320746f206c6576656c2075702060c08201527f796f757220706c616e65747320616e642065717569706d656e7420706172747360e08201527f2e204675736520332047656d73746f6e6573206f66207468652073616d6520746101008201527f69657220746f2067657420612068696768657220746965722047656d73746f6e610120820152631948488b60e21b61014082015261014401919050565b60008451612e1181846020890161241d565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a2022458152723632b6b2b73a111610113b30b63ab2911d101160691b60208201528451612e6881603384016020890161241d565b62089f4b60ea1b603392909101918201527f7b2274726169745f74797065223a202254696572222c202276616c7565223a206036820152601160f91b60568201528351612ebc81605784016020880161241d565b63089f574b60e21b60579290910191820152605b0195945050505050565b60008351612eec81846020880161241d565b691134b6b0b3b2911d101160b11b9083019081528351612f1381600a84016020880161241d565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f6681601d85016020870161241d565b91909101601d0192915050565b600060208284031215612f8557600080fd5b8151610cae816128e1565b600060208284031215612fa257600080fd5b8151610cae816123a9565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161302357613023612a8c565b5060010190565b60ff81811683821601908111156105a3576105a3612a8c565b601f821115610b7857600081815260208120601f850160051c8101602086101561306a5750805b601f850160051c820191505b81811015611b4557828155600101613076565b81516001600160401b038111156130a2576130a261253d565b6130b6816130b08454612a20565b84613043565b602080601f8311600181146130eb57600084156130d35750858301515b600019600386901b1c1916600185901b178555611b45565b600085815260208120601f198616915b8281101561311a578886015182559484019460019091019084016130fb565b50858210156131385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008261315757613157612a54565b500490565b6000845161316e81846020890161241d565b84519083019061318281836020890161241d565b602f60f81b9101908152835161319f81600184016020880161241d565b632e706e6760e01b6001929091019182015260050195945050505050565b808201808211156105a3576105a3612a8c565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000613272604083018561284b565b8281036020840152611036818561284b565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132be90830184612441565b979650505050505050565b6000602082840312156132db57600080fd5b8151610cae816123ea565b600060033d11156132ff5760046000803e5060005160e01c5b90565b600060443d10156133105790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561333f57505050505090565b82850191508151818111156133575750505050505090565b843d87010160208285010111156133715750505050505090565b61338060208286010187612553565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906133ff9083018661284b565b8281036060840152613411818661284b565b905082810360808401526134258185612441565b9897505050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207fafd0a41515ed5e3e605092cf92209b2321e4ecee638b1276385a0f50f4bc3364736f6c63430008110033",
  "devdoc": {
    "details": "Fuse 3 gemstones of the same tier to receive 1 from the next tier. Gemstones can be used to upgrade planets and are also required for certain levels of equipment fusion.",
    "kind": "dev",
    "methods": {
      "airdrop(address,uint256,uint256,bytes)": {
        "details": "Airdrops some gemstones to an address; for giveaways",
        "params": {
          "_data": "Data to pass if receiver is contract",
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "baseURI()": {
        "details": "Gets baseToken URI"
      },
      "burn(address,uint256,uint256)": {
        "details": "Burns some amount of tokens from an address"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not.There are only Gemstones with tokenIds 1-12"
      },
      "fuseGemstones(uint8,uint8,uint256)": {
        "details": "Fuse 3 Gemstones to get another Gemstone of a higher tier",
        "params": {
          "_amountToCreate": "The amount of Gemstones to create Gemstone Upgrade Sheet           Tier 1 -> Tier 2 -> Tier 3 -> Tier 4 FIRE      ID 1   -> ID 4   -> ID 7   -> ID 10 LIGHTNING ID 2   -> ID 5   -> ID 8   -> ID 11 STEEL     ID 3   -> ID 6   -> ID 9   -> ID 12",
          "_id": "The Gemstone id"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256)": {
        "details": "Mints some amount of tokens to an address",
        "params": {
          "_id": "Token ID to mint",
          "_quantity": "Amount of tokens to mint",
          "_to": "Address of the future owner of the token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause contract in case of emergency"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setAddressRegistry(address)": {
        "params": {
          "_addressRegistry": "The address of the Address Registry"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBaseMetadataURI(string)": {
        "details": "Will update the base URL of token's URI",
        "params": {
          "_newBaseMetadataURI": "New base URL of token's URI"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause contract in case of emergency"
      }
    },
    "title": "Atlantis - Gemstones contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FUSION_COST()": {
        "notice": "Stardust fusion cost"
      },
      "TOTAL_TOKEN_IDS()": {
        "notice": "Total amount of Ids"
      },
      "addressRegistry()": {
        "notice": "Address registry contract"
      },
      "baseTokenURI()": {
        "notice": "Base token URI"
      },
      "devAddresses(address)": {
        "notice": "Whitelisted addresses who can call airdrop"
      },
      "name()": {
        "notice": "Name of contract"
      },
      "setAddressRegistry(address)": {
        "notice": "Set the Address Registry"
      },
      "symbol()": {
        "notice": "Symbol of contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4051,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4057,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4059,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3881,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3758,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3982,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16642,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AtlantisAddressRegistry)14028"
      },
      {
        "astId": 16645,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 16648,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 16651,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 16660,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16664,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "FUSION_COST",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 16669,
        "contract": "contracts/AtlantisGemstones.sol:AtlantisGemstones",
        "label": "devAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AtlantisAddressRegistry)14028": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}