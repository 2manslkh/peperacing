{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/AtlantisAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./common/AddressRegistry.sol\";\r\n\r\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\r\n    bytes32 private constant ARGONAUTS = \"ARGONAUTS\";\r\n    bytes32 private constant ARGO = \"ARGO\";\r\n    bytes32 private constant XARGO = \"XARGO\";\r\n    bytes32 private constant GOLD = \"GOLD\";\r\n    bytes32 private constant STARDUST = \"STARDUST\";\r\n    bytes32 private constant ATLANTIS = \"ATLANTIS\";\r\n    bytes32 private constant ATLANTIS_PLANETS = \"ATLANTIS_PLANETS\";\r\n    bytes32 private constant STAKING_WITH_LOCK = \"STAKING_WITH_LOCK\";\r\n    bytes32 private constant ATLANTIS_GEMSTONES = \"GEMSTONES\";\r\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \"EQUIPMENTS\";\r\n    bytes32 private constant ATLANTIS_SPACESHIPS = \"SPACESHIPS\";\r\n    bytes32 private constant ATLANTIS_RACING = \"RACING\";\r\n    bytes32 private constant ATLANTIS_MARKETPLACE = \"MARKETPLACE\";\r\n    bytes32 private constant ATLANTIS_AUCTION = \"AUCTION\";\r\n    bytes32 private constant STARDUST_PLEDGING = \"PLEDGING\";\r\n    bytes32 private constant GOLD_STAKING = \"GOLD_STAKING\";\r\n    mapping(address => bool) private _addresses;\r\n\r\n    function setArgonauts(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGONAUTS, contractAddress);\r\n    }\r\n\r\n    function setArgo(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGO, contractAddress);\r\n    }\r\n\r\n    function setXargo(address contractAddress) external onlyOwner {\r\n        _setAddress(XARGO, contractAddress);\r\n    }\r\n\r\n    function setGold(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD, contractAddress);\r\n    }\r\n\r\n    function setStardust(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST, contractAddress);\r\n    }\r\n\r\n    function setAtlantis(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS, contractAddress);\r\n    }\r\n\r\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\r\n    }\r\n\r\n    function setStakingWithLock(address contractAddress) external onlyOwner {\r\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\r\n    }\r\n\r\n    function setGemstones(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\r\n    }\r\n\r\n    function setEquipments(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\r\n    }\r\n\r\n    function setSpaceships(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\r\n    }\r\n\r\n    function setRacing(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_RACING, contractAddress);\r\n    }\r\n\r\n    function setMarketplace(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\r\n    }\r\n\r\n    function setAuction(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\r\n    }\r\n\r\n    function setPledging(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST_PLEDGING, contractAddress);\r\n    }\r\n\r\n    function setGoldStaking(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD_STAKING, contractAddress);\r\n    }\r\n\r\n    function getArgonauts() external view returns (address) {\r\n        return getAddress(ARGONAUTS);\r\n    }\r\n\r\n    function getArgo() external view returns (address) {\r\n        return getAddress(ARGO);\r\n    }\r\n\r\n    function getXargo() external view returns (address) {\r\n        return getAddress(XARGO);\r\n    }\r\n\r\n    function getGold() external view returns (address) {\r\n        return getAddress(GOLD);\r\n    }\r\n\r\n    function getStardust() external view returns (address) {\r\n        return getAddress(STARDUST);\r\n    }\r\n\r\n    function getAtlantis() public view returns (address) {\r\n        return getAddress(ATLANTIS);\r\n    }\r\n\r\n    function getAtlantisPlanets() public view returns (address) {\r\n        return getAddress(ATLANTIS_PLANETS);\r\n    }\r\n\r\n    function getStakingWithLock() external view returns (address) {\r\n        return getAddress(STAKING_WITH_LOCK);\r\n    }\r\n\r\n    function getGemstones() public view returns (address) {\r\n        return getAddress(ATLANTIS_GEMSTONES);\r\n    }\r\n\r\n    function getEquipments() public view returns (address) {\r\n        return getAddress(ATLANTIS_EQUIPMENTS);\r\n    }\r\n\r\n    function getSpaceships() external view returns (address) {\r\n        return getAddress(ATLANTIS_SPACESHIPS);\r\n    }\r\n\r\n    function getRacing() external view returns (address) {\r\n        return getAddress(ATLANTIS_RACING);\r\n    }\r\n\r\n    function getMarketplace() external view returns (address) {\r\n        return getAddress(ATLANTIS_MARKETPLACE);\r\n    }\r\n\r\n    function getAuction() external view returns (address) {\r\n        return getAddress(ATLANTIS_AUCTION);\r\n    }\r\n\r\n    function getPledging() external view returns (address) {\r\n        return getAddress(STARDUST_PLEDGING);\r\n    }\r\n\r\n    function getGoldStaking() external view returns (address) {\r\n        return getAddress(GOLD_STAKING);\r\n    }\r\n\r\n    function isControllerContract(address _contractAddress) external view returns (bool) {\r\n        if (\r\n            _contractAddress == getAtlantis() ||\r\n            _contractAddress == getGemstones() ||\r\n            _contractAddress == getAtlantisPlanets() ||\r\n            _contractAddress == getEquipments()\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/AtlantisMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\n\r\nimport \"./interface/IAtlantisNFTPriceTracker.sol\";\r\n\r\n/// @title  Atlantis NFT marketplace v1.0.0\r\n/// @notice This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.\r\n/// @dev    This contract does not store any tokens at any time, it's only collects details \"the sale\" and approvals\r\n///         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment\r\n///         token from buying to NFT owner.\r\ncontract AtlantisMarketplace is AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    struct ListingOrBid {\r\n        /// @dev number of tokens for sale or requested (1 if ERC-721 token is active for sale) (for bids, quantity for ERC-721 can be greater than 1)\r\n        uint64 quantity;\r\n        /// @dev price per token sold, i.e. extended sale price equals this times quantity purchased. For bids, price offered per item.\r\n        uint128 pricePerItem;\r\n        /// @dev timestamp after which the listing/bid is invalid\r\n        uint64 expirationTime;\r\n        /// @dev the payment token for this listing/bid.\r\n        address paymentTokenAddress;\r\n    }\r\n\r\n    struct CollectionOwnerFee {\r\n        /// @dev the fee, out of 10,000, that this collection owner will be given for each sale\r\n        uint32 fee;\r\n        /// @dev the recipient of the collection specific fee\r\n        address recipient;\r\n    }\r\n\r\n    struct BuyItemParams {\r\n        /// which token contract holds the offered token\r\n        address nftAddress;\r\n        /// the identifier for the token to be bought\r\n        uint256 tokenId;\r\n        /// current owner of the item(s) to be bought\r\n        address owner;\r\n        /// how many of this token identifier to be bought (or 1 for a ERC-721 token)\r\n        uint64 quantity;\r\n        /// the maximum price (in units of the paymentToken) for each token offered\r\n        uint128 maxPricePerItem;\r\n        /// the payment token to be used\r\n        address paymentToken;\r\n        /// indicates if the user is purchasing this item with eth.\r\n        bool usingEth;\r\n    }\r\n\r\n    struct AcceptBidParams {\r\n        // Which token contract holds the given tokens\r\n        address nftAddress;\r\n        // The token id being given\r\n        uint256 tokenId;\r\n        // The user who created the bid initially\r\n        address bidder;\r\n        // The quantity of items being supplied to the bidder\r\n        uint64 quantity;\r\n        // The price per item that the bidder is offering\r\n        uint128 pricePerItem;\r\n        /// the payment token to be used\r\n        address paymentToken;\r\n    }\r\n\r\n    struct CancelBidParams {\r\n        BidType bidType;\r\n        address nftAddress;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    enum BidType {\r\n        TOKEN,\r\n        COLLECTION\r\n    }\r\n\r\n    enum TokenApprovalStatus {\r\n        NOT_APPROVED,\r\n        ERC_721_APPROVED,\r\n        ERC_1155_APPROVED\r\n    }\r\n\r\n    /// @notice ATLANTIS_MARKETPLACE_ADMIN_ROLE role hash\r\n    bytes32 public constant ATLANTIS_MARKETPLACE_ADMIN_ROLE = keccak256(\"ATLANTIS_MARKETPLACE_ADMIN_ROLE\");\r\n\r\n    /// @notice ERC165 interface signatures\r\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    /// @notice the denominator for portion calculation, i.e. how many basis points are in 100%\r\n    uint256 public constant BASIS_POINTS = 10000;\r\n\r\n    /// @notice the maximum fee which the owner may set (in units of basis points)\r\n    uint256 public constant MAX_FEE = 1500;\r\n\r\n    /// @notice the maximum fee which the collection owner may set\r\n    uint256 public constant MAX_COLLECTION_FEE = 2000;\r\n\r\n    /// @notice the minimum price for which any item can be sold\r\n    uint256 public constant MIN_PRICE = 1e9;\r\n\r\n    /// @notice the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress.\r\n    IERC20Upgradeable public paymentToken;\r\n\r\n    /// @notice fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set.\r\n    uint256 public fee;\r\n\r\n    /// @notice address that receives fees\r\n    address public feeReceipient;\r\n\r\n    /// @notice mapping for listings, maps: nftAddress => tokenId => offeror\r\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public listings;\r\n\r\n    /// @notice NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status\r\n    mapping(address => TokenApprovalStatus) public tokenApprovals;\r\n\r\n    /// @notice fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner.\r\n    uint256 public feeWithCollectionOwner;\r\n\r\n    /// @notice Maps the collection address to the fees which the collection owner collects.\r\n    mapping(address => CollectionOwnerFee) public collectionToCollectionOwnerFee;\r\n\r\n    /// @notice Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken.\r\n    mapping(address => address) public collectionToPaymentToken;\r\n\r\n    /// @notice The address for weth.\r\n    IERC20Upgradeable public weth;\r\n\r\n    /// @notice mapping for token bids (721/1155): nftAddress => tokneId => offeror\r\n    mapping(address => mapping(uint256 => mapping(address => ListingOrBid))) public tokenBids;\r\n\r\n    /// @notice mapping for collection level bids (721 only): nftAddress => offeror\r\n    mapping(address => mapping(address => ListingOrBid)) public collectionBids;\r\n\r\n    /// @notice Indicates if bid related functions are active.\r\n    bool public areBidsActive;\r\n\r\n    /// @notice Address of the contract that tracks sales and prices of collections.\r\n    address public priceTrackerAddress;\r\n\r\n    /// @notice The fee portion was updated\r\n    /// @param  fee new fee amount (in units of basis points)\r\n    event UpdateFee(uint256 fee);\r\n\r\n    /// @notice The fee portion was updated for collections that have a collection owner.\r\n    /// @param  fee new fee amount (in units of basis points)\r\n    event UpdateFeeWithCollectionOwner(uint256 fee);\r\n\r\n    /// @notice A collection's fees have changed\r\n    /// @param  collection  The collection\r\n    /// @param  recipient   The recipient of the fees. If the address is 0, the collection fees for this collection have been removed.\r\n    /// @param  fee         The fee amount (in units of basis points)\r\n    event UpdateCollectionOwnerFee(address collection, address recipient, uint256 fee);\r\n\r\n    /// @notice The fee recipient was updated\r\n    /// @param  feeRecipient the new recipient to get fees\r\n    event UpdateFeeRecipient(address feeRecipient);\r\n\r\n    /// @notice The approval status for a token was updated\r\n    /// @param  nft    which token contract was updated\r\n    /// @param  status the new status\r\n    /// @param  paymentToken the token that will be used for payments for this collection\r\n    event TokenApprovalStatusUpdated(address nft, TokenApprovalStatus status, address paymentToken);\r\n\r\n    event TokenBidCreatedOrUpdated(\r\n        address bidder,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        uint64 expirationTime,\r\n        address paymentToken\r\n    );\r\n\r\n    event CollectionBidCreatedOrUpdated(\r\n        address bidder,\r\n        address nftAddress,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        uint64 expirationTime,\r\n        address paymentToken\r\n    );\r\n\r\n    event TokenBidCancelled(address bidder, address nftAddress, uint256 tokenId);\r\n\r\n    event CollectionBidCancelled(address bidder, address nftAddress);\r\n\r\n    event BidAccepted(\r\n        address seller,\r\n        address bidder,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        address paymentToken,\r\n        BidType bidType\r\n    );\r\n\r\n    /// @notice An item was listed for sale\r\n    /// @param  seller         the offeror of the item\r\n    /// @param  nftAddress     which token contract holds the offered token\r\n    /// @param  tokenId        the identifier for the offered token\r\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\r\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\r\n    /// @param  expirationTime UNIX timestamp after when this listing expires\r\n    /// @param  paymentToken   the token used to list this item\r\n    event ItemListed(\r\n        address seller,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        uint64 expirationTime,\r\n        address paymentToken\r\n    );\r\n\r\n    /// @notice An item listing was updated\r\n    /// @param  seller         the offeror of the item\r\n    /// @param  nftAddress     which token contract holds the offered token\r\n    /// @param  tokenId        the identifier for the offered token\r\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\r\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\r\n    /// @param  expirationTime UNIX timestamp after when this listing expires\r\n    /// @param  paymentToken   the token used to list this item\r\n    event ItemUpdated(\r\n        address seller,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        uint64 expirationTime,\r\n        address paymentToken\r\n    );\r\n\r\n    /// @notice An item is no longer listed for sale\r\n    /// @param  seller     former offeror of the item\r\n    /// @param  nftAddress which token contract holds the formerly offered token\r\n    /// @param  tokenId    the identifier for the formerly offered token\r\n    event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\r\n\r\n    /// @notice A listed item was sold\r\n    /// @param  seller       the offeror of the item\r\n    /// @param  buyer        the buyer of the item\r\n    /// @param  nftAddress   which token contract holds the sold token\r\n    /// @param  tokenId      the identifier for the sold token\r\n    /// @param  quantity     how many of this token identifier where sold (or 1 for a ERC-721 token)\r\n    /// @param  pricePerItem the price (in units of the paymentToken) for each token sold\r\n    /// @param  paymentToken the payment token that was used to pay for this item\r\n    event ItemSold(\r\n        address seller,\r\n        address buyer,\r\n        address nftAddress,\r\n        uint256 tokenId,\r\n        uint64 quantity,\r\n        uint128 pricePerItem,\r\n        address paymentToken\r\n    );\r\n\r\n    /// @notice The sales tracker contract was update\r\n    /// @param  _priceTrackerAddress the new address to call for sales price tracking\r\n    event UpdateSalesTracker(address _priceTrackerAddress);\r\n\r\n    modifier whenBiddingActive() {\r\n        require(areBidsActive, \"AtlantisMarketplace: Bidding is not active\");\r\n\r\n        _;\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n\r\n    /// @notice Perform initial contract setup\r\n    /// @dev    The initializer modifier ensures this is only called once, the owner should confirm this was properly\r\n    ///         performed before publishing this contract address.\r\n    /// @param  _initialFee          fee to be paid on each sale, in basis points\r\n    /// @param  _initialFeeRecipient wallet to collets fees\r\n    /// @param  _initialPaymentToken address of the token that is used for settlement\r\n    function initialize(\r\n        uint256 _initialFee,\r\n        address _initialFeeRecipient,\r\n        IERC20Upgradeable _initialPaymentToken\r\n    ) external initializer {\r\n        require(address(_initialPaymentToken) != address(0), \"AtlantisMarketplace: cannot set address(0)\");\r\n\r\n        __AccessControl_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __ReentrancyGuard_init_unchained();\r\n\r\n        _setRoleAdmin(ATLANTIS_MARKETPLACE_ADMIN_ROLE, ATLANTIS_MARKETPLACE_ADMIN_ROLE);\r\n        _grantRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE, msg.sender);\r\n\r\n        setFee(_initialFee, _initialFee);\r\n        setFeeRecipient(_initialFeeRecipient);\r\n        paymentToken = _initialPaymentToken;\r\n    }\r\n\r\n    /// @notice Creates an item listing. You must authorize this marketplace with your item's token contract to list.\r\n    /// @param  _nftAddress     which token contract holds the offered token\r\n    /// @param  _tokenId        the identifier for the offered token\r\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\r\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\r\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\r\n    function createListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken\r\n    ) external nonReentrant whenNotPaused {\r\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity == 0, \"AtlantisMarketplace: already listed\");\r\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\r\n        emit ItemListed(_msgSender(), _nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\r\n    }\r\n\r\n    /// @notice Updates an item listing\r\n    /// @param  _nftAddress        which token contract holds the offered token\r\n    /// @param  _tokenId           the identifier for the offered token\r\n    /// @param  _newQuantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\r\n    /// @param  _newPricePerItem   the price (in units of the paymentToken) for each token offered\r\n    /// @param  _newExpirationTime UNIX timestamp after when this listing expires\r\n    function updateListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint64 _newQuantity,\r\n        uint128 _newPricePerItem,\r\n        uint64 _newExpirationTime,\r\n        address _paymentToken\r\n    ) external nonReentrant whenNotPaused {\r\n        require(listings[_nftAddress][_tokenId][_msgSender()].quantity > 0, \"AtlantisMarketplace: not listed item\");\r\n        _createListingWithoutEvent(\r\n            _nftAddress,\r\n            _tokenId,\r\n            _newQuantity,\r\n            _newPricePerItem,\r\n            _newExpirationTime,\r\n            _paymentToken\r\n        );\r\n        emit ItemUpdated(\r\n            _msgSender(),\r\n            _nftAddress,\r\n            _tokenId,\r\n            _newQuantity,\r\n            _newPricePerItem,\r\n            _newExpirationTime,\r\n            _paymentToken\r\n        );\r\n    }\r\n\r\n    function createOrUpdateListing(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken\r\n    ) external nonReentrant whenNotPaused {\r\n        bool _existingListing = listings[_nftAddress][_tokenId][_msgSender()].quantity > 0;\r\n        _createListingWithoutEvent(_nftAddress, _tokenId, _quantity, _pricePerItem, _expirationTime, _paymentToken);\r\n        // Keep the events the same as they were before.\r\n        if (_existingListing) {\r\n            emit ItemUpdated(\r\n                _msgSender(),\r\n                _nftAddress,\r\n                _tokenId,\r\n                _quantity,\r\n                _pricePerItem,\r\n                _expirationTime,\r\n                _paymentToken\r\n            );\r\n        } else {\r\n            emit ItemListed(\r\n                _msgSender(),\r\n                _nftAddress,\r\n                _tokenId,\r\n                _quantity,\r\n                _pricePerItem,\r\n                _expirationTime,\r\n                _paymentToken\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Performs the listing and does not emit the event\r\n    /// @param  _nftAddress     which token contract holds the offered token\r\n    /// @param  _tokenId        the identifier for the offered token\r\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\r\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\r\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\r\n    function _createListingWithoutEvent(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken\r\n    ) internal {\r\n        require(_expirationTime > block.timestamp, \"AtlantisMarketplace: invalid expiration time\");\r\n        require(_pricePerItem >= MIN_PRICE, \"AtlantisMarketplace: below min price\");\r\n\r\n        if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            IERC721Upgradeable nft = IERC721Upgradeable(_nftAddress);\r\n            require(nft.ownerOf(_tokenId) == _msgSender(), \"AtlantisMarketplace: not owning item\");\r\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \"AtlantisMarketplace: item not approved\");\r\n            require(_quantity == 1, \"AtlantisMarketplace: cannot list multiple ERC721\");\r\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            IERC1155Upgradeable nft = IERC1155Upgradeable(_nftAddress);\r\n            require(nft.balanceOf(_msgSender(), _tokenId) >= _quantity, \"AtlantisMarketplace: must hold enough nfts\");\r\n            require(nft.isApprovedForAll(_msgSender(), address(this)), \"AtlantisMarketplace: item not approved\");\r\n            require(_quantity > 0, \"AtlantisMarketplace: nothing to list\");\r\n        } else {\r\n            revert(\"AtlantisMarketplace: token is not approved for trading\");\r\n        }\r\n\r\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\r\n        require(_paymentTokenForCollection == _paymentToken, \"AtlantisMarketplace: Wrong payment token\");\r\n\r\n        listings[_nftAddress][_tokenId][_msgSender()] = ListingOrBid(\r\n            _quantity,\r\n            _pricePerItem,\r\n            _expirationTime,\r\n            _paymentToken\r\n        );\r\n    }\r\n\r\n    /// @notice Remove an item listing\r\n    /// @param  _nftAddress which token contract holds the offered token\r\n    /// @param  _tokenId    the identifier for the offered token\r\n    function cancelListing(address _nftAddress, uint256 _tokenId) external nonReentrant {\r\n        delete (listings[_nftAddress][_tokenId][_msgSender()]);\r\n        emit ItemCanceled(_msgSender(), _nftAddress, _tokenId);\r\n    }\r\n\r\n    function cancelManyBids(CancelBidParams[] calldata _cancelBidParams) external nonReentrant {\r\n        for (uint256 i = 0; i < _cancelBidParams.length; i++) {\r\n            CancelBidParams calldata _cancelBidParam = _cancelBidParams[i];\r\n            if (_cancelBidParam.bidType == BidType.COLLECTION) {\r\n                collectionBids[_cancelBidParam.nftAddress][_msgSender()].quantity = 0;\r\n\r\n                emit CollectionBidCancelled(_msgSender(), _cancelBidParam.nftAddress);\r\n            } else {\r\n                tokenBids[_cancelBidParam.nftAddress][_cancelBidParam.tokenId][_msgSender()].quantity = 0;\r\n\r\n                emit TokenBidCancelled(_msgSender(), _cancelBidParam.nftAddress, _cancelBidParam.tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Creates a bid for a particular token.\r\n    function createOrUpdateTokenBid(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken\r\n    ) external nonReentrant whenNotPaused whenBiddingActive {\r\n        if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            require(_quantity == 1, \"AtlantisMarketplace: token bid quantity 1 for ERC721\");\r\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            require(_quantity > 0, \"AtlantisMarketplace: bad quantity\");\r\n        } else {\r\n            revert(\"AtlantisMarketplace: token is not approved for trading\");\r\n        }\r\n\r\n        _createBidWithoutEvent(\r\n            _nftAddress,\r\n            _quantity,\r\n            _pricePerItem,\r\n            _expirationTime,\r\n            _paymentToken,\r\n            tokenBids[_nftAddress][_tokenId][_msgSender()]\r\n        );\r\n\r\n        emit TokenBidCreatedOrUpdated(\r\n            _msgSender(),\r\n            _nftAddress,\r\n            _tokenId,\r\n            _quantity,\r\n            _pricePerItem,\r\n            _expirationTime,\r\n            _paymentToken\r\n        );\r\n    }\r\n\r\n    function createOrUpdateCollectionBid(\r\n        address _nftAddress,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken\r\n    ) external nonReentrant whenNotPaused whenBiddingActive {\r\n        if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            require(_quantity > 0, \"AtlantisMarketplace: Bad quantity\");\r\n        } else if (tokenApprovals[_nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            revert(\"AtlantisMarketplace: No collection bids on 1155s\");\r\n        } else {\r\n            revert(\"AtlantisMarketplace: token is not approved for trading\");\r\n        }\r\n\r\n        _createBidWithoutEvent(\r\n            _nftAddress,\r\n            _quantity,\r\n            _pricePerItem,\r\n            _expirationTime,\r\n            _paymentToken,\r\n            collectionBids[_nftAddress][_msgSender()]\r\n        );\r\n\r\n        emit CollectionBidCreatedOrUpdated(\r\n            _msgSender(),\r\n            _nftAddress,\r\n            _quantity,\r\n            _pricePerItem,\r\n            _expirationTime,\r\n            _paymentToken\r\n        );\r\n    }\r\n\r\n    function _createBidWithoutEvent(\r\n        address _nftAddress,\r\n        uint64 _quantity,\r\n        uint128 _pricePerItem,\r\n        uint64 _expirationTime,\r\n        address _paymentToken,\r\n        ListingOrBid storage _bid\r\n    ) private {\r\n        require(_expirationTime > block.timestamp, \"AtlantisMarketplace: invalid expiration time\");\r\n        require(_pricePerItem >= MIN_PRICE, \"AtlantisMarketplace: below min price\");\r\n\r\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_nftAddress);\r\n        require(_paymentTokenForCollection == _paymentToken, \"AtlantisMarketplace: Bad payment token\");\r\n\r\n        IERC20Upgradeable _token = IERC20Upgradeable(_paymentToken);\r\n\r\n        uint256 _totalAmountNeeded = _pricePerItem * _quantity;\r\n\r\n        require(\r\n            _token.allowance(_msgSender(), address(this)) >= _totalAmountNeeded &&\r\n                _token.balanceOf(_msgSender()) >= _totalAmountNeeded,\r\n            \"AtlantisMarketplace: Not enough tokens owned or allowed for bid\"\r\n        );\r\n\r\n        _bid.quantity = _quantity;\r\n        _bid.pricePerItem = _pricePerItem;\r\n        _bid.expirationTime = _expirationTime;\r\n        _bid.paymentTokenAddress = _paymentToken;\r\n    }\r\n\r\n    function acceptCollectionBid(\r\n        AcceptBidParams calldata _acceptBidParams\r\n    ) external nonReentrant whenNotPaused whenBiddingActive {\r\n        _acceptBid(_acceptBidParams, BidType.COLLECTION);\r\n    }\r\n\r\n    function acceptTokenBid(\r\n        AcceptBidParams calldata _acceptBidParams\r\n    ) external nonReentrant whenNotPaused whenBiddingActive {\r\n        _acceptBid(_acceptBidParams, BidType.TOKEN);\r\n    }\r\n\r\n    function _acceptBid(AcceptBidParams calldata _acceptBidParams, BidType _bidType) private {\r\n        // Validate buy order\r\n        require(_msgSender() != _acceptBidParams.bidder, \"AtlantisMarketplace: Cannot supply own bid\");\r\n        require(_acceptBidParams.quantity > 0, \"AtlantisMarketplace: Nothing to supply to bidder\");\r\n\r\n        // Validate bid\r\n        ListingOrBid storage _bid = _bidType == BidType.COLLECTION\r\n            ? collectionBids[_acceptBidParams.nftAddress][_acceptBidParams.bidder]\r\n            : tokenBids[_acceptBidParams.nftAddress][_acceptBidParams.tokenId][_acceptBidParams.bidder];\r\n\r\n        require(_bid.quantity > 0, \"AtlantisMarketplace: bid does not exist\");\r\n        require(_bid.expirationTime >= block.timestamp, \"AtlantisMarketplace: bid expired\");\r\n        require(_bid.pricePerItem > 0, \"AtlantisMarketplace: bid price invalid\");\r\n        require(_bid.quantity >= _acceptBidParams.quantity, \"AtlantisMarketplace: not enough quantity\");\r\n        require(_bid.pricePerItem == _acceptBidParams.pricePerItem, \"AtlantisMarketplace: price does not match\");\r\n\r\n        // Ensure the accepter, the bidder, and the collection all agree on the token to be used for the purchase.\r\n        // If the token used for buying/selling has changed since the bid was created, this effectively blocks\r\n        // all the old bids with the old payment tokens from being bought.\r\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_acceptBidParams.nftAddress);\r\n\r\n        require(\r\n            _bid.paymentTokenAddress == _acceptBidParams.paymentToken &&\r\n                _acceptBidParams.paymentToken == _paymentTokenForCollection,\r\n            \"AtlantisMarketplace: Wrong payment token\"\r\n        );\r\n\r\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\r\n        if (tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            require(_acceptBidParams.quantity == 1, \"AtlantisMarketplace: Cannot supply multiple ERC721s\");\r\n\r\n            IERC721Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(\r\n                _msgSender(),\r\n                _acceptBidParams.bidder,\r\n                _acceptBidParams.tokenId\r\n            );\r\n        } else if (tokenApprovals[_acceptBidParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            IERC1155Upgradeable(_acceptBidParams.nftAddress).safeTransferFrom(\r\n                _msgSender(),\r\n                _acceptBidParams.bidder,\r\n                _acceptBidParams.tokenId,\r\n                _acceptBidParams.quantity,\r\n                bytes(\"\")\r\n            );\r\n        } else {\r\n            revert(\"AtlantisMarketplace: token is not approved for trading\");\r\n        }\r\n\r\n        _payFees(\r\n            _bid,\r\n            _acceptBidParams.quantity,\r\n            _acceptBidParams.nftAddress,\r\n            _acceptBidParams.bidder,\r\n            _msgSender(),\r\n            _acceptBidParams.paymentToken,\r\n            false\r\n        );\r\n\r\n        if (priceTrackerAddress != address(0)) {\r\n            IAtlantisNFTPriceTracker(priceTrackerAddress).recordSale(\r\n                _acceptBidParams.nftAddress,\r\n                _acceptBidParams.tokenId,\r\n                _bid.pricePerItem\r\n            );\r\n        }\r\n\r\n        // Announce accepting bid\r\n        emit BidAccepted(\r\n            _msgSender(),\r\n            _acceptBidParams.bidder,\r\n            _acceptBidParams.nftAddress,\r\n            _acceptBidParams.tokenId,\r\n            _acceptBidParams.quantity,\r\n            _acceptBidParams.pricePerItem,\r\n            _acceptBidParams.paymentToken,\r\n            _bidType\r\n        );\r\n\r\n        // Deplete or cancel listing\r\n        _bid.quantity -= _acceptBidParams.quantity;\r\n    }\r\n\r\n    /// @notice Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection.\r\n    function buyItems(BuyItemParams[] calldata _buyItemParams) external payable nonReentrant whenNotPaused {\r\n        uint256 _ethAmountRequired;\r\n        for (uint256 i = 0; i < _buyItemParams.length; i++) {\r\n            _ethAmountRequired += _buyItem(_buyItemParams[i]);\r\n        }\r\n\r\n        require(msg.value == _ethAmountRequired, \"AtlantisMarketplace: Bad ETH value\");\r\n    }\r\n\r\n    // Returns the amount of eth a user must have sent.\r\n    function _buyItem(BuyItemParams calldata _buyItemParams) private returns (uint256) {\r\n        // Validate buy order\r\n        require(_msgSender() != _buyItemParams.owner, \"AtlantisMarketplace: Cannot buy your own item\");\r\n        require(_buyItemParams.quantity > 0, \"AtlantisMarketplace: Nothing to buy\");\r\n\r\n        // Validate listing\r\n        ListingOrBid memory listedItem = listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][\r\n            _buyItemParams.owner\r\n        ];\r\n        require(listedItem.quantity > 0, \"AtlantisMarketplace: not listed item\");\r\n        require(listedItem.expirationTime >= block.timestamp, \"AtlantisMarketplace: listing expired\");\r\n        require(listedItem.pricePerItem > 0, \"AtlantisMarketplace: listing price invalid\");\r\n        require(listedItem.quantity >= _buyItemParams.quantity, \"AtlantisMarketplace: not enough quantity\");\r\n        require(listedItem.pricePerItem <= _buyItemParams.maxPricePerItem, \"AtlantisMarketplace: price increased\");\r\n\r\n        // Ensure the buyer, the seller, and the collection all agree on the token to be used for the purchase.\r\n        // If the token used for buying/selling has changed since the listing was created, this effectively blocks\r\n        // all the old listings with the old payment tokens from being bought.\r\n        address _paymentTokenForCollection = getPaymentTokenForCollection(_buyItemParams.nftAddress);\r\n        address _paymentTokenForListing = _getPaymentTokenForListing(listedItem);\r\n\r\n        require(\r\n            _paymentTokenForListing == _buyItemParams.paymentToken &&\r\n                _buyItemParams.paymentToken == _paymentTokenForCollection,\r\n            \"AtlantisMarketplace: Wrong payment token\"\r\n        );\r\n\r\n        if (_buyItemParams.usingEth) {\r\n            require(\r\n                _paymentTokenForListing == address(weth),\r\n                \"AtlantisMarketplace: ETH only used with weth collection\"\r\n            );\r\n        }\r\n\r\n        // Transfer NFT to buyer, also validates owner owns it, and token is approved for trading\r\n        if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            require(_buyItemParams.quantity == 1, \"AtlantisMarketplace: Cannot buy multiple ERC721\");\r\n            IERC721Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(\r\n                _buyItemParams.owner,\r\n                _msgSender(),\r\n                _buyItemParams.tokenId\r\n            );\r\n        } else if (tokenApprovals[_buyItemParams.nftAddress] == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            IERC1155Upgradeable(_buyItemParams.nftAddress).safeTransferFrom(\r\n                _buyItemParams.owner,\r\n                _msgSender(),\r\n                _buyItemParams.tokenId,\r\n                _buyItemParams.quantity,\r\n                bytes(\"\")\r\n            );\r\n        } else {\r\n            revert(\"AtlantisMarketplace: token is not approved for trading\");\r\n        }\r\n\r\n        _payFees(\r\n            listedItem,\r\n            _buyItemParams.quantity,\r\n            _buyItemParams.nftAddress,\r\n            _msgSender(),\r\n            _buyItemParams.owner,\r\n            _buyItemParams.paymentToken,\r\n            _buyItemParams.usingEth\r\n        );\r\n\r\n        // Announce sale\r\n        emit ItemSold(\r\n            _buyItemParams.owner,\r\n            _msgSender(),\r\n            _buyItemParams.nftAddress,\r\n            _buyItemParams.tokenId,\r\n            _buyItemParams.quantity,\r\n            listedItem.pricePerItem, // this is deleted below in \"Deplete or cancel listing\"\r\n            _buyItemParams.paymentToken\r\n        );\r\n\r\n        // Deplete or cancel listing\r\n        if (listedItem.quantity == _buyItemParams.quantity) {\r\n            delete listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner];\r\n        } else {\r\n            listings[_buyItemParams.nftAddress][_buyItemParams.tokenId][_buyItemParams.owner].quantity -= _buyItemParams\r\n                .quantity;\r\n        }\r\n\r\n        if (priceTrackerAddress != address(0)) {\r\n            IAtlantisNFTPriceTracker(priceTrackerAddress).recordSale(\r\n                _buyItemParams.nftAddress,\r\n                _buyItemParams.tokenId,\r\n                listedItem.pricePerItem\r\n            );\r\n        }\r\n\r\n        if (_buyItemParams.usingEth) {\r\n            return _buyItemParams.quantity * listedItem.pricePerItem;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @dev pays the fees to the marketplace fee recipient, the collection recipient if one exists, and to the seller of the item.\r\n    /// @param _listOrBid the item that is being purchased/accepted\r\n    /// @param _quantity the quantity of the item being purchased/accepted\r\n    /// @param _collectionAddress the collection to which this item belongs\r\n    function _payFees(\r\n        ListingOrBid memory _listOrBid,\r\n        uint256 _quantity,\r\n        address _collectionAddress,\r\n        address _from,\r\n        address _to,\r\n        address _paymentTokenAddress,\r\n        bool _usingEth\r\n    ) private {\r\n        IERC20Upgradeable _paymentToken = IERC20Upgradeable(_paymentTokenAddress);\r\n\r\n        // Handle purchase price payment\r\n        uint256 _totalPrice = _listOrBid.pricePerItem * _quantity;\r\n\r\n        address _collectionFeeRecipient = collectionToCollectionOwnerFee[_collectionAddress].recipient;\r\n\r\n        uint256 _protocolFee;\r\n        uint256 _collectionFee;\r\n\r\n        if (_collectionFeeRecipient != address(0)) {\r\n            _protocolFee = feeWithCollectionOwner;\r\n            _collectionFee = collectionToCollectionOwnerFee[_collectionAddress].fee;\r\n        } else {\r\n            _protocolFee = fee;\r\n            _collectionFee = 0;\r\n        }\r\n\r\n        uint256 _protocolFeeAmount = (_totalPrice * _protocolFee) / BASIS_POINTS;\r\n        uint256 _collectionFeeAmount = (_totalPrice * _collectionFee) / BASIS_POINTS;\r\n\r\n        _transferAmount(_from, feeReceipient, _protocolFeeAmount, _paymentToken, _usingEth);\r\n        _transferAmount(_from, _collectionFeeRecipient, _collectionFeeAmount, _paymentToken, _usingEth);\r\n\r\n        // Transfer rest to seller\r\n        _transferAmount(_from, _to, _totalPrice - _protocolFeeAmount - _collectionFeeAmount, _paymentToken, _usingEth);\r\n    }\r\n\r\n    function _transferAmount(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        IERC20Upgradeable _paymentToken,\r\n        bool _usingEth\r\n    ) private {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_usingEth) {\r\n            (bool _success, ) = payable(_to).call{ value: _amount }(\"\");\r\n            require(_success, \"AtlantisMarketplace: Sending eth was not successful\");\r\n        } else {\r\n            _paymentToken.safeTransferFrom(_from, _to, _amount);\r\n        }\r\n    }\r\n\r\n    function getPaymentTokenForCollection(address _collection) public view returns (address) {\r\n        address _collectionPaymentToken = collectionToPaymentToken[_collection];\r\n\r\n        // For backwards compatability. If a collection payment wasn't set at the collection level, it was using the payment token.\r\n        return _collectionPaymentToken == address(0) ? address(paymentToken) : _collectionPaymentToken;\r\n    }\r\n\r\n    function _getPaymentTokenForListing(ListingOrBid memory listedItem) private view returns (address) {\r\n        // For backwards compatability. If a listing has no payment token address, it was using the original, default payment token.\r\n        return listedItem.paymentTokenAddress == address(0) ? address(paymentToken) : listedItem.paymentTokenAddress;\r\n    }\r\n\r\n    // Owner administration ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Updates the fee amount which is collected during sales, for both collections with and without owner specific fees.\r\n    /// @dev    This is callable only by the owner. Both fees may not exceed MAX_FEE\r\n    /// @param  _newFee the updated fee amount is basis points\r\n    function setFee(\r\n        uint256 _newFee,\r\n        uint256 _newFeeWithCollectionOwner\r\n    ) public onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        require(_newFee <= MAX_FEE && _newFeeWithCollectionOwner <= MAX_FEE, \"AtlantisMarketplace: max fee\");\r\n\r\n        fee = _newFee;\r\n        feeWithCollectionOwner = _newFeeWithCollectionOwner;\r\n\r\n        emit UpdateFee(_newFee);\r\n        emit UpdateFeeWithCollectionOwner(_newFeeWithCollectionOwner);\r\n    }\r\n\r\n    /// @notice Updates the fee amount which is collected during sales fro a specific collection\r\n    /// @dev    This is callable only by the owner\r\n    /// @param  _collectionAddress The collection in question. This must be whitelisted.\r\n    /// @param _collectionOwnerFee The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected.\r\n    function setCollectionOwnerFee(\r\n        address _collectionAddress,\r\n        CollectionOwnerFee calldata _collectionOwnerFee\r\n    ) external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        require(\r\n            tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_1155_APPROVED ||\r\n                tokenApprovals[_collectionAddress] == TokenApprovalStatus.ERC_721_APPROVED,\r\n            \"AtlantisMarketplace: Collection is not approved\"\r\n        );\r\n        require(_collectionOwnerFee.fee <= MAX_COLLECTION_FEE, \"AtlantisMarketplace: Collection fee too high\");\r\n\r\n        // The collection recipient can be the 0 address, meaning we will treat this as a collection with no collection owner fee.\r\n        collectionToCollectionOwnerFee[_collectionAddress] = _collectionOwnerFee;\r\n\r\n        emit UpdateCollectionOwnerFee(_collectionAddress, _collectionOwnerFee.recipient, _collectionOwnerFee.fee);\r\n    }\r\n\r\n    /// @notice Updates the fee recipient which receives fees during sales\r\n    /// @dev    This is callable only by the owner.\r\n    /// @param  _newFeeRecipient the wallet to receive fees\r\n    function setFeeRecipient(address _newFeeRecipient) public onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        require(_newFeeRecipient != address(0), \"AtlantisMarketplace: cannot set 0x0 address\");\r\n        feeReceipient = _newFeeRecipient;\r\n        emit UpdateFeeRecipient(_newFeeRecipient);\r\n    }\r\n\r\n    /// @notice Sets a token as an approved kind of NFT or as ineligible for trading\r\n    /// @dev    This is callable only by the owner.\r\n    /// @param  _nft    address of the NFT to be approved\r\n    /// @param  _status the kind of NFT approved, or NOT_APPROVED to remove approval\r\n    function setTokenApprovalStatus(\r\n        address _nft,\r\n        TokenApprovalStatus _status,\r\n        address _paymentToken\r\n    ) external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        if (_status == TokenApprovalStatus.ERC_721_APPROVED) {\r\n            require(\r\n                IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC721),\r\n                \"AtlantisMarketplace: not an ERC721 contract\"\r\n            );\r\n        } else if (_status == TokenApprovalStatus.ERC_1155_APPROVED) {\r\n            require(\r\n                IERC165Upgradeable(_nft).supportsInterface(INTERFACE_ID_ERC1155),\r\n                \"AtlantisMarketplace: not an ERC1155 contract\"\r\n            );\r\n        }\r\n\r\n        // Default to weth\r\n        if (_paymentToken == address(0)) {\r\n            _paymentToken = address(weth);\r\n        }\r\n\r\n        require(\r\n            _paymentToken != address(0) && (_paymentToken == address(weth) || _paymentToken == address(paymentToken)),\r\n            \"AtlantisMarketplace: Payment token not supported\"\r\n        );\r\n\r\n        tokenApprovals[_nft] = _status;\r\n\r\n        collectionToPaymentToken[_nft] = _paymentToken;\r\n        emit TokenApprovalStatusUpdated(_nft, _status, _paymentToken);\r\n    }\r\n\r\n    function setWeth(address _wethAddress) external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        require(address(weth) == address(0), \"WETH address already set\");\r\n\r\n        weth = IERC20Upgradeable(_wethAddress);\r\n    }\r\n\r\n    /// @notice Updates the fee recipient which receives fees during sales\r\n    /// @dev    This is callable only by the owner.\r\n    /// @param  _priceTrackerAddress the wallet to receive fees\r\n    function setPriceTracker(address _priceTrackerAddress) public onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        require(_priceTrackerAddress != address(0), \"AtlantisMarketplace: cannot set 0x0 address\");\r\n        priceTrackerAddress = _priceTrackerAddress;\r\n        emit UpdateSalesTracker(_priceTrackerAddress);\r\n    }\r\n\r\n    function toggleAreBidsActive() external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        areBidsActive = !areBidsActive;\r\n    }\r\n\r\n    /// @notice Pauses the marketplace, creatisgn and executing listings is paused\r\n    /// @dev    This is callable only by the owner. Canceling listings is not paused.\r\n    function pause() external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpauses the marketplace, all functionality is restored\r\n    /// @dev    This is callable only by the owner.\r\n    function unpause() external onlyRole(ATLANTIS_MARKETPLACE_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/common/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ncontract AddressRegistry {\r\n    mapping(bytes32 => address) public addresses;\r\n\r\n    function getAddress(bytes32 _identifier) public view returns (address) {\r\n        return addresses[_identifier];\r\n    }\r\n\r\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\r\n        addresses[_identifier] = contractAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/Gold.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./AtlantisAddressRegistry.sol\";\r\n\r\ncontract Gold is ERC20, Ownable {\r\n    event Minted(address to, uint256 amount);\r\n    uint256 public INITIAL_SUPPLY = 10_000_000_000 ether;\r\n\r\n    constructor() ERC20(\"GOLD\", \"GOLD\") {\r\n        // Mint initial supply to contract creator\r\n        _mint(tx.origin, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @notice  Burn `amount` tokens and decreasing the total supply.\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burn(uint256 amount) external returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IAtlantisNFTPriceTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface IAtlantisNFTPriceTracker {\r\n    event AveragePriceUpdated(\r\n        address indexed _collection,\r\n        FloorType indexed _floorType,\r\n        uint256 _oldAverage,\r\n        uint256 _salePrice,\r\n        uint256 _newAverage\r\n    );\r\n\r\n    // Saves the given sale of a token in a collection if it meets the saving criteria.\r\n    function recordSale(address _collection, uint256 _tokenId, uint256 _salePrice) external;\r\n\r\n    // Returns the average price for the given collection in the floor type category.\r\n    // Can return 0 if asking for a FloorType that isn't being tracked for that given collection\r\n    function getAveragePriceForCollection(address _collection, FloorType _floorType) external view returns (uint256);\r\n}\r\n\r\n// Allows for customization within tracking floor prices\r\n// Ex: Tracking legion genesis commons could be subfloor1, genesis uncommons subfloor2, etc\r\nenum FloorType {\r\n    FLOOR,\r\n    SUBFLOOR1,\r\n    SUBFLOOR2,\r\n    SUBFLOOR3\r\n}\r\n"
    },
    "contracts/interface/IMintBurnToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IMintBurnToken is IERC20 {\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n"
    },
    "contracts/StakingWithLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport \"./interface/IMintBurnToken.sol\";\r\nimport \"./AtlantisAddressRegistry.sol\";\r\n\r\n/**\r\n * @title StakingWithLock\r\n * @notice StakingWithLock is the contract that allows users to stake their gold tokens and receive stardust.\r\n */\r\ncontract StakingWithLock is\r\n    Initializable,\r\n    AccessControlUpgradeable,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    OwnableUpgradeable\r\n{\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    struct Unstake {\r\n        uint256 amount; // Amount of stardust unstaked.\r\n        uint256 startTime; // Time when unstake is initiated.\r\n        uint256 claimTime; // Time where stardust is unlocked and ready for claiming.\r\n    }\r\n\r\n    AtlantisAddressRegistry public addressRegistry;\r\n\r\n    // Info on user's pending or completed unstakes.\r\n    mapping(address => Unstake[]) public unstakeInfo;\r\n\r\n    // Addresses of gold & stardust.\r\n    mapping(address => uint) public whitelistedContracts;\r\n    // Unstake time\r\n    uint256 public unstakeTime;\r\n\r\n    // Event that triggers on staking.\r\n    event LogStake(address indexed staker, uint256 goldAmount, uint256 timestamp);\r\n    // Event that triggers on unstake initiation.\r\n    event LogUnstake(address indexed staker, uint256 stardustAmount, uint256 unstakeStart, uint256 unstakeUnlocked);\r\n    // Event that triggers when Gold is claimed after unbonding period.\r\n    event LogClaimed(address indexed staker, uint256 claimedAmount, uint256 timestamp);\r\n    // Event that triggers when Stardust address is set.\r\n    event LogSetStardust(address stardust, uint256 timestamp);\r\n    // Event that log unstake and burn\r\n    event LogUnstakeAndBurn(address indexed staker, address indexed from, uint256 stardustAmount, uint256 burnTime);\r\n    // Log set atlantis\r\n    event LogSetAtlantisGemstones(address atlantis, uint256 timestamp);\r\n    // Change unstake time event\r\n    event LogSetUnstakeTime(uint256 unstakeTime, uint256 timestamp);\r\n    // Set Address Registry\r\n    event LogSetAddressRegistry(address addressRegistry);\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n\r\n    modifier onlyAtlantisContracts() {\r\n        _isAtlantisContracts();\r\n        _;\r\n    }\r\n\r\n    function _isAtlantisContracts() internal view {\r\n        require(\r\n            addressRegistry.isControllerContract(msg.sender),\r\n            \"StakingWithLock: Only Atlantis contracts can call this function\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Initialises StakingWithLock contract with the required addresses.\r\n     * @param _admin address of the admin.\r\n     */\r\n    function __StakingWithLock_init(address _admin, AtlantisAddressRegistry _addressRegistry) external initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __AccessControl_init_unchained();\r\n        __Ownable_init_unchained();\r\n\r\n        // _admin will be address of timelock contract.\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\r\n        _setupRole(PAUSER_ROLE, _admin);\r\n        addressRegistry = _addressRegistry;\r\n        unstakeTime = 180 days;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /**\r\n     * @notice View user's pending unstakes.\r\n     */\r\n    function getUserPendingUnstakes(address _user) external view returns (Unstake[] memory) {\r\n        return unstakeInfo[_user];\r\n    }\r\n\r\n    /**\r\n     * @notice View user's total amount of Gold that is pending unstake (includes Gold that are not yet claimed).\r\n     */\r\n    function getUserTotalGoldPendingUnstake(address _user) external view returns (uint256) {\r\n        // Retrieve user's unstake information.\r\n        Unstake[] memory userusInfo = unstakeInfo[_user];\r\n        uint256 usLength = userusInfo.length;\r\n        uint256 totalGoldPendingUnstake;\r\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\r\n        for (uint256 i = 0; i < usLength; i++) {\r\n            Unstake memory usInfo = userusInfo[i];\r\n            uint256 amount = usInfo.amount;\r\n            totalGoldPendingUnstake += amount;\r\n        }\r\n\r\n        return totalGoldPendingUnstake - getUserClaimableGold(_user);\r\n    }\r\n\r\n    /**\r\n     * @notice View user's claimable Gold.\r\n     */\r\n    function getUserClaimableGold(address _user) public view returns (uint256) {\r\n        // Initialise claimable Gold to 0.\r\n        uint256 claimableAmount;\r\n\r\n        // Retrieve user's unstake information.\r\n        Unstake[] memory userusInfo = unstakeInfo[_user];\r\n        uint256 usLength = userusInfo.length;\r\n\r\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\r\n        for (uint256 i = 0; i < usLength; i++) {\r\n            Unstake memory usInfo = userusInfo[i];\r\n            uint256 claimTime = usInfo.claimTime;\r\n            uint256 amount = usInfo.amount;\r\n            if (claimTime < block.timestamp) {\r\n                claimableAmount += amount;\r\n            }\r\n        }\r\n\r\n        return claimableAmount;\r\n    }\r\n\r\n    /* ========== ADMIN CONFIGURATION ========== */\r\n\r\n    /**\r\n     * @notice Set Atlantis Registry\r\n     * @param _addressRegistry address of Atlantis Registry\r\n     */\r\n    function setAtlantisRegistry(AtlantisAddressRegistry _addressRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        addressRegistry = _addressRegistry;\r\n        emit LogSetAddressRegistry(address(addressRegistry));\r\n    }\r\n\r\n    /**\r\n     * @notice Pauses contract.\r\n     * @dev Can only be called by pauser role.\r\n     */\r\n    function pauseContract() external onlyRole(PAUSER_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpauses contract.\r\n     * @dev Can only be called by pauser role.\r\n     */\r\n    function unpause() external onlyRole(PAUSER_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Stake gold tokens in exchange for stardust tokens.\r\n     * @param _amount amount of gold tokens to stake.\r\n     */\r\n    function stake(uint256 _amount) external nonReentrant whenNotPaused returns (bool) {\r\n        // Stake amount must be > 0.\r\n        require(_amount > 0, \"StakingWithLock: Nothing to deposit\");\r\n\r\n        IERC20Upgradeable gold = IERC20Upgradeable(addressRegistry.getGold());\r\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\r\n\r\n        // Receive user's Gold tokens.\r\n        gold.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Mint stardust tokens to user at 1:1 ratio.\r\n        stardust.mint(msg.sender, _amount);\r\n\r\n        emit LogStake(msg.sender, _amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate unstake of stardust tokens which will require unstaking period before claiming.\r\n     * @param _amount amount of stardust tokens to unstake.\r\n     */\r\n    function unstake(uint256 _amount) external nonReentrant whenNotPaused returns (bool) {\r\n        // Unstake amount must be > 0.\r\n        require(_amount > 0, \"StakingWithLock: Nothing to unstake\");\r\n\r\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\r\n\r\n        // Save unstake details.\r\n        Unstake memory usInfo = Unstake(_amount, block.timestamp, block.timestamp + unstakeTime);\r\n        unstakeInfo[msg.sender].push(usInfo);\r\n\r\n        // Receive user's stardust.\r\n        stardust.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Burn all of user's Stardust.\r\n        stardust.burn(_amount);\r\n\r\n        emit LogUnstake(msg.sender, _amount, block.timestamp, block.timestamp + unstakeTime);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Function to claim after the unstaking period of Stardust.\r\n     */\r\n    function claim() external nonReentrant whenNotPaused returns (bool) {\r\n        IERC20Upgradeable gold = IERC20Upgradeable(addressRegistry.getGold());\r\n\r\n        // Initialise claimable Gold to 0.\r\n        uint256 claimableAmount;\r\n        Unstake[] memory stillUnstaking;\r\n        // Retrieve user's unstake information.\r\n        Unstake[] storage userusInfo = unstakeInfo[msg.sender];\r\n        uint256 usLength = userusInfo.length;\r\n        stillUnstaking = new Unstake[](usLength);\r\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\r\n        for (uint256 i = 0; i < usLength; i++) {\r\n            Unstake storage usInfo = userusInfo[i];\r\n            uint256 claimTime = usInfo.claimTime;\r\n            uint256 amount = usInfo.amount;\r\n            if (claimTime < block.timestamp) {\r\n                claimableAmount += amount;\r\n            } else {\r\n                // Push unstake details that have yet to pass claim time into stillUnstaking.\r\n                // This is used for reconstruction later.\r\n                stillUnstaking[i] = Unstake(amount, usInfo.startTime, claimTime);\r\n            }\r\n        }\r\n\r\n        // Delete all unstake details of the user.\r\n        delete unstakeInfo[msg.sender];\r\n\r\n        // Reconstruct user's unstake details.\r\n        uint256 length = stillUnstaking.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (stillUnstaking[i].startTime != 0) {\r\n                unstakeInfo[msg.sender].push(stillUnstaking[i]);\r\n            }\r\n        }\r\n        delete stillUnstaking;\r\n        // Check that user has something to claim.\r\n        require(claimableAmount > 0, \"StakingWithLock: Nothing to claim\");\r\n\r\n        // Check sufficient gold balance for transfer.\r\n        require(\r\n            claimableAmount <= IERC20Upgradeable(gold).balanceOf(address(this)),\r\n            \"StakingWithLock: Insufficient balance, check back later\"\r\n        );\r\n\r\n        // Returns user's gold.\r\n        IERC20Upgradeable(gold).safeTransfer(msg.sender, claimableAmount);\r\n\r\n        emit LogClaimed(address(msg.sender), claimableAmount, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Instant unstake and burn only for atlantis related contracts\r\n    function unstakeAndBurn(uint256 _amount) external onlyAtlantisContracts {\r\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\r\n        IMintBurnToken gold = IMintBurnToken(addressRegistry.getGold());\r\n\r\n        // Unstake amount must be > 0.\r\n        require(_amount > 0, \"StakingWithLock: Nothing to unstake\");\r\n\r\n        // Receive user's stardust.\r\n        stardust.transferFrom(tx.origin, address(this), _amount);\r\n\r\n        // Burn all of user's stardust.\r\n        stardust.burn(_amount);\r\n        // Burn corresponding gold\r\n        gold.burn(_amount);\r\n\r\n        emit LogUnstakeAndBurn(address(tx.origin), msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function setUnstakeTime(uint256 _unstakeTime) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        unstakeTime = _unstakeTime;\r\n        emit LogSetUnstakeTime(_unstakeTime, block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/Stardust.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./interface/IMintBurnToken.sol\";\r\n\r\nimport \"./AtlantisAddressRegistry.sol\";\r\n\r\ncontract Stardust is ERC20, IMintBurnToken {\r\n    AtlantisAddressRegistry public atlantisRegistry;\r\n    event Minted(address to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Initialise Stardust contract setting up the appropriate roles and also to mint the initial supply.\r\n     */\r\n\r\n    constructor(AtlantisAddressRegistry _atlantisRegistry) ERC20(\"Stardust\", \"STARDUST\") {\r\n        atlantisRegistry = _atlantisRegistry;\r\n    }\r\n\r\n    /**\r\n     * @notice Mints Stardust Tokens to the specified address.\r\n     * @dev Can only be called by StakingWithLock\r\n     * @param _to Address to mint to\r\n     * @param _amount Amount of Stardust to mint\r\n     */\r\n    function mint(address _to, uint256 _amount) external override returns (bool) {\r\n        require(\r\n            msg.sender == atlantisRegistry.getStakingWithLock(),\r\n            \"Stardust: Only StakingWithLock can mint Stardust\"\r\n        );\r\n        _mint(_to, _amount);\r\n        emit Minted(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice  Burn `amount` tokens and decreasing the total supply.\r\n     * @dev Can only be called by StakingWithLock\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burn(uint256 amount) external override returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}