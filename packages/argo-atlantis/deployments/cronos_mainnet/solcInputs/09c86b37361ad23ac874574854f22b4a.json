{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/AtlantisAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./common/AddressRegistry.sol\";\r\n\r\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\r\n    bytes32 private constant ARGONAUTS = \"ARGONAUTS\";\r\n    bytes32 private constant ARGO = \"ARGO\";\r\n    bytes32 private constant XARGO = \"XARGO\";\r\n    bytes32 private constant GOLD = \"GOLD\";\r\n    bytes32 private constant STARDUST = \"STARDUST\";\r\n    bytes32 private constant ATLANTIS = \"ATLANTIS\";\r\n    bytes32 private constant ATLANTIS_PLANETS = \"ATLANTIS_PLANETS\";\r\n    bytes32 private constant STAKING_WITH_LOCK = \"STAKING_WITH_LOCK\";\r\n    bytes32 private constant ATLANTIS_GEMSTONES = \"GEMSTONES\";\r\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \"EQUIPMENTS\";\r\n    bytes32 private constant ATLANTIS_SPACESHIPS = \"SPACESHIPS\";\r\n    bytes32 private constant ATLANTIS_RACING = \"RACING\";\r\n    bytes32 private constant ATLANTIS_MARKETPLACE = \"MARKETPLACE\";\r\n    bytes32 private constant ATLANTIS_AUCTION = \"AUCTION\";\r\n    bytes32 private constant STARDUST_PLEDGING = \"PLEDGING\";\r\n    bytes32 private constant GOLD_STAKING = \"GOLD_STAKING\";\r\n    mapping(address => bool) private _addresses;\r\n\r\n    function setArgonauts(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGONAUTS, contractAddress);\r\n    }\r\n\r\n    function setArgo(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGO, contractAddress);\r\n    }\r\n\r\n    function setXargo(address contractAddress) external onlyOwner {\r\n        _setAddress(XARGO, contractAddress);\r\n    }\r\n\r\n    function setGold(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD, contractAddress);\r\n    }\r\n\r\n    function setStardust(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST, contractAddress);\r\n    }\r\n\r\n    function setAtlantis(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS, contractAddress);\r\n    }\r\n\r\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\r\n    }\r\n\r\n    function setStakingWithLock(address contractAddress) external onlyOwner {\r\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\r\n    }\r\n\r\n    function setGemstones(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\r\n    }\r\n\r\n    function setEquipments(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\r\n    }\r\n\r\n    function setSpaceships(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\r\n    }\r\n\r\n    function setRacing(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_RACING, contractAddress);\r\n    }\r\n\r\n    function setMarketplace(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\r\n    }\r\n\r\n    function setAuction(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\r\n    }\r\n\r\n    function setPledging(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST_PLEDGING, contractAddress);\r\n    }\r\n\r\n    function setGoldStaking(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD_STAKING, contractAddress);\r\n    }\r\n\r\n    function getArgonauts() external view returns (address) {\r\n        return getAddress(ARGONAUTS);\r\n    }\r\n\r\n    function getArgo() external view returns (address) {\r\n        return getAddress(ARGO);\r\n    }\r\n\r\n    function getXargo() external view returns (address) {\r\n        return getAddress(XARGO);\r\n    }\r\n\r\n    function getGold() external view returns (address) {\r\n        return getAddress(GOLD);\r\n    }\r\n\r\n    function getStardust() external view returns (address) {\r\n        return getAddress(STARDUST);\r\n    }\r\n\r\n    function getAtlantis() public view returns (address) {\r\n        return getAddress(ATLANTIS);\r\n    }\r\n\r\n    function getAtlantisPlanets() public view returns (address) {\r\n        return getAddress(ATLANTIS_PLANETS);\r\n    }\r\n\r\n    function getStakingWithLock() external view returns (address) {\r\n        return getAddress(STAKING_WITH_LOCK);\r\n    }\r\n\r\n    function getGemstones() public view returns (address) {\r\n        return getAddress(ATLANTIS_GEMSTONES);\r\n    }\r\n\r\n    function getEquipments() public view returns (address) {\r\n        return getAddress(ATLANTIS_EQUIPMENTS);\r\n    }\r\n\r\n    function getSpaceships() external view returns (address) {\r\n        return getAddress(ATLANTIS_SPACESHIPS);\r\n    }\r\n\r\n    function getRacing() external view returns (address) {\r\n        return getAddress(ATLANTIS_RACING);\r\n    }\r\n\r\n    function getMarketplace() external view returns (address) {\r\n        return getAddress(ATLANTIS_MARKETPLACE);\r\n    }\r\n\r\n    function getAuction() external view returns (address) {\r\n        return getAddress(ATLANTIS_AUCTION);\r\n    }\r\n\r\n    function getPledging() external view returns (address) {\r\n        return getAddress(STARDUST_PLEDGING);\r\n    }\r\n\r\n    function getGoldStaking() external view returns (address) {\r\n        return getAddress(GOLD_STAKING);\r\n    }\r\n\r\n    function isControllerContract(address _contractAddress) external view returns (bool) {\r\n        if (\r\n            _contractAddress == getAtlantis() ||\r\n            _contractAddress == getGemstones() ||\r\n            _contractAddress == getAtlantisPlanets() ||\r\n            _contractAddress == getEquipments()\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/AtlantisRacing.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"./interface/IAtlantisSpaceships.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"./common/SetUtils.sol\";\r\nimport \"./interface/IAtlantisRacing.sol\";\r\nimport \"./AtlantisAddressRegistry.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/// @title Atlantis - Racing contract\r\n/// @dev Send your Spaceships to race for rewards. Add supported Nft collections to boost speed and earn a larger share of the rewards.\r\ncontract AtlantisRacing is IAtlantisRacing, Ownable, IERC721Receiver, ReentrancyGuard {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using SetUtils for EnumerableSet.UintSet;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Address registry contract\r\n    AtlantisAddressRegistry public addressRegistry;\r\n    /// @notice Unix timestamp of season end time\r\n    uint256 public seasonEndTime;\r\n    /// @notice Total reward per second\r\n    uint256 public totalRewardPerSecond;\r\n    /// @notice Precision factor for calculations\r\n    uint256 public immutable ACC_TOKEN_PRECISION;\r\n    /// @notice Unix timestamp of season start time\r\n    uint256 public seasonStartTime;\r\n    /// @notice Max limit of Nfts staked in all pools\r\n    uint256 public constant MAX_NFTS_STAKED = 15;\r\n    /// @notice Number of pools\r\n    uint256 internal constant amountOfPools = 4;\r\n    /// @notice Whether the season has started\r\n    bool public seasonStarted = false;\r\n    /// @notice Information of each respective pool (Global, Common, Uncommon, Rare/Epic)\r\n    mapping(uint256 => PoolInfo) public poolInfo;\r\n    /// @notice Information of each user that stakes spaceships\r\n    mapping(address => UserInfo) public userInfo;\r\n    /// @notice Cached speed\r\n    mapping(uint256 => uint256) public cachedSpeeds;\r\n    /// @notice Multiplier when a user stakes Nfts\r\n    uint256[6] public nftMultiplier;\r\n    /// @notice Mapping of (user) => (tokenId) => (bool) if token is staked\r\n    mapping(address => mapping(uint256 => bool)) public stakedSpaceships;\r\n    /// @notice Mapping of (user) => (PoolId) => address => (EnumerableSet of NFT tokenIds) Number of NFTs staked in each pool\r\n    mapping(address => mapping(uint8 => mapping(address => EnumerableSet.UintSet))) internal stakedNFTs;\r\n\r\n    /// @notice Mapping of address to boolean whitelisted status\r\n    mapping(address => bool) public whitelistedCollections;\r\n    /// @notice All tokenIds currently staked\r\n    mapping(address => mapping(uint8 => EnumerableSet.UintSet)) internal currentlyStakedSpaceshipIds;\r\n    /// @notice All tokenIds currently staked\r\n    mapping(address => EnumerableSet.UintSet) internal currentlyStakedIds;\r\n    /// @notice All tokenIds previously staked\r\n    mapping(address => EnumerableSet.UintSet) internal previouslyStakedIds;\r\n\r\n    /**\r\n     * @notice Constructor for Atlantis Racing\r\n     * @param _registry Address registry contract\r\n     * @param _totalRewardPerSecond Total stardust per second\r\n     * @param _seasonEndTime Season end time\r\n     */\r\n    constructor(\r\n        AtlantisAddressRegistry _registry,\r\n        uint256 _totalRewardPerSecond,\r\n        uint256 _seasonEndTime,\r\n        uint256[] memory _nftMultipliers\r\n    ) {\r\n        require(_nftMultipliers[0] == 10, \"Invalid nft multipliers\");\r\n        require(_seasonEndTime > block.timestamp, \"Invalid season end time\");\r\n        for (uint256 i; i < _nftMultipliers.length; i++) {\r\n            nftMultiplier[i] = _nftMultipliers[i];\r\n        }\r\n        // Set total stardust per second\r\n        totalRewardPerSecond = _totalRewardPerSecond;\r\n\r\n        addressRegistry = _registry;\r\n        // Global race pool, 22.5% of total\r\n        poolInfo[0].poolType = 0;\r\n        poolInfo[0].rewardPerSecond = (_totalRewardPerSecond * 225) / 1000;\r\n        poolInfo[0].stardustWeightage = 80;\r\n        poolInfo[0].goldWeightage = 20;\r\n        poolInfo[0].lastRewardTime = block.timestamp;\r\n        poolInfo[0].accStardustPerPoint = 0;\r\n        poolInfo[0].totalPoints = 0;\r\n        poolInfo[0].totalCount = 0;\r\n\r\n        // Common race pool, 45% of total\r\n        poolInfo[1].poolType = 1;\r\n        poolInfo[1].rewardPerSecond = (_totalRewardPerSecond * 45) / 100;\r\n        poolInfo[1].stardustWeightage = 80;\r\n        poolInfo[1].goldWeightage = 20;\r\n        poolInfo[1].lastRewardTime = block.timestamp;\r\n        poolInfo[1].accStardustPerPoint = 0;\r\n        poolInfo[1].totalPoints = 0;\r\n        poolInfo[1].totalCount = 0;\r\n\r\n        // Uncommon race pool, 25% of total\r\n        poolInfo[2].poolType = 2;\r\n        poolInfo[2].rewardPerSecond = (_totalRewardPerSecond * 25) / 100;\r\n        poolInfo[2].stardustWeightage = 80;\r\n        poolInfo[2].goldWeightage = 20;\r\n        poolInfo[2].lastRewardTime = block.timestamp;\r\n        poolInfo[2].accStardustPerPoint = 0;\r\n        poolInfo[2].totalPoints = 0;\r\n        poolInfo[2].totalCount = 0;\r\n\r\n        // Rare + Epic race pool, 7.5% of total\r\n        poolInfo[3].poolType = 3;\r\n        poolInfo[3].rewardPerSecond = (_totalRewardPerSecond * 75) / 1000;\r\n        poolInfo[3].stardustWeightage = 80;\r\n        poolInfo[3].goldWeightage = 20;\r\n        poolInfo[3].lastRewardTime = block.timestamp;\r\n        poolInfo[3].accStardustPerPoint = 0;\r\n        poolInfo[3].totalPoints = 0;\r\n        poolInfo[3].totalCount = 0;\r\n\r\n        // Scratch generation cut off date\r\n        seasonEndTime = _seasonEndTime;\r\n        ACC_TOKEN_PRECISION = 10 ** 18;\r\n\r\n        // Get argonauts from registry\r\n        address argonauts = addressRegistry.getArgonauts();\r\n        // Set whitelisted collections\r\n        whitelistedCollections[argonauts] = true;\r\n    }\r\n\r\n    /**\r\n        onlyOwner functions >:]\r\n    */\r\n\r\n    /**\r\n     * @notice Setter for season end time\r\n     * @param _time season end time in unix timestamp\r\n     */\r\n    function setSeasonEndTime(uint256 _time) public onlyOwner {\r\n        require(_time > block.timestamp, \"Season end time must be in the future\");\r\n        seasonEndTime = _time;\r\n        _massUpdatePools();\r\n        emit SeasonEndTimeChanged(_time);\r\n    }\r\n\r\n    /**\r\n     * @notice Starts the season\r\n     */\r\n    function startSeason() external onlyOwner {\r\n        require(!seasonStarted, \"Season already started\");\r\n        require(block.timestamp < seasonEndTime, \"Season already ended\");\r\n        uint256 currentTime = block.timestamp;\r\n        seasonStartTime = currentTime;\r\n        seasonStarted = true;\r\n        // Update last reward time\r\n        for (uint256 i; i < amountOfPools; i++) {\r\n            poolInfo[i].lastRewardTime = currentTime;\r\n        }\r\n        emit StartSeason(currentTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Ends the season early\r\n     */\r\n    function endSeason() external onlyOwner {\r\n        require(seasonStarted, \"Season not started\");\r\n        require(block.timestamp < seasonEndTime, \"Season already ended\");\r\n        uint256 currentTime = block.timestamp;\r\n        seasonEndTime = currentTime;\r\n        _massUpdatePools();\r\n        emit EndSeason(currentTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the Address Registry\r\n     * @param _addressRegistry The address of the Address Registry\r\n     */\r\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\r\n        addressRegistry = _addressRegistry;\r\n        emit AddressRegistryUpdated(address(_addressRegistry));\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve any stardust on the contract\r\n     */\r\n    function retrieveStardust() external onlyOwner {\r\n        IERC20 stardust = IERC20(addressRegistry.getStardust());\r\n        uint256 total = stardust.balanceOf(address(this));\r\n        stardust.safeTransfer(msg.sender, total);\r\n        emit EmergencyWithdrawStardust(total);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to retrieve any gold on the contract\r\n     */\r\n    function retrieveGold() external onlyOwner {\r\n        IERC20 gold = IERC20(addressRegistry.getGold());\r\n        uint256 total = gold.balanceOf(address(this));\r\n        gold.safeTransfer(msg.sender, total);\r\n        emit EmergencyWithdrawGold(total);\r\n    }\r\n\r\n    /**\r\n     * @notice Stake spaceships to earn stardust + gold\r\n     * @param _ids The ids of the spaceships to stake\r\n     */\r\n    function stakeSpaceships(uint256[] memory _ids) external nonReentrant {\r\n        require(block.timestamp < seasonEndTime, \"Season already ended\");\r\n        IAtlantisSpaceships spaceships = IAtlantisSpaceships(addressRegistry.getSpaceships());\r\n        // Harvest any pending rewards\r\n        if (seasonStarted) {\r\n            _massUpdatePools();\r\n            for (uint8 i; i < amountOfPools; i++) {\r\n                _harvest(i, msg.sender);\r\n            }\r\n        }\r\n        for (uint256 i; i < _ids.length; i++) {\r\n            AtlantisLib.Rarity _type = spaceships.getRarity(_ids[i]);\r\n            // Convert spaceship type to uint256\r\n            uint8 _spaceshipRarity = uint8(_type) + 1;\r\n            // If spaceship type is 4, it is an epic and in same pool as rare, so we set it to 3\r\n            if (_spaceshipRarity == 4) {\r\n                _spaceshipRarity = 3;\r\n            }\r\n            uint256 _speed = spaceships.getSpeed(_ids[i]) * 10;\r\n            cachedSpeeds[_ids[i]] = _speed;\r\n            require(_speed > 0, \"Spaceship speed cannot be 0\");\r\n            currentlyStakedSpaceshipIds[msg.sender][_spaceshipRarity].add(_ids[i]);\r\n            //Take Token and Transfer to Contract for Holding\r\n            IERC721(address(spaceships)).safeTransferFrom(msg.sender, address(this), _ids[i]);\r\n            // Increase to free pool and increase to protected pool\r\n            if (userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity] == 0) {\r\n                _increasePoolAndUserStats(_speed, 0, msg.sender, false);\r\n                _increasePoolAndUserStats(_speed, _spaceshipRarity, msg.sender, false);\r\n            } else {\r\n                uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity]];\r\n                _increasePoolAndUserStats((_speed * _multiplier) / 10, 0, msg.sender, false);\r\n                _increasePoolAndUserStats((_speed * _multiplier) / 10, _spaceshipRarity, msg.sender, false);\r\n            }\r\n            stakedSpaceships[msg.sender][_ids[i]] = true;\r\n            userInfo[msg.sender].spaceshipsStaked++;\r\n            emit Stake(msg.sender, _ids[i], _speed);\r\n        }\r\n        _updateRewardDebts(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake spaceships\r\n     * @param _ids The ids of the spaceships to unstake\r\n     */\r\n    function unstakeSpaceships(uint256[] calldata _ids) external nonReentrant {\r\n        IAtlantisSpaceships spaceships = IAtlantisSpaceships(addressRegistry.getSpaceships());\r\n\r\n        require(userInfo[msg.sender].spaceshipsStaked >= _ids.length, \"Not enough spaceships staked\");\r\n        // Harvest any pending rewards\r\n        if (seasonStarted) {\r\n            _massUpdatePools();\r\n            for (uint8 i; i < amountOfPools; i++) {\r\n                _harvest(i, msg.sender);\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < _ids.length; i++) {\r\n            // if id found in stakedSpaceships, unstake it\r\n            uint256 _id = _ids[i];\r\n            require(stakedSpaceships[msg.sender][_id], \"Spaceship not staked\");\r\n            uint8 _spaceshipRarity = uint8(spaceships.getRarity(_id)) + 1;\r\n            uint256 _speed = cachedSpeeds[_id];\r\n            if (_spaceshipRarity == 4) {\r\n                _spaceshipRarity = 3;\r\n            }\r\n\r\n            // decrease for free pool and protected pool\r\n            if (userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity] == 0) {\r\n                _decreasePoolAndUserStats(_speed, 0, msg.sender, false);\r\n                _decreasePoolAndUserStats(_speed, _spaceshipRarity, msg.sender, false);\r\n            } else {\r\n                uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity]];\r\n                _decreasePoolAndUserStats((_speed * _multiplier) / 10, 0, msg.sender, false);\r\n                _decreasePoolAndUserStats((_speed * _multiplier) / 10, _spaceshipRarity, msg.sender, false);\r\n            }\r\n\r\n            stakedSpaceships[msg.sender][_id] = false;\r\n            userInfo[msg.sender].spaceshipsStaked--;\r\n            currentlyStakedSpaceshipIds[msg.sender][_spaceshipRarity].remove(_ids[i]);\r\n            // transfer spaceship back to user\r\n            IERC721(address(spaceships)).safeTransferFrom(address(this), msg.sender, _id);\r\n            emit Unstaked(msg.sender, _id);\r\n        }\r\n        _updateRewardDebts(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Stakes given nfts and uses them to boost the given pool.\r\n     * @param _pid  Id of the pool to boost\r\n     * @param _collectionAddresses Array of collection addresses\r\n     * @param _nfts Array of token ids to stake\r\n     */\r\n    function stakeNfts(\r\n        uint8 _pid,\r\n        address[] calldata _collectionAddresses,\r\n        uint256[] calldata _nfts\r\n    ) external nonReentrant {\r\n        require(block.timestamp < seasonEndTime, \"Season already ended\");\r\n        // Require pid to be 1-3 only\r\n        require(_pid >= 1 && _pid <= 3, \"Invalid pool id\");\r\n        require(_nfts.length == _collectionAddresses.length, \"NFTs and collection addresses must be same length\");\r\n        if (seasonStarted) {\r\n            _massUpdatePools();\r\n            for (uint8 i; i < amountOfPools; i++) {\r\n                _harvest(i, msg.sender);\r\n            }\r\n        }\r\n        // Get userInfo\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        require(user.boostingNftsCount + _nfts.length <= MAX_NFTS_STAKED, \"Too many NFTs staked\");\r\n        for (uint256 i; i < _collectionAddresses.length; i++) {\r\n            // Check whitelisted nfts\r\n            require(whitelistedCollections[_collectionAddresses[i]], \"Collection not whitelisted\");\r\n        }\r\n        uint256 _initialNftsCount = user.boostingNftsPoolCount[_pid];\r\n        for (uint256 i; i < _collectionAddresses.length; i++) {\r\n            user.boostingNfts[_pid][_collectionAddresses[i]].push(_nfts[i]);\r\n\r\n            // print currentNfts length\r\n            user.boostingNftsPoolCount[_pid]++;\r\n            user.boostingNftsCount++;\r\n            _stake(_pid, _collectionAddresses[i], _nfts[i]);\r\n        }\r\n        uint256 _currentSpeed = user.totalSpeeds[_pid];\r\n        uint256 _initialMultiplier = nftMultiplier[_initialNftsCount];\r\n        uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_pid]];\r\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, 0, msg.sender, true);\r\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, _pid, msg.sender, true);\r\n        _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\r\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, 0, msg.sender, true);\r\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, _pid, msg.sender, true);\r\n        _updateRewardDebts(msg.sender);\r\n        emit StakeNfts(_pid, msg.sender, _nfts.length);\r\n    }\r\n\r\n    /**\r\n     * @notice Unstakes nfts without unboosting the pool\r\n     * @param _pid  Id of the farm to unstake the nfts from\r\n     * @param _collectionAddresses Array of nft contract addresses\r\n     * @param _nfts Array of structs containing the nft contract and token id to unstake\r\n     */\r\n    function unstakeNfts(\r\n        uint8 _pid,\r\n        address[] calldata _collectionAddresses,\r\n        uint256[] calldata _nfts\r\n    ) external nonReentrant {\r\n        require(_nfts.length == _collectionAddresses.length, \"NFTs and collection addresses must be same length\");\r\n        require(_pid >= 1 && _pid <= 3, \"Invalid pool id\");\r\n        if (seasonStarted) {\r\n            _massUpdatePools();\r\n            for (uint8 i; i < amountOfPools; i++) {\r\n                _harvest(i, msg.sender);\r\n            }\r\n        }\r\n        uint256 _initialNftsCount = userInfo[msg.sender].boostingNftsPoolCount[_pid];\r\n        for (uint256 i; i < _collectionAddresses.length; i++) {\r\n            _removeNftFromPool(_pid, _collectionAddresses[i], _nfts[i]);\r\n            _unstake(_pid, _collectionAddresses[i], _nfts[i]);\r\n        }\r\n        uint256 _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\r\n        uint256 _initialMultiplier = nftMultiplier[_initialNftsCount];\r\n        uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_pid]];\r\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, 0, msg.sender, true);\r\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, _pid, msg.sender, true);\r\n        _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\r\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, 0, msg.sender, true);\r\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, _pid, msg.sender, true);\r\n        _updateRewardDebts(msg.sender);\r\n        emit UnstakeNfts(_pid, msg.sender, _nfts.length);\r\n    }\r\n\r\n    /**\r\n     * @notice Get tokenIds of a given collection currently staked by specific user\r\n     * @param _pid  Pool id\r\n     * @param _collectionAddress  Address of the collection contract\r\n     * @param _staker  User for whom to retrieve staked token ids\r\n     * @return Array of tokenIds which are currently staked by the user for the given token contract\r\n     */\r\n    function getCurrentlyStakedTokenIds(\r\n        uint8 _pid,\r\n        address _collectionAddress,\r\n        address _staker\r\n    ) external view returns (uint256[] memory) {\r\n        return stakedNFTs[_staker][_pid][_collectionAddress].toArray();\r\n    }\r\n\r\n    /**\r\n     * @notice Get tokenIds of a given collection currently staked by any user\r\n     * @param _collectionAddress  Address of the collection contract\r\n     * @return Array of tokenIds which are currently staked for the given token contract\r\n     */\r\n    function getCurrentlyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory) {\r\n        return currentlyStakedIds[_collectionAddress].toArray();\r\n    }\r\n\r\n    /**\r\n     * @notice Get tokenIds of a given collection that have ever been staked by any user\r\n     * @param _collectionAddress  Address of the collection contract\r\n     * @return Array of tokenIds which have ever been staked for the given token contract\r\n     */\r\n    function getPreviouslyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory) {\r\n        return previouslyStakedIds[_collectionAddress].toArray();\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest all rewards for msg.sender\r\n     */\r\n    function getRewards() external nonReentrant {\r\n        _massUpdatePools();\r\n        for (uint8 i; i < amountOfPools; i++) {\r\n            _harvest(i, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest rewards for a certain poolId for msg.sender\r\n     * @param _pid Pool id\r\n     */\r\n    function getReward(uint8 _pid) external nonReentrant {\r\n        _massUpdatePools();\r\n        _harvest(_pid, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice View rewards for a certain poolId and user\r\n     * @param _user  User address\r\n     * @param _pid Pool id\r\n     * @return rewards  Array of rewards [stardust, gold]\r\n     */\r\n    function viewRewards(address _user, uint8 _pid) external view returns (uint256[2] memory) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256[2] memory rewards;\r\n        uint256 currentTime = block.timestamp;\r\n        if (currentTime >= seasonEndTime) {\r\n            currentTime = seasonEndTime;\r\n        }\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        if (!seasonStarted || pool.totalPoints == 0) {\r\n            rewards[0] = 0;\r\n            rewards[1] = 0;\r\n        } else {\r\n            uint256 accStardustPerPoint = pool.accStardustPerPoint;\r\n            uint256 multiplier = currentTime - pool.lastRewardTime;\r\n            uint256 total = multiplier * pool.rewardPerSecond;\r\n            accStardustPerPoint += ((total * ACC_TOKEN_PRECISION) / pool.totalPoints);\r\n            uint256 accStardust = (userInfo[_user].totalSpeeds[_pid] * accStardustPerPoint) / ACC_TOKEN_PRECISION;\r\n            uint256 pending = accStardust - user.rewardDebts[_pid];\r\n            uint256 stardustAmount = (pending * poolInfo[_pid].stardustWeightage) / 100;\r\n            uint256 goldAmount = pending - stardustAmount;\r\n            rewards[0] = stardustAmount;\r\n            rewards[1] = goldAmount;\r\n        }\r\n\r\n        return rewards;\r\n    }\r\n\r\n    /**\r\n     * @notice View the total speeds of a user across all pools\r\n     * @param _user  User address\r\n     * @return totalSpeeds  Array of total speeds [Global, Common, Uncommon, Rare/Epic]\r\n     */\r\n    function viewTotalSpeeds(address _user) external view returns (uint256[4] memory) {\r\n        // Get userinfo memory\r\n        UserInfo storage user = userInfo[_user];\r\n        return user.totalSpeeds;\r\n    }\r\n\r\n    /**\r\n     * @notice View number of spaceships staked by user\r\n     * @param _user  User address\r\n     * @return spaceshipsStaked  Number of spaceships staked\r\n     */\r\n    function viewSpaceshipsStaked(address _user) external view returns (uint256) {\r\n        // Get userinfo memory\r\n        UserInfo storage user = userInfo[_user];\r\n        return user.spaceshipsStaked;\r\n    }\r\n\r\n    /**\r\n     * @notice View number of NFTs staked by user\r\n     * @param _pid Pool id\r\n     * @param _collectionAddress  Address of the collection contract\r\n     * @param _user  User address\r\n     * @return boostingNfts Array of nft ids\r\n     */\r\n    function viewBoostingNfts(\r\n        uint8 _pid,\r\n        address _collectionAddress,\r\n        address _user\r\n    ) external view returns (uint256[] memory) {\r\n        // Get userinfo storage\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256[] storage boostingNfts = user.boostingNfts[_pid][_collectionAddress];\r\n        uint256[] memory result = new uint256[](boostingNfts.length);\r\n        // Copy boosting nfts to memory\r\n        for (uint256 i = 0; i < boostingNfts.length; i++) {\r\n            result[i] = boostingNfts[i];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice View boosting nfts count in a specific pool\r\n     * @param _user  User address\r\n     * @param _pid Pool id\r\n     * @return number of boosting nfts in a specific pool\r\n     */\r\n    function viewBoostingNftsPoolCount(address _user, uint8 _pid) external view returns (uint256) {\r\n        // Get userinfo memory\r\n        UserInfo storage user = userInfo[_user];\r\n        return user.boostingNftsPoolCount[_pid];\r\n    }\r\n\r\n    /**\r\n     * @notice View currently staked spaceship ids\r\n     * @param _user  User address\r\n     * @param _pid Pool id\r\n     * @return spaceshipIds Array of spaceship ids\r\n     */\r\n    function viewCurrentlyStakedSpaceships(address _user, uint8 _pid) external view returns (uint256[] memory) {\r\n        return currentlyStakedSpaceshipIds[_user][_pid].toArray();\r\n    }\r\n\r\n    /**\r\n     * @notice View pool info\r\n     * @param _pid Pool id\r\n     */\r\n    function viewPoolInfo(uint256 _pid) external view returns (PoolInfo memory) {\r\n        return poolInfo[_pid];\r\n    }\r\n\r\n    /**\r\n     * @notice Updates pool's core values\r\n     * @param _pid The pool id\r\n     */\r\n    function _updatePool(uint256 _pid) internal {\r\n        uint256 currentTime = block.timestamp;\r\n        // Check if season is over\r\n        if (seasonEndTime <= currentTime) {\r\n            currentTime = seasonEndTime;\r\n        }\r\n        // Update based on pool type\r\n        if (poolInfo[_pid].totalPoints > 0) {\r\n            uint256 stardustReward = (currentTime - poolInfo[_pid].lastRewardTime) * poolInfo[_pid].rewardPerSecond;\r\n            poolInfo[_pid].accStardustPerPoint += ((stardustReward * ACC_TOKEN_PRECISION) / poolInfo[_pid].totalPoints);\r\n        }\r\n\r\n        poolInfo[_pid].lastRewardTime = currentTime;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates all pools core values\r\n     */\r\n    function _massUpdatePools() internal {\r\n        for (uint256 i; i < amountOfPools; i++) {\r\n            _updatePool(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward debts of user\r\n     * @param _user User address\r\n     */\r\n    function _updateRewardDebts(address _user) internal {\r\n        for (uint256 i; i < amountOfPools; i++) {\r\n            userInfo[_user].rewardDebts[i] =\r\n                (userInfo[_user].totalSpeeds[i] * poolInfo[i].accStardustPerPoint) /\r\n                ACC_TOKEN_PRECISION;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function for staking nfts\r\n     * @param _pid The pool id to stake Nfts in\r\n     * @param _collectionAddress The address of the collection the nft is from\r\n     * @param _tokenId The id of the nft to stake\r\n     */\r\n    function _stake(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal virtual {\r\n        require(!stakedNFTs[msg.sender][_pid][_collectionAddress].contains(_tokenId), \"NFT already staked\");\r\n        // Transfer ERC721 from user\r\n        IERC721(_collectionAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\r\n\r\n        // Update stakers specific data\r\n        stakedNFTs[msg.sender][_pid][_collectionAddress].add(_tokenId);\r\n        // Update token specific data\r\n        currentlyStakedIds[_collectionAddress].add(_tokenId);\r\n        previouslyStakedIds[_collectionAddress].add(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function for unstaking Nfts\r\n     * @param _pid The pool id to unstake Nfts from\r\n     * @param _collectionAddress The address of the collection the Nft is from\r\n     * @param _tokenId The id of the Nft to unstake\r\n     */\r\n    function _unstake(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal virtual {\r\n        require(_isTokenStaked(_pid, msg.sender, _collectionAddress, _tokenId), \"NFT not staked\");\r\n        // Update tokens currently staked\r\n        stakedNFTs[msg.sender][_pid][_collectionAddress].remove(_tokenId);\r\n        currentlyStakedIds[_collectionAddress].remove(_tokenId);\r\n        // Transfer ERC721 from user\r\n        IERC721(_collectionAddress).safeTransferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether a specific token is currently staked by a specific user\r\n     * @param _pid  Pool id\r\n     * @param _staker  User for whom to retrieve staked token ids\r\n     * @param _collectionAddress Address of the collection the token is from\r\n     * @param _tokenId TokenId to check for staking\r\n     * @return bool True if token is staked by user, false otherwise\r\n     */\r\n    function _isTokenStaked(\r\n        uint8 _pid,\r\n        address _staker,\r\n        address _collectionAddress,\r\n        uint256 _tokenId\r\n    ) internal view returns (bool) {\r\n        return stakedNFTs[_staker][_pid][_collectionAddress].contains(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Increase pool and user stats\r\n     * @param _speed Speed to increase\r\n     * @param _pid Pool id\r\n     * @param _user User address\r\n     * @param _nft Is boosting nft or not\r\n     */\r\n    function _increasePoolAndUserStats(uint256 _speed, uint8 _pid, address _user, bool _nft) internal {\r\n        poolInfo[_pid].totalPoints += _speed;\r\n        if (_speed > 0 && !_nft) {\r\n            poolInfo[_pid].totalCount++;\r\n        }\r\n        userInfo[_user].totalSpeeds[_pid] += _speed;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease pool and user stats\r\n     * @param _speed Speed to decrease\r\n     * @param _pid Pool id\r\n     * @param _user User address\r\n     * @param _nft Is boosting nft or not\r\n     */\r\n    function _decreasePoolAndUserStats(uint256 _speed, uint8 _pid, address _user, bool _nft) internal {\r\n        poolInfo[_pid].totalPoints -= _speed;\r\n        if (_speed > 0 && !_nft) {\r\n            poolInfo[_pid].totalCount--;\r\n        }\r\n        userInfo[_user].totalSpeeds[_pid] -= _speed;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function for harvesting rewards\r\n     * @param _pid Pool id\r\n     * @param _user User address\r\n     * @return pending Pending rewards\r\n     */\r\n    function _harvest(uint8 _pid, address _user) internal returns (uint256 pending) {\r\n        IERC20 gold = IERC20(addressRegistry.getGold());\r\n        IERC20 stardust = IERC20(addressRegistry.getStardust());\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 oldShares = userInfo[_user].totalSpeeds[_pid];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (oldShares > 0) {\r\n            uint256 accStardust = (oldShares * pool.accStardustPerPoint) / ACC_TOKEN_PRECISION;\r\n            pending = accStardust - user.rewardDebts[_pid];\r\n        }\r\n        if (pending > 0) {\r\n            user.rewardDebts[_pid] = (oldShares * pool.accStardustPerPoint) / ACC_TOKEN_PRECISION;\r\n        }\r\n        // Split total into 80% stardust, 20% gold\r\n        stardust.safeTransfer(_user, (pending * poolInfo[_pid].stardustWeightage) / 100);\r\n        gold.safeTransfer(_user, (pending * poolInfo[_pid].goldWeightage) / 100);\r\n        emit Payout(\r\n            _pid,\r\n            _user,\r\n            (pending * poolInfo[_pid].goldWeightage) / 100,\r\n            (pending * poolInfo[_pid].stardustWeightage) / 100\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Remove nfts from pool\r\n     * @param _pid  Pool id\r\n     * @param _collectionAddress Nft collection address\r\n     * @param _tokenId  Nft id\r\n     */\r\n    function _removeNftFromPool(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256[] storage currentNfts = user.boostingNfts[_pid][_collectionAddress];\r\n        for (uint256 i; i < currentNfts.length; i++) {\r\n            uint256 currentNft = currentNfts[i];\r\n            if (currentNft == _tokenId) {\r\n                currentNfts[i] = currentNfts[currentNfts.length - 1];\r\n                currentNfts.pop();\r\n                user.boostingNftsPoolCount[_pid]--;\r\n                user.boostingNftsCount--;\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Nft not found\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set the whitelisted status of a collection\r\n     * @param _collectionAddresses The address of the collection\r\n     * @param _status The whitelisted status of the collection\r\n     * @dev Only whitelisted collections can be staked\r\n     */\r\n    function setWhitelistedCollections(address[] memory _collectionAddresses, bool _status) external onlyOwner {\r\n        for (uint256 i; i < _collectionAddresses.length; i++) {\r\n            whitelistedCollections[_collectionAddresses[i]] = _status;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice For receiving ERC721 tokens\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/common/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ncontract AddressRegistry {\r\n    mapping(bytes32 => address) public addresses;\r\n\r\n    function getAddress(bytes32 _identifier) public view returns (address) {\r\n        return addresses[_identifier];\r\n    }\r\n\r\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\r\n        addresses[_identifier] = contractAddress;\r\n    }\r\n}\r\n"
    },
    "contracts/common/AtlantisLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\nlibrary AtlantisLib {\r\n    enum Orbit {\r\n        COMMON, // 0\r\n        UNCOMMON, // 1\r\n        RARE, // 2\r\n        EPIC // 3\r\n    }\r\n\r\n    enum OrbitName {\r\n        HALO_RING, //0\r\n        PANDORA, //1\r\n        ATLAS, //2\r\n        METIS, //3\r\n        ENTWINED, //4\r\n        RAINBOW_CLOUDS, //5\r\n        GALATICA, //6\r\n        ASTEROIDS, //7\r\n        INTERSTELLAR_PINK, //8\r\n        INTERSTELLAR_GRADIENT, //9\r\n        // Epic planets\r\n        INTERSTELLAR_GOLD //10\r\n    }\r\n\r\n    enum Background {\r\n        PURPLE_HUES, //0\r\n        BROWN_HUES, //1\r\n        WAVY, //2\r\n        SHOOTING_STARS, //3\r\n        // Epic planets\r\n        GOLD_HUES, //4\r\n        GOLD_SHOOTING_STARS, //5\r\n        WAVY_GOLD, //6\r\n        GOLD_SKIES //7\r\n    }\r\n\r\n    enum Evolution {\r\n        ALPHA, // 1-19\r\n        BETA, // 20-29\r\n        GAMMA, // 30-39\r\n        DELTA, // 40-49\r\n        EPSILON // 50\r\n    }\r\n\r\n    enum Element {\r\n        FIRE, // 0\r\n        LIGHTNING, // 1\r\n        STEEL // 2\r\n    }\r\n\r\n    struct Planet {\r\n        uint8 level; // Max Level: 50\r\n        Element element;\r\n        Orbit orbit;\r\n        OrbitName orbitName;\r\n        Background background;\r\n        bool onExpedition;\r\n    }\r\n\r\n    enum Rarity {\r\n        COMMON,\r\n        UNCOMMON,\r\n        RARE,\r\n        EPIC\r\n    }\r\n\r\n    /**\r\n     * @notice Returns planet element as string\r\n     */\r\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\r\n        if (element == AtlantisLib.Element.FIRE) {\r\n            return \"Fire\";\r\n        } else if (element == AtlantisLib.Element.STEEL) {\r\n            return \"Steel\";\r\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\r\n            return \"Lightning\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns planet orbit as string\r\n     */\r\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\r\n        if (orbit == AtlantisLib.Orbit.COMMON) {\r\n            return \"Common\";\r\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\r\n            return \"Uncommon\";\r\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\r\n            return \"Rare\";\r\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\r\n            return \"Epic\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get tier of equipment based on level\r\n     * @param level Level of an equipment\r\n     */\r\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\r\n        if (level < 1) {\r\n            tier = AtlantisLib.Rarity.COMMON;\r\n        } else if (level >= 1 && level < 5) {\r\n            tier = AtlantisLib.Rarity.UNCOMMON;\r\n        } else if (level >= 5 && level < 8) {\r\n            tier = AtlantisLib.Rarity.RARE;\r\n        } else if (level >= 8 && level <= 10) {\r\n            tier = AtlantisLib.Rarity.EPIC;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns planet orbit as string\r\n     */\r\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\r\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\r\n            return \"Halo Ring\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\r\n            return \"Pandora\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\r\n            return \"Atlas\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\r\n            return \"Metis\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\r\n            return \"Entwined\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\r\n            return \"Rainbow Clouds\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\r\n            return \"Galatica\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\r\n            return \"Asteroids\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\r\n            return \"Interstellar Pink\";\r\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\r\n            return \"Interstellar Gradient\";\r\n            // Epic planets\r\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\r\n            return \"Interstellar Gold\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns planet orbit as string\r\n     */\r\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\r\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\r\n            return \"Purple Hues\";\r\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\r\n            return \"Brown Hues\";\r\n        } else if (background == AtlantisLib.Background.WAVY) {\r\n            return \"Wavy\";\r\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\r\n            return \"Shooting Stars\";\r\n            // Epic planets\r\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\r\n            return \"Wavy Gold\";\r\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\r\n            return \"Gold Shooting Stars\";\r\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\r\n            return \"Gold Hues\";\r\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\r\n            return \"Gold Skies\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/common/SetUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nlibrary SetUtils {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    /// @dev Converst an iterable set of addresses to a corresponding array\r\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\r\n        uint256 numElements = _set.length();\r\n        address[] memory elements = new address[](numElements);\r\n        for (uint256 i = 0; i < numElements; ++i) {\r\n            elements[i] = _set.at(i);\r\n        }\r\n        return elements;\r\n    }\r\n\r\n    /// @dev Converst an iterable set of uint to a corresponding array\r\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\r\n        uint256 numElements = _set.length();\r\n        uint256[] memory elements = new uint256[](numElements);\r\n        for (uint256 i = 0; i < numElements; ++i) {\r\n            elements[i] = _set.at(i);\r\n        }\r\n        return elements;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IAtlantisRacing.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IAtlantisRacing {\r\n    /**\r\n        Structs\r\n    */\r\n    struct PoolInfo {\r\n        uint256 poolType;\r\n        uint256 rewardPerSecond;\r\n        uint256 stardustWeightage;\r\n        uint256 goldWeightage;\r\n        uint256 lastRewardTime;\r\n        uint256 accStardustPerPoint;\r\n        uint256 totalPoints;\r\n        uint256 totalCount;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256[4] totalSpeeds;\r\n        uint256[4] rewardDebts;\r\n        uint256 spaceshipsStaked;\r\n        mapping(uint8 => mapping(address => uint256[])) boostingNfts;\r\n        uint256 boostingNftsCount;\r\n        mapping(uint8 => uint8) boostingNftsPoolCount;\r\n    }\r\n    event Stake(address indexed user, uint256 indexed tokenID, uint256 shipScore);\r\n    event Unstaked(address indexed user, uint256 indexed tokenID);\r\n    event Payout(uint8 poolId, address indexed user, uint256 goldAmount, uint256 stardustAmount);\r\n    event EmergencyWithdraw(address user, uint256 tokenID);\r\n    event EmergencyWithdrawStardust(uint256 amount);\r\n    event EmergencyWithdrawGold(uint256 amount);\r\n    event StakeNfts(uint256 indexed pid, address indexed user, uint256 numOfNfts);\r\n    event UnstakeNfts(uint256 indexed pid, address indexed user, uint256 numOfNfts);\r\n    event SeasonEndTimeChanged(uint256 newEndTime);\r\n    event StartSeason(uint256 startTime);\r\n    event EndSeason(uint256 endTime);\r\n    event AddressRegistryUpdated(address newAddressRegistry);\r\n\r\n    /**\r\n        Functions\r\n    */\r\n    function stakeSpaceships(uint256[] memory _ids) external;\r\n\r\n    function unstakeSpaceships(uint256[] memory _ids) external;\r\n\r\n    function stakeNfts(uint8 _pid, address[] calldata _collectionAddresses, uint256[] calldata _nfts) external;\r\n\r\n    function unstakeNfts(uint8 _pid, address[] calldata _collectionAddresses, uint256[] calldata _nfts) external;\r\n\r\n    function viewRewards(address _user, uint8 _poolId) external view returns (uint256[2] memory);\r\n\r\n    function getRewards() external;\r\n\r\n    function viewTotalSpeeds(address _user) external view returns (uint256[4] memory);\r\n\r\n    function viewBoostingNfts(\r\n        uint8 _pid,\r\n        address _collectionAddress,\r\n        address _user\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function viewPoolInfo(uint256 _pid) external view returns (PoolInfo memory);\r\n\r\n    function getCurrentlyStakedTokenIds(\r\n        uint8 _pid,\r\n        address _collectionAddress,\r\n        address _staker\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function getPreviouslyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory);\r\n}\r\n"
    },
    "contracts/interface/IAtlantisSpaceships.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\nimport { AtlantisLib } from \"../common/AtlantisLib.sol\";\r\n\r\ninterface IAtlantisSpaceships {\r\n    error NotOwner();\r\n    error WrongElement();\r\n\r\n    struct Spaceship {\r\n        AtlantisLib.Rarity rarity;\r\n        uint256 fireEquipmentId;\r\n        uint256 lightningEquipmentId;\r\n        uint256 steelEquipmentId;\r\n    }\r\n\r\n    struct SpaceshipData {\r\n        Spaceship spaceship;\r\n        uint256 speed;\r\n    }\r\n\r\n    function modifyEquipment(\r\n        uint256 _spaceshipId,\r\n        uint256 _fireEquipmentId,\r\n        uint256 _lightningEquipmentId,\r\n        uint256 _steelEquipmentId\r\n    ) external;\r\n\r\n    function getSpaceship(uint256 _tokenId) external view returns (SpaceshipData memory);\r\n\r\n    function getSpeed(uint256 _tokenId) external view returns (uint256);\r\n\r\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}