{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Airdropper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\n// Import IERC20, IERC721, IERC1155\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\ncontract Airdropper {\n    /**\n     * @dev Airdrop ERC20 tokens\n     * @param token The address of the ERC20 token\n     * @param _addresses The addresses of the recipients\n     * @param _amounts The amounts of tokens to send\n     */\n    function airdropERC20(IERC20 token, address[] calldata _addresses, uint256[] calldata _amounts) external {\n        for (uint256 i; i < _addresses.length; i++) {\n            token.transferFrom(msg.sender, _addresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Airdrop ERC721 tokens\n     * @param token The address of the ERC721 token\n     * @param _addresses The addresses of the recipients\n     * @param _tokenIds The token IDs of the tokens to send\n     */\n    function airdropERC721(IERC721 token, address[] calldata _addresses, uint256[] calldata _tokenIds) external {\n        for (uint256 i; i < _addresses.length; i++) {\n            token.transferFrom(msg.sender, _addresses[i], _tokenIds[i]);\n        }\n    }\n\n    /**\n     * @dev Airdrop ERC1155 tokens\n     * @param token The address of the ERC1155 token\n     * @param _addresses The addresses of the recipients\n     * @param _tokenIds The token IDs of the tokens to send\n     * @param _amounts The amounts of tokens to send\n     */\n    function airdropERC1155(\n        IERC1155 token,\n        address[] calldata _addresses,\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _amounts\n    ) external {\n        for (uint256 i; i < _addresses.length; i++) {\n            token.safeTransferFrom(msg.sender, _addresses[i], _tokenIds[i], _amounts[i], \"\");\n        }\n    }\n\n    /**\n     * @dev Airdrop ETH\n     * @param _addresses The addresses of the recipients\n     * @param _amounts The amounts of ETH to send\n     */\n    function airdropETH(address[] calldata _addresses, uint256[] calldata _amounts) external payable {\n        for (uint256 i; i < _addresses.length; i++) {\n            payable(_addresses[i]).transfer(_amounts[i]);\n        }\n    }\n}\n"
    },
    "contracts/Atlantis.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"./interface/IAtlantis.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\n/// @title Atlantis\ncontract Atlantis is Ownable, ERC721Holder, IAtlantis, ReentrancyGuard {\n    // Address of stardust\n    IERC20 public stardust;\n    // Planet address\n    IAtlantisPlanets public atlantisPlanets;\n    // Atlantis materials address\n    IAtlantisMaterials public atlantisMaterials;\n    // When settings these, remember is * 100\n    // Base rate of stardust per expedition\n    uint256 public baseStardustRate = 0.5 ether;\n    // Level parameter\n    uint256 public levelParameter = 1;\n    // Rarity parameter\n    uint256 public rarityParameter = 20;\n    // Mapping of level to material rate\n    mapping(uint8 => uint256) public materialRate;\n    // Mapping of NFTs staked to material multiplier\n    mapping(uint8 => uint256) public nftMaterialMultiplier;\n    // Mapping of orbit to rarity multiplier\n    mapping(uint8 => uint256) public rarityMultiplier;\n    // Mapping of address to boolean whitelisted status\n    mapping(address => bool) public whitelistedCollections;\n    // Mapping of user address to array of Expedition struct\n    mapping(uint256 => Expedition) public expeditions;\n    // Variable to track current Expedition id\n    uint256 public currentExpeditionId = 0;\n    // Variable to track expedition duration\n    uint256 public expeditionDuration = 3 days;\n\n    // Event for starting an expedition\n    event ExpeditionStarted(\n        address indexed user,\n        uint256 indexed expeditionId,\n        uint256[] tokenIds,\n        address[] collectionIds,\n        uint256 startTime,\n        uint256 endTime\n    );\n    event ExpeditionEnded(address indexed user, uint256 indexed expeditionId, uint256 timeEnded);\n    event RewardsClaimed(\n        address indexed user,\n        uint256 indexed expeditionId,\n        uint256 indexed materialId,\n        uint256 materialGenerated,\n        uint256 stardust\n    );\n\n    constructor(address _stardust, IAtlantisPlanets _atlantisPlanets, IAtlantisMaterials _atlantisMaterials) {\n        // Set stardust address\n        stardust = IERC20(_stardust);\n        // Set Atlantis planets address\n        atlantisPlanets = _atlantisPlanets;\n        // Set Atlantis materials address\n        atlantisMaterials = _atlantisMaterials;\n    }\n\n    // --------------------- VIEW FUNCTINOS ---------------------\n    /**\n     * @notice Get Expedition Info\n     * @param _expeditionId Expedition Id\n     * @return Expedition of given expeditionId\n     */\n    function getExpeditionInfo(uint256 _expeditionId) external view returns (Expedition memory) {\n        Expedition memory expedition = expeditions[_expeditionId];\n        return expedition;\n    }\n\n    /**\n     * @notice Returns number of NFTs that can be staked on the planet\n     * @param _planetLevel Level of the planet\n     */\n    function calculateNFTsStakable(uint8 _planetLevel) public pure returns (uint8 nftsStakable) {\n        if (_planetLevel >= 1 && _planetLevel < 20) {\n            nftsStakable = 0;\n        } else if (_planetLevel >= 20 && _planetLevel < 30) {\n            nftsStakable = 1;\n        } else if (_planetLevel >= 30 && _planetLevel < 40) {\n            nftsStakable = 2;\n        } else if (_planetLevel >= 40) {\n            nftsStakable = 3;\n        }\n    }\n\n    /**\n     * @notice Returns the amount of starust earned\n     * @param _planetLevel Level of the planet\n     * @param _planetOrbit Orbit tier of the planet\n     * From Spreadsheet:\n     * Stardust earned per 72 hours expedition =\n     * (((planet_level -1) ^ 2) * level_parameter + 1) * ((planet_rarity -1) * rarity_parameter + 1) * xDAWG_base_rate\n     */\n    function calculateStardustPerExpedition(uint8 _planetLevel, uint8 _planetOrbit) public view returns (uint256) {\n        // Convert _planetLevel and _planetOrbit to uint256\n        uint256 __planetLevel = uint256(_planetLevel);\n        uint256 __planetOrbit = uint256(_planetOrbit);\n        return\n            (((((__planetLevel - 1) * 100) ** 2 * levelParameter + 1000000) / 10000) *\n                (((__planetOrbit - 1) * 100) * rarityParameter + 10000) *\n                baseStardustRate) / 1000000;\n    }\n\n    /**\n     * @notice Returns the amount of materials earned\n     * @param _planetLevel ExpeditionId of the expedition\n     * @param _planetOrbit ExpeditionId of the expedition\n     * @param _amountArgonauts ExpeditionId of the expedition\n     * From Spreadsheet:\n     * Material generated / expedition =\n     * roundup(base_material_rate * planet_rarity * argonauts_material_multiplier)\n     */\n    function materialGenerated(\n        uint8 _planetLevel,\n        uint8 _planetOrbit,\n        uint8 _amountArgonauts\n    ) public view returns (uint256) {\n        uint256 _temp = materialRate[_planetLevel] *\n            (rarityMultiplier[_planetOrbit] * 10) *\n            nftMaterialMultiplier[_amountArgonauts] *\n            10;\n        if ((_temp % 10000) != 0) {\n            return _temp / 10000 + 1;\n        } else {\n            return _temp / 10000;\n        }\n    }\n\n    function calculateRewards(uint256 _expeditionId) public view returns (uint256, AtlantisLib.Element, uint256) {\n        // Get expedition\n        Expedition memory expedition = expeditions[_expeditionId];\n        uint256 planetId = expedition.planetId;\n        // Get Planet NFT\n        AtlantisLib.Planet memory planet = atlantisPlanets.getPlanetDetails(planetId);\n        // Get Planet level and Orbit\n        uint8 planetLevel = planet.level;\n        uint8 planetOrbit = uint8(planet.orbit) + 1;\n\n        // Material multiplier is in terms of 100s, 1.2 = 120\n        uint256 _materialGenerated = materialGenerated(planetLevel, planetOrbit, uint8(expedition.tokenIds.length));\n\n        // Calculate stardust earned\n        uint256 _stardustEarned = calculateStardustPerExpedition(planetLevel, planetOrbit);\n        // Return rewards\n        return (_materialGenerated, planet.element, _stardustEarned);\n    }\n\n    // --------------------- PUBLIC FUNCTINOS ---------------------\n\n    /**\n     * @notice Starts an Atlantis Expedition\n     * @dev NFTs sent on expedition must be whitelisted\n     * @param _planetId PlanetId of planets to send NFTs on expedition\n     * @param _collectionAddresses Collection Addresses of nfts to send on expedition\n     * @param _tokenIds TokenIds of nfts to send on expedition\n     */\n    function startExpedition(\n        uint256 _planetId,\n        address[] memory _collectionAddresses,\n        uint256[] memory _tokenIds\n    ) external {\n        // Get planetLevel from planetId\n        uint8 planetLevel = atlantisPlanets.getPlanetDetails(_planetId).level;\n        // REVERT: If _collectionAddresses.length != _tokenIds.length\n        if (_collectionAddresses.length != _tokenIds.length) {\n            revert InvalidExpeditionInput();\n        }\n\n        // REVERT: If staked NFTs is more than limit\n        if (_collectionAddresses.length > calculateNFTsStakable(planetLevel)) {\n            revert InvalidExpeditionInput();\n        }\n\n        // Record the expedition\n        Expedition memory expedition = expeditions[currentExpeditionId] = Expedition({\n            collectionAddresses: _collectionAddresses,\n            tokenIds: _tokenIds,\n            id: currentExpeditionId,\n            planetId: _planetId,\n            startTime: block.timestamp,\n            endTime: block.timestamp + expeditionDuration,\n            owner: msg.sender,\n            hasEnded: false\n        });\n        // Increment currentExpeditionId\n        currentExpeditionId++;\n\n        // Transfer Planet NFT to this contract\n        atlantisPlanets.transferFrom(msg.sender, address(this), _planetId);\n        // Transfer Staked NFTs to this contract\n        for (uint256 i; i < _collectionAddresses.length; i++) {\n            // Check if collection address is whitelisted\n            if (!whitelistedCollections[_collectionAddresses[i]]) {\n                revert NFTCollectionNotWhitelisted();\n            }\n            IERC721(_collectionAddresses[i]).transferFrom(msg.sender, address(this), _tokenIds[i]);\n        }\n        // Emit event\n        emit ExpeditionStarted(\n            msg.sender,\n            currentExpeditionId,\n            expedition.tokenIds,\n            expedition.collectionAddresses,\n            expedition.startTime,\n            expedition.endTime\n        );\n    }\n\n    /**\n     * @notice Stops an Atlantis Expedition\n     * @param _expeditionId ExpeditionId of expedition to stop\n     * @dev - Must be called by the owner of the expedition\n     *      - Must be called after the expedition has ended (block.timestamp > block.timestamp)\n     *      - Must be called before the expedition has been claimed (hasEnded == false)\n     */\n    function endExpedition(uint256 _expeditionId) public {\n        Expedition storage currentExpedition = expeditions[_expeditionId];\n\n        // REVERT: If expedition has ended\n        if (currentExpedition.hasEnded) {\n            revert ExpeditionAlreadyEnded();\n        }\n        // REVERT: If current time is less than end time\n        if (currentExpedition.endTime > block.timestamp) {\n            revert ExpeditionInProgress();\n        }\n        // REVERT: If caller is not the owner of the expedition\n        if (currentExpedition.owner != msg.sender) revert NotOwnerOfExpedition();\n\n        // Transfer all staked NFTs back to user\n        for (uint256 i; i < currentExpedition.collectionAddresses.length; i++) {\n            IERC721(currentExpedition.collectionAddresses[i]).transferFrom(\n                address(this),\n                msg.sender,\n                currentExpedition.tokenIds[i]\n            );\n        }\n        // Transfer Planet NFT back to user\n        atlantisPlanets.transferFrom(address(this), msg.sender, currentExpedition.planetId);\n\n        _claimReward(_expeditionId);\n        currentExpedition.hasEnded = true;\n\n        emit ExpeditionEnded(msg.sender, _expeditionId, block.timestamp);\n    }\n\n    /**\n     * @notice Ends multiple Atlantis Expeditions\n     * @param _expeditionIds ExpeditionIds of expeditions to stop\n     * @dev - Must be called by the owner of the expedition\n     *      - Must be called after the expedition has ended (block.timestamp > block.timestamp)\n     *      - Must be called before the expedition has been claimed (hasEnded == false)\n     */\n    function endExpeditions(uint256[] calldata _expeditionIds) external {\n        // Loop through all expedition ids\n        for (uint256 i; i < _expeditionIds.length; i++) {\n            endExpedition(_expeditionIds[i]);\n        }\n    }\n\n    /**\n     * @notice Claims rewards for an expedition\n     * @param _expeditionId ExpeditionId of expedition to claim rewards for\n     * @dev - Must only be called by the owner of the expedition\n     *      - Must only be called after the expedition has ended (block.timestamp > block.timestamp)\n     *      - Stardust is minted to the caller\n     *      - AtlantisMaterials are minted to the caller\n     *      - EndDate is Updated\n     */\n    function claimReward(uint256 _expeditionId) public nonReentrant {\n        // check if claimant is owner of expeditionId\n        require(expeditions[_expeditionId].owner == msg.sender, \"Atlantis: User does not own expedition\");\n        _claimReward(_expeditionId);\n    }\n\n    /**\n     * @notice Claims rewards for multiple expeditions\n     * @param _expeditionIds ExpeditionIds of expeditions to claim rewards for\n     */\n    function claimRewards(uint256[] calldata _expeditionIds) external {\n        // Loop through all expedition ids\n        for (uint256 i; i < _expeditionIds.length; i++) {\n            claimReward(_expeditionIds[i]);\n        }\n    }\n\n    // Internal _claimRewards function that is used by claimRewards and endExpedition\n    function _claimReward(uint256 _expeditionId) internal {\n        // Get expedition\n        Expedition memory expedition = expeditions[_expeditionId];\n        // Check if expedition has ended\n        require(expedition.endTime < block.timestamp, \"Atlantis: Expedition has not ended\");\n        AtlantisLib.Element materialId;\n        uint256 _materialGenerated;\n        uint256 _stardustEarned;\n        // Calculate rewards\n        (_materialGenerated, materialId, _stardustEarned) = calculateRewards(_expeditionId);\n        // Distribute stardust rewards\n        stardust.transfer(msg.sender, _stardustEarned);\n        // Distribute material rewards\n        atlantisMaterials.mint(msg.sender, uint8(materialId) + 1, _materialGenerated);\n\n        // Update end time so that user cannot claim again\n        expeditions[_expeditionId].hasEnded = true;\n        // Emit event\n        emit RewardsClaimed(msg.sender, _expeditionId, uint8(materialId) + 1, _materialGenerated, _stardustEarned);\n    }\n\n    // -------------------- ADMIN FUNCTIONS ----------------------\n    /**\n     * @notice Set the duration of an expedition\n     * @param _duration The duration of an expedition in seconds\n     */\n    function setExpeditionDuration(uint256 _duration) external onlyOwner {\n        expeditionDuration = _duration;\n    }\n\n    /**\n     * @notice Set the whitelisted status of a collection\n     * @param _collectionAddresses The address of the collection\n     * @param _status The whitelisted status of the collection\n     * @dev Only whitelisted collections can be staked\n     */\n    function setWhitelistedCollections(address[] memory _collectionAddresses, bool _status) external onlyOwner {\n        for (uint256 i; i < _collectionAddresses.length; i++) {\n            whitelistedCollections[_collectionAddresses[i]] = _status;\n        }\n    }\n\n    /**\n     * @notice Set the material rate for a level\n     * @param _levels The level of the material\n     * @param _rates The rate of the material\n     */\n    function setMaterialRate(uint8[] memory _levels, uint256[] memory _rates) external onlyOwner {\n        if (_levels.length != _rates.length) revert InvalidSetMaterialRateInput();\n        for (uint256 i; i < _levels.length; i++) {\n            materialRate[_levels[i]] = _rates[i];\n        }\n    }\n\n    /**\n     * @notice Set the material multiplier for a NFT\n     * @param _numNFTs The number of NFTs staked\n     * @param _multipliers The multiplier of the rewards\n     */\n    function setNftMaterialMultiplier(uint8[] memory _numNFTs, uint256[] memory _multipliers) external onlyOwner {\n        // require(_numNFTs.length == _multipliers.length, \"Atlantis: Invalid input\");\n        if (_numNFTs.length != _multipliers.length) revert InvalidSetNFTMaterialMultiplierInput();\n\n        for (uint256 i; i < _numNFTs.length; i++) {\n            nftMaterialMultiplier[_numNFTs[i]] = _multipliers[i];\n        }\n    }\n\n    // Set rarityMultiplier\n    function setRarityMultiplier(uint8[] memory _rarity, uint256[] memory _multipliers) external onlyOwner {\n        // require(_rarity.length == _multipliers.length, \"Atlantis: Invalid input\");\n        if (_rarity.length != _multipliers.length) revert InvalidSetRarityMultiplierInput();\n\n        for (uint256 i; i < _rarity.length; i++) {\n            rarityMultiplier[_rarity[i]] = _multipliers[i];\n        }\n    }\n\n    /**\n     * @notice Set AtlantisMaterials Contract\n     * @param _atlantisMaterials Contract address of AtlantisMaterials\n     */\n    function setAtlantisMaterials(IAtlantisMaterials _atlantisMaterials) external onlyOwner {\n        atlantisMaterials = _atlantisMaterials;\n    }\n\n    /**\n     * @notice Set AtlantisPlanets Contract\n     * @param _atlantisPlanets Contract address of AtlantisMaterials\n     */\n    function setAtlantisPlanets(IAtlantisPlanets _atlantisPlanets) external onlyOwner {\n        atlantisPlanets = _atlantisPlanets;\n    }\n\n    /**\n     * @notice Set Stardust Contract\n     * @param _stardust Contract address of Stardust\n     */\n    function setStardust(IERC20 _stardust) external onlyOwner {\n        stardust = _stardust;\n    }\n\n    // Set baseStardustRate\n    function setBaseStardustRate(uint256 _baseStardustRate) external onlyOwner {\n        baseStardustRate = _baseStardustRate;\n    }\n\n    // Set levelParameter\n    function setLevelParameter(uint256 _levelParameter) external onlyOwner {\n        levelParameter = _levelParameter;\n    }\n\n    // Set rarityParameter\n    function setRarityParameter(uint256 _rarityParameter) external onlyOwner {\n        rarityParameter = _rarityParameter;\n    }\n}\n"
    },
    "contracts/AtlantisAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./AtlantisPlanets.sol\";\n\nerror AuctionSettled();\nerror AuctionNotInitialized();\nerror AuctionNotLive();\nerror ReservePriceNotMet();\nerror IncrementalPriceNotMet();\nerror BidsNotSorted();\nerror NonExistentBid();\nerror AuctionStillLive();\nerror WithdrawFailed();\nerror BidIncrementTooLow();\nerror NotEOA();\n\ncontract AtlantisAuction is Ownable, ReentrancyGuard {\n    struct Bid {\n        address bidder;\n        uint192 amount;\n        uint64 bidTime;\n    }\n\n    struct BidIndex {\n        uint8 index;\n        bool isSet;\n    }\n\n    event NewBid(address bidder, uint256 value);\n    event BidIncreased(address bidder, uint256 oldValue, uint256 increment);\n    event AuctionExtended();\n\n    // The max number of top bids the auction will accept\n    uint256 public constant MAX_NUM_BIDS = 12;\n\n    // The token contract to mint from\n    AtlantisPlanets public st;\n\n    // The minimum amount of time left in an auction after a new bid is created\n    uint256 public timeBuffer;\n\n    // The minimum price accepted in an auction\n    uint256 public reservePrice;\n\n    // The minimum percentage difference between the last bid amount and the current bid\n    uint8 public minBidIncrementPercentage;\n\n    // The minimum amount a user needs to submit for a stacked bid\n    uint256 public minStackedBidIncrement;\n\n    // The start time of the auction\n    uint256 public startTime;\n\n    // The end time of the auction\n    uint256 public endTime;\n\n    // Whether or not the auction has settled.\n    bool public auctionSettled;\n\n    // The current highest bids made in the auction\n    Bid[MAX_NUM_BIDS] public activeBids;\n\n    // The mapping between an address and its active bid. The isSet flag differentiates the default\n    // uint value 0 from an actual 0 value.\n    mapping(address => BidIndex) public bidIndexes;\n\n    constructor(\n        AtlantisPlanets _st,\n        uint256 _timeBuffer,\n        uint256 _reservePrice,\n        uint8 _minBidIncrementPercentage,\n        uint256 _minStackedBidIncrement,\n        uint256 _startTime,\n        uint256 _endTime\n    ) {\n        st = _st;\n        timeBuffer = _timeBuffer;\n        reservePrice = _reservePrice;\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n        minStackedBidIncrement = _minStackedBidIncrement;\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    modifier onlyEOA() {\n        if (tx.origin != msg.sender) {\n            revert NotEOA();\n        }\n        _;\n    }\n\n    /**\n     * @notice Handle users' bids\n     * @dev Bids must be made while the auction is live. Bids must meet a minimum reserve price.\n     *\n     * The first 8 bids made will be accepted as valid. Subsequent bids must be a percentage\n     * higher than the lowest of the 8 active bids. When a low bid is replaced, the ETH will\n     * be refunded back to the original bidder.\n     *\n     * If a valid bid comes in within the last `timeBuffer` seconds, the auction will be extended\n     * for another `timeBuffer` seconds. This will continue until no new active bids come in.\n     *\n     * If a wallet makes a bid while it still has an active bid, the second bid will\n     * stack on top of the first bid. If the second bid doesn't meet the `minStackedBidIncrement`\n     * threshold, an error will be thrown. A wallet will only have one active bid at at time.\n     */\n    function bid() public payable nonReentrant onlyEOA {\n        if (auctionSettled) {\n            revert AuctionSettled();\n        }\n        if (startTime == 0 || endTime == 0) {\n            revert AuctionNotInitialized();\n        }\n        if (block.timestamp < startTime || block.timestamp > endTime) {\n            revert AuctionNotLive();\n        }\n\n        BidIndex memory existingIndex = bidIndexes[msg.sender];\n        if (existingIndex.isSet) {\n            // Case when the user already has an active bid\n            if (msg.value < minStackedBidIncrement || msg.value == 0) {\n                revert BidIncrementTooLow();\n            }\n\n            uint192 oldValue = activeBids[existingIndex.index].amount;\n            unchecked {\n                activeBids[existingIndex.index].amount = oldValue + uint192(msg.value);\n            }\n            activeBids[existingIndex.index].bidTime = uint64(block.timestamp);\n\n            emit BidIncreased(msg.sender, oldValue, msg.value);\n        } else {\n            if (msg.value < reservePrice || msg.value == 0) {\n                revert ReservePriceNotMet();\n            }\n\n            uint8 lowestBidIndex = getBidIndexToUpdate();\n            uint256 lowestBidAmount = activeBids[lowestBidIndex].amount;\n            address lowestBidder = activeBids[lowestBidIndex].bidder;\n\n            unchecked {\n                if (msg.value < lowestBidAmount + (lowestBidAmount * minBidIncrementPercentage) / 100) {\n                    revert IncrementalPriceNotMet();\n                }\n            }\n\n            // Refund lowest bidder and remove bidIndexes entry\n            if (lowestBidder != address(0)) {\n                delete bidIndexes[lowestBidder];\n                _transferETH(lowestBidder, lowestBidAmount);\n            }\n\n            activeBids[lowestBidIndex] = Bid({\n                bidder: msg.sender,\n                amount: uint192(msg.value),\n                bidTime: uint64(block.timestamp)\n            });\n\n            bidIndexes[msg.sender] = BidIndex({ index: lowestBidIndex, isSet: true });\n\n            emit NewBid(msg.sender, msg.value);\n        }\n\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\n        if (endTime - block.timestamp < timeBuffer) {\n            unchecked {\n                endTime = block.timestamp + timeBuffer;\n            }\n            emit AuctionExtended();\n        }\n    }\n\n    /**\n     * @notice Gets the index of the entry in activeBids to update\n     * @dev The index to return will be decided by the following rules:\n     * If there are less than MAX_NUM_BIDS bids, the index of the first empty slot is returned.\n     * If there are MAX_NUM_BIDS or more bids, the index of the lowest value bid is returned. If\n     * there is a tie, the most recent bid with the low amount will be returned. If there is a tie\n     * among bidTimes, the highest index is chosen.\n     */\n    function getBidIndexToUpdate() public view returns (uint8) {\n        uint256 minAmount = activeBids[0].amount;\n        // If the first value is 0 then we can assume that no bids have been submitted\n        if (minAmount == 0) {\n            return 0;\n        }\n\n        uint8 minIndex = 0;\n        uint64 minBidTime = activeBids[0].bidTime;\n\n        for (uint8 i = 1; i < MAX_NUM_BIDS; ) {\n            uint256 bidAmount = activeBids[i].amount;\n            uint64 bidTime = activeBids[i].bidTime;\n\n            // A zero bidAmount means the slot is empty because we enforce non-zero bid amounts\n            if (bidAmount == 0) {\n                return i;\n            } else if (bidAmount < minAmount || (bidAmount == minAmount && bidTime >= minBidTime)) {\n                minAmount = bidAmount;\n                minIndex = i;\n                minBidTime = bidTime;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return minIndex;\n    }\n\n    /**\n     * @notice Get all active bids.\n     * @dev Useful for ethers client to get the entire array at once.\n     */\n    function getAllActiveBids() external view returns (Bid[MAX_NUM_BIDS] memory) {\n        return activeBids;\n    }\n\n    /**\n     * @notice Settles the auction and mints a skateboard ticket NFT to each winner.\n     * @dev Bids will be sorted in descending order off-chain due to constraints with\n     * sorting structs on-chain via a field on the struct, however we will validate the\n     * input on-chain before minting the NFTs. The input bids must be in descending order\n     * by amount and all input bids must correspond to a bid in the `activeBids` mapping.\n     * @dev Duplicate bids can be passed in to circumvent the validation logic. We are ok\n     * with this loophole since this function is ownerOnly.\n     * @dev Settlement is only possible once the auction is over.\n     */\n    function settleAuction(Bid[MAX_NUM_BIDS] calldata sortedBids) external onlyOwner nonReentrant {\n        if (block.timestamp <= endTime) {\n            revert AuctionStillLive();\n        }\n        if (auctionSettled) {\n            revert AuctionSettled();\n        }\n\n        // Validate the input bids\n        for (uint256 i = 0; i < MAX_NUM_BIDS; ) {\n            Bid memory inputBid = sortedBids[i];\n            BidIndex memory bidIndex = bidIndexes[inputBid.bidder];\n            if (\n                !bidIndex.isSet ||\n                activeBids[bidIndex.index].bidder != inputBid.bidder ||\n                activeBids[bidIndex.index].amount != inputBid.amount ||\n                activeBids[bidIndex.index].bidTime != inputBid.bidTime\n            ) {\n                revert NonExistentBid();\n            }\n\n            // The zero-th index has nothing to compare against\n            if (i != 0) {\n                Bid memory prevBid = sortedBids[i - 1];\n                if (inputBid.amount > prevBid.amount) {\n                    revert BidsNotSorted();\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        // Get addresses from bids\n        address[MAX_NUM_BIDS] memory winners;\n        for (uint256 i = 0; i < MAX_NUM_BIDS; ) {\n            winners[i] = sortedBids[i].bidder;\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Mint tickets to auction winners\n        st.epicMint(winners);\n\n        auctionSettled = true;\n    }\n\n    /**\n     * @notice Transfers ETH to a specified address.\n     * @dev This function can only be called internally.\n     */\n    function _transferETH(address to, uint256 value) internal returns (bool) {\n        (bool success, ) = to.call{ value: value, gas: 30000 }(new bytes(0));\n        return success;\n    }\n\n    /**\n     * @notice Sets the start and end time of the auction.\n     * @dev Only callable by the owner.\n     */\n    function setAuctionTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\n        startTime = _startTime;\n        endTime = _endTime;\n    }\n\n    /**\n     * @notice Set the auction time buffer.\n     * @dev Only callable by the owner.\n     */\n    function setTimeBuffer(uint256 _timeBuffer) external onlyOwner {\n        timeBuffer = _timeBuffer;\n    }\n\n    /**\n     * @notice Set the auction reserve price.\n     * @dev Only callable by the owner.\n     */\n    function setReservePrice(uint256 _reservePrice) external onlyOwner {\n        reservePrice = _reservePrice;\n    }\n\n    /**\n     * @notice Set the auction minimum bid increment percentage.\n     * @dev Only callable by the owner.\n     */\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external onlyOwner {\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n    }\n\n    /**\n     * @notice Set the auction replacing bid buffer amount.\n     * @dev Only callable by the owner.\n     */\n    function setMinReplacementIncrease(uint256 _minStackedBidIncrement) external onlyOwner {\n        minStackedBidIncrement = _minStackedBidIncrement;\n    }\n\n    /**\n     * @notice Withdraws the contract value to the owner\n     */\n    function withdraw() external onlyOwner {\n        bool success = _transferETH(msg.sender, address(this).balance);\n        if (!success) {\n            revert WithdrawFailed();\n        }\n    }\n}\n"
    },
    "contracts/AtlantisEquipments.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./interface/IAtlantisComponents.sol\";\nimport \"./interface/IAtlantisMaterials.sol\";\nimport \"./interface/IStakingWithLock.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// hardhat console log\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\ncontract AtlantisComponents is ERC1155, Pausable, Ownable, IAtlantisComponents {\n    // Contract name\n    string public name;\n    // Contract symbol\n    string public symbol;\n\n    mapping(uint256 => uint256) public tokenSupply;\n\n    mapping(uint256 => uint256) private _totalSupply;\n    mapping(uint256 => string) private _tokenURIs;\n    string public baseTokenURI;\n    uint256 private _currentTokenID = 0;\n    uint256 public totalTokenIds = 30;\n    // Mint cost\n    uint256 public MINT_COST = 30 ether;\n    IStakingWithLock public stakingWithLock;\n    IAtlantisMaterials public atlantisMaterials;\n    IERC20 public stardust;\n    uint256[5] public stardustCost;\n    uint16[5] public materialsRequired;\n    uint16[10] public componentSpeeds;\n    uint256 private nonce;\n    address public treasury;\n    // ------------------------- EVENTS --------------------------\n    event FuseComponent(address indexed _from, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\n\n    // ------------------------- ERRORS --------------------------\n    error UpgradeError();\n    error IdNotExistsError();\n\n    // ----------------------- MODIFIERS -------------------------\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory baseURI,\n        address owner,\n        address _stardust,\n        address _stakingWithLock,\n        address _atlantisMaterials,\n        address _treasury\n    ) ERC1155(baseURI) {\n        name = _name;\n        symbol = _symbol;\n        setBaseMetadataURI(baseURI);\n        transferOwnership(owner);\n        stardust = IERC20(_stardust);\n        atlantisMaterials = IAtlantisMaterials(_atlantisMaterials);\n        stakingWithLock = IStakingWithLock(_stakingWithLock);\n        treasury = _treasury;\n    }\n\n    // Receive payable function\n    receive() external payable {}\n\n    // ------------------------- VIEW FUNCTIONS ------------------------------\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        require(exists(tokenId), \"Resources: URI query for nonexistent token\");\n\n        string memory base = _baseURI();\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        return string(abi.encodePacked(base, _tokenURI, Strings.toString(tokenId)));\n    }\n\n    // ------------------------- ADMIN FUNCTIONS ------------------------------\n\n    /**\n     * @dev Will update the base URL of token's URI\n     * @param _newBaseMetadataURI New base URL of token's URI\n     */\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyOwner {\n        baseTokenURI = _newBaseMetadataURI;\n    }\n\n    /// @dev Will update the token URL of token's URI\n    function setTokenURI(uint256 tokenId, string memory _newTokenURI) public onlyOwner {\n        _tokenURIs[tokenId] = _newTokenURI;\n    }\n\n    /**\n     * @dev Mints some amount of tokens to an address\n     * @param _to          Address of the future owner of the token\n     * @param _id          Token ID to mint\n     * @param _quantity    Amount of tokens to mint\n     * @param _data        Data to pass if receiver is contract\n     */\n    function devMint(address _to, uint256 _id, uint256 _quantity, bytes memory _data) public onlyOwner {\n        _mint(_to, _id, _quantity, _data);\n    }\n\n    function random() private view returns (uint) {\n        uint randomHash = uint(\n            keccak256(\n                abi.encodePacked(msg.sender, block.coinbase, block.difficulty, block.gaslimit, block.timestamp, nonce)\n            )\n        );\n        return randomHash % 3;\n    }\n\n    // Public mint with random id\n    function mint(address _to, uint256 _quantity, bytes memory _data) public payable {\n        require(msg.value == _quantity * MINT_COST, \"AtlantisComponents: Insufficient CRO!\");\n        uint256 _id;\n        // Loop through quantity\n        for (uint256 i = 0; i < _quantity; i++) {\n            _id = random() + 1;\n            nonce += 1;\n            console.log(\"Minting token with id: %s\", _id);\n            _mint(_to, _id, 1, _data);\n        }\n    }\n\n    /**\n     * @dev Mint tokens for each id in _ids\n     * @param _to          The address to mint tokens to\n     * @param _ids         Array of ids to mint\n     * @param _quantities  Array of amounts of tokens to mint per id\n     * @param _data        Data to pass if receiver is contract\n     */\n    function batchMint(\n        address _to,\n        uint256[] memory _ids,\n        uint256[] memory _quantities,\n        bytes memory _data\n    ) public onlyOwner {\n        _mintBatch(_to, _ids, _quantities, _data);\n    }\n\n    /**\n     * @notice Withdraw all CRO from this account to the owner\n     */\n    function withdrawFund() external onlyOwner {\n        (bool success, ) = payable(treasury).call{ value: address(this).balance }(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // ------------------------- INTERNAL FUNCTIONS ------------------------------\n\n    /**\n     * @dev See {ERC1155-_mint}.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal override {\n        super._mint(account, id, amount, data);\n    }\n\n    /**\n     * @dev See {ERC1155-_mintBatch}.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override {\n        super._mintBatch(to, ids, amounts, data);\n    }\n\n    /// @dev Gets baseToken URI\n    function _baseURI() internal view returns (string memory) {\n        return baseTokenURI;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 _id) public view virtual returns (bool) {\n        return _id > 0 && _id <= totalTokenIds;\n    }\n\n    // Atlantis\n    function getMaterialIdFromComponentId(uint256 _id) public pure returns (uint256) {\n        if (_id > 27) {\n            revert UpgradeError();\n        }\n        uint256 _element = (_id % 3);\n        uint256 _materialId;\n        if (_element == 1) {\n            _materialId = 10;\n        } else if (_element == 2) {\n            _materialId = 11;\n        } else if (_element == 0) {\n            _materialId = 12;\n        }\n        return _materialId;\n    }\n\n    function fuseComponent(uint256 _id, uint16 _amountToCreate) external {\n        // Total fusion cost\n        uint256 _fusionCost = calculateFusionCost(_id, _amountToCreate);\n        // Material cost\n        uint256 _materialCost = calculateMaterialsCost(_id, _amountToCreate);\n        // Calculate components required to fuse\n        uint256 _amountToBurn = fuseComponentsView(_id, _amountToCreate);\n        uint256 _toId = _id + 3;\n\n        // Burn material\n        atlantisMaterials.burn(msg.sender, getMaterialIdFromComponentId(_id), _materialCost);\n\n        _burn(msg.sender, _id, _amountToBurn);\n        // Mint new component\n        _mint(msg.sender, _toId, _amountToCreate, \"\");\n        // Burn stardust if _fusionCost is more than 0\n        if (_fusionCost > 0) {\n            stakingWithLock.unstakeAndBurn(_fusionCost);\n        }\n        // Emit fuse event\n        emit FuseComponent(msg.sender, _toId, _amountToCreate, totalSupply(_toId));\n    }\n\n    function getSpeed(uint256 _id) public view returns (uint16) {\n        if (_id > 30) {\n            revert IdNotExistsError();\n        } else if (_id == 0) {\n            return 0;\n        }\n        uint8 _level = getLevel(_id);\n        return componentSpeeds[_level - 1];\n    }\n\n    function getLevel(uint256 _id) public pure returns (uint8) {\n        if (_id > 30) {\n            revert IdNotExistsError();\n        }\n        // Logic above level 5\n        uint8 _level;\n        if ((_id % 3) == 0) {\n            _level = uint8(_id) / 3;\n        } else {\n            _level = uint8(_id) / 3 + 1;\n        }\n\n        return _level;\n    }\n\n    // Get element from id\n    function getElement(uint256 _id) public pure returns (uint8) {\n        if (_id > 30) {\n            revert IdNotExistsError();\n        }\n        uint8 _element = uint8(_id) % 3;\n        return _element;\n    }\n\n    /** Token Ids\n     * 1 2 3 Fire Lightning Steel Component Level 1\n     * 4 5 6 Fire Lightning Steel Component Level 2\n     * 7 8 9 Fire Lightning Steel Component Level 3\n     * 10 11 12 Fire Lightning Steel Component Level 4\n     * 13 14 15 Fire Lightning Steel Component Level 5\n     * 16 17 18 Fire Lightning Steel Component Level 6\n     * 19 20 21 Fire Lightning Steel Component Level 7\n     * 22 23 24 Fire Lightning Steel Component Level 8\n     * 25 26 27 Fire Lightning Steel Component Level 9\n     * 28 29 30 Fire Lightning Steel Component Level 10\n     *\n     * stardustCost[0] =  250\n     * stardustCost[1] =  360\n     * stardustCost[2] =  490\n     * stardustCost[3] =  640\n     * stardustCost[4] =  810\n     */\n    function calculateFusionCost(uint256 _id, uint16 _amountToCreate) public view returns (uint256) {\n        // Logic for level 1 - 4\n        if (_id < 13) {\n            return 0;\n        } else if (_id > 27) {\n            revert UpgradeError();\n        }\n        // Logic above level 5\n        uint8 _level = getLevel(_id);\n        return uint256(_amountToCreate) * stardustCost[_level - 5];\n    }\n\n    function calculateMaterialsCost(uint256 _id, uint16 _amountToCreate) public view returns (uint16) {\n        // Logic for level 1 - 4\n        if (_id < 13) {\n            return 0;\n        }\n        // Logic above level 5\n        uint8 _level;\n        if ((_id % 3) == 0) {\n            _level = uint8(_id) / 3;\n        } else {\n            _level = uint8(_id) / 3 + 1;\n        }\n        return _amountToCreate * materialsRequired[_level - 5];\n    }\n\n    function fuseComponentsView(uint256 _id, uint16 _amountToCreate) public view override returns (uint16) {\n        if (!exists(_id) || _amountToCreate == 0) {\n            revert UpgradeError();\n        }\n        // Get amount of materials to fuse\n        uint16 amountToFuse = 2 * _amountToCreate;\n        return amountToFuse;\n    }\n\n    // Set stardust costs\n    function setStardustCosts(uint256[] calldata _stardustCost) external onlyOwner {\n        // Loop through and set stardust\n        for (uint256 i = 0; i < _stardustCost.length; i++) {\n            stardustCost[i] = _stardustCost[i];\n        }\n    }\n\n    // Set materialsRequired\n    function setMaterialsRequired(uint16[] memory _materialsRequired) external onlyOwner {\n        // Loop through and set materialsRequired\n        for (uint8 i = 0; i < _materialsRequired.length; i++) {\n            materialsRequired[i] = _materialsRequired[i];\n        }\n    }\n\n    // Set componentSpeeds\n    function setComponentSpeeds(uint16[] memory _componentSpeeds) external onlyOwner {\n        // Loop through and set componentSpeeds\n        for (uint8 i = 0; i < _componentSpeeds.length; i++) {\n            componentSpeeds[i] = _componentSpeeds[i];\n        }\n    }\n}\n"
    },
    "contracts/AtlantisMaterials.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { IAtlantisMaterials } from \"./interface/IAtlantisMaterials.sol\";\nimport \"./common/AtlantisLib.sol\";\nimport \"./interface/IStakingWithLock.sol\";\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\ncontract AtlantisMaterials is ERC1155, Pausable, Ownable, IAtlantisMaterials {\n    using AtlantisLib for AtlantisLib.Element;\n\n    string public name;\n    string public symbol;\n\n    string public baseTokenURI;\n    uint256 public totalTokenIds = 12;\n\n    mapping(uint256 => uint256) private _totalSupply;\n    // mapping of address to whitelisted status\n    mapping(address => bool) private _whitelist;\n    IERC20 public stardust;\n    // StakingWithLock address\n    IStakingWithLock public stakingWithLock;\n    // stardust fusion cost\n    uint256 public FUSION_COST = 2 ether;\n    // ------------------------- EVENTS --------------------------\n    event MintMaterial(address indexed _to, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\n    event FuseMaterial(address indexed _from, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\n\n    // ----------------------- MODIFIERS -------------------------\n\n    modifier onlyAtlantisContracts() {\n        _isAtlantisContracts();\n        _;\n    }\n\n    function _isAtlantisContracts() internal view {\n        if (!(_whitelist[msg.sender] || msg.sender == owner())) revert OnlyAtlantisContractsAllowed();\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory baseURI,\n        address owner,\n        address _stardust,\n        address _stakingWithLock\n    ) ERC1155(baseURI) {\n        name = _name;\n        symbol = _symbol;\n        setBaseMetadataURI(baseURI);\n        transferOwnership(owner);\n        stardust = IERC20(_stardust);\n        stakingWithLock = IStakingWithLock(_stakingWithLock);\n    }\n\n    // ------------------------- PUBLIC FUNCTIONS ------------------------------\n    /**\n     * @dev Fuse 3 materials to get another material of a higher tier\n     * @param _id The material id\n     * @param _amountToCreate The amount of materials to create\n     * Material Upgrade Sheet\n     *           Tier 1 -> Tier 2 -> Tier 3 -> Tier 4\n     * FIRE      ID 1   -> ID 4   -> ID 7   -> ID 10\n     * LIGHTNING ID 2   -> ID 5   -> ID 8   -> ID 11\n     * STEEL     ID 3   -> ID 6   -> ID 9   -> ID 12\n     */\n    function fuseMaterials(uint8 _id, uint8 _toId, uint256 _amountToCreate) external whenNotPaused {\n        // Calculate material required to fuse\n        uint256 _amountToBurn = calculateMaterialCost(_id, _toId, _amountToCreate);\n        // Burn materials\n        _burn(msg.sender, _id, _amountToBurn);\n        // Mint new material\n        _mint(msg.sender, _toId, _amountToCreate, \"\");\n        // Total fusion cost\n        uint256 fusionCost = calculateFusionCost(_id, _toId, _amountToCreate);\n        // Transfer fusion cost\n        //  IERC20(stardust).transferFrom(msg.sender, address(this), fusionCost);\n        // Burn stardust\n        stakingWithLock.unstakeAndBurn(fusionCost);\n        // Emit fuse event\n        emit FuseMaterial(msg.sender, _toId, _amountToCreate, totalSupply(_toId));\n    }\n\n    // View function to calculate fusion cost\n    function calculateFusionCost(uint8 _id, uint8 _toId, uint256 _amountToCreate) public view returns (uint256) {\n        // Calculate material required to fuse\n        uint256 _amountToBurn = calculateMaterialCost(_id, _toId, _amountToCreate);\n        return (_amountToBurn / 3) * FUSION_COST;\n    }\n\n    // View function to see how many materials required to fuse to amountToCreate\n    function calculateMaterialCost(uint8 _id, uint8 _toId, uint256 _amountToCreate) public view returns (uint256) {\n        // require(_amountToCreate > 0, \"AtlantisMaterials: AMOUNT_MUST_BE_GREATER_THAN_0\");\n        if (_amountToCreate == 0) revert InvalidInputAmount();\n        // require(exists(_id), \"AtlantisMaterials: NON_EXISTENT_TOKEN\");\n        // require(exists(_toId), \"AtlantisMaterials: NON_EXISTENT_TOKEN\");\n        if (!exists(_id) || !exists(_toId)) revert NonExistentToken();\n\n        // require((_toId - _id) % 3 == 0, \"AtlantisMaterials: DIFFERENT_ELEMENT\");\n        if ((_toId % 3 != _id % 3)) revert InvalidElement();\n\n        // require(_id != _toId, \"AtlantisMaterials: SAME_ID\");\n        // require(_toId > _id, \"AtlantisMaterials: INVALID_ID\");\n        if (_id == _toId || _id > _toId) revert InvalidUpgrade();\n\n        // Require toId to be more than id\n        // Require toId to be in multiples of 3 more than id\n        // Calculate how many materials to fuse to get toId\n        // Get tier difference\n        uint8 tierDifference = (_toId - _id) / 3;\n        // Get amount of materials to fuse\n        uint256 amountToFuse = 3 ** tierDifference * _amountToCreate;\n        return amountToFuse;\n    }\n\n    // Setter for fusion cost\n    function setFusionCost(uint256 _cost) external onlyOwner {\n        FUSION_COST = _cost;\n    }\n\n    function setAtlantisContracts(address[] calldata _contracts) external onlyOwner {\n        // Loop and set _whitelisted true\n        for (uint256 i = 0; i < _contracts.length; i++) {\n            _whitelist[_contracts[i]] = true;\n        }\n    }\n\n    /**\n     * @dev Mints some amount of tokens to an address\n     * @param _to          Address of the future owner of the token\n     * @param _id          Token ID to mint\n     * @param _quantity    Amount of tokens to mint\n     */\n    function mint(address _to, uint256 _id, uint256 _quantity) external onlyAtlantisContracts {\n        // Only this contract, the owner or Atlantis contract can mint\n        // require(_whitelist[msg.sender] || msg.sender == owner(), \"AtlantisMaterials: Only Atlantis contracts allowed\");\n        // require(exists(_id), \"AtlantisMaterials: NON_EXISTENT_TOKEN\");\n        if (!exists(_id)) revert NonExistentToken();\n        _mint(_to, _id, _quantity, \"\");\n        // emit Mint event\n        emit MintMaterial(_to, _id, _quantity, totalSupply(_id));\n    }\n\n    /**\n     * @dev Burns some amount of tokens from an address\n     */\n    function burn(address _user, uint256 _id, uint256 _quantity) external onlyAtlantisContracts {\n        // Require tx.origin is same as _user\n        // require(exists(_id), \"AtlantisMaterials: NON_EXISTENT_TOKEN\");\n        if (!exists(_id)) revert NonExistentToken();\n        _burn(_user, _id, _quantity);\n    }\n\n    function setStardust(IERC20 _stardust) external onlyOwner {\n        stardust = _stardust;\n    }\n\n    // ------------------------- PUBLIC VIEW FUNCTIONS ------------------------------\n\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        if (!exists(tokenId)) revert NonExistentToken();\n\n        string memory base = _baseURI();\n\n        return string(abi.encodePacked(base, Strings.toString(tokenId)));\n    }\n\n    // ------------------------- ADMIN FUNCTIONS ------------------------------\n\n    /**\n     * @dev Will update the base URL of token's URI\n     * @param _newBaseMetadataURI New base URL of token's URI\n     */\n    function setBaseMetadataURI(string memory _newBaseMetadataURI) public onlyOwner {\n        baseTokenURI = _newBaseMetadataURI;\n    }\n\n    // ------------------------- INTERNAL FUNCTIONS ------------------------------\n\n    /**\n     * @dev Get the id of the next tier of material\n     * @param _id The current material id\n     */\n    function _getNextTierId(uint8 _id) internal pure returns (uint8) {\n        return _id + 3;\n    }\n\n    /**\n     * @dev Gets baseToken URI\n     */\n    function _baseURI() internal view returns (string memory) {\n        return baseTokenURI;\n    }\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     * @dev There are only materials with tokenIds 1-12\n     */\n    function exists(uint256 _id) public view virtual returns (bool) {\n        return _id > 0 && _id <= totalTokenIds;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/AtlantisPlanets.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interface/IAtlantisPlanets.sol\";\nimport \"./interface/IAtlantisMaterials.sol\";\nimport \"./interface/IStakingWithLock.sol\";\nimport \"./common/WithLimitedSupply.sol\";\nimport \"./common/RandomlyAssigned.sol\";\nimport \"./common/Base64.sol\";\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\n/// @title Atlantis Planets Mint Contract\n/// @dev Max Supply of 4512 planets\n/// @dev First 12 planets are EPIC planets\n\ncontract AtlantisPlanets is ERC721, Ownable, IAtlantisPlanets, RandomlyAssigned {\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    string public baseURI;\n\n    // Stages\n    // 0: Before all minting commence\n    // 1: WhiteList Sale\n    // 2: Public sale\n    // 3: Post-Mint (Admin Phase)\n    // 4: Game Phase\n\n    uint8 public stage;\n    uint256 currentSupply;\n\n    // Whitelist Mint Settings  cro\n    uint256 public whitelistMintMaxPerWallet = 5; // Private Sale Address Mint Cap\n    uint256 public whitelistMintPrice = 500 ether; // Private Sale Mint Price\n    mapping(address => uint256) public whitelistMintCount;\n    address private whitelistSignerAddress;\n\n    // Public Sale Mint Settings 600 cro\n    uint256 public publicMintPrice = 750 ether;\n    uint256 public publicMintMaxPerWallet = type(uint256).max;\n    mapping(address => uint256) public publicMintCount;\n\n    // Treasury\n    address public treasury;\n\n    IERC20 public xARGO;\n    IERC20 public stardust;\n    IStakingWithLock public stakingWithLock;\n    address public auctionContract;\n    // Levelling\n    bytes public levelUpMaterial;\n    // xARGO base cost\n    uint256 public xArgoBaseCost = 40 ether;\n    // stardust base cost\n    uint256 public stardustBaseCost = 2 ether;\n    // stardust base cost scaling\n    uint256 public stardustBaseCostScaling = 25;\n    // stardust rarity cost scaling\n    uint256 public stardustRarityCostScaling = 20;\n    // Mapping of planet token id to planet struct\n    mapping(uint256 => AtlantisLib.Planet) public planets;\n\n    // Variable to track material tiers\n    uint16 public materialTiers = 4;\n    // Variable to track ERC1155 material token contract\n    IAtlantisMaterials public materialToken;\n    // Variable to track max planet level\n    uint16 public maxPlanetLevel = 50;\n\n    bool public revealed = false;\n    string public unrevealedImageURI = \"ipfs://unrevealedhash\";\n\n    // material token ids is in the following sequence:\n    // 1 - Fire 1\n    // 2 - Lightning 1\n    // 3 - Steel 1\n    // 4 - Fire 2\n    // 5 - Lightning 2\n    // 6 - Steel 2\n    // 7 - Fire 3\n    // 8 - Lightning 3\n    // 9 - Steel 3\n    // 10 - Fire 4\n    // 11 - Lightning 4\n    // 12 - Steel 4\n\n    // Events\n    event PlanetUpgraded(uint256 indexed tokenId, uint256 indexed level);\n    event PrivateMint(address indexed to, uint256 amount);\n    event PublicMint(address indexed to, uint256 amount);\n\n    // -------------------- MODIFIERS ----------------------\n\n    /**\n     * @dev Prevent Smart Contracts from calling the functions with this modifier\n     */\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin, \"Planets: must use EOA\");\n        _;\n    }\n\n    /**\n     * @dev Only Auction Contract Modifier\n     */\n    modifier onlyAuctionContract() {\n        require(msg.sender == auctionContract, \"Planets: Only Auction Contract\");\n        _;\n    }\n\n    constructor(\n        address _owner,\n        address _whitelistSignerAddress,\n        string memory __baseURI,\n        address _materialToken,\n        IERC20 _xArgo,\n        IERC20 _stardust,\n        address _stakingWithLock\n    ) ERC721(\"AtlantisPlanets\", \"AP\") RandomlyAssigned(4500, 13) {\n        setTreasury(_owner);\n        setWhitelistSignerAddress(_whitelistSignerAddress);\n        setBaseURI(__baseURI);\n        transferOwnership(_owner);\n        currentSupply = 0;\n        materialToken = IAtlantisMaterials(_materialToken);\n        xARGO = _xArgo;\n        stardust = _stardust;\n        stakingWithLock = IStakingWithLock(_stakingWithLock);\n    }\n\n    /**\n     * @dev Set Revealed Metadata URI\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    // -------------------- ATLANTIS PUBLIC FUNCTIONS ----------------------\n\n    /**\n     * @dev Get material upgrade requirements for upgrading a planet\n     * @param _tokenId The token id of the planet\n     * @param _levels The number of levels to upgrade\n     * @return materialRequirements The material requirements for upgrading the planet\n     */\n    function getUpgradeRequirements(\n        uint256 _tokenId,\n        uint8 _levels\n    ) internal view returns (uint16[4] memory materialRequirements) {\n        // Get planet struct\n        AtlantisLib.Planet memory planet = planets[_tokenId];\n        uint8 planetLevel = planet.level;\n        uint8 newLevel = planetLevel + _levels;\n        uint8 orbit = uint8(planet.orbit);\n\n        // require(planetLevel + _levels <= maxPlanetLevel, \"Planets: Planet cannot be upgraded to this level!\");\n        if (planetLevel + _levels > maxPlanetLevel) revert ExceededMaxLevel();\n\n        // Cumulative requirement at target level - Cumulative requirement at current level = requirement for upgrade\n        materialRequirements[0] =\n            toUint16(levelUpMaterial, orbit, newLevel, 0) -\n            toUint16(levelUpMaterial, orbit, planetLevel, 0);\n\n        materialRequirements[1] =\n            toUint16(levelUpMaterial, orbit, newLevel, 1) -\n            toUint16(levelUpMaterial, orbit, planetLevel, 1);\n\n        materialRequirements[2] =\n            toUint16(levelUpMaterial, orbit, newLevel, 2) -\n            toUint16(levelUpMaterial, orbit, planetLevel, 2);\n\n        materialRequirements[3] =\n            toUint16(levelUpMaterial, orbit, newLevel, 3) -\n            toUint16(levelUpMaterial, orbit, planetLevel, 3);\n    }\n\n    /**\n     * @notice Get uint16 value from a byte array\n     * @param _bytes The token id of the planet\n     * @param orbit Orbit of the planet\n     * @param level Level of the planet\n     * @param tier Tier of the material\n     * @dev This function was modified to serve retriving the material upgrade requirements\n     */\n    function toUint16(\n        bytes memory _bytes,\n        uint256 orbit,\n        uint256 level,\n        uint256 tier\n    ) internal pure returns (uint16 tempUint) {\n        uint256 _start = orbit * 8 + (level - 1) * 32 + tier * 2;\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n    }\n\n    /**\n     * @notice Get evolution stage of planet\n     * @param level Level of a planet\n     */\n    function _getPlanetEvolution(\n        uint16 level\n    ) internal pure returns (AtlantisLib.Evolution evo, string memory evoString) {\n        if (level < 20) {\n            evo = AtlantisLib.Evolution.BABY;\n            evoString = \"Baby\";\n        } else if (level >= 20 && level < 30) {\n            evo = AtlantisLib.Evolution.ROOKIE;\n            evoString = \"Rookie\";\n        } else if (level >= 30 && level < 40) {\n            evo = AtlantisLib.Evolution.CHAMPION;\n            evoString = \"Champion\";\n        } else if (level >= 40 && level < 50) {\n            evo = AtlantisLib.Evolution.ULTIMATE;\n            evoString = \"Ultimate\";\n        } else if (level == 50) {\n            evo = AtlantisLib.Evolution.MEGA;\n            evoString = \"Mega\";\n        }\n    }\n\n    /**\n     * @notice Get planet details\n     * @dev Planet details include: level, element, orbit, onExpedition\n     */\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory) {\n        AtlantisLib.Planet memory planet = planets[_planetId];\n        return planet;\n    }\n\n    /**\n     * @notice Return xArgo cost for upgrading a planet\n     */\n    function getxArgoCost(uint8 currentLevel, uint8 newLevel) internal view returns (uint256) {\n        if (currentLevel == 0 || currentLevel >= newLevel) revert InvalidUpgradeLevel(currentLevel, newLevel);\n        // require(currentLevel < newLevel, \"Planets: Cannot downgrade planet!\");\n        return xArgoBaseCost * (uint256(newLevel)) - xArgoBaseCost * uint256(currentLevel);\n    }\n\n    /**\n     * @notice Return stardust cost for upgrading a planet\n     */\n    function getStardustCost(\n        uint8 currentLevel,\n        uint8 newLevel,\n        uint8 orbit\n    ) internal view returns (uint256 stardustCost) {\n        if (currentLevel == 0 || currentLevel >= newLevel) revert InvalidUpgradeLevel(currentLevel, newLevel);\n\n        // require(currentLevel > 0, \"Planets: No zero level\");\n        // require(currentLevel < newLevel, \"Planets: Cannot downgrade planet!\");\n        // Loop through all levels and add up stardust cost\n        for (uint256 i = currentLevel; i <= newLevel; i++) {\n            stardustCost +=\n                (stardustBaseCost *\n                    (((i - 1) * stardustBaseCostScaling + 100) * ((orbit) * stardustRarityCostScaling + 100))) /\n                10000;\n        }\n    }\n\n    // External function for frontend to retrieve stardust, xArgo, and material costs in 1 multicall\n    function getUpgradeCosts(\n        uint256 _tokenId,\n        uint8 _levels\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory materialRequirements) {\n        // Get planet struct\n        AtlantisLib.Planet memory planet = planets[_tokenId];\n        uint8 planetLevel = planet.level;\n        uint8 newLevel = planetLevel + _levels;\n        uint8 orbit = uint8(planet.orbit);\n\n        require(planetLevel + _levels <= maxPlanetLevel, \"Planets: Planet cannot be upgraded to this level!\");\n\n        // Get stardust cost\n        stardustCost = getStardustCost(planetLevel, newLevel, orbit);\n\n        // Get xArgo cost\n        xArgoCost = getxArgoCost(planetLevel, newLevel);\n\n        // Get material requirements\n        materialRequirements = getUpgradeRequirements(_tokenId, _levels);\n    }\n\n    /**\n     * @notice Returns total supply of AtlantisPlanets\n     */\n    function totalSupply() public view returns (uint256) {\n        return currentSupply;\n    }\n\n    /**\n     * @dev Upgrade a planet by `_levels` levels\n     * @param _tokenId Token ID of planet\n     * @param _levels Number of levels to upgrade planet by\n     */\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external {\n        // Check if upgrader is owner of planet\n        if (ownerOf(_tokenId) != msg.sender) revert NotOwnerOfPlanet();\n        // Check if stage 4\n        if (stage != 4) revert InvalidStage(stage, 4);\n\n        AtlantisLib.Planet storage planet = planets[_tokenId];\n\n        uint8 orbit = uint8(planet.orbit);\n\n        // require(planet.level + _levels <= maxPlanetLevel, \"Planets: Planet cannot be upgraded to this level!\");\n        if (planet.level + _levels > maxPlanetLevel) revert ExceededMaxLevel();\n\n        // Get xARGO requirements\n        uint256 xArgoCost = getxArgoCost(planet.level, planet.level + _levels);\n        // Get Stardust requirements\n        // Base cost scaling for stardust 0.25 = 25, need math properly\n        uint256 stardustCost = getStardustCost(planet.level, planet.level + _levels, orbit);\n\n        // Get material requirements\n        uint16[4] memory materialRequirements = getUpgradeRequirements(_tokenId, _levels);\n\n        uint16 planetTypeTierStep = 0;\n        uint16 step = 1;\n\n        while (step <= materialTiers) {\n            uint256 toBurn = materialRequirements[step - 1];\n            // Burn materials\n            if (toBurn > 0) {\n                materialToken.burn(msg.sender, uint256(uint256(orbit) + 1 + planetTypeTierStep), toBurn);\n            }\n            step++;\n            planetTypeTierStep += 3;\n        }\n\n        // Transfer xARGO and Stardust to this contract\n        IERC20(xARGO).transferFrom(msg.sender, address(this), xArgoCost);\n        if (stardustCost > 0) {\n            stakingWithLock.unstakeAndBurn(stardustCost);\n        }\n\n        // Increase planet level\n        planet.level += _levels;\n\n        emit PlanetUpgraded(_tokenId, _levels);\n    }\n\n    // -------------------- MINT FUNCTIONS --------------------------\n\n    /**\n     * @dev Mint planet (Whitelist only)\n     * @param _mintAmount Amount of planets to mint\n     * @param nonce Unique Nonce\n     * @param signature Signature provided by the signerAddress\n     */\n    function whitelistMint(\n        uint256 _mintAmount,\n        bytes memory nonce,\n        bytes memory signature\n    ) external payable onlyEOA ensureAvailabilityFor(_mintAmount) {\n        // Check if user is whitelisted\n        // require(whitelistSigned(msg.sender, nonce, signature), \"Planets: Invalid Signature!\");\n        if (!whitelistSigned(msg.sender, nonce, signature)) revert InvalidSignature();\n\n        // Check if whitelist sale is open\n        // require(stage == 1, \"Planets: Whitelist Mint is not open\");\n        if (stage != 1) revert InvalidStage(stage, 1);\n\n        // Check if enough ETH is sent\n        // require(msg.value == _mintAmount * whitelistMintPrice, \"Planets: Insufficient CRO!\");\n        if (msg.value != _mintAmount * whitelistMintPrice)\n            revert InsufficientCRO(msg.value, _mintAmount * whitelistMintPrice);\n\n        // Check if mints does not exceed max wallet allowance for public sale\n        // require(\n        //     whitelistMintCount[msg.sender] + _mintAmount <= whitelistMintMaxPerWallet,\n        //     \"Planets: Wallet has already minted Max Amount for Whitelist Mint!\"\n        // );\n        if (whitelistMintCount[msg.sender] + _mintAmount > whitelistMintMaxPerWallet) revert ExceedMaxMintPerWallet();\n\n        whitelistMintCount[msg.sender] += _mintAmount;\n        currentSupply += _mintAmount;\n\n        for (uint256 i; i < _mintAmount; i++) {\n            _mintPlanet();\n        }\n        emit PrivateMint(msg.sender, _mintAmount);\n    }\n\n    /**\n     * @notice Public Mint\n     * @param _mintAmount Amount that is minted\n     */\n    function mint(uint256 _mintAmount) external payable onlyEOA ensureAvailabilityFor(_mintAmount) {\n        // Check if public sale is open\n        // require(stage == 2, \"Planets: Public Sale Closed!\");\n        if (stage != 2) revert InvalidStage(stage, 2);\n\n        // Check if enough ETH is sent\n        // require(msg.value == _mintAmount * publicMintPrice, \"Planets: Insufficient CRO!\");\n        if (msg.value != _mintAmount * publicMintPrice)\n            revert InsufficientCRO(msg.value, _mintAmount * publicMintPrice);\n        // Check if mints does not exceed total max supply\n\n        // require(totalSupply() + _mintAmount <= totalMaxSupply(), \"Planets: Max Supply for Public Mint Reached!\");\n        // if (totalSupply() + _mintAmount > totalMaxSupply()) revert ExceededMaxSupply();\n\n        publicMintCount[msg.sender] += _mintAmount;\n        currentSupply += _mintAmount;\n        for (uint256 i; i < _mintAmount; i++) {\n            _mintPlanet();\n        }\n\n        emit PublicMint(msg.sender, _mintAmount);\n    }\n\n    /**\n     * @notice Mint planet\n     * @dev Set initial planet level to 1 and random mint to msg.sender\n     */\n    function _mintPlanet() internal {\n        // Get next token Id\n        uint256 _tokenId = nextToken();\n        // Initialize planet\n        planets[_tokenId].level = 1;\n        // Mint planet\n        _safeMint(msg.sender, _tokenId);\n    }\n\n    // -------------------- ATLANTIS ADMIN FUNCTIONS ----------------------\n    /**\n     * @dev Set planet orbit\n     * @param _tokenIds Token ID of planets\n     * @param _backgrounds Backgrounds of planets\n     */\n    function setPlanetBackgrounds(\n        uint256[] calldata _tokenIds,\n        AtlantisLib.Background[] calldata _backgrounds\n    ) external onlyOwner {\n        if (stage != 3) revert InvalidStage(stage, 3);\n        // Loop through planet types and set planet type\n        for (uint256 i; i < _backgrounds.length; i++) {\n            planets[_tokenIds[i]].background = _backgrounds[i];\n        }\n    }\n\n    /**\n     * @dev Set planet orbit\n     * @param _tokenIds Token ID of planets\n     * @param _planetOrbitNames Orbit of planets\n     */\n\n    function setPlanetOrbitNames(\n        uint256[] calldata _tokenIds,\n        AtlantisLib.OrbitName[] calldata _planetOrbitNames\n    ) external onlyOwner {\n        if (stage != 3) revert InvalidStage(stage, 3);\n        // Loop through planet types and set planet type\n        for (uint256 i; i < _planetOrbitNames.length; i++) {\n            planets[_tokenIds[i]].orbitName = _planetOrbitNames[i];\n        }\n    }\n\n    /**\n     * @dev Set planet orbit\n     * @param _tokenIds Token ID of planets\n     * @param _planetOrbits Orbit of planets\n     */\n    function setPlanetOrbits(\n        uint256[] calldata _tokenIds,\n        AtlantisLib.Orbit[] calldata _planetOrbits\n    ) external onlyOwner {\n        if (stage != 3) revert InvalidStage(stage, 3);\n        // Loop through planet types and set planet type\n        for (uint256 i; i < _planetOrbits.length; i++) {\n            planets[_tokenIds[i]].orbit = _planetOrbits[i];\n        }\n    }\n\n    /**\n     * @dev Set planet element\n     * @param _tokenIds Token ID of planets\n     * @param _materialTypes Element of planets\n     */\n    function setPlanetElements(\n        uint256[] calldata _tokenIds,\n        AtlantisLib.Element[] calldata _materialTypes\n    ) external onlyOwner {\n        // Require stage 3\n        if (stage != 3) revert InvalidStage(stage, 3);\n        // Set planet type\n        for (uint256 i; i < _tokenIds.length; i++) {\n            planets[_tokenIds[i]].element = _materialTypes[i];\n        }\n    }\n\n    /**\n     * @notice Set level up material costs\n     * @param _data Material cost packed in bytes\n     * @dev _data is packed as follows:\n     *     Cumulative cost for each material tier for each planet type\n     *              | Common              | Uncommon            | Rare                | Epic\n     *              | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4\n     *     Level 1  | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000\n     *     ...\n     *     Level 50 | 0122 00af 00e1 0113 | 015c 00d2 010e 014a | 0196 00f5 013b 0181 | 01d0 0118 0168 01b8\n     */\n    function setLevelUpMaterial(bytes calldata _data) external onlyOwner {\n        // Require stage 3\n        if (stage != 3) revert InvalidStage(stage, 3);\n        levelUpMaterial = _data;\n    }\n\n    /**\n     * @dev Withdraw xARGO to treasury address\n     * @param _amount Amount of xARGO to withdraw\n     */\n    function withdrawXArgo(uint256 _amount) external onlyOwner {\n        IERC20(xARGO).transfer(treasury, _amount);\n    }\n\n    /**\n     * @dev Withdraw stardust to treasury address\n     * @param _amount Amount of stardust to withdraw\n     */\n    function withdrawStardust(uint256 _amount) external onlyOwner {\n        IERC20(stardust).transfer(treasury, _amount);\n    }\n\n    // Setters for base costs\n    /**\n     * @dev Set xArgo And Stardust base costs\n     * @param _xArgoBaseCost xArgo base cost\n     * @param _stardustBaseCost Stardust base cost\n     */\n    function setBaseCosts(uint256 _xArgoBaseCost, uint256 _stardustBaseCost) external onlyOwner {\n        xArgoBaseCost = _xArgoBaseCost;\n        stardustBaseCost = _stardustBaseCost;\n    }\n\n    // -------------------- WHITELIST FUNCTION ----------------------\n\n    /**\n     * @dev Checks if the the signature is signed by a valid signer for whitelist\n     * @param sender Address of minter\n     * @param nonce Random bytes32 nonce\n     * @param signature Signature generated off-chain\n     */\n    function whitelistSigned(address sender, bytes memory nonce, bytes memory signature) private view returns (bool) {\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce));\n        return whitelistSignerAddress == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\n    }\n\n    // ------------------------- ATLANTIS AUCTION FUNCTIONS ----------------------------\n    /**\n     * @dev Dev mint for epic planets\n     * @dev Only callable by the auction contract\n     * @dev Only callable ONCE\n     */\n    function epicMint(address[12] calldata _auctionWinners) external onlyAuctionContract {\n        require(totalSupply() == uint256(0), \"AtlantisPlanets: Epic mint over\");\n        require(_auctionWinners.length == 12, \"AtlantisPlanets: Invalid length\");\n        // Mint token Ids 1-12\n        for (uint256 i = 1; i < 13; i++) {\n            _safeMint(_auctionWinners[i - 1], i);\n        }\n    }\n\n    // ------------------------- ADMIN FUNCTIONS ----------------------------\n\n    /**\n     * @dev Set stage of minting\n     */\n    function setStage(uint8 _newStage) public onlyOwner {\n        stage = _newStage;\n    }\n\n    /**\n     * @dev Toggle Reveal\n     */\n    function toggleReveal() public onlyOwner {\n        revealed = !revealed;\n    }\n\n    /**\n     * @dev Set signer address for whitelist mint\n     */\n    function setWhitelistSignerAddress(address signer) public onlyOwner {\n        whitelistSignerAddress = signer;\n    }\n\n    /**\n     * @dev Set whitelist mint max per wallet\n     */\n    function setWhitelistMaxMintPerWallet(uint256 amount) public onlyOwner {\n        whitelistMintMaxPerWallet = amount;\n    }\n\n    /**\n     * @dev Set public mint price\n     */\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\n        publicMintPrice = _publicMintPrice;\n    }\n\n    /**\n     * @dev Set whitelist mint price\n     */\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\n        whitelistMintPrice = _whitelistMintPrice;\n    }\n\n    /**\n     * @dev Set Acution Contract\n     */\n    function setAuctionContract(address _auctionContract) public onlyOwner {\n        auctionContract = _auctionContract;\n    }\n\n    /**\n     * @notice Withdraw all CRO from this account to the owner\n     */\n    function withdrawFund() external onlyOwner {\n        (bool success, ) = payable(treasury).call{ value: address(this).balance }(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    /**\n     * @notice Sets the treasury address\n     */\n    function setTreasury(address _treasury) public onlyOwner {\n        treasury = _treasury;\n    }\n\n    /**\n     * @notice Set xArgo contract\n     */\n    function setxArgo(IERC20 _xArgo) external onlyOwner {\n        xARGO = _xArgo;\n    }\n\n    /**\n     * @notice Set Stardust contract\n     */\n    function setStardust(IERC20 _stardust) external onlyOwner {\n        stardust = _stardust;\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    /**\n     * @notice Returns if given tokenId exists in AtlantisPlanets\n     */\n    function exists(uint256 tokenId) external view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    // ------------------------- TOKEN METADATA ----------------------------\n\n    /**\n     * @notice Get ImageURI\n     */\n    function getImageURI(\n        AtlantisLib.Background background,\n        AtlantisLib.Element element,\n        AtlantisLib.OrbitName orbitName,\n        AtlantisLib.Evolution evo\n    ) internal view returns (string memory) {\n        if (!revealed) {\n            return unrevealedImageURI;\n        }\n        return\n            string(\n                abi.encodePacked(\n                    _baseURI(),\n                    Strings.toString(uint(background)),\n                    \"/\",\n                    Strings.toString(uint(element)),\n                    \"/\",\n                    Strings.toString(uint(orbitName)),\n                    \"/\",\n                    Strings.toString(uint(evo)),\n                    \".png\"\n                )\n            );\n    }\n\n    /**\n     * @notice Returns token metadata\n     * @dev Metadata is stored on-chain\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        // Get Planet\n        AtlantisLib.Planet memory planet = planets[tokenId];\n\n        // Get Tier from Level\n        (AtlantisLib.Evolution evo, string memory evoString) = _getPlanetEvolution(planet.level);\n\n        // Name\n        string memory json = string(abi.encodePacked('{\"name\": \"', name(), \"# \", tokenId.toString(), '\",'));\n\n        // Description\n        json = string(abi.encodePacked(json, '\"description\": \"AtlantisPlanets!\",'));\n\n        // Attributes\n        if (!revealed) {\n            json = string(abi.encodePacked(json, '\"attributes\": [],'));\n        } else {\n            json = string(\n                abi.encodePacked(\n                    json,\n                    '\"attributes\": [{\"trait_type\": \"Element\", \"value\": \"',\n                    AtlantisLib._planetElementToString(planet.element),\n                    '\"},',\n                    '{\"trait_type\": \"Background\", \"value\": \"',\n                    AtlantisLib._planetBackgroundToString(planet.background),\n                    '\"},',\n                    '{\"trait_type\": \"Orbit Name\", \"value\": \"',\n                    AtlantisLib._planetOrbitTypeToString(planet.orbitName),\n                    '\"},'\n                )\n            );\n            json = string(\n                abi.encodePacked(\n                    json,\n                    '{\"trait_type\": \"Orbit\", \"value\": \"',\n                    AtlantisLib._planetOrbitToString(planet.orbit),\n                    '\"},',\n                    '{\"trait_type\": \"Evolution\", \"value\": \"',\n                    evoString,\n                    '\"},',\n                    '{\"trait_type\": \"Level\", \"value\": \"',\n                    Strings.toString(planet.level),\n                    '\"}],'\n                )\n            );\n        }\n\n        json = Base64.encode(\n            bytes(\n                string(\n                    abi.encodePacked(\n                        json,\n                        '\"image\": \"',\n                        getImageURI(planet.background, planet.element, planet.orbitName, evo),\n                        '\"}'\n                    )\n                )\n            )\n        );\n        return string(abi.encodePacked(\"data:application/json;base64,\", json));\n    }\n}\n"
    },
    "contracts/AtlantisRacing.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./interface/IAtlantisSpaceships.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\n// TODO: Restructure Smart Contract\n/**\nReference: https://docs.soliditylang.org/en/v0.8.17/style-guide.html\nInside each contract, library or interface, use the following order:\n- Type declarations\n- State variables\n- Events\n- Modifiers\n- Functions\n\nFunctions should be Grouped according to:\n- constructor\n- receive function (if exists)\n- fallback function (if exists)\n- external\n- public\n- internal\n- private\n*/\n\n// TODO: Write AtlantisRacing Interface (IAtlantisRacing.sol)\n/**\n * Identify the exposed functions, including, but not limited to:\n * - stakeSpaceship\n * - stakeSpaceships\n * - unstakeSpaceship\n * - unstakeSpaceships\n * -\n */\n\n// TODO: Refactor internal function names, internal function names should start with \"_\" (underscore)\n\n// TODO: In general, we do not have to initialize zero values, as they are already zero by default\n\ncontract AtlantisRacing is Context, Ownable, IERC721Receiver {\n    /**\n        Events :O\n    */\n    event Stake(address indexed user, uint256 indexed tokenID, uint256 shipScore);\n    event Unstaked(address indexed user, uint256 indexed tokenID);\n    event Payout(address indexed user, uint256 goldAmount, uint256 stardustAmount);\n    event EmergencyWithdraw(address user, uint256 tokenID);\n    event EmergencyWithdrawStardust(uint256 amount);\n    event EmergencyWithdrawGold(uint256 amount);\n    event StakeArgonauts(address indexed user, uint256 poolId, uint256 indexed tokenID);\n    event UnstakeArgonauts(address indexed user, uint256 indexed tokenID, uint256 poolId);\n\n    /**\n        Structs\n    */\n\n    struct PoolInfo {\n        uint256 poolType;\n        uint256 stardustPerSecond;\n        uint256 lastRewardTime;\n        uint256 accStardustPerPoint;\n        uint256 totalPoints;\n        uint256 totalCount;\n    }\n\n    struct UserInfo {\n        uint256 totalGold;\n        uint256 totalStardust;\n        uint256[4] totalSpeeds;\n        uint256[4] rewardDebts;\n        uint256[] stakedSpaceships;\n    }\n\n    /**\n        Constructor (\\(T.T)/)\n    */\n\n    mapping(uint256 => PoolInfo) public poolInfo;\n    uint256 public seasonEndTime;\n    uint256 public totalStardustPerSecond;\n\n    IERC20 public gold;\n    IERC721 public argonauts;\n    IAtlantisSpaceships public spaceships;\n    IERC20 public stardust;\n    mapping(uint8 => uint256) public argonautMultiplier;\n    // mapping of address to poolId to argonauts staked\n    mapping(address => mapping(uint256 => uint256[])) argonautsStaked;\n    mapping(address => UserInfo) public userInfo;\n    uint256 internal amountOfPools = 4;\n    bool public seasonStarted = false;\n    uint256 public seasonStartTime;\n\n    constructor(address _spaceships, address _argonauts, uint256 _totalStardustPerSecond, uint256 _seasonEndTime) {\n        // Set total stardust per second\n        totalStardustPerSecond = _totalStardustPerSecond;\n        // Set spaceships contract\n        spaceships = IAtlantisSpaceships(_spaceships);\n        // Set argonauts contract\n        argonauts = IERC721(_argonauts);\n\n        // Global race pool, 15% of total\n        poolInfo[0].poolType = 0;\n        poolInfo[0].stardustPerSecond = (_totalStardustPerSecond * 15) / 100;\n        poolInfo[0].lastRewardTime = block.timestamp;\n        poolInfo[0].accStardustPerPoint = 0;\n        poolInfo[0].totalPoints = 0;\n        poolInfo[0].totalCount = 0;\n\n        // Common race pool, 40% of total\n        poolInfo[1].poolType = 1;\n        poolInfo[1].stardustPerSecond = (_totalStardustPerSecond * 40) / 100;\n        poolInfo[1].lastRewardTime = block.timestamp;\n        poolInfo[1].accStardustPerPoint = 0;\n        poolInfo[1].totalPoints = 0;\n        poolInfo[1].totalCount = 0;\n\n        // Uncommon race pool, 35% of total\n        poolInfo[2].poolType = 2;\n        poolInfo[2].stardustPerSecond = (_totalStardustPerSecond * 35) / 100;\n        poolInfo[2].lastRewardTime = block.timestamp;\n        poolInfo[2].accStardustPerPoint = 0;\n        poolInfo[2].totalPoints = 0;\n        poolInfo[2].totalCount = 0;\n\n        // Rare + Epic race pool, 10% of total\n        poolInfo[3].poolType = 3;\n        poolInfo[3].stardustPerSecond = (_totalStardustPerSecond * 10) / 100;\n        poolInfo[3].lastRewardTime = block.timestamp;\n        poolInfo[3].accStardustPerPoint = 0;\n        poolInfo[3].totalPoints = 0;\n        poolInfo[3].totalCount = 0;\n\n        // Scratch generation cut off date\n        seasonEndTime = _seasonEndTime;\n    }\n\n    /**\n        onlyOwner functions >:]\n    */\n    // TODO: Add natspec Docs\n    function setSpaceshipsContract(address _add) external onlyOwner {\n        require(_add != address(0), \"null addr\");\n        spaceships = IAtlantisSpaceships(_add);\n    }\n\n    // TODO: Add natspec Docs\n    function setArgonautsContract(address _add) external onlyOwner {\n        require(_add != address(0), \"null addr\");\n        argonauts = IERC721(_add);\n    }\n\n    // TODO: Add natspec Docs\n    function setStardustContract(address _add) external onlyOwner {\n        require(_add != address(0), \"null addr\");\n        stardust = IERC20(_add);\n    }\n\n    // TODO: Add natspec Docs\n    function setGoldContract(address _add) external onlyOwner {\n        require(_add != address(0), \"null addr\");\n        gold = IERC20(_add);\n    }\n\n    // TODO: Add natspec Docs\n    function setSeasonEndTime(uint256 _time) public onlyOwner {\n        seasonEndTime = _time;\n    }\n\n    /**\n     * @notice Set the multiplier for an argonaut\n     * @param _numNFTs The number of NFTs staked\n     * @param _multipliers The multiplier of the rewards\n     */\n    function setArgonautMultiplier(uint8[] memory _numNFTs, uint256[] memory _multipliers) external onlyOwner {\n        for (uint256 i; i < _numNFTs.length; i++) {\n            argonautMultiplier[_numNFTs[i]] = _multipliers[i];\n        }\n    }\n\n    // TODO: Add natspec Docs\n    function startSeason(bool _state) external onlyOwner {\n        uint256 currentTime = block.timestamp;\n        seasonStartTime = currentTime;\n        seasonStarted = _state;\n        massUpdatePools();\n    }\n\n    // TODO: Add natspec Docs\n    function retrieveStardust() public onlyOwner {\n        uint256 total = stardust.balanceOf(address(this));\n        stardust.transfer(msg.sender, total);\n        emit EmergencyWithdrawStardust(total);\n    }\n\n    // TODO: Add natspec Docs\n    function retrieveGold() public onlyOwner {\n        uint256 total = gold.balanceOf(address(this));\n        gold.transfer(msg.sender, total);\n        emit EmergencyWithdrawGold(total);\n    }\n\n    // TODO: Add natspec Docs\n    function adminUnstakeSpaceships(uint256 _id) public onlyOwner {\n        IERC721(address(spaceships)).safeTransferFrom(address(this), msg.sender, _id);\n        emit EmergencyWithdraw(msg.sender, _id);\n    }\n\n    // TODO: Add natspec Docs\n    function updatePool(uint256 _poolType) internal {\n        uint256 currentTime = block.timestamp;\n\n        // Check if season is over\n        if (seasonEndTime <= currentTime) {\n            currentTime = seasonEndTime;\n        }\n\n        // Update based on pool type\n        if (seasonStarted == true && poolInfo[_poolType].totalPoints > 0) {\n            uint256 stardustReward = (currentTime - poolInfo[_poolType].lastRewardTime) *\n                poolInfo[_poolType].stardustPerSecond;\n            poolInfo[_poolType].accStardustPerPoint += (stardustReward / poolInfo[_poolType].totalPoints);\n        }\n\n        poolInfo[_poolType].lastRewardTime = currentTime;\n    }\n\n    // TODO: Add natspec Docs\n    function massUpdatePools() internal {\n        for (uint256 i = 0; i < amountOfPools; i++) {\n            updatePool(i);\n        }\n    }\n\n    // TODO: Add natspec Docs\n    function stakeSpaceships(uint256[] memory _ids) public {\n        if (userInfo[msg.sender].totalSpeeds[0] > 0 && seasonStarted == true) {\n            massUpdatePools();\n            settlePendingStardust(msg.sender);\n        }\n\n        for (uint256 i = 0; i < _ids.length; i++) {\n            AtlantisLib.Rarity _type = spaceships.getRarity(_ids[i]);\n            console.log(\"Spaceship Type Before: \", uint256(_type));\n            // Convert spaceship type to uint256\n            uint256 _spaceshipType = uint256(_type) + 1;\n            // If spaceship type is 4, it is an epic and in same pool as rare, so we set it to 3\n            if (_spaceshipType == 4) {\n                _spaceshipType = 3;\n            }\n            uint256 _speed = spaceships.getSpeed(_ids[i], _type);\n            uint256 currentTime = block.timestamp;\n            require(currentTime < seasonEndTime, \"Must stake before season end\"); // TODO: Rewrite with custom error\n            require(_speed > 0, \"Spaceship must have more than 0 speed\"); // TODO: Rewrite with custom error\n\n            //Take Token and Transfer to Contract for Holding\n            IERC721(address(spaceships)).safeTransferFrom(msg.sender, address(this), _ids[i]);\n            // Increase to free pool and increase to protected pool\n            increasePoolAndUserStats(_speed, 0, msg.sender);\n            increasePoolAndUserStats(_speed, _spaceshipType, msg.sender);\n            userInfo[msg.sender].stakedSpaceships.push(_ids[i]);\n\n            emit Stake(msg.sender, _ids[i], _speed);\n        }\n\n        updateRewardDebts(msg.sender);\n    }\n\n    // TODO: Add natspec Docs\n    function unstakeSpaceships(uint256[] calldata spaceshipIndexes) public {\n        require(userInfo[msg.sender].stakedSpaceships.length >= spaceshipIndexes.length, \"Too many indexes\"); // TODO: Rewrite with custom error\n\n        uint256[] memory spaceshipIDs = new uint256[](spaceshipIndexes.length);\n\n        if (seasonStarted == true) {\n            massUpdatePools();\n            settlePendingStardust(msg.sender);\n        }\n\n        for (uint256 i = 0; i < spaceshipIndexes.length; i++) {\n            uint256 _id = userInfo[msg.sender].stakedSpaceships[spaceshipIndexes[i]];\n            spaceshipIDs[i] = _id;\n            uint256 _spaceshipRarity = uint256(spaceships.getRarity(_id));\n            uint256 _speed = spaceships.getSpeed(_id, spaceships.getRarity(_id));\n\n            // decrease for free pool and protected pool\n            decreasePoolAndUserStats(_speed, 0, msg.sender);\n            decreasePoolAndUserStats(_speed, _spaceshipRarity, msg.sender);\n\n            userInfo[msg.sender].stakedSpaceships[spaceshipIndexes[i]] = 0;\n\n            // transfer spaceship back to user\n            IERC721(address(spaceships)).safeTransferFrom(address(this), msg.sender, _id);\n            emit Unstaked(msg.sender, _id);\n        }\n\n        updateRewardDebts(msg.sender);\n\n        // remove all the 0s from the stakedSpaceships array and re initialise new staked spaceships array\n        uint256[] memory newstakedSpaceships = new uint256[](\n            userInfo[msg.sender].stakedSpaceships.length - spaceshipIndexes.length\n        );\n        uint256 index = 0;\n        // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n        for (uint256 i = 0; i < userInfo[msg.sender].stakedSpaceships.length; i++) {\n            if (userInfo[msg.sender].stakedSpaceships[i] != 0) {\n                newstakedSpaceships[index] = userInfo[msg.sender].stakedSpaceships[i];\n                index++;\n            }\n        }\n        userInfo[msg.sender].stakedSpaceships = newstakedSpaceships;\n    }\n\n    /**\n     * @notice Stake argonauts to multiply user's pool total speed according to argonautsMultiplier\n     * @param _poolId The pool id to stake argonauts to\n     * @param _ids The ids of the argonauts to stake\n     */\n    function stakeArgonauts(uint8 _poolId, uint256[] memory _ids) public {\n        require(userInfo[msg.sender].stakedSpaceships.length > 0, \"Must have staked spaceship\"); // TODO: Rewrite with custom error\n        uint8 currentArgonautsStaked = uint8(argonautsStaked[msg.sender][_poolId].length);\n        // Decrease user stats due to argonauts so that can recalculate with new argonauts\n        decreaseUserStats(argonautMultiplier[currentArgonautsStaked], msg.sender, _poolId);\n        for (uint256 i = 0; i < _ids.length; i++) {\n            // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n            // Require that length of argonauts[_pooLIds] is less than 5\n            require(argonautsStaked[msg.sender][_poolId].length < 5, \"Cannot stake more than 5 argonauts per pool\");\n            argonautsStaked[msg.sender][_poolId].push(_ids[i]);\n            //Take Token and Transfer to Contract for Holding\n            IERC721(address(argonauts)).safeTransferFrom(msg.sender, address(this), _ids[i]);\n            emit StakeArgonauts(msg.sender, _poolId, _ids[i]);\n        }\n\n        // Increase user stats due to argonauts\n        increaseUserStats(\n            argonautMultiplier[uint8(argonautsStaked[msg.sender][_poolId].length - 1)],\n            msg.sender,\n            _poolId\n        );\n\n        // Update pool stats\n        updatePool(_poolId);\n        // Update reward debts\n        updateRewardDebts(msg.sender);\n    }\n\n    // Unstakes argonauts and decreases user stats\n    // TODO: Add natspec Docs\n    function unstakeArgonauts(uint256 _poolId, uint256[] memory _indexes) public {\n        require(argonautsStaked[msg.sender][_poolId].length > 0, \"Must have staked argonauts\");\n        require(_indexes.length <= argonautsStaked[msg.sender][_poolId].length, \"Too many indexes\");\n\n        // Decrease user stats due to argonauts\n        decreaseUserStats(\n            argonautMultiplier[uint8(argonautsStaked[msg.sender][_poolId].length - 1)],\n            msg.sender,\n            _poolId\n        );\n\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n            uint256 _id = argonautsStaked[msg.sender][_poolId][_indexes[i]];\n            // transfer argonaut back to user\n            IERC721(address(argonauts)).safeTransferFrom(address(this), msg.sender, _id);\n            emit UnstakeArgonauts(msg.sender, _poolId, _id);\n            argonautsStaked[msg.sender][_poolId][_indexes[i]] = 0;\n        }\n\n        // remove all the 0s from the argonauts array and re initialise new argonauts array\n        uint256[] memory newArgonauts = new uint256[](argonautsStaked[msg.sender][_poolId].length - _indexes.length);\n        uint256 index = 0;\n        for (uint256 i = 0; i < argonautsStaked[msg.sender][_poolId].length; i++) {\n            // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n            if (argonautsStaked[msg.sender][_poolId][i] != 0) {\n                newArgonauts[index] = argonautsStaked[msg.sender][_poolId][i];\n                index++;\n            }\n        }\n        argonautsStaked[msg.sender][_poolId] = newArgonauts;\n\n        // Increase user stats due to argonauts\n        increaseUserStats(\n            argonautMultiplier[uint8(argonautsStaked[msg.sender][_poolId].length - 1)],\n            msg.sender,\n            _poolId\n        );\n\n        // Update pool stats\n        updatePool(_poolId);\n        // Update reward debts\n        updateRewardDebts(msg.sender);\n    }\n\n    // TODO: Add natspec Docs\n    function increasePoolAndUserStats(uint256 _speed, uint256 _poolType, address _user) internal {\n        poolInfo[_poolType].totalPoints += _speed;\n        poolInfo[_poolType].totalCount++;\n        userInfo[_user].totalSpeeds[_poolType] += _speed;\n    }\n\n    // TODO: Add natspec Docs\n    function decreasePoolAndUserStats(uint256 _speed, uint256 _poolType, address _user) internal {\n        poolInfo[_poolType].totalPoints -= _speed;\n        poolInfo[_poolType].totalCount--;\n        userInfo[_user].totalSpeeds[_poolType] -= _speed;\n    }\n\n    // Increase user stats due to argonauts\n    // TODO: Add natspec Docs\n    function increaseUserStats(uint256 _multiplier, address _user, uint256 _poolId) internal {\n        userInfo[_user].totalSpeeds[_poolId] *= _multiplier;\n        poolInfo[_poolId].totalPoints += userInfo[_user].totalSpeeds[_poolId];\n    }\n\n    // Decrease user stats due to argonauts\n    // TODO: Add natspec Docs\n    function decreaseUserStats(uint256 _multiplier, address _user, uint256 _poolId) internal {\n        userInfo[_user].totalSpeeds[_poolId] /= _multiplier;\n        poolInfo[_poolId].totalPoints -= userInfo[_user].totalSpeeds[_poolId];\n    }\n\n    // TODO: Add natspec Docs\n    function updateRewardDebts(address _user) internal {\n        // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n        for (uint256 i = 0; i < amountOfPools; i++) {\n            uint256 rewardDebt = userInfo[_user].totalSpeeds[i] * poolInfo[i].accStardustPerPoint;\n            userInfo[_user].rewardDebts[i] = rewardDebt;\n        }\n    }\n\n    // TODO: might not need\n    function settlePendingStardust(address _user) internal {\n        UserInfo memory user = userInfo[_user];\n        uint256 total;\n        // Calculate Owed\n        // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n        for (uint256 i = 0; i < amountOfPools; i++) {\n            uint256 accStardust = user.totalSpeeds[i] * poolInfo[i].accStardustPerPoint;\n            console.log(\"accStardust: %s\", accStardust);\n            uint256 pending = accStardust - user.rewardDebts[i];\n            console.log(\"pending: %s\", pending);\n            total += pending;\n        }\n\n        // Split total into 80% stardust, 20% gold\n        uint256 stardustAmount = (total * 80) / 100;\n        uint256 goldAmount = total - stardustAmount;\n        stardust.transfer(_user, stardustAmount);\n\n        gold.transfer(_user, goldAmount);\n\n        userInfo[_user].totalGold += goldAmount;\n        userInfo[_user].totalStardust += stardustAmount;\n\n        emit Payout(_user, goldAmount, stardustAmount);\n    }\n\n    // TODO: Add natspec Docs\n    function getRewards() public {\n        // TODO: Optimize: Refactor with custom error\n        require(seasonStarted == true, \"Must wait until season has started\");\n        massUpdatePools();\n        settlePendingStardust(msg.sender);\n        updateRewardDebts(msg.sender);\n    }\n\n    // TODO: Add natspec Docs\n    function viewRewards(address _user) external view returns (uint256[4] memory) {\n        UserInfo memory user = userInfo[_user];\n        uint256[4] memory rewards;\n\n        if (seasonStarted == true) {\n            uint256 currentTime = block.timestamp;\n            if (currentTime > seasonEndTime) {\n                currentTime = seasonEndTime;\n            }\n            // TODO: `uint256 i` is more optimized than `uint256 i = 0`\n            for (uint256 i = 0; i < amountOfPools; i++) {\n                PoolInfo memory pool = poolInfo[i];\n                if (pool.totalPoints == 0) {\n                    rewards[i] = 0;\n                } else {\n                    uint256 accStardustPerPoint = pool.accStardustPerPoint;\n                    uint256 multiplier = currentTime - pool.lastRewardTime;\n                    uint256 stardustReward = multiplier * pool.stardustPerSecond;\n                    accStardustPerPoint += (stardustReward / pool.totalPoints);\n                    uint256 accStardust = user.totalSpeeds[i] * accStardustPerPoint;\n                    uint256 pending = accStardust - user.rewardDebts[i];\n                    rewards[i] = pending;\n                }\n            }\n        }\n\n        return rewards;\n    }\n\n    /**\n        View functions O.O\n    */\n    // TODO: Add natspec Docs\n    function viewUserInfo(address _user) public view returns (UserInfo memory) {\n        // Get userinfo memory\n        UserInfo memory user = userInfo[_user];\n        return user;\n    }\n\n    // TODO: Add natspec Docs\n    function viewPoolInfo(uint256 _poolType) public view returns (PoolInfo memory) {\n        return poolInfo[_poolType];\n    }\n\n    // Able to recieve ERC721\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/AtlantisSpaceships.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./common/RandomlyAssigned.sol\";\nimport \"./common/WithLimitedSupply.sol\";\nimport \"./interface/IAtlantisSpaceships.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./interface/IAtlantisComponents.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./common/Base64.sol\";\n// import console log\nimport \"hardhat/console.sol\"; // TODO: Remove in production\n\n/// @title Atlantis Spaceships Mint Contract\ncontract AtlantisSpaceships is ERC721, Ownable, IAtlantisSpaceships, RandomlyAssigned, IERC1155Receiver {\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    string public baseURI;\n\n    uint256 currentSupply;\n    // General Mint Settings\n    // Public Sale Mint Settings\n    uint256 public publicMintPrice = 0 ether;\n    uint256 public publicMintMaxPerWallet = type(uint256).max;\n    mapping(address => uint256) public publicMintCount;\n\n    // Treasury\n    address public treasury;\n\n    // Events\n    // Equip event\n    event EquipmentModified(\n        uint256 indexed spaceshipId,\n        uint256 fireComponentId,\n        uint256 lightningComponentId,\n        uint256 steelComponentId\n    );\n    event PublicMint(address indexed to, uint256 amount);\n    event WithdrawETH(uint256 amountWithdrawn);\n    event PublicSaleOpened(bool status, uint256 timestamp);\n\n    // Atlantis\n    IAtlantisComponents public components;\n    uint8[] public componentsSpeedMultiplier;\n    // Mapping of spaceshipIDs to spaceships\n    mapping(uint256 => Spaceship) public spaceships;\n\n    constructor(\n        address _owner,\n        string memory __baseURI,\n        address _components\n    ) ERC721(\"Atlantis Spaceships\", \"SPACESHIPS\") RandomlyAssigned(4000, 1) {\n        setTreasury(_owner);\n        setBaseURI(__baseURI);\n        transferOwnership(_owner);\n        components = IAtlantisComponents(_components);\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    // -------------------- ATLANTIS FUNCTIONS --------------------------\n    /** Token Ids\n     * 1 2 3 Fire Lightning Steel Component Level 1\n     * 4 5 6 Fire Lightning Steel Component Level 2\n     * 7 8 9 Fire Lightning Steel Component Level 3\n     * 10 11 12 Fire Lightning Steel Component Level 4\n     * 13 14 15 Fire Lightning Steel Component Level 5\n     * 16 17 18 Fire Lightning Steel Component Level 6\n     * 19 20 21 Fire Lightning Steel Component Level 7\n     * 22 23 24 Fire Lightning Steel Component Level 8\n     * 25 26 27 Fire Lightning Steel Component Level 9\n     * 28 29 30 Fire Lightning Steel Component Level 10\n     */\n\n    function modifyEquipment(\n        uint256 _spaceshipId,\n        uint256 _fireComponentId,\n        uint256 _lightningComponentId,\n        uint256 _steelComponentId\n    ) external {\n        // Check if the spaceship is owned by the caller if not throw notOwner error\n        if (ownerOf(_spaceshipId) != msg.sender) {\n            revert NotOwner();\n        }\n        // Get spaceship\n        Spaceship storage spaceship = spaceships[_spaceshipId];\n\n        // Save the componentId into if it is not zero\n        uint256 _oldFireId = spaceship.fireComponentId;\n        uint256 _oldLightningId = spaceship.lightningComponentId;\n        uint256 _oldSteelId = spaceship.steelComponentId;\n\n        // Set spaceship components to new components\n        spaceship.fireComponentId = _fireComponentId;\n        spaceship.lightningComponentId = _lightningComponentId;\n        spaceship.steelComponentId = _steelComponentId;\n\n        // Fire\n        _equipHelper(_oldFireId, _fireComponentId, 1);\n        // Lightning\n        _equipHelper(_oldLightningId, _lightningComponentId, 2);\n        // Steel\n        _equipHelper(_oldSteelId, _steelComponentId, 0);\n\n        // Emit event\n        emit EquipmentModified(_spaceshipId, _fireComponentId, _lightningComponentId, _steelComponentId);\n    }\n\n    // Function to handle oldid and newid\n    function _equipHelper(uint256 _oldId, uint256 _newId, uint8 _element) internal {\n        // Do nothing if oldId and newId are the same\n        if (_oldId == _newId) {\n            return;\n        }\n        // Check that newId is the correct element if not throw wrongelement\n        if (_newId != 0 && components.getElement(_newId) != _element) {\n            revert WrongElement();\n        }\n        // Check if oldId is not zero\n        if (_oldId != 0) {\n            // Transfer oldId to owner\n            IERC1155(address(components)).safeTransferFrom(address(this), msg.sender, _oldId, 1, \"\");\n        }\n        // Check if newId is not zero\n        if (_newId != 0) {\n            // Transfer newId to contract\n            IERC1155(address(components)).safeTransferFrom(msg.sender, address(this), _newId, 1, \"\");\n        }\n        return;\n    }\n\n    // Get spaceship\n    /**\n     * @dev Get details of a spaceship from its id\n     * @param _tokenId Token ID of spaceship\n     */\n    function getSpaceship(uint256 _tokenId) external view returns (Spaceship memory) {\n        return spaceships[_tokenId];\n    }\n\n    /**\n     * @dev Get speed of a spaceship from its id\n     * @param _tokenId Token ID of spaceship\n     */\n\n    // TODO: Remove _rarity as parameter, rarity should be retrieved from spaceship internally\n    function getSpeed(uint256 _tokenId, AtlantisLib.Rarity _rarity) public view returns (uint256) {\n        // Get spaceship\n        Spaceship memory spaceship = spaceships[_tokenId];\n        uint16 fireSpeed = components.getSpeed(spaceship.fireComponentId);\n        uint16 lightningSpeed = components.getSpeed(spaceship.lightningComponentId);\n        uint16 steelSpeed = components.getSpeed(spaceship.steelComponentId);\n\n        return (uint16(_rarity) + 1) * (fireSpeed + lightningSpeed + steelSpeed + 1);\n    }\n\n    /**\n     * @dev Get rarity of a spaceship from its id\n     * @param _tokenId Token ID of spaceship\n     */\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity) {\n        // Get spaceship\n        Spaceship memory spaceship = spaceships[_tokenId];\n        return spaceship.rarity;\n    }\n\n    // Set spaceship rarity\n\n    // TODO: Add natspec Docs\n    function setSpaceshipRarity(\n        uint256[] calldata _tokenIds,\n        AtlantisLib.Rarity[] calldata _rarity\n    ) external onlyOwner {\n        // Loop through planet types and set planet type\n        for (uint256 i; i < _rarity.length; i++) {\n            spaceships[_tokenIds[i]].rarity = _rarity[i];\n        }\n    }\n\n    // -------------------- ATLANTIS METADATA FUNCTIONS --------------------------\n\n    /**\n     * @notice Returns planet orbit as string\n     */\n    function _spaceshipRarityToString(AtlantisLib.Rarity _rarity) internal pure returns (string memory) {\n        if (_rarity == AtlantisLib.Rarity.COMMON) {\n            return \"Common\";\n        } else if (_rarity == AtlantisLib.Rarity.UNCOMMON) {\n            return \"Uncommon\";\n        } else if (_rarity == AtlantisLib.Rarity.RARE) {\n            return \"Rare\";\n        } else if (_rarity == AtlantisLib.Rarity.EPIC) {\n            return \"Epic\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * @notice Get ImageURI\n     */\n    function getImageURI(\n        AtlantisLib.Rarity _rarity,\n        uint8 _lightningLevel,\n        uint8 _fireLevel,\n        uint8 _steelLevel\n    ) internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    _baseURI(),\n                    uint256(_rarity).toString(),\n                    \"/\",\n                    uint256(_lightningLevel).toString(),\n                    \"/\",\n                    uint256(_fireLevel).toString(),\n                    \"/\",\n                    uint256(_steelLevel).toString(),\n                    \".png\"\n                )\n            );\n    }\n\n    /**\n     * @notice Returns token metadata\n     * @dev Metadata is stored on-chain\n     */\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\n        // Get Spaceship\n        Spaceship memory spaceship = spaceships[_tokenId];\n\n        // Get rarity\n        AtlantisLib.Rarity rarity = spaceship.rarity;\n\n        // Name\n        string memory json = string(abi.encodePacked('{\"name\": \"', name(), \" #\", _tokenId.toString(), '\",'));\n\n        uint8 lightningLevel = components.getLevel(spaceship.lightningComponentId);\n        uint8 fireLevel = components.getLevel(spaceship.fireComponentId);\n        uint8 steelLevel = components.getLevel(spaceship.steelComponentId);\n\n        string memory lightningString = lightningLevel != 0 ? uint256(lightningLevel).toString() : \"Unequipped\";\n        string memory fireString = fireLevel != 0 ? uint256(fireLevel).toString() : \"Unequipped\";\n        string memory steelString = steelLevel != 0 ? uint256(steelLevel).toString() : \"Unequipped\";\n        // Description\n        json = string(abi.encodePacked(json, '\"description\": \"AtlantisSpaceships!\",'));\n\n        // Attributes\n        json = string(\n            abi.encodePacked(\n                json,\n                '\"attributes\": [{\"trait_type\": \"Rarity\", \"value\": \"',\n                _spaceshipRarityToString(rarity),\n                '\"},',\n                '{\"trait_type\": \"Thunderbolt Wings Level\", \"value\": \"',\n                lightningString,\n                '\"},',\n                '{\"trait_type\": \"Inferno Thrusters Level\", \"value\": \"',\n                fireString,\n                '\"},',\n                '{\"trait_type\": \"Argonium Exoshell Level\", \"value\": \"',\n                steelString,\n                '\"},'\n            )\n        );\n\n        json = string(\n            abi.encodePacked(\n                json,\n                '{\"trait_type\": \"Speed\", \"value\": \"',\n                uint256(getSpeed(_tokenId, rarity)).toString(),\n                '\"}],'\n            )\n        );\n\n        json = Base64.encode(\n            bytes(\n                string(\n                    abi.encodePacked(\n                        json,\n                        '\"image\": \"',\n                        getImageURI(rarity, lightningLevel, fireLevel, steelLevel),\n                        '\"}'\n                    )\n                )\n            )\n        );\n        return string(abi.encodePacked(\"data:application/json;base64,\", json));\n    }\n\n    // -------------------- MINT FUNCTIONS --------------------------\n\n    /**\n     * @notice Public Mint\n     * @param _mintAmount Amount that is minted\n     */\n    function mint(address _address, uint256 _mintAmount) public payable ensureAvailabilityFor(_mintAmount) onlyOwner {\n        // Check if enough ETH is sent\n        require(msg.value == _mintAmount * publicMintPrice, \"AtlantisSpaceships: Insufficient CRO!\");\n\n        // Check if mints does not exceed total max supply\n        require(\n            totalSupply() + _mintAmount <= totalMaxSupply(),\n            \"AtlantisSpaceships: Max Supply for Public Mint Reached!\"\n        );\n\n        publicMintCount[_address] += _mintAmount;\n        currentSupply += _mintAmount;\n\n        for (uint256 i; i < _mintAmount; i++) {\n            _safeMint(_address, nextToken());\n        }\n\n        emit PublicMint(_address, _mintAmount);\n    }\n\n    /**\n     * @notice Airdrop multiple nfts to multiple addresses\n     * @param _addresses All addresses that will receive nfts\n     * @param _mintAmount Amount of nfts that will be minted for each address\n     */\n    function airdrop(address[] calldata _addresses, uint256[] calldata _mintAmount) external onlyOwner {\n        for (uint256 i; i < _addresses.length; i++) {\n            mint(_addresses[i], _mintAmount[i]);\n        }\n    }\n\n    // ------------------------- OWNER FUNCTIONS ----------------------------\n    /**\n     * @dev Set Revealed Metadata URI\n     */\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    /**\n     * @dev Set public mint price\n     */\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\n        publicMintPrice = _publicMintPrice;\n    }\n\n    /**\n     * @notice Withdraw all ETH from this account to the owner\n     */\n    function withdrawFund() external onlyOwner {\n        (bool success, ) = payable(treasury).call{ value: address(this).balance }(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    /**\n     * @notice Sets the treasury address\n     */\n    function setTreasury(address _treasury) public onlyOwner {\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    // TODO: Add Docs\n    function exists(uint256 tokenId) external view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    // TODO: Add Docs\n    function totalSupply() public view returns (uint256) {\n        return currentSupply;\n    }\n}\n"
    },
    "contracts/common/AtlantisLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary AtlantisLib {\n    enum Orbit {\n        COMMON,\n        UNCOMMON,\n        RARE,\n        EPIC\n    }\n\n    enum OrbitName {\n        HALO_RING,\n        PANDORA,\n        ATLAS,\n        METIS,\n        ENTWINED,\n        RAINBOW_CLOUDS,\n        GALATICA,\n        ASTEROIDS,\n        INTERSTELLAR_PINK,\n        INTERSTELLAR_GRADIENT\n    }\n\n    enum Background {\n        PURPLE_HUES,\n        BROWN_HUES,\n        WAVY,\n        SHOOTING_STARS\n    }\n\n    enum Evolution {\n        BABY, // 1-9\n        ROOKIE, // 10-19\n        CHAMPION, // 20-29\n        ULTIMATE, // 30-39\n        MEGA // 40-50\n    }\n    enum Element {\n        FIRE,\n        LIGHTNING,\n        STEEL\n    }\n    struct Planet {\n        uint8 level; // Max Level: 50\n        Element element;\n        Orbit orbit;\n        OrbitName orbitName;\n        Background background;\n        bool onExpedition;\n    }\n\n    enum Rarity {\n        COMMON,\n        UNCOMMON,\n        RARE,\n        EPIC\n    }\n\n    /**\n     * @notice Returns planet element as string\n     */\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\n        if (element == AtlantisLib.Element.FIRE) {\n            return \"Fire\";\n        } else if (element == AtlantisLib.Element.STEEL) {\n            return \"Steel\";\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\n            return \"Lightning\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * @notice Returns planet orbit as string\n     */\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\n        if (orbit == AtlantisLib.Orbit.COMMON) {\n            return \"Common\";\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\n            return \"Uncommon\";\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\n            return \"Rare\";\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\n            return \"Epic\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * @notice Returns planet orbit as string\n     */\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\n            return \"Halo Ring\";\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\n            return \"Pandora\";\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\n            return \"Atlas\";\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\n            return \"Metis\";\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\n            return \"Entwined\";\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\n            return \"Rainbow Clouds\";\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\n            return \"Galatica\";\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\n            return \"Asteroids\";\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\n            return \"Interstellar Pink\";\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\n            return \"Interstellar Gradient\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * @notice Returns planet orbit as string\n     */\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\n            return \"Purple Hues\";\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\n            return \"Brown Hues\";\n        } else if (background == AtlantisLib.Background.WAVY) {\n            return \"Wavy\";\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\n            return \"Shooting Stars\";\n        } else {\n            return \"\";\n        }\n    }\n}\n"
    },
    "contracts/common/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/common/RandomlyAssigned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./WithLimitedSupply.sol\";\n\n/// @author 1001.digital\n/// @title Randomly assign tokenIDs from a given set of tokens (PSEUDORANDOM).\nabstract contract RandomlyAssigned is WithLimitedSupply {\n    // Used for random index assignment\n    mapping(uint256 => uint256) private tokenMatrix;\n\n    // The initial token ID\n    uint256 private startFrom;\n\n    /// Instantiate the contract\n    /// @param _totalMaxSupply how many tokens this collection should hold\n    /// @param _startFrom the tokenID with which to start counting\n    constructor(uint256 _totalMaxSupply, uint256 _startFrom)\n        WithLimitedSupply(_totalMaxSupply)\n    {\n        startFrom = _startFrom;\n    }\n\n    /// Get the next token ID\n    /// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\n    /// @return the next token ID\n    function nextToken()\n        internal\n        override\n        ensureAvailability\n        returns (uint256)\n    {\n        uint256 maxIndex = totalMaxSupply() - tokenCount();\n        uint256 random = uint256(\n            keccak256(\n                abi.encodePacked(\n                    msg.sender,\n                    block.coinbase,\n                    block.difficulty,\n                    block.gaslimit,\n                    block.timestamp\n                )\n            )\n        ) % maxIndex;\n\n        uint256 value = 0;\n        if (tokenMatrix[random] == 0) {\n            // If this matrix position is empty, set the value to the generated random number.\n            value = random;\n        } else {\n            // Otherwise, use the previously stored number from the matrix.\n            value = tokenMatrix[random];\n        }\n\n        // If the last available tokenID is still unused...\n        if (tokenMatrix[maxIndex - 1] == 0) {\n            // ...store that ID in the current matrix position.\n            tokenMatrix[random] = maxIndex - 1;\n        } else {\n            // ...otherwise copy over the stored number to the current matrix position.\n            tokenMatrix[random] = tokenMatrix[maxIndex - 1];\n        }\n\n        // Increment counts\n        super.nextToken();\n\n        return value + startFrom;\n    }\n}\n"
    },
    "contracts/common/WithLimitedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\nabstract contract WithLimitedSupply {\n    using Counters for Counters.Counter;\n\n    /// @dev Emitted when the supply of this collection changes\n    event SupplyChanged(uint256 supply);\n\n    // Keeps track of how many we have minted\n    Counters.Counter private _tokenCount;\n\n    /// @dev The maximum count of tokens this token tracker will hold.\n    uint256 private _totalMaxSupply;\n\n    /// Instanciate the contract\n    /// @param totalMaxSupply_ how many tokens this collection should hold\n    constructor(uint256 totalMaxSupply_) {\n        _totalMaxSupply = totalMaxSupply_;\n    }\n\n    /// @dev Get the max Supply\n    /// @return the maximum token count\n    function totalMaxSupply() public view virtual returns (uint256) {\n        return _totalMaxSupply;\n    }\n\n    /// @dev Get the current token count\n    /// @return the created token count\n    function tokenCount() public view returns (uint256) {\n        return _tokenCount.current();\n    }\n\n    /// @dev Check whether tokens are still available\n    /// @return the available token count\n    function availableTokenCount() public view returns (uint256) {\n        return totalMaxSupply() - tokenCount();\n    }\n\n    /// @dev Increment the token count and fetch the latest count\n    /// @return the next token id\n    function nextToken() internal virtual returns (uint256) {\n        uint256 token = _tokenCount.current();\n\n        _tokenCount.increment();\n\n        return token;\n    }\n\n    /// @dev Check whether another token is still available\n    modifier ensureAvailability() {\n        require(availableTokenCount() > 0, \"No more tokens available\");\n        _;\n    }\n\n    /// @param amount Check whether number of tokens are still available\n    /// @dev Check whether tokens are still available\n    modifier ensureAvailabilityFor(uint256 amount) {\n        require(availableTokenCount() >= amount, \"Requested number of tokens not available\");\n        _;\n    }\n}\n"
    },
    "contracts/interface/IAtlantis.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IAtlantisMaterials } from \"./IAtlantisMaterials.sol\";\nimport { IAtlantisPlanets } from \"./IAtlantisPlanets.sol\";\nimport { AtlantisLib } from \"../common/AtlantisLib.sol\";\n\ninterface IAtlantis {\n    /**\n     * The nft staked must belong to an approved collection\n     */\n    error NFTCollectionNotWhitelisted();\n\n    /**\n     * The length of tokenIds should not be 0\n     */\n    error TokenIdInputEmpty();\n\n    /**\n     * The length of tokenIds and collectionAddress must be the same\n     */\n    error ArrayLengthMismatch();\n\n    /**\n     * Expeditton in progress\n     */\n    error ExpeditionInProgress();\n\n    /**\n     * Not the owner of the expedition\n     */\n    error NotOwnerOfExpedition();\n\n    /**\n     * Expedition already ended\n     */\n    error ExpeditionAlreadyEnded();\n\n    error InvalidExpeditionInput();\n\n    error InvalidSetMaterialRateInput();\n    error InvalidSetNFTMaterialMultiplierInput();\n    error InvalidSetRarityMultiplierInput();\n    // Expedition struct\n    struct Expedition {\n        address[] collectionAddresses;\n        uint256[] tokenIds;\n        uint256 id;\n        uint256 planetId;\n        uint256 startTime;\n        uint256 endTime;\n        address owner;\n        bool hasEnded;\n    }\n\n    function startExpedition(\n        uint256 _planetId,\n        address[] memory _collectionAddresses,\n        uint256[] memory _tokenIds\n    ) external;\n\n    function endExpedition(uint256 _expeditionId) external;\n\n    function endExpeditions(uint256[] memory _expeditionIds) external;\n\n    function claimReward(uint256 _expeditionId) external;\n\n    function claimRewards(uint256[] memory _expeditionIds) external;\n\n    function getExpeditionInfo(uint256 _expeditionId) external view returns (Expedition memory);\n\n    function setExpeditionDuration(uint256 _duration) external;\n\n    function setStardust(IERC20 _stardust) external;\n\n    function setAtlantisMaterials(IAtlantisMaterials _atlantisMaterials) external;\n\n    function setAtlantisPlanets(IAtlantisPlanets _atlantisPlanets) external;\n}\n"
    },
    "contracts/interface/IAtlantisComponents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface IAtlantisComponents {\n    function fuseComponent(uint256 _id, uint16 _amountToCreate) external;\n\n    function calculateFusionCost(uint256 _id, uint16 _amountToCreate) external view returns (uint256);\n\n    function fuseComponentsView(uint256 _id, uint16 _amountToCreate) external view returns (uint16);\n\n    function getLevel(uint256 _id) external pure returns (uint8);\n\n    function getSpeed(uint256 _id) external view returns (uint16);\n\n    function setStardustCosts(uint256[] calldata _stardustCost) external;\n\n    function getElement(uint256 _id) external pure returns (uint8);\n}\n"
    },
    "contracts/interface/IAtlantisMaterials.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IAtlantisMaterials is IERC1155 {\n    error NonExistentToken();\n    error OnlyAtlantisContractsAllowed();\n    error InvalidInputAmount();\n    error InvalidElement();\n    error InvalidUpgrade();\n\n    function fuseMaterials(uint8 _id, uint8 _toId, uint256 _amountToCreate) external;\n\n    function burn(address _user, uint256 _id, uint256 _quantity) external;\n\n    function mint(address _to, uint256 _id, uint256 _quantity) external;\n\n    function setStardust(IERC20 _stardust) external;\n\n    function setAtlantisContracts(address[] calldata _contracts) external;\n}\n"
    },
    "contracts/interface/IAtlantisPlanets.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// Import AtlantisLib\nimport { AtlantisLib } from \"../common/AtlantisLib.sol\";\n\ninterface IAtlantisPlanets is IERC721 {\n    error AuctionSettled();\n\n    /**\n     * The signature must be by the correct signer\n     */\n    error InvalidSignature();\n\n    /**\n     * The minting stage must be correct\n     */\n    error InvalidStage(uint8 currentStage, uint8 requiredStage);\n\n    /**\n     * The collection has exceeded the max supply\n     */\n    error ExceededMaxSupply();\n\n    /**\n     * The user has exceeded allowed mint count\n     */\n    error ExceedMaxMintPerWallet();\n\n    /**\n     * The planet has exceeded the max level\n     */\n    error ExceededMaxLevel();\n\n    /**\n     * Error thrown when user queries an unknown OrbitId\n     */\n    error UnknownOrbit();\n\n    /**\n     * Error thrown when user queries an unknown ElementId\n     */\n    error UnknownElement();\n\n    /**\n     * Error thrown when user queries an unknown PlanetId\n     */\n    error InvalidUpgradeLevel(uint8 currentLevel, uint8 newLevel);\n    /**\n     * User is not the owner of planet\n     */\n    error NotOwnerOfPlanet();\n\n    error InsufficientCRO(uint256 amountPaid, uint256 amountRequired);\n\n    error InvalidInput();\n\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external;\n\n    function getUpgradeCosts(\n        uint256 _tokenId,\n        uint8 _levels\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory materialRequirements);\n\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory);\n\n    function setPlanetElements(uint256[] memory _tokenIds, AtlantisLib.Element[] memory _materialType) external;\n\n    function setPlanetOrbits(uint256[] memory _tokenIds, AtlantisLib.Orbit[] memory _planetsOrbit) external;\n}\n"
    },
    "contracts/interface/IAtlantisSpaceships.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport { AtlantisLib } from \"../common/AtlantisLib.sol\";\n\ninterface IAtlantisSpaceships {\n    error NotOwner();\n    error WrongElement();\n\n    struct Spaceship {\n        AtlantisLib.Rarity rarity;\n        uint256 fireComponentId;\n        uint256 lightningComponentId;\n        uint256 steelComponentId;\n    }\n\n    function modifyEquipment(\n        uint256 _spaceshipId,\n        uint256 _fireComponentId,\n        uint256 _lightningComponentId,\n        uint256 _steelComponentId\n    ) external;\n\n    function getSpaceship(uint256 _tokenId) external view returns (Spaceship memory);\n\n    function getSpeed(uint256 _tokenId, AtlantisLib.Rarity _rarity) external view returns (uint256);\n\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity);\n}\n"
    },
    "contracts/interface/IStakingWithLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\n\ninterface IStakingWithLock {\n     function unstakeAndBurn(uint256 _amount) external;\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}