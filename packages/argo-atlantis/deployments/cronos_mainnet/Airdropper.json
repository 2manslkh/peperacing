{
  "address": "0x3eB203a02388bDC7AB3962Fe98B1FE6AE46d8A1f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdropERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdropERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "airdropERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdropETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81093458b965fef3a89f2a234fafdeab249c1af01d789b1571c5a42c4bfc020c",
  "receipt": {
    "to": null,
    "from": "0x50222650944C3641e532f2633A259e681FD2eEEf",
    "contractAddress": "0x3eB203a02388bDC7AB3962Fe98B1FE6AE46d8A1f",
    "transactionIndex": 2,
    "gasUsed": "433429",
    "logsBloom": "0x
    "blockHash": "0x2672350e1e1013320717e5276bda91f48b78f031f22be9fb7823c79b6828953a",
    "transactionHash": "0x81093458b965fef3a89f2a234fafdeab249c1af01d789b1571c5a42c4bfc020c",
    "logs": [],
    "blockNumber": 6320252,
    "cumulativeGasUsed": "934573",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "024e626653824f83341465513369e573",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdropERC1155(address,address[],uint256[],uint256[])\":{\"details\":\"Airdrop ERC1155 tokens\",\"params\":{\"_addresses\":\"The addresses of the recipients\",\"_amounts\":\"The amounts of tokens to send\",\"_tokenIds\":\"The token IDs of the tokens to send\",\"token\":\"The address of the ERC1155 token\"}},\"airdropERC20(address,address[],uint256[])\":{\"details\":\"Airdrop ERC20 tokens\",\"params\":{\"_addresses\":\"The addresses of the recipients\",\"_amounts\":\"The amounts of tokens to send\",\"token\":\"The address of the ERC20 token\"}},\"airdropERC721(address,address[],uint256[])\":{\"details\":\"Airdrop ERC721 tokens\",\"params\":{\"_addresses\":\"The addresses of the recipients\",\"_tokenIds\":\"The token IDs of the tokens to send\",\"token\":\"The address of the ERC721 token\"}},\"airdropETH(address[],uint256[])\":{\"details\":\"Airdrop ETH\",\"params\":{\"_addresses\":\"The addresses of the recipients\",\"_amounts\":\"The amounts of ETH to send\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Airdropper.sol\":\"Airdropper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Airdropper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n// Import IERC20, IERC721, IERC1155\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract Airdropper {\\n    /**\\n     * @dev Airdrop ERC20 tokens\\n     * @param token The address of the ERC20 token\\n     * @param _addresses The addresses of the recipients\\n     * @param _amounts The amounts of tokens to send\\n     */\\n    function airdropERC20(IERC20 token, address[] calldata _addresses, uint256[] calldata _amounts) external {\\n        for (uint256 i; i < _addresses.length; i++) {\\n            token.transferFrom(msg.sender, _addresses[i], _amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Airdrop ERC721 tokens\\n     * @param token The address of the ERC721 token\\n     * @param _addresses The addresses of the recipients\\n     * @param _tokenIds The token IDs of the tokens to send\\n     */\\n    function airdropERC721(IERC721 token, address[] calldata _addresses, uint256[] calldata _tokenIds) external {\\n        for (uint256 i; i < _addresses.length; i++) {\\n            token.transferFrom(msg.sender, _addresses[i], _tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Airdrop ERC1155 tokens\\n     * @param token The address of the ERC1155 token\\n     * @param _addresses The addresses of the recipients\\n     * @param _tokenIds The token IDs of the tokens to send\\n     * @param _amounts The amounts of tokens to send\\n     */\\n    function airdropERC1155(\\n        IERC1155 token,\\n        address[] calldata _addresses,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts\\n    ) external {\\n        for (uint256 i; i < _addresses.length; i++) {\\n            token.safeTransferFrom(msg.sender, _addresses[i], _tokenIds[i], _amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Airdrop ETH\\n     * @param _addresses The addresses of the recipients\\n     * @param _amounts The amounts of ETH to send\\n     */\\n    function airdropETH(address[] calldata _addresses, uint256[] calldata _amounts) external payable {\\n        for (uint256 i; i < _addresses.length; i++) {\\n            payable(_addresses[i]).transfer(_amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1a27c5b752025148d1cfdd179748d1422a2e0cf3f2b30613125ce87b09dbbf7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106e2806100206000396000f3fe60806040526004361061003f5760003560e01c80631d5659fb14610044578063c1a3800614610066578063df7dcc7b14610079578063feecb6bc14610099575b600080fd5b34801561005057600080fd5b5061006461005f36600461048d565b6100b9565b005b610064610074366004610510565b610197565b34801561008557600080fd5b5061006461009436600461057c565b610233565b3480156100a557600080fd5b506100646100b436600461048d565b610342565b60005b8381101561018f57856001600160a01b03166323b872dd338787858181106100e6576100e6610629565b90506020020160208101906100fb919061063f565b86868681811061010d5761010d610629565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561016457600080fd5b505af1158015610178573d6000803e3d6000fd5b50505050808061018790610663565b9150506100bc565b505050505050565b60005b8381101561022c578484828181106101b4576101b4610629565b90506020020160208101906101c9919061063f565b6001600160a01b03166108fc8484848181106101e7576101e7610629565b905060200201359081150290604051600060405180830381858888f19350505050158015610219573d6000803e3d6000fd5b508061022481610663565b91505061019a565b5050505050565b60005b8581101561033857876001600160a01b031663f242432a3389898581811061026057610260610629565b9050602002016020810190610275919061063f565b88888681811061028757610287610629565b905060200201358787878181106102a0576102a0610629565b6040516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015250604484019190915260209091020135606482015260a06084820152600060a482015260c401600060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b50505050808061033090610663565b915050610236565b5050505050505050565b60005b8381101561018f57856001600160a01b03166323b872dd3387878581811061036f5761036f610629565b9050602002016020810190610384919061063f565b86868681811061039657610396610629565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152506020909102013560448201526064016020604051808303816000875af11580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610416919061068a565b508061042181610663565b915050610345565b6001600160a01b038116811461043e57600080fd5b50565b60008083601f84011261045357600080fd5b50813567ffffffffffffffff81111561046b57600080fd5b6020830191508360208260051b850101111561048657600080fd5b9250929050565b6000806000806000606086880312156104a557600080fd5b85356104b081610429565b9450602086013567ffffffffffffffff808211156104cd57600080fd5b6104d989838a01610441565b909650945060408801359150808211156104f257600080fd5b506104ff88828901610441565b969995985093965092949392505050565b6000806000806040858703121561052657600080fd5b843567ffffffffffffffff8082111561053e57600080fd5b61054a88838901610441565b9096509450602087013591508082111561056357600080fd5b5061057087828801610441565b95989497509550505050565b60008060008060008060006080888a03121561059757600080fd5b87356105a281610429565b9650602088013567ffffffffffffffff808211156105bf57600080fd5b6105cb8b838c01610441565b909850965060408a01359150808211156105e457600080fd5b6105f08b838c01610441565b909650945060608a013591508082111561060957600080fd5b506106168a828b01610441565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561065157600080fd5b813561065c81610429565b9392505050565b60006001820161068357634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561069c57600080fd5b8151801515811461065c57600080fdfea26469706673582212208bf138c5e6da71925bc5cf67f8f9521736a93a5b666546a29d43d7f15c5e574764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80631d5659fb14610044578063c1a3800614610066578063df7dcc7b14610079578063feecb6bc14610099575b600080fd5b34801561005057600080fd5b5061006461005f36600461048d565b6100b9565b005b610064610074366004610510565b610197565b34801561008557600080fd5b5061006461009436600461057c565b610233565b3480156100a557600080fd5b506100646100b436600461048d565b610342565b60005b8381101561018f57856001600160a01b03166323b872dd338787858181106100e6576100e6610629565b90506020020160208101906100fb919061063f565b86868681811061010d5761010d610629565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561016457600080fd5b505af1158015610178573d6000803e3d6000fd5b50505050808061018790610663565b9150506100bc565b505050505050565b60005b8381101561022c578484828181106101b4576101b4610629565b90506020020160208101906101c9919061063f565b6001600160a01b03166108fc8484848181106101e7576101e7610629565b905060200201359081150290604051600060405180830381858888f19350505050158015610219573d6000803e3d6000fd5b508061022481610663565b91505061019a565b5050505050565b60005b8581101561033857876001600160a01b031663f242432a3389898581811061026057610260610629565b9050602002016020810190610275919061063f565b88888681811061028757610287610629565b905060200201358787878181106102a0576102a0610629565b6040516001600160e01b031960e089901b1681526001600160a01b03968716600482015295909416602486015250604484019190915260209091020135606482015260a06084820152600060a482015260c401600060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b50505050808061033090610663565b915050610236565b5050505050505050565b60005b8381101561018f57856001600160a01b03166323b872dd3387878581811061036f5761036f610629565b9050602002016020810190610384919061063f565b86868681811061039657610396610629565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152506020909102013560448201526064016020604051808303816000875af11580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610416919061068a565b508061042181610663565b915050610345565b6001600160a01b038116811461043e57600080fd5b50565b60008083601f84011261045357600080fd5b50813567ffffffffffffffff81111561046b57600080fd5b6020830191508360208260051b850101111561048657600080fd5b9250929050565b6000806000806000606086880312156104a557600080fd5b85356104b081610429565b9450602086013567ffffffffffffffff808211156104cd57600080fd5b6104d989838a01610441565b909650945060408801359150808211156104f257600080fd5b506104ff88828901610441565b969995985093965092949392505050565b6000806000806040858703121561052657600080fd5b843567ffffffffffffffff8082111561053e57600080fd5b61054a88838901610441565b9096509450602087013591508082111561056357600080fd5b5061057087828801610441565b95989497509550505050565b60008060008060008060006080888a03121561059757600080fd5b87356105a281610429565b9650602088013567ffffffffffffffff808211156105bf57600080fd5b6105cb8b838c01610441565b909850965060408a01359150808211156105e457600080fd5b6105f08b838c01610441565b909650945060608a013591508082111561060957600080fd5b506106168a828b01610441565b989b979a50959850939692959293505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561065157600080fd5b813561065c81610429565b9392505050565b60006001820161068357634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561069c57600080fd5b8151801515811461065c57600080fdfea26469706673582212208bf138c5e6da71925bc5cf67f8f9521736a93a5b666546a29d43d7f15c5e574764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdropERC1155(address,address[],uint256[],uint256[])": {
        "details": "Airdrop ERC1155 tokens",
        "params": {
          "_addresses": "The addresses of the recipients",
          "_amounts": "The amounts of tokens to send",
          "_tokenIds": "The token IDs of the tokens to send",
          "token": "The address of the ERC1155 token"
        }
      },
      "airdropERC20(address,address[],uint256[])": {
        "details": "Airdrop ERC20 tokens",
        "params": {
          "_addresses": "The addresses of the recipients",
          "_amounts": "The amounts of tokens to send",
          "token": "The address of the ERC20 token"
        }
      },
      "airdropERC721(address,address[],uint256[])": {
        "details": "Airdrop ERC721 tokens",
        "params": {
          "_addresses": "The addresses of the recipients",
          "_tokenIds": "The token IDs of the tokens to send",
          "token": "The address of the ERC721 token"
        }
      },
      "airdropETH(address[],uint256[])": {
        "details": "Airdrop ETH",
        "params": {
          "_addresses": "The addresses of the recipients",
          "_amounts": "The amounts of ETH to send"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}