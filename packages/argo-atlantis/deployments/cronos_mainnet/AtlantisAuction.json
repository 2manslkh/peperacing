{
  "address": "0xc8EE57CeD16Cb858a203970ae1B1E9309ee146eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minStackedBidIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionStillLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidIncrementTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidsNotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncrementalPriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentBid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEOA",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReservePriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "AuctionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        }
      ],
      "name": "BidIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUM_BIDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeBids",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "amount",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "bidTime",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bidIndexes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint192",
              "name": "amount",
              "type": "uint192"
            },
            {
              "internalType": "uint64",
              "name": "bidTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct AtlantisAuction.Bid[8]",
          "name": "",
          "type": "tuple[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBidIndexToUpdate",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStackedBidIncrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setAuctionTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_minBidIncrementPercentage",
          "type": "uint8"
        }
      ],
      "name": "setMinBidIncrementPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStackedBidIncrement",
          "type": "uint256"
        }
      ],
      "name": "setMinReplacementIncrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reservePrice",
          "type": "uint256"
        }
      ],
      "name": "setReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimeBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint192",
              "name": "amount",
              "type": "uint192"
            },
            {
              "internalType": "uint64",
              "name": "bidTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct AtlantisAuction.Bid[8]",
          "name": "sortedBids",
          "type": "tuple[8]"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5b5798d98e1fa045a81bb80b89c3d64754083be0e92f2f28fd3f8efd04ffc87",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xc8EE57CeD16Cb858a203970ae1B1E9309ee146eb",
    "transactionIndex": 3,
    "gasUsed": "1347102",
    "logsBloom": "0x
    "blockHash": "0x3503de5add7b2c1fdff4cb31e185a5c54b4dce5492c4e24a41ecfaec23948df5",
    "transactionHash": "0xf5b5798d98e1fa045a81bb80b89c3d64754083be0e92f2f28fd3f8efd04ffc87",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8017522,
        "transactionHash": "0xf5b5798d98e1fa045a81bb80b89c3d64754083be0e92f2f28fd3f8efd04ffc87",
        "address": "0xc8EE57CeD16Cb858a203970ae1B1E9309ee146eb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x3503de5add7b2c1fdff4cb31e185a5c54b4dce5492c4e24a41ecfaec23948df5"
      }
    ],
    "blockNumber": 8017522,
    "cumulativeGasUsed": "1905119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16E96b2c52C816D26FEF4991733249e81965D88D",
    300,
    "1000000000000000000000",
    10,
    "50000000000000000000",
    1682517600,
    1682604000
  ],
  "numDeployments": 1,
  "solcInputHash": "ba309921f8c962c7c7e653ba26b75652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minStackedBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStillLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidIncrementTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidsNotSorted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncrementalPriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservePriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"BidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUM_BIDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeBids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"bidTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"bidTime\",\"type\":\"uint64\"}],\"internalType\":\"struct AtlantisAuction.Bid[8]\",\"name\":\"\",\"type\":\"tuple[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidIndexToUpdate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStackedBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStackedBidIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinReplacementIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"bidTime\",\"type\":\"uint64\"}],\"internalType\":\"struct AtlantisAuction.Bid[8]\",\"name\":\"sortedBids\",\"type\":\"tuple[8]\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bid()\":{\"details\":\"Bids must be made while the auction is live. Bids must meet a minimum reserve price. The first 8 bids made will be accepted as valid. Subsequent bids must be a percentage higher than the lowest of the 8 active bids. When a low bid is replaced, the ETH will be refunded back to the original bidder. If a valid bid comes in within the last `timeBuffer` seconds, the auction will be extended for another `timeBuffer` seconds. This will continue until no new active bids come in. If a wallet makes a bid while it still has an active bid, the second bid will stack on top of the first bid. If the second bid doesn't meet the `minStackedBidIncrement` threshold, an error will be thrown. A wallet will only have one active bid at at time.\"},\"getAllActiveBids()\":{\"details\":\"Useful for ethers client to get the entire array at once.\"},\"getBidIndexToUpdate()\":{\"details\":\"The index to return will be decided by the following rules: If there are less than MAX_NUM_BIDS bids, the index of the first empty slot is returned. If there are MAX_NUM_BIDS or more bids, the index of the lowest value bid is returned. If there is a tie, the most recent bid with the low amount will be returned. If there is a tie among bidTimes, the highest index is chosen.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionTimes(uint256,uint256)\":{\"details\":\"Only callable by the owner.\"},\"setMinBidIncrementPercentage(uint8)\":{\"details\":\"Only callable by the owner.\"},\"setMinReplacementIncrease(uint256)\":{\"details\":\"Only callable by the owner.\"},\"setReservePrice(uint256)\":{\"details\":\"Only callable by the owner.\"},\"setTimeBuffer(uint256)\":{\"details\":\"Only callable by the owner.\"},\"settleAuction((address,uint192,uint64)[8])\":{\"details\":\"Bids will be sorted in descending order off-chain due to constraints with sorting structs on-chain via a field on the struct, however we will validate the input on-chain before minting the NFTs. The input bids must be in descending order by amount and all input bids must correspond to a bid in the `activeBids` mapping.Duplicate bids can be passed in to circumvent the validation logic. We are ok with this loophole since this function is ownerOnly.Settlement is only possible once the auction is over.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid()\":{\"notice\":\"Handle users' bids\"},\"getAllActiveBids()\":{\"notice\":\"Get all active bids.\"},\"getBidIndexToUpdate()\":{\"notice\":\"Gets the index of the entry in activeBids to update\"},\"setAuctionTimes(uint256,uint256)\":{\"notice\":\"Sets the start and end time of the auction.\"},\"setMinBidIncrementPercentage(uint8)\":{\"notice\":\"Set the auction minimum bid increment percentage.\"},\"setMinReplacementIncrease(uint256)\":{\"notice\":\"Set the auction replacing bid buffer amount.\"},\"setReservePrice(uint256)\":{\"notice\":\"Set the auction reserve price.\"},\"setTimeBuffer(uint256)\":{\"notice\":\"Set the auction time buffer.\"},\"settleAuction((address,uint192,uint64)[8])\":{\"notice\":\"Settles the auction and mints a skateboard ticket NFT to each winner.\"},\"withdraw()\":{\"notice\":\"Withdraws the contract value to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlantisAuction.sol\":\"AtlantisAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/AtlantisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interface/IAtlantisPlanets.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\n\\r\\nerror AuctionSettled();\\r\\nerror AuctionNotInitialized();\\r\\nerror AuctionNotLive();\\r\\nerror ReservePriceNotMet();\\r\\nerror IncrementalPriceNotMet();\\r\\nerror BidsNotSorted();\\r\\nerror NonExistentBid();\\r\\nerror AuctionStillLive();\\r\\nerror WithdrawFailed();\\r\\nerror BidIncrementTooLow();\\r\\nerror NotEOA();\\r\\n\\r\\ncontract AtlantisAuction is Ownable, ReentrancyGuard {\\r\\n    struct Bid {\\r\\n        address bidder;\\r\\n        uint192 amount;\\r\\n        uint64 bidTime;\\r\\n    }\\r\\n\\r\\n    struct BidIndex {\\r\\n        uint8 index;\\r\\n        bool isSet;\\r\\n    }\\r\\n\\r\\n    event NewBid(address bidder, uint256 value);\\r\\n    event BidIncreased(address bidder, uint256 oldValue, uint256 increment);\\r\\n    event AuctionExtended();\\r\\n\\r\\n    // The max number of top bids the auction will accept\\r\\n    uint256 public constant MAX_NUM_BIDS = 8;\\r\\n\\r\\n    // The token contract to mint from\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n\\r\\n    // The minimum amount of time left in an auction after a new bid is created\\r\\n    uint256 public timeBuffer;\\r\\n\\r\\n    // The minimum price accepted in an auction\\r\\n    uint256 public reservePrice;\\r\\n\\r\\n    // The minimum percentage difference between the last bid amount and the current bid\\r\\n    uint8 public minBidIncrementPercentage;\\r\\n\\r\\n    // The minimum amount a user needs to submit for a stacked bid\\r\\n    uint256 public minStackedBidIncrement;\\r\\n\\r\\n    // The start time of the auction\\r\\n    uint256 public startTime;\\r\\n\\r\\n    // The end time of the auction\\r\\n    uint256 public endTime;\\r\\n\\r\\n    // Whether or not the auction has settled.\\r\\n    bool public auctionSettled;\\r\\n\\r\\n    // The current highest bids made in the auction\\r\\n    Bid[MAX_NUM_BIDS] public activeBids;\\r\\n\\r\\n    // The mapping between an address and its active bid. The isSet flag differentiates the default\\r\\n    // uint value 0 from an actual 0 value.\\r\\n    mapping(address => BidIndex) public bidIndexes;\\r\\n\\r\\n    constructor(\\r\\n        AtlantisAddressRegistry _addressRegistry,\\r\\n        uint256 _timeBuffer,\\r\\n        uint256 _reservePrice,\\r\\n        uint8 _minBidIncrementPercentage,\\r\\n        uint256 _minStackedBidIncrement,\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime\\r\\n    ) {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        timeBuffer = _timeBuffer;\\r\\n        reservePrice = _reservePrice;\\r\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\r\\n        minStackedBidIncrement = _minStackedBidIncrement;\\r\\n        startTime = _startTime;\\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    modifier onlyEOA() {\\r\\n        if (tx.origin != msg.sender) {\\r\\n            revert NotEOA();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Handle users' bids\\r\\n     * @dev Bids must be made while the auction is live. Bids must meet a minimum reserve price.\\r\\n     *\\r\\n     * The first 8 bids made will be accepted as valid. Subsequent bids must be a percentage\\r\\n     * higher than the lowest of the 8 active bids. When a low bid is replaced, the ETH will\\r\\n     * be refunded back to the original bidder.\\r\\n     *\\r\\n     * If a valid bid comes in within the last `timeBuffer` seconds, the auction will be extended\\r\\n     * for another `timeBuffer` seconds. This will continue until no new active bids come in.\\r\\n     *\\r\\n     * If a wallet makes a bid while it still has an active bid, the second bid will\\r\\n     * stack on top of the first bid. If the second bid doesn't meet the `minStackedBidIncrement`\\r\\n     * threshold, an error will be thrown. A wallet will only have one active bid at at time.\\r\\n     */\\r\\n    function bid() public payable nonReentrant onlyEOA {\\r\\n        if (auctionSettled) {\\r\\n            revert AuctionSettled();\\r\\n        }\\r\\n        if (startTime == 0 || endTime == 0) {\\r\\n            revert AuctionNotInitialized();\\r\\n        }\\r\\n        require(block.timestamp > startTime || block.timestamp < endTime, \\\"Auction has ended\\\");\\r\\n\\r\\n        BidIndex memory existingIndex = bidIndexes[msg.sender];\\r\\n        if (existingIndex.isSet) {\\r\\n            // Case when the user already has an active bid\\r\\n            if (msg.value < minStackedBidIncrement || msg.value == 0) {\\r\\n                revert BidIncrementTooLow();\\r\\n            }\\r\\n\\r\\n            uint192 oldValue = activeBids[existingIndex.index].amount;\\r\\n            unchecked {\\r\\n                activeBids[existingIndex.index].amount = oldValue + uint192(msg.value);\\r\\n            }\\r\\n            activeBids[existingIndex.index].bidTime = uint64(block.timestamp);\\r\\n\\r\\n            emit BidIncreased(msg.sender, oldValue, msg.value);\\r\\n        } else {\\r\\n            if (msg.value < reservePrice || msg.value == 0) {\\r\\n                revert ReservePriceNotMet();\\r\\n            }\\r\\n\\r\\n            uint8 lowestBidIndex = getBidIndexToUpdate();\\r\\n            uint256 lowestBidAmount = activeBids[lowestBidIndex].amount;\\r\\n            address lowestBidder = activeBids[lowestBidIndex].bidder;\\r\\n\\r\\n            unchecked {\\r\\n                if (msg.value < lowestBidAmount + (lowestBidAmount * minBidIncrementPercentage) / 100) {\\r\\n                    revert IncrementalPriceNotMet();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Refund lowest bidder and remove bidIndexes entry\\r\\n            if (lowestBidder != address(0)) {\\r\\n                delete bidIndexes[lowestBidder];\\r\\n                _transferETH(lowestBidder, lowestBidAmount);\\r\\n            }\\r\\n\\r\\n            activeBids[lowestBidIndex] = Bid({\\r\\n                bidder: msg.sender,\\r\\n                amount: uint192(msg.value),\\r\\n                bidTime: uint64(block.timestamp)\\r\\n            });\\r\\n\\r\\n            bidIndexes[msg.sender] = BidIndex({ index: lowestBidIndex, isSet: true });\\r\\n\\r\\n            emit NewBid(msg.sender, msg.value);\\r\\n        }\\r\\n\\r\\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\\r\\n        if (endTime - block.timestamp < timeBuffer) {\\r\\n            unchecked {\\r\\n                endTime = block.timestamp + timeBuffer;\\r\\n            }\\r\\n            emit AuctionExtended();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the index of the entry in activeBids to update\\r\\n     * @dev The index to return will be decided by the following rules:\\r\\n     * If there are less than MAX_NUM_BIDS bids, the index of the first empty slot is returned.\\r\\n     * If there are MAX_NUM_BIDS or more bids, the index of the lowest value bid is returned. If\\r\\n     * there is a tie, the most recent bid with the low amount will be returned. If there is a tie\\r\\n     * among bidTimes, the highest index is chosen.\\r\\n     */\\r\\n    function getBidIndexToUpdate() public view returns (uint8) {\\r\\n        uint256 minAmount = activeBids[0].amount;\\r\\n        // If the first value is 0 then we can assume that no bids have been submitted\\r\\n        if (minAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint8 minIndex = 0;\\r\\n        uint64 minBidTime = activeBids[0].bidTime;\\r\\n\\r\\n        for (uint8 i = 1; i < MAX_NUM_BIDS; ) {\\r\\n            uint256 bidAmount = activeBids[i].amount;\\r\\n            uint64 bidTime = activeBids[i].bidTime;\\r\\n\\r\\n            // A zero bidAmount means the slot is empty because we enforce non-zero bid amounts\\r\\n            if (bidAmount == 0) {\\r\\n                return i;\\r\\n            } else if (bidAmount < minAmount || (bidAmount == minAmount && bidTime >= minBidTime)) {\\r\\n                minAmount = bidAmount;\\r\\n                minIndex = i;\\r\\n                minBidTime = bidTime;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return minIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all active bids.\\r\\n     * @dev Useful for ethers client to get the entire array at once.\\r\\n     */\\r\\n    function getAllActiveBids() external view returns (Bid[MAX_NUM_BIDS] memory) {\\r\\n        return activeBids;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settles the auction and mints a skateboard ticket NFT to each winner.\\r\\n     * @dev Bids will be sorted in descending order off-chain due to constraints with\\r\\n     * sorting structs on-chain via a field on the struct, however we will validate the\\r\\n     * input on-chain before minting the NFTs. The input bids must be in descending order\\r\\n     * by amount and all input bids must correspond to a bid in the `activeBids` mapping.\\r\\n     * @dev Duplicate bids can be passed in to circumvent the validation logic. We are ok\\r\\n     * with this loophole since this function is ownerOnly.\\r\\n     * @dev Settlement is only possible once the auction is over.\\r\\n     */\\r\\n    function settleAuction(Bid[MAX_NUM_BIDS] calldata sortedBids) external onlyOwner nonReentrant {\\r\\n        IAtlantisPlanets planets = IAtlantisPlanets(addressRegistry.getAtlantisPlanets());\\r\\n\\r\\n        if (block.timestamp <= endTime) {\\r\\n            revert AuctionStillLive();\\r\\n        }\\r\\n        if (auctionSettled) {\\r\\n            revert AuctionSettled();\\r\\n        }\\r\\n\\r\\n        // Validate the input bids\\r\\n        for (uint256 i = 0; i < MAX_NUM_BIDS; ) {\\r\\n            Bid memory inputBid = sortedBids[i];\\r\\n            BidIndex memory bidIndex = bidIndexes[inputBid.bidder];\\r\\n            if (\\r\\n                !bidIndex.isSet ||\\r\\n                activeBids[bidIndex.index].bidder != inputBid.bidder ||\\r\\n                activeBids[bidIndex.index].amount != inputBid.amount ||\\r\\n                activeBids[bidIndex.index].bidTime != inputBid.bidTime\\r\\n            ) {\\r\\n                revert NonExistentBid();\\r\\n            }\\r\\n\\r\\n            // The zero-th index has nothing to compare against\\r\\n            if (i != 0) {\\r\\n                Bid memory prevBid = sortedBids[i - 1];\\r\\n                if (inputBid.amount > prevBid.amount) {\\r\\n                    revert BidsNotSorted();\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        // Get addresses from bids\\r\\n        address[MAX_NUM_BIDS] memory winners;\\r\\n        for (uint256 i = 0; i < MAX_NUM_BIDS; ) {\\r\\n            winners[i] = sortedBids[i].bidder;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Mint tickets to auction winners\\r\\n        // planets.epicMint(winners);\\r\\n\\r\\n        auctionSettled = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers ETH to a specified address.\\r\\n     * @dev This function can only be called internally.\\r\\n     */\\r\\n    function _transferETH(address to, uint256 value) internal returns (bool) {\\r\\n        (bool success, ) = to.call{ value: value, gas: 30000 }(new bytes(0));\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the start and end time of the auction.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setAuctionTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\\r\\n        startTime = _startTime;\\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction time buffer.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setTimeBuffer(uint256 _timeBuffer) external onlyOwner {\\r\\n        timeBuffer = _timeBuffer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction reserve price.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setReservePrice(uint256 _reservePrice) external onlyOwner {\\r\\n        reservePrice = _reservePrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction minimum bid increment percentage.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external onlyOwner {\\r\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the auction replacing bid buffer amount.\\r\\n     * @dev Only callable by the owner.\\r\\n     */\\r\\n    function setMinReplacementIncrease(uint256 _minStackedBidIncrement) external onlyOwner {\\r\\n        minStackedBidIncrement = _minStackedBidIncrement;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the contract value to the owner\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        bool success = _transferETH(msg.sender, address(this).balance);\\r\\n        if (!success) {\\r\\n            revert WithdrawFailed();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48ee7c2824f4857545fda16ac1652a1262fb8c7535c2ca434bb6457e1524f63c\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/AtlantisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary AtlantisLib {\\r\\n    enum Orbit {\\r\\n        COMMON, // 0\\r\\n        UNCOMMON, // 1\\r\\n        RARE, // 2\\r\\n        EPIC // 3\\r\\n    }\\r\\n\\r\\n    enum OrbitName {\\r\\n        HALO_RING, //0\\r\\n        PANDORA, //1\\r\\n        ATLAS, //2\\r\\n        METIS, //3\\r\\n        ENTWINED, //4\\r\\n        RAINBOW_CLOUDS, //5\\r\\n        GALATICA, //6\\r\\n        ASTEROIDS, //7\\r\\n        INTERSTELLAR_PINK, //8\\r\\n        INTERSTELLAR_GRADIENT, //9\\r\\n        // Epic planets\\r\\n        INTERSTELLAR_GOLD //10\\r\\n    }\\r\\n\\r\\n    enum Background {\\r\\n        PURPLE_HUES, //0\\r\\n        BROWN_HUES, //1\\r\\n        WAVY, //2\\r\\n        SHOOTING_STARS, //3\\r\\n        // Epic planets\\r\\n        GOLD_HUES, //4\\r\\n        GOLD_SHOOTING_STARS, //5\\r\\n        WAVY_GOLD, //6\\r\\n        GOLD_SKIES //7\\r\\n    }\\r\\n\\r\\n    enum Evolution {\\r\\n        ALPHA, // 1-19\\r\\n        BETA, // 20-29\\r\\n        GAMMA, // 30-39\\r\\n        DELTA, // 40-49\\r\\n        EPSILON // 50\\r\\n    }\\r\\n\\r\\n    enum Element {\\r\\n        FIRE, // 0\\r\\n        LIGHTNING, // 1\\r\\n        STEEL // 2\\r\\n    }\\r\\n\\r\\n    struct Planet {\\r\\n        uint8 level; // Max Level: 50\\r\\n        Element element;\\r\\n        Orbit orbit;\\r\\n        OrbitName orbitName;\\r\\n        Background background;\\r\\n        bool onExpedition;\\r\\n    }\\r\\n\\r\\n    enum Rarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet element as string\\r\\n     */\\r\\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\\r\\n        if (element == AtlantisLib.Element.FIRE) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else if (element == AtlantisLib.Element.STEEL) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\\r\\n            return \\\"Lightning\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\\r\\n        if (orbit == AtlantisLib.Orbit.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tier of equipment based on level\\r\\n     * @param level Level of an equipment\\r\\n     */\\r\\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\\r\\n        if (level < 1) {\\r\\n            tier = AtlantisLib.Rarity.COMMON;\\r\\n        } else if (level >= 1 && level < 5) {\\r\\n            tier = AtlantisLib.Rarity.UNCOMMON;\\r\\n        } else if (level >= 5 && level < 8) {\\r\\n            tier = AtlantisLib.Rarity.RARE;\\r\\n        } else if (level >= 8 && level <= 10) {\\r\\n            tier = AtlantisLib.Rarity.EPIC;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\\r\\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\\r\\n            return \\\"Halo Ring\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\\r\\n            return \\\"Pandora\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\\r\\n            return \\\"Atlas\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\\r\\n            return \\\"Metis\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\\r\\n            return \\\"Entwined\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\\r\\n            return \\\"Rainbow Clouds\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\\r\\n            return \\\"Galatica\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\\r\\n            return \\\"Asteroids\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\\r\\n            return \\\"Interstellar Pink\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\\r\\n            return \\\"Interstellar Gradient\\\";\\r\\n            // Epic planets\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\\r\\n            return \\\"Interstellar Gold\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\\r\\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\\r\\n            return \\\"Purple Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\\r\\n            return \\\"Brown Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.WAVY) {\\r\\n            return \\\"Wavy\\\";\\r\\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\\r\\n            return \\\"Shooting Stars\\\";\\r\\n            // Epic planets\\r\\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\\r\\n            return \\\"Wavy Gold\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\\r\\n            return \\\"Gold Shooting Stars\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\\r\\n            return \\\"Gold Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\\r\\n            return \\\"Gold Skies\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f94d7d040abad058dbad5d368688e91d19d43bc219df2b2ee1c722950a88b8e\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisPlanets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// Import AtlantisLib\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantisPlanets is IERC721 {\\r\\n    error AuctionSettled();\\r\\n\\r\\n    /**\\r\\n     * The signature must be by the correct signer\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * The minting stage must be correct\\r\\n     */\\r\\n    error InvalidStage(uint8 currentStage, uint8 requiredStage);\\r\\n\\r\\n    /**\\r\\n     * The collection has exceeded the max supply\\r\\n     */\\r\\n    error ExceededMaxSupply();\\r\\n\\r\\n    /**\\r\\n     * The user has exceeded allowed mint count\\r\\n     */\\r\\n    error ExceedMaxMintPerWallet();\\r\\n\\r\\n    /**\\r\\n     * The planet has exceeded the max level\\r\\n     */\\r\\n    error ExceededMaxLevel();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown OrbitId\\r\\n     */\\r\\n    error UnknownOrbit();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown ElementId\\r\\n     */\\r\\n    error UnknownElement();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown PlanetId\\r\\n     */\\r\\n    error InvalidUpgradeLevel(uint8 currentLevel, uint8 newLevel);\\r\\n    /**\\r\\n     * User is not the owner of planet\\r\\n     */\\r\\n    error NotOwnerOfPlanet();\\r\\n\\r\\n    error InsufficientCRO(uint256 amountPaid, uint256 amountRequired);\\r\\n\\r\\n    error InvalidInput();\\r\\n\\r\\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external;\\r\\n\\r\\n    function getUpgradeCosts(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _levels\\r\\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory gemstoneRequirements);\\r\\n\\r\\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory);\\r\\n\\r\\n    function setPlanetElements(uint256[] memory _tokenIds, AtlantisLib.Element[] memory _gemstoneType) external;\\r\\n\\r\\n    function setPlanetOrbits(uint256[] memory _tokenIds, AtlantisLib.Orbit[] memory _planetsOrbit) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x535102a2c03d0a734770e65d90ed6b46569aaae9578ff7bcca693ec1bdd94503\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161150d38038061150d83398101604081905261002f916100db565b6100383361008b565b60018055600280546001600160a01b0319166001600160a01b0398909816979097179096556003949094556004929092556005805460ff191660ff92909216919091179055600655600755600855610158565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600060e0888a0312156100f657600080fd5b87516001600160a01b038116811461010d57600080fd5b809750506020880151955060408801519450606088015160ff8116811461013357600080fd5b809450506080880151925060a0880151915060c0880151905092959891949750929550565b6113a6806101676000396000f3fe60806040526004361061014b5760003560e01c80638da5cb5b116100b6578063d3e761a41161006f578063d3e761a414610399578063d8f81b35146103c3578063db2e1eed14610415578063ec91f2a41461042b578063f2fde38b14610441578063f3ad65f41461046157600080fd5b80638da5cb5b146102d15780639f1b2fc114610303578063b1fdec6a14610323578063b296024d1461034a578063ba980f3214610364578063ce9c7c0d1461037957600080fd5b80633ccfd60b116101085780633ccfd60b146101fb57806358b8bad614610210578063672b0774146102305780637120334b14610286578063715018a6146102a657806378e97925146102bb57600080fd5b806309f981af1461015057806316617c0a146101795780631998aeef1461019b578063294bc0e7146101a35780633197cbb6146101c557806336ebdb38146101db575b600080fd5b34801561015c57600080fd5b5061016660065481565b6040519081526020015b60405180910390f35b34801561018557600080fd5b5061019961019436600461112b565b610481565b005b6101996107b8565b3480156101af57600080fd5b506101b8610c64565b6040516101709190611156565b3480156101d157600080fd5b5061016660085481565b3480156101e757600080fd5b506101996101f63660046111bc565b610cec565b34801561020757600080fd5b50610199610d0a565b34801561021c57600080fd5b5061019961022b3660046111e6565b610d3e565b34801561023c57600080fd5b5061025061024b3660046111e6565b610d4b565b604080516001600160a01b0390941684526001600160c01b0390921660208401526001600160401b031690820152606001610170565b34801561029257600080fd5b506101996102a13660046111e6565b610d92565b3480156102b257600080fd5b50610199610d9f565b3480156102c757600080fd5b5061016660075481565b3480156102dd57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561030f57600080fd5b5061019961031e3660046111ff565b610db1565b34801561032f57600080fd5b50610338610dc4565b60405160ff9091168152602001610170565b34801561035657600080fd5b506005546103389060ff1681565b34801561037057600080fd5b50610166600881565b34801561038557600080fd5b506101996103943660046111e6565b610ec6565b3480156103a557600080fd5b506009546103b39060ff1681565b6040519015158152602001610170565b3480156103cf57600080fd5b506103fc6103de366004611236565b601a6020526000908152604090205460ff8082169161010090041682565b6040805160ff9093168352901515602083015201610170565b34801561042157600080fd5b5061016660045481565b34801561043757600080fd5b5061016660035481565b34801561044d57600080fd5b5061019961045c366004611236565b610ed3565b34801561046d57600080fd5b506002546102eb906001600160a01b031681565b610489610f49565b610491610fa3565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190611253565b905060085442116105235760405163139480c760e31b815260040160405180910390fd5b60095460ff161561054757604051637d39d27f60e11b815260040160405180910390fd5b60005b600881101561073257600083826008811061056757610567611270565b6060020180360381019061057b9190611286565b80516001600160a01b03166000908152601a602090815260409182902082518084019093525460ff8082168452610100909104161580159183019190915291925090806105fc575081600001516001600160a01b0316600a826000015160ff16600881106105eb576105eb611270565b60020201546001600160a01b031614155b8061063e575081602001516001600160c01b0316600a826000015160ff166008811061062a5761062a611270565b60020201600101546001600160c01b031614155b80610693575081604001516001600160401b0316600a826000015160ff166008811061066c5761066c611270565b6002020160010160189054906101000a90046001600160401b03166001600160401b031614155b156106b157604051632b0e0d1760e01b815260040160405180910390fd5b8215610728576000856106c5600186611320565b600881106106d5576106d5611270565b606002018036038101906106e99190611286565b905080602001516001600160c01b031683602001516001600160c01b0316111561072657604051630b149fe560e01b815260040160405180910390fd5b505b505060010161054a565b5061073b6110cc565b60005b600881101561079c5783816008811061075957610759611270565b60600201600001602081019061076f9190611236565b82826008811061078157610781611270565b6001600160a01b03909216602092909202015260010161073e565b50506009805460ff19166001179055506107b560018055565b50565b6107c0610fa3565b3233146107e057604051635d04968b60e11b815260040160405180910390fd5b60095460ff161561080457604051637d39d27f60e11b815260040160405180910390fd5b60075415806108135750600854155b15610831576040516301a7194b60e51b815260040160405180910390fd5b600754421180610842575060085442105b6108875760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881a185cc8195b991959607a1b60448201526064015b60405180910390fd5b336000908152601a602090815260409182902082518084019093525460ff808216845261010090910416158015918301919091526109fb576006543410806108cd575034155b156108eb57604051630ec4b5eb60e31b815260040160405180910390fd5b6000600a826000015160ff166008811061090757610907611270565b6002020160010160009054906101000a90046001600160c01b03169050348101600a836000015160ff166008811061094157610941611270565b6002020160010160006101000a8154816001600160c01b0302191690836001600160c01b0316021790555042600a836000015160ff166008811061098757610987611270565b6002020160010180546001600160c01b03908116600160c01b6001600160401b0394909416939093029290921790556040805133815291831660208301523482820152517fabdd90c2558a13a111c790b3e52da9a52768834a1139e2993b68b6db09c071c59181900360600190a150610c0f565b600454341080610a09575034155b15610a27576040516379bb5b6160e01b815260040160405180910390fd5b6000610a31610dc4565b90506000600a8260ff1660088110610a4b57610a4b611270565b60020201600101546001600160c01b031690506000600a60ff841660088110610a7657610a76611270565b60020201546005546001600160a01b03909116915060649060ff168302048201341015610ab657604051632b5bd98760e11b815260040160405180910390fd5b6001600160a01b03811615610af2576001600160a01b0381166000908152601a60205260409020805461ffff19169055610af08183610ffc565b505b6040518060600160405280336001600160a01b03168152602001346001600160c01b03168152602001426001600160401b0316815250600a8460ff1660088110610b3e57610b3e611270565b82516002919091029190910180546001600160a01b039092166001600160a01b03199092169190911781556020808301516040938401516001600160401b0316600160c01b026001600160c01b03909116176001928301558251808401845260ff8781168252818301938452336000818152601a855286902092518354955115156101000261ffff19909616921691909117939093179055825191825234908201527fdd0b6c6a77960e2066c96171b4d7ac9e8b4c184011f38544afa36a5bb63ec59f910160405180910390a15050505b60035442600854610c209190611320565b1015610c585760035442016008556040517fab9c9a8aeadcc64e09e3ec376616fdcd4dd4a5e728535b290e272c2f1792056f90600090a15b50610c6260018055565b565b610c6c6110eb565b604080516101008101909152600a60086000835b82821015610ce3576040805160608101825260028402860180546001600160a01b031682526001908101546001600160c01b038116602080850191909152600160c01b9091046001600160401b0316938301939093529083529092019101610c80565b50505050905090565b610cf4610f49565b6005805460ff191660ff92909216919091179055565b610d12610f49565b6000610d1e3347610ffc565b9050806107b557604051631d42c86760e21b815260040160405180910390fd5b610d46610f49565b600655565b600a8160088110610d5b57600080fd5b6002020180546001909101546001600160a01b0390911691506001600160c01b03811690600160c01b90046001600160401b031683565b610d9a610f49565b600355565b610da7610f49565b610c62600061107c565b610db9610f49565b600791909155600855565b600b546000906001600160c01b0316808203610de257600091505090565b600b54600090600160c01b90046001600160401b031660015b60088160ff161015610ebd576000600a8260ff1660088110610e1f57610e1f611270565b60020201600101546001600160c01b031690506000600a60ff841660088110610e4a57610e4a611270565b6002020160010160189054906101000a90046001600160401b0316905081600003610e7a57509095945050505050565b85821080610ea457508582148015610ea45750836001600160401b0316816001600160401b031610155b15610eb3578195508294508093505b5050600101610dfb565b50909392505050565b610ece610f49565b600455565b610edb610f49565b6001600160a01b038116610f405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161087e565b6107b58161107c565b6000546001600160a01b03163314610c625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b600260015403610ff55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161087e565b6002600155565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161102c9190611341565b600060405180830381858888f193505050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b5090925050505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806008906020820280368337509192915050565b6040518061010001604052806008905b60408051606081018252600080825260208083018290529282015282526000199092019101816110fb5790505090565b600061030080838503121561113f57600080fd5b83818401111561114e57600080fd5b509092915050565b6103008101818360005b60088110156111b357815180516001600160a01b031684526020808201516001600160c01b0316818601526040918201516001600160401b03169185019190915260609093019290910190600101611160565b50505092915050565b6000602082840312156111ce57600080fd5b813560ff811681146111df57600080fd5b9392505050565b6000602082840312156111f857600080fd5b5035919050565b6000806040838503121561121257600080fd5b50508035926020909101359150565b6001600160a01b03811681146107b557600080fd5b60006020828403121561124857600080fd5b81356111df81611221565b60006020828403121561126557600080fd5b81516111df81611221565b634e487b7160e01b600052603260045260246000fd5b60006060828403121561129857600080fd5b604051606081016001600160401b0382821081831117156112c957634e487b7160e01b600052604160045260246000fd5b81604052843591506112da82611221565b9082526020840135906001600160c01b03821682146112f857600080fd5b81602084015260408501359150808216821461131357600080fd5b5060408201529392505050565b8181038181111561107657634e487b7160e01b600052601160045260246000fd5b6000825160005b818110156113625760208186018101518583015201611348565b50600092019182525091905056fea264697066735822122051d6666f7ffb476f73e6885052922e2cdb2cd9beb518d7eb104a54ee6528029064736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80638da5cb5b116100b6578063d3e761a41161006f578063d3e761a414610399578063d8f81b35146103c3578063db2e1eed14610415578063ec91f2a41461042b578063f2fde38b14610441578063f3ad65f41461046157600080fd5b80638da5cb5b146102d15780639f1b2fc114610303578063b1fdec6a14610323578063b296024d1461034a578063ba980f3214610364578063ce9c7c0d1461037957600080fd5b80633ccfd60b116101085780633ccfd60b146101fb57806358b8bad614610210578063672b0774146102305780637120334b14610286578063715018a6146102a657806378e97925146102bb57600080fd5b806309f981af1461015057806316617c0a146101795780631998aeef1461019b578063294bc0e7146101a35780633197cbb6146101c557806336ebdb38146101db575b600080fd5b34801561015c57600080fd5b5061016660065481565b6040519081526020015b60405180910390f35b34801561018557600080fd5b5061019961019436600461112b565b610481565b005b6101996107b8565b3480156101af57600080fd5b506101b8610c64565b6040516101709190611156565b3480156101d157600080fd5b5061016660085481565b3480156101e757600080fd5b506101996101f63660046111bc565b610cec565b34801561020757600080fd5b50610199610d0a565b34801561021c57600080fd5b5061019961022b3660046111e6565b610d3e565b34801561023c57600080fd5b5061025061024b3660046111e6565b610d4b565b604080516001600160a01b0390941684526001600160c01b0390921660208401526001600160401b031690820152606001610170565b34801561029257600080fd5b506101996102a13660046111e6565b610d92565b3480156102b257600080fd5b50610199610d9f565b3480156102c757600080fd5b5061016660075481565b3480156102dd57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610170565b34801561030f57600080fd5b5061019961031e3660046111ff565b610db1565b34801561032f57600080fd5b50610338610dc4565b60405160ff9091168152602001610170565b34801561035657600080fd5b506005546103389060ff1681565b34801561037057600080fd5b50610166600881565b34801561038557600080fd5b506101996103943660046111e6565b610ec6565b3480156103a557600080fd5b506009546103b39060ff1681565b6040519015158152602001610170565b3480156103cf57600080fd5b506103fc6103de366004611236565b601a6020526000908152604090205460ff8082169161010090041682565b6040805160ff9093168352901515602083015201610170565b34801561042157600080fd5b5061016660045481565b34801561043757600080fd5b5061016660035481565b34801561044d57600080fd5b5061019961045c366004611236565b610ed3565b34801561046d57600080fd5b506002546102eb906001600160a01b031681565b610489610f49565b610491610fa3565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190611253565b905060085442116105235760405163139480c760e31b815260040160405180910390fd5b60095460ff161561054757604051637d39d27f60e11b815260040160405180910390fd5b60005b600881101561073257600083826008811061056757610567611270565b6060020180360381019061057b9190611286565b80516001600160a01b03166000908152601a602090815260409182902082518084019093525460ff8082168452610100909104161580159183019190915291925090806105fc575081600001516001600160a01b0316600a826000015160ff16600881106105eb576105eb611270565b60020201546001600160a01b031614155b8061063e575081602001516001600160c01b0316600a826000015160ff166008811061062a5761062a611270565b60020201600101546001600160c01b031614155b80610693575081604001516001600160401b0316600a826000015160ff166008811061066c5761066c611270565b6002020160010160189054906101000a90046001600160401b03166001600160401b031614155b156106b157604051632b0e0d1760e01b815260040160405180910390fd5b8215610728576000856106c5600186611320565b600881106106d5576106d5611270565b606002018036038101906106e99190611286565b905080602001516001600160c01b031683602001516001600160c01b0316111561072657604051630b149fe560e01b815260040160405180910390fd5b505b505060010161054a565b5061073b6110cc565b60005b600881101561079c5783816008811061075957610759611270565b60600201600001602081019061076f9190611236565b82826008811061078157610781611270565b6001600160a01b03909216602092909202015260010161073e565b50506009805460ff19166001179055506107b560018055565b50565b6107c0610fa3565b3233146107e057604051635d04968b60e11b815260040160405180910390fd5b60095460ff161561080457604051637d39d27f60e11b815260040160405180910390fd5b60075415806108135750600854155b15610831576040516301a7194b60e51b815260040160405180910390fd5b600754421180610842575060085442105b6108875760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881a185cc8195b991959607a1b60448201526064015b60405180910390fd5b336000908152601a602090815260409182902082518084019093525460ff808216845261010090910416158015918301919091526109fb576006543410806108cd575034155b156108eb57604051630ec4b5eb60e31b815260040160405180910390fd5b6000600a826000015160ff166008811061090757610907611270565b6002020160010160009054906101000a90046001600160c01b03169050348101600a836000015160ff166008811061094157610941611270565b6002020160010160006101000a8154816001600160c01b0302191690836001600160c01b0316021790555042600a836000015160ff166008811061098757610987611270565b6002020160010180546001600160c01b03908116600160c01b6001600160401b0394909416939093029290921790556040805133815291831660208301523482820152517fabdd90c2558a13a111c790b3e52da9a52768834a1139e2993b68b6db09c071c59181900360600190a150610c0f565b600454341080610a09575034155b15610a27576040516379bb5b6160e01b815260040160405180910390fd5b6000610a31610dc4565b90506000600a8260ff1660088110610a4b57610a4b611270565b60020201600101546001600160c01b031690506000600a60ff841660088110610a7657610a76611270565b60020201546005546001600160a01b03909116915060649060ff168302048201341015610ab657604051632b5bd98760e11b815260040160405180910390fd5b6001600160a01b03811615610af2576001600160a01b0381166000908152601a60205260409020805461ffff19169055610af08183610ffc565b505b6040518060600160405280336001600160a01b03168152602001346001600160c01b03168152602001426001600160401b0316815250600a8460ff1660088110610b3e57610b3e611270565b82516002919091029190910180546001600160a01b039092166001600160a01b03199092169190911781556020808301516040938401516001600160401b0316600160c01b026001600160c01b03909116176001928301558251808401845260ff8781168252818301938452336000818152601a855286902092518354955115156101000261ffff19909616921691909117939093179055825191825234908201527fdd0b6c6a77960e2066c96171b4d7ac9e8b4c184011f38544afa36a5bb63ec59f910160405180910390a15050505b60035442600854610c209190611320565b1015610c585760035442016008556040517fab9c9a8aeadcc64e09e3ec376616fdcd4dd4a5e728535b290e272c2f1792056f90600090a15b50610c6260018055565b565b610c6c6110eb565b604080516101008101909152600a60086000835b82821015610ce3576040805160608101825260028402860180546001600160a01b031682526001908101546001600160c01b038116602080850191909152600160c01b9091046001600160401b0316938301939093529083529092019101610c80565b50505050905090565b610cf4610f49565b6005805460ff191660ff92909216919091179055565b610d12610f49565b6000610d1e3347610ffc565b9050806107b557604051631d42c86760e21b815260040160405180910390fd5b610d46610f49565b600655565b600a8160088110610d5b57600080fd5b6002020180546001909101546001600160a01b0390911691506001600160c01b03811690600160c01b90046001600160401b031683565b610d9a610f49565b600355565b610da7610f49565b610c62600061107c565b610db9610f49565b600791909155600855565b600b546000906001600160c01b0316808203610de257600091505090565b600b54600090600160c01b90046001600160401b031660015b60088160ff161015610ebd576000600a8260ff1660088110610e1f57610e1f611270565b60020201600101546001600160c01b031690506000600a60ff841660088110610e4a57610e4a611270565b6002020160010160189054906101000a90046001600160401b0316905081600003610e7a57509095945050505050565b85821080610ea457508582148015610ea45750836001600160401b0316816001600160401b031610155b15610eb3578195508294508093505b5050600101610dfb565b50909392505050565b610ece610f49565b600455565b610edb610f49565b6001600160a01b038116610f405760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161087e565b6107b58161107c565b6000546001600160a01b03163314610c625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b600260015403610ff55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161087e565b6002600155565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161102c9190611341565b600060405180830381858888f193505050503d806000811461106a576040519150601f19603f3d011682016040523d82523d6000602084013e61106f565b606091505b5090925050505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061010001604052806008906020820280368337509192915050565b6040518061010001604052806008905b60408051606081018252600080825260208083018290529282015282526000199092019101816110fb5790505090565b600061030080838503121561113f57600080fd5b83818401111561114e57600080fd5b509092915050565b6103008101818360005b60088110156111b357815180516001600160a01b031684526020808201516001600160c01b0316818601526040918201516001600160401b03169185019190915260609093019290910190600101611160565b50505092915050565b6000602082840312156111ce57600080fd5b813560ff811681146111df57600080fd5b9392505050565b6000602082840312156111f857600080fd5b5035919050565b6000806040838503121561121257600080fd5b50508035926020909101359150565b6001600160a01b03811681146107b557600080fd5b60006020828403121561124857600080fd5b81356111df81611221565b60006020828403121561126557600080fd5b81516111df81611221565b634e487b7160e01b600052603260045260246000fd5b60006060828403121561129857600080fd5b604051606081016001600160401b0382821081831117156112c957634e487b7160e01b600052604160045260246000fd5b81604052843591506112da82611221565b9082526020840135906001600160c01b03821682146112f857600080fd5b81602084015260408501359150808216821461131357600080fd5b5060408201529392505050565b8181038181111561107657634e487b7160e01b600052601160045260246000fd5b6000825160005b818110156113625760208186018101518583015201611348565b50600092019182525091905056fea264697066735822122051d6666f7ffb476f73e6885052922e2cdb2cd9beb518d7eb104a54ee6528029064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bid()": {
        "details": "Bids must be made while the auction is live. Bids must meet a minimum reserve price. The first 8 bids made will be accepted as valid. Subsequent bids must be a percentage higher than the lowest of the 8 active bids. When a low bid is replaced, the ETH will be refunded back to the original bidder. If a valid bid comes in within the last `timeBuffer` seconds, the auction will be extended for another `timeBuffer` seconds. This will continue until no new active bids come in. If a wallet makes a bid while it still has an active bid, the second bid will stack on top of the first bid. If the second bid doesn't meet the `minStackedBidIncrement` threshold, an error will be thrown. A wallet will only have one active bid at at time."
      },
      "getAllActiveBids()": {
        "details": "Useful for ethers client to get the entire array at once."
      },
      "getBidIndexToUpdate()": {
        "details": "The index to return will be decided by the following rules: If there are less than MAX_NUM_BIDS bids, the index of the first empty slot is returned. If there are MAX_NUM_BIDS or more bids, the index of the lowest value bid is returned. If there is a tie, the most recent bid with the low amount will be returned. If there is a tie among bidTimes, the highest index is chosen."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionTimes(uint256,uint256)": {
        "details": "Only callable by the owner."
      },
      "setMinBidIncrementPercentage(uint8)": {
        "details": "Only callable by the owner."
      },
      "setMinReplacementIncrease(uint256)": {
        "details": "Only callable by the owner."
      },
      "setReservePrice(uint256)": {
        "details": "Only callable by the owner."
      },
      "setTimeBuffer(uint256)": {
        "details": "Only callable by the owner."
      },
      "settleAuction((address,uint192,uint64)[8])": {
        "details": "Bids will be sorted in descending order off-chain due to constraints with sorting structs on-chain via a field on the struct, however we will validate the input on-chain before minting the NFTs. The input bids must be in descending order by amount and all input bids must correspond to a bid in the `activeBids` mapping.Duplicate bids can be passed in to circumvent the validation logic. We are ok with this loophole since this function is ownerOnly.Settlement is only possible once the auction is over."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid()": {
        "notice": "Handle users' bids"
      },
      "getAllActiveBids()": {
        "notice": "Get all active bids."
      },
      "getBidIndexToUpdate()": {
        "notice": "Gets the index of the entry in activeBids to update"
      },
      "setAuctionTimes(uint256,uint256)": {
        "notice": "Sets the start and end time of the auction."
      },
      "setMinBidIncrementPercentage(uint8)": {
        "notice": "Set the auction minimum bid increment percentage."
      },
      "setMinReplacementIncrease(uint256)": {
        "notice": "Set the auction replacing bid buffer amount."
      },
      "setReservePrice(uint256)": {
        "notice": "Set the auction reserve price."
      },
      "setTimeBuffer(uint256)": {
        "notice": "Set the auction time buffer."
      },
      "settleAuction((address,uint192,uint64)[8])": {
        "notice": "Settles the auction and mints a skateboard ticket NFT to each winner."
      },
      "withdraw()": {
        "notice": "Withdraws the contract value to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7559,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AtlantisAddressRegistry)7493"
      },
      {
        "astId": 7561,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "timeBuffer",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7563,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "reservePrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7565,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "minBidIncrementPercentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 7567,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "minStackedBidIncrement",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7569,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "startTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7571,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "endTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7573,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "auctionSettled",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 7578,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "activeBids",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Bid)7532_storage)8_storage"
      },
      {
        "astId": 7583,
        "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
        "label": "bidIndexes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_struct(BidIndex)7537_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bid)7532_storage)8_storage": {
        "base": "t_struct(Bid)7532_storage",
        "encoding": "inplace",
        "label": "struct AtlantisAuction.Bid[8]",
        "numberOfBytes": "512"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AtlantisAddressRegistry)7493": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(BidIndex)7537_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AtlantisAuction.BidIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(BidIndex)7537_storage"
      },
      "t_struct(Bid)7532_storage": {
        "encoding": "inplace",
        "label": "struct AtlantisAuction.Bid",
        "members": [
          {
            "astId": 7527,
            "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7529,
            "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint192"
          },
          {
            "astId": 7531,
            "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
            "label": "bidTime",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BidIndex)7537_storage": {
        "encoding": "inplace",
        "label": "struct AtlantisAuction.BidIndex",
        "members": [
          {
            "astId": 7534,
            "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7536,
            "contract": "contracts/AtlantisAuction.sol:AtlantisAuction",
            "label": "isSet",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}