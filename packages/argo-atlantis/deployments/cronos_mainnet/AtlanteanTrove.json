{
  "address": "0xA9C699205283345a1858efb08B4eE72301c3F59C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "rewardData",
          "type": "tuple"
        }
      ],
      "name": "AddRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20Amount[]",
              "name": "erc20Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721Amount[]",
              "name": "erc721Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155Amount[][]",
              "name": "erc1155Amount",
              "type": "tuple[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.Amount",
          "name": "amount",
          "type": "tuple"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "rewardData",
          "type": "tuple"
        }
      ],
      "name": "RemoveRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "SetController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SetRoundExpiry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "whitelistSignerAddress",
          "type": "address"
        }
      ],
      "name": "SetWhitelistSignerAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartNewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundAmounts",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20Amount[]",
              "name": "erc20Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721Amount[]",
              "name": "erc721Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155Amount[][]",
              "name": "erc1155Amount",
              "type": "tuple[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.Amount",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundRewards",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AtlanteanTrove.Reward",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "removeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setRoundExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        }
      ],
      "name": "setWhitelistSignerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "topUpRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistSigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSignerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x20eb627a2d87f3691a21c59ad925eb87aca6fd81f7d70391b5ad9f6775bdb36f",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xA9C699205283345a1858efb08B4eE72301c3F59C",
    "transactionIndex": 2,
    "gasUsed": "4141650",
    "logsBloom": "0x
    "blockHash": "0x0e4ff30d32a3ec34650a6ee4e0b8a78edafb6f6aad7f57b5adf88488b77bdfda",
    "transactionHash": "0x20eb627a2d87f3691a21c59ad925eb87aca6fd81f7d70391b5ad9f6775bdb36f",
    "logs": [],
    "blockNumber": 8806616,
    "cumulativeGasUsed": "5906353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2FB1C26ec1FBC25d65E415b8CD07e07d5d20dcFc",
    "0x6a952f966c5dcc36a094c8ab141f027fb58f864e"
  ],
  "numDeployments": 2,
  "solcInputHash": "a33e955b73eabbe74155fec92669999e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"rewardData\",\"type\":\"tuple\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20Amount[]\",\"name\":\"erc20Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721Amount[]\",\"name\":\"erc721Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155Amount[][]\",\"name\":\"erc1155Amount\",\"type\":\"tuple[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.Amount\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"rewardData\",\"type\":\"tuple\"}],\"name\":\"RemoveRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"SetRoundExpiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelistSignerAddress\",\"type\":\"address\"}],\"name\":\"SetWhitelistSignerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartNewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundAmounts\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20Amount[]\",\"name\":\"erc20Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721Amount[]\",\"name\":\"erc721Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155Amount[][]\",\"name\":\"erc1155Amount\",\"type\":\"tuple[][]\"}],\"internalType\":\"struct AtlanteanTrove.Amount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AtlanteanTrove.Reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"removeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setRoundExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"topUpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kratos\",\"kind\":\"dev\",\"methods\":{\"claimRewards(uint256,bytes,bytes)\":{\"details\":\"Claims rewards for a round\",\"params\":{\"_round\":\"Round number\",\"nonce\":\"Random bytes32 nonce\",\"signature\":\"Signature generated off-chain\"}},\"getRoundAmounts(uint256)\":{\"params\":{\"_round\":\"Round number\"}},\"getRoundRewards(uint256)\":{\"params\":{\"_round\":\"Round number\"}},\"hasUserClaimed(uint256,address)\":{\"params\":{\"_round\":\"Round number\",\"user\":\"Address of user\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"removeRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))\":{\"details\":\"Remove rewards for a round, only for admin\",\"params\":{\"data\":\"Reward data\"}},\"setAdmin(address)\":{\"details\":\"Set address of admin EOA\",\"params\":{\"_admin\":\"Address of admin EOA\"}},\"setController(address)\":{\"details\":\"Set address of controller EOA\",\"params\":{\"_controller\":\"Address of controller EOA\"}},\"setRoundExpiry(uint256,uint256)\":{\"details\":\"Set round expiry timestamp\",\"params\":{\"_round\":\"Round number\",\"expiryTimestamp\":\"Expiry timestamp for the round\"}},\"setWhitelistSignerAddress(address)\":{\"details\":\"Set new whitelist signer address\",\"params\":{\"_whitelistSignerAddress\":\"Address of new whitelist signer\"}},\"startNewRound(uint256,uint256)\":{\"details\":\"Start a new round for controller only\",\"params\":{\"expiryTimestamp\":\"Expiry timestamp for the round\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"topUpRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))\":{\"details\":\"Top up rewards for a round, only for admin\",\"params\":{\"data\":\"Reward data\"}},\"whitelistSigned(address,uint256,bytes,bytes)\":{\"details\":\"Checks if the the signature is signed by a valid signer for whitelist\",\"params\":{\"_round\":\"Round number\",\"nonce\":\"Random bytes32 nonce\",\"sender\":\"Address of minter\",\"signature\":\"Signature generated off-chain\"}}},\"title\":\"AtlanteanTrove Quest Rewards Claiming Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"The address of the admin\"},\"controller()\":{\"notice\":\"The address of the controller\"},\"currentRound()\":{\"notice\":\"Variable to track current round\"},\"getRoundAmounts(uint256)\":{\"notice\":\"Get round amounts\"},\"getRoundRewards(uint256)\":{\"notice\":\"Get round rewards\"},\"hasUserClaimed(uint256,address)\":{\"notice\":\"Get user claim status for a round\"},\"roundTime(uint256)\":{\"notice\":\"Mapping of round to Round details\"},\"whitelistSignerAddress()\":{\"notice\":\"The address of the whitelist signer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlanteanTrove.sol\":\"AtlanteanTrove\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlanteanTrove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/// @title AtlanteanTrove Quest Rewards Claiming Contract\\r\\n/// @author Kratos\\r\\n/*\\r\\n                                                  #                             \\r\\n                                               .%%%%%%%%                        \\r\\n                                                %%%%%%%%%,                      \\r\\n                                               /%%%%%%%%%                       \\r\\n                                               %%%%%%%%%%                       \\r\\n                                               %%%%%%%%%(                       \\r\\n                                              (%%%%%%%%%                        \\r\\n                                              %%%%%%%%%#                        \\r\\n                                             %%%%%%%%%%                         \\r\\n                                            #%%%%%%%%%%                         \\r\\n                                  *%&/ *   #%%%%%%%%%% #,.#.                    \\r\\n                   .            ,         %%%%%%%%%%% .@@@#                     \\r\\n                   @&@@@#,     @         %%%%%%%%%%%                            \\r\\n                              @         %%%%%%%%%%%%       #,                   \\r\\n                   , .       @            %%%%%%%%%%%#                          \\r\\n                 ,   ,%.    .               %%%%%%%%%%% /@@@@@ *                \\r\\n                   @@@@@@@@@@              * /%%%%%%@@@@( &@@@@                 \\r\\n                  @@@&@        @@@/ .@*     @@%@@@%%%&@@@%  %.    @             \\r\\n            @      @@@@&( @@@   @@@@@@      @@@@@@   @@.(&.       @             \\r\\n           (@  / .(   %@@@@@@%(@@@@@@         @@@.%%%%%%%%%*      @@@           \\r\\n           @@@  #       @//  **@@@   @      @      %&%%%#%%%%,    @@/           \\r\\n           @@@   @      @             @    @        (%%%&%%%%     @@@,          \\r\\n         %@@@@@  @@    @.             .    @          %%%%%/     @@@@@          \\r\\n         @@@.@@@ @@@@   %@        @, (       ( @      .%%%   &@ @@@@@@          \\r\\n         &@@@#@@@@/.@@@          ,               (     /%# ,@/ @@@@@@@          \\r\\n        @&@@#@@*@&@@@ @@@@@&    (#.@          @@@    #  #  @  @@@@@@@@,         \\r\\n        (@@@@@@@@@@@@@@ @@     &@&@@@@%     (@@@@@@@        @@@@@@@(@@@         \\r\\n        @@@,@@@@*@@&@@@@.@@@ @@*@@.@*@@@@@&(@@@@@@@@@@@(   @@@@/@@@ @@          \\r\\n         @@@@@@@&@%@@@@@@@@@ @/.@#@@@@@@(@@ @@@@@@*@*@@@@@@@@@..@@@.@@@(        \\r\\n         @@@@@@,@@@@@%@@@ @ @.&@@@,@ @@.@@@@@/(@@@.@@@@@@@@@(@@@(@@@*@@         \\r\\n         @@@@ @@@@@@#@#@.@@*@((@@&@@,#        #@&@@@@%@@@@@@,@#@@@@@@@ &        \\r\\n         @@@@@@@@(@@@&@@@@@@@@@@@    ,  .,.#//(& @*@@@#@@ @@@,@@@.@@@@#         \\r\\n         @@@(@@@@@@@@@@ @,@@@@@@@,@@@@@@@@@@@@@#@@/@@@@@@@@@@@@&@@@@@@          \\r\\n          ,@ @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@,@@#@@@@@@@@@@,@@@@@@/@@@@           \\r\\n            @#@@@@(@@@ @@, @@@@@@@@*@@@@@.@@(@@@@*@ @@@@@@@@@@@@(@@             \\r\\n              @@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .            \\r\\n               @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@%@@@@/@@@@@@,@@@@&              \\r\\n                @@ @@@%@@&@@.@@@@*@@@#@@@@@@@@.@@@@@@@@#%@@@@@@@@               \\r\\n                  @@@@@@@@@@@@@ @@@@ @@@,(@@@@@@@@@@@@@@@#@@@ #                 \\r\\n                    @@@@@@@@@@,@@@@@&@@@@@@@@@@@@@@@@@.@@@@@                    \\r\\n                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@                      \\r\\n                        @ @@@@@@@,@@@@@@@#@@@@@@@@@ (@@@*                       \\r\\n                         @@@(@@@@@ @@@*@@@@@@@@@@,@@@&&                         \\r\\n                            @@@@@@@@@@ @@@@@@@@@@@@@@                           \\r\\n                               @@(@@@@@@@@@@@(@@@@@@                            \\r\\n                                  @.@@@@*@@&.@@@@@*      \\r\\n*/\\r\\n\\r\\ncontract AtlanteanTrove is IERC1155Receiver, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n    using SafeERC20 for IERC20;\\r\\n    /// @notice Mapping of round to user address to their claim status\\r\\n    mapping(uint256 => mapping(address => bool)) private hasClaimed;\\r\\n\\r\\n    /// @notice Mapping of round to Round details\\r\\n    mapping(uint256 => Round) public roundTime;\\r\\n\\r\\n    /// @notice Mapping to track each round rewards\\r\\n    mapping(uint256 => Reward) internal roundRewards;\\r\\n\\r\\n    /// @notice Mapping to track each round amounts\\r\\n    mapping(uint256 => Amount) internal roundAmounts;\\r\\n\\r\\n    /// @notice Variable to track current round\\r\\n    uint256 public currentRound = 0;\\r\\n\\r\\n    /// @notice The address of the admin\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice The address of the controller\\r\\n    address public controller;\\r\\n\\r\\n    /// @notice The address of the whitelist signer\\r\\n    address public whitelistSignerAddress;\\r\\n\\r\\n    /// Reward structs\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-20 reward is worth\\r\\n    struct RewardERC20 {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-721 reward is worth\\r\\n    struct RewardERC721 {\\r\\n        address tokenAddress;\\r\\n        uint256[] tokenIds;\\r\\n        uint256 index;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-1155 reward is worth\\r\\n    struct RewardERC1155 {\\r\\n        address tokenAddress;\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] amounts;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of total rewards claimable is worth\\r\\n    struct Reward {\\r\\n        RewardERC20[] erc20Rewards;\\r\\n        RewardERC721[] erc721Rewards;\\r\\n        RewardERC1155[] erc1155Rewards;\\r\\n    }\\r\\n\\r\\n    /// Accounting structs\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-20 in the contract in a specific round\\r\\n    struct RewardERC20Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-721 in the contract in a specific round\\r\\n    struct RewardERC721Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-1155 in the contract in a specific round\\r\\n    struct RewardERC1155Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of rewards in the contract in a specific round\\r\\n    struct Amount {\\r\\n        RewardERC20Amount[] erc20Amount;\\r\\n        RewardERC721Amount[] erc721Amount;\\r\\n        RewardERC1155Amount[][] erc1155Amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used for managing rewards by admin\\r\\n    struct RewardData {\\r\\n        uint256 round;\\r\\n        RewardERC20[] erc20Rewards;\\r\\n        uint256[] erc20Amounts;\\r\\n        RewardERC721[] erc721Rewards;\\r\\n        uint256[] erc721Amounts;\\r\\n        RewardERC1155[] erc1155Rewards;\\r\\n        uint256[][] erc1155Amounts;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used for managing rounds\\r\\n    struct Round {\\r\\n        uint256 startTime;\\r\\n        uint256 expiryTimestamp;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event SetRoundExpiry(uint256 round, uint256 expiryTimestamp);\\r\\n    event SetController(address controller);\\r\\n    event SetAdmin(address admin);\\r\\n    event SetWhitelistSignerAddress(address whitelistSignerAddress);\\r\\n    event StartNewRound(uint256 round, uint256 startTime, uint256 expiryTimestamp);\\r\\n    event ClaimRewards(uint256 round, address indexed user, Amount amount);\\r\\n    event AddRewards(uint256 round, RewardData rewardData);\\r\\n    event RemoveRewards(uint256 round, RewardData rewardData);\\r\\n\\r\\n    constructor(address _controller, address _whitelistSignerAddress) {\\r\\n        admin = msg.sender;\\r\\n        controller = _controller;\\r\\n        whitelistSignerAddress = _whitelistSignerAddress;\\r\\n    }\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Only admin can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(msg.sender == controller, \\\"Only controller can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Admin functions\\r\\n\\r\\n    /**\\r\\n     * @dev Set round expiry timestamp\\r\\n     * @param _round Round number\\r\\n     * @param expiryTimestamp Expiry timestamp for the round\\r\\n     */\\r\\n    function setRoundExpiry(uint256 _round, uint256 expiryTimestamp) external onlyAdmin {\\r\\n        // Round expiry can only be set in the future\\r\\n        require(expiryTimestamp > block.timestamp, \\\"Expiry timestamp must be in future.\\\");\\r\\n        // Set round expiry timestamp\\r\\n        roundTime[_round].expiryTimestamp = expiryTimestamp;\\r\\n        // Emit event\\r\\n        emit SetRoundExpiry(_round, expiryTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of controller EOA\\r\\n     * @param _controller Address of controller EOA\\r\\n     */\\r\\n    function setController(address _controller) external onlyAdmin {\\r\\n        // Set controller address\\r\\n        controller = _controller;\\r\\n        // Emit event\\r\\n        emit SetController(_controller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of admin EOA\\r\\n     * @param _admin Address of admin EOA\\r\\n     */\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        // Set admin address\\r\\n        admin = _admin;\\r\\n        // Emit event\\r\\n        emit SetAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set new whitelist signer address\\r\\n     * @param _whitelistSignerAddress Address of new whitelist signer\\r\\n     */\\r\\n    function setWhitelistSignerAddress(address _whitelistSignerAddress) external onlyAdmin {\\r\\n        // Set whitelist signer address\\r\\n        whitelistSignerAddress = _whitelistSignerAddress;\\r\\n        // Emit event\\r\\n        emit SetWhitelistSignerAddress(_whitelistSignerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Top up rewards for a round, only for admin\\r\\n     * @param data Reward data\\r\\n     */\\r\\n    function topUpRewards(RewardData calldata data) external onlyAdmin {\\r\\n        // Handle ERC20 rewards\\r\\n        if (data.erc20Rewards.length > 0) {\\r\\n            _handleERC20Rewards(data);\\r\\n        }\\r\\n        // Handle ERC721 rewards\\r\\n        if (data.erc721Rewards.length > 0) {\\r\\n            _handleERC721Rewards(data);\\r\\n        }\\r\\n        // Handle ERC1155 rewards\\r\\n        if (data.erc1155Rewards.length > 0) {\\r\\n            _handleERC1155Rewards(data);\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit AddRewards(data.round, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove rewards for a round, only for admin\\r\\n     * @param data Reward data\\r\\n     */\\r\\n    function removeRewards(RewardData calldata data) external onlyAdmin {\\r\\n        // Cannot remove rewards if round is already started\\r\\n        require(data.round != currentRound, \\\"Cannot modify rewards for ongoing round.\\\");\\r\\n        // Remove ERC20 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc20Rewards.length > 0) {\\r\\n            // Transfer rewards to admin\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc20Rewards.length; ) {\\r\\n                IERC20(roundRewards[data.round].erc20Rewards[i].tokenAddress).safeTransfer(admin, data.erc20Amounts[i]);\\r\\n                roundAmounts[data.round].erc20Amount[i].amount -= data.erc20Amounts[i];\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If round is not in the past, delete rewards\\r\\n            if (data.round > currentRound) {\\r\\n                delete roundRewards[data.round].erc20Rewards;\\r\\n                delete roundAmounts[data.round].erc20Amount;\\r\\n            }\\r\\n        }\\r\\n        // Remove ERC721 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc721Rewards.length > 0) {\\r\\n            // Transfer rewards to admin\\r\\n\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc721Rewards.length; ) {\\r\\n                uint256 _index = roundRewards[data.round].erc721Rewards[i].index;\\r\\n                for (\\r\\n                    uint256 j = 0;\\r\\n                    j <\\r\\n                    roundRewards[data.round].erc721Rewards[i].tokenIds.length -\\r\\n                        roundRewards[data.round].erc721Rewards[i].index;\\r\\n\\r\\n                ) {\\r\\n                    IERC721(roundRewards[data.round].erc721Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        admin,\\r\\n                        roundRewards[data.round].erc721Rewards[i].tokenIds[_index]\\r\\n                    );\\r\\n\\r\\n                    roundAmounts[data.round].erc721Amount[i].amount -= 1;\\r\\n                    unchecked {\\r\\n                        _index++;\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If round is not in the past, delete rewards\\r\\n            if (data.round > currentRound) {\\r\\n                delete roundRewards[data.round].erc721Rewards;\\r\\n                delete roundAmounts[data.round].erc721Amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove ERC1155 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc1155Rewards.length > 0)\\r\\n            // Transfer rewards to admin\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc1155Rewards.length; ) {\\r\\n                for (uint256 j = 0; j < roundRewards[data.round].erc1155Rewards[i].tokenIds.length; ) {\\r\\n                    IERC1155(roundRewards[data.round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        admin,\\r\\n                        roundRewards[data.round].erc1155Rewards[i].tokenIds[j],\\r\\n                        data.erc1155Amounts[i][j],\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n                    roundAmounts[data.round].erc1155Amount[i][j].amount -= data.erc1155Amounts[i][j];\\r\\n                    unchecked {\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n\\r\\n                if (data.round > currentRound) // If round is not in the past, delete rewards\\r\\n                {\\r\\n                    delete roundRewards[data.round].erc1155Rewards;\\r\\n                    delete roundAmounts[data.round].erc1155Amount;\\r\\n                }\\r\\n            }\\r\\n        emit RemoveRewards(data.round, data);\\r\\n    }\\r\\n\\r\\n    // Controller functions\\r\\n\\r\\n    /**\\r\\n     * @dev Start a new round for controller only\\r\\n     * @param expiryTimestamp Expiry timestamp for the round\\r\\n     */\\r\\n    function startNewRound(uint256 startTime, uint256 expiryTimestamp) external onlyController {\\r\\n        // Timestamp must be in future\\r\\n        require(expiryTimestamp > block.timestamp, \\\"Expiry timestamp must be in future.\\\");\\r\\n        // Increment currentRound\\r\\n        currentRound++;\\r\\n        // Save round details\\r\\n        roundTime[currentRound] = Round(startTime, expiryTimestamp);\\r\\n        // Emit event\\r\\n        emit StartNewRound(currentRound, startTime, expiryTimestamp);\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n\\r\\n    /**\\r\\n     * @notice Get user claim status for a round\\r\\n     * @param _round Round number\\r\\n     * @param user Address of user\\r\\n     */\\r\\n    function hasUserClaimed(uint256 _round, address user) public view returns (bool) {\\r\\n        return hasClaimed[_round][user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get round rewards\\r\\n     * @param _round Round number\\r\\n     */\\r\\n    function getRoundRewards(uint256 _round) external view returns (Reward memory) {\\r\\n        return roundRewards[_round];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get round amounts\\r\\n     * @param _round Round number\\r\\n     */\\r\\n    function getRoundAmounts(uint256 _round) external view returns (Amount memory) {\\r\\n        return roundAmounts[_round];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the the signature is signed by a valid signer for whitelist\\r\\n     * @param sender Address of minter\\r\\n     * @param _round Round number\\r\\n     * @param nonce Random bytes32 nonce\\r\\n     * @param signature Signature generated off-chain\\r\\n     */\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        uint256 _round,\\r\\n        bytes memory nonce,\\r\\n        bytes memory signature\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(sender, nonce, _round));\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        hash = keccak256(abi.encodePacked(prefix, hash));\\r\\n        return whitelistSignerAddress == hash.recover(signature);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claims rewards for a round\\r\\n     * @param _round Round number\\r\\n     * @param nonce Random bytes32 nonce\\r\\n     * @param signature Signature generated off-chain\\r\\n     */\\r\\n    function claimRewards(uint256 _round, bytes memory nonce, bytes memory signature) external nonReentrant {\\r\\n        // Check if user is whitelisted\\r\\n        require(whitelistSigned(msg.sender, _round, nonce, signature), \\\"Invalid Signature!\\\");\\r\\n        // Check if user has already claimed\\r\\n        require(!hasUserClaimed(_round, msg.sender), \\\"User has already claimed rewards.\\\");\\r\\n        // Check if round has expired\\r\\n        require(block.timestamp <= roundTime[_round].expiryTimestamp, \\\"Round has expired.\\\");\\r\\n        // Check if round has started\\r\\n        require(block.timestamp >= roundTime[_round].startTime, \\\"Round has not started.\\\");\\r\\n        // Mark user as claimed\\r\\n        hasClaimed[_round][msg.sender] = true;\\r\\n        // Initialise variables for events logging\\r\\n        Amount memory claimedAmounts;\\r\\n        claimedAmounts.erc20Amount = new RewardERC20Amount[](roundRewards[_round].erc20Rewards.length);\\r\\n        claimedAmounts.erc721Amount = new RewardERC721Amount[](roundRewards[_round].erc721Rewards.length);\\r\\n        claimedAmounts.erc1155Amount = new RewardERC1155Amount[][](roundRewards[_round].erc1155Rewards.length);\\r\\n\\r\\n        // If there are ERC20 token rewards, transfer\\r\\n        if (roundRewards[_round].erc20Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc20Rewards.length; ) {\\r\\n                // Reduce amount of reward amount after transfer\\r\\n                roundAmounts[_round].erc20Amount[i].amount -= roundRewards[_round].erc20Rewards[i].amount;\\r\\n                // Record amount for event logging\\r\\n                claimedAmounts.erc20Amount[i].tokenAddress = roundRewards[_round].erc20Rewards[i].tokenAddress;\\r\\n                claimedAmounts.erc20Amount[i].amount = roundRewards[_round].erc20Rewards[i].amount;\\r\\n\\r\\n                IERC20(roundRewards[_round].erc20Rewards[i].tokenAddress).safeTransfer(\\r\\n                    msg.sender,\\r\\n                    roundRewards[_round].erc20Rewards[i].amount\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If there are ERC721 token rewards, transfer\\r\\n        if (roundRewards[_round].erc721Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc721Rewards.length; ) {\\r\\n                // Reduce amount of reward amount after transfer\\r\\n                roundAmounts[_round].erc721Amount[i].amount -= 1;\\r\\n                // Record amount for event logging\\r\\n                claimedAmounts.erc721Amount[i].tokenAddress = roundRewards[_round].erc721Rewards[i].tokenAddress;\\r\\n                claimedAmounts.erc721Amount[i].amount = 1;\\r\\n                IERC721(roundRewards[_round].erc721Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    roundRewards[_round].erc721Rewards[i].tokenIds[roundRewards[_round].erc721Rewards[i].index]\\r\\n                );\\r\\n                // Increment index\\r\\n                unchecked {\\r\\n                    roundRewards[_round].erc721Rewards[i].index++;\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If there are ERC1155 token rewards, transfer\\r\\n        if (roundRewards[_round].erc1155Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc1155Rewards.length; ) {\\r\\n                claimedAmounts.erc1155Amount[i] = new RewardERC1155Amount[](\\r\\n                    roundRewards[_round].erc1155Rewards[i].tokenIds.length\\r\\n                );\\r\\n                for (uint256 j = 0; j < roundRewards[_round].erc1155Rewards[i].tokenIds.length; ) {\\r\\n                    // Reduce amount of reward amount after transfer\\r\\n                    roundAmounts[_round].erc1155Amount[i][j].amount -= roundRewards[_round].erc1155Rewards[i].amounts[\\r\\n                        j\\r\\n                    ];\\r\\n                    // Record amount for event logging\\r\\n                    claimedAmounts.erc1155Amount[i][j].tokenAddress = roundRewards[_round]\\r\\n                        .erc1155Rewards[i]\\r\\n                        .tokenAddress;\\r\\n                    claimedAmounts.erc1155Amount[i][j].tokenId = roundRewards[_round].erc1155Rewards[i].tokenIds[j];\\r\\n                    claimedAmounts.erc1155Amount[i][j].amount = roundRewards[_round].erc1155Rewards[i].amounts[j];\\r\\n                    IERC1155(roundRewards[_round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        msg.sender,\\r\\n                        roundRewards[_round].erc1155Rewards[i].tokenIds[j],\\r\\n                        roundRewards[_round].erc1155Rewards[i].amounts[j],\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n                    unchecked {\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Emit event\\r\\n        emit ClaimRewards(_round, msg.sender, claimedAmounts);\\r\\n    }\\r\\n\\r\\n    // Internal helper functions\\r\\n\\r\\n    function _handleERC20Rewards(RewardData calldata data) internal {\\r\\n        if (roundRewards[data.round].erc20Rewards.length == 0) {\\r\\n            // Add rewards to round\\r\\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n                roundRewards[data.round].erc20Rewards.push(data.erc20Rewards[i]);\\r\\n                roundAmounts[data.round].erc20Amount.push(\\r\\n                    RewardERC20Amount(data.erc20Rewards[i].tokenAddress, data.erc20Amounts[i])\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Already existing rewards cannot change reward amount, can only top up reward\\r\\n            // Ensure that the token address is the same\\r\\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n                require(\\r\\n                    roundRewards[data.round].erc20Rewards[i].tokenAddress == data.erc20Rewards[i].tokenAddress,\\r\\n                    \\\"Token address cannot be changed.\\\"\\r\\n                );\\r\\n                roundAmounts[data.round].erc20Amount[i].amount += data.erc20Amounts[i];\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Transfer ERC20 tokens to contract\\r\\n        for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n            IERC20(data.erc20Rewards[i].tokenAddress).safeTransferFrom(msg.sender, address(this), data.erc20Amounts[i]);\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _handleERC721Rewards(RewardData calldata data) internal {\\r\\n        // No existing rewards\\r\\n        if (roundRewards[data.round].erc721Rewards.length == 0) {\\r\\n            // Add rewards to round\\r\\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n                roundRewards[data.round].erc721Rewards.push(data.erc721Rewards[i]);\\r\\n                roundAmounts[data.round].erc721Amount.push(\\r\\n                    RewardERC721Amount(data.erc721Rewards[i].tokenAddress, data.erc721Amounts[i])\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Already existing rewards cannot change reward amount, can only top up reward\\r\\n            // Ensure that the token address is the same\\r\\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n                require(\\r\\n                    roundRewards[data.round].erc721Rewards[i].tokenAddress == data.erc721Rewards[i].tokenAddress,\\r\\n                    \\\"Token address cannot be changed.\\\"\\r\\n                );\\r\\n                for (uint256 j; j < data.erc721Rewards[i].tokenIds.length; j++) {\\r\\n                    roundRewards[data.round].erc721Rewards[i].tokenIds.push(data.erc721Rewards[i].tokenIds[j]);\\r\\n                }\\r\\n                roundAmounts[data.round].erc721Amount[i].amount += data.erc721Amounts[i];\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Transfer ERC721 tokens to contract\\r\\n        for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n            for (uint256 j = 0; j < data.erc721Rewards[i].tokenIds.length; ) {\\r\\n                IERC721(data.erc721Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    data.erc721Rewards[i].tokenIds[j]\\r\\n                );\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _handleERC1155Rewards(RewardData calldata data) internal {\\r\\n        if (roundRewards[data.round].erc1155Rewards.length == 0) {\\r\\n            // Add rewards to round\\r\\n            for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n                roundRewards[data.round].erc1155Rewards.push(data.erc1155Rewards[i]);\\r\\n                roundAmounts[data.round].erc1155Amount.push();\\r\\n                for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n                    roundAmounts[data.round].erc1155Amount[i].push(\\r\\n                        RewardERC1155Amount(\\r\\n                            data.erc1155Rewards[i].tokenAddress,\\r\\n                            data.erc1155Rewards[i].tokenIds[j],\\r\\n                            data.erc1155Amounts[i][j]\\r\\n                        )\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Already existing rewards cannot change reward amount, can only top up reward\\r\\n            // Ensure that the token address is the same\\r\\n            for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n                for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n                    require(\\r\\n                        roundRewards[data.round].erc1155Rewards[i].tokenAddress == data.erc1155Rewards[i].tokenAddress,\\r\\n                        \\\"Token address cannot be changed.\\\"\\r\\n                    );\\r\\n                    roundAmounts[data.round].erc1155Amount[i][j].amount += data.erc1155Amounts[i][j];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Transfer ERC1155 tokens to contract\\r\\n        for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n            for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n                IERC1155(data.erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    data.erc1155Rewards[i].tokenIds[j],\\r\\n                    data.erc1155Amounts[i][j],\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        // Add your custom logic for handling ERC1155 token transfers\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        // Add your custom logic for handling ERC1155 token transfers\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc940abfafcfdefece364ae4ebd055e8b9c328d9e652775192b52028cf5ae834b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806392eefe9b116100ad578063f23a6e6111610071578063f23a6e61146102e9578063f504764d14610309578063f77c47911461031c578063f851a4401461032f578063fd56981a1461034257600080fd5b806392eefe9b14610262578063bc197c8114610275578063bd9c62b8146102b0578063d7f8d847146102c3578063db51fae3146102d657600080fd5b8063501c6e4f116100f4578063501c6e4f146101e557806353a4554614610205578063704b6c02146102185780638a19c8bc1461022b57806391e2057e1461024257600080fd5b806301ffc9a714610131578063040ae2591461015957806307c7a72d1461016e57806324fccf25146101a757806336116989146101d2575b600080fd5b61014461013f366004613709565b61037e565b60405190151581526020015b60405180910390f35b61016c61016736600461373a565b6103b5565b005b61014461017c366004613771565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008546101ba906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b61016c6101e03660046137a1565b6104d0565b6101f86101f33660046137db565b610c65565b604051610150919061395c565b610144610213366004613a11565b610e53565b61016c610226366004613a90565b610f06565b61023460055481565b604051908152602001610150565b6102556102503660046137db565b610f7e565b6040516101509190613b79565b61016c610270366004613a90565b611208565b610297610283366004613d0e565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b03199091168152602001610150565b61016c6102be36600461373a565b611280565b61016c6102d1366004613dcc565b611314565b61016c6102e43660046137a1565b611fc6565b6102976102f7366004613e38565b63f23a6e6160e01b9695505050505050565b61016c610317366004613a90565b612083565b6007546101ba906001600160a01b031681565b6006546101ba906001600160a01b031681565b6103696103503660046137db565b6002602052600090815260409020805460019091015482565b60408051928352602083019190915201610150565b60006001600160e01b03198216630271189760e51b14806103af57506001600160e01b031982166301ffc9a760e01b145b92915050565b6007546001600160a01b031633146104245760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920636f6e74726f6c6c65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084015b60405180910390fd5b4281116104435760405162461bcd60e51b815260040161041b90613eb3565b6005805490600061045383613f0c565b9091555050604080518082018252838152602080820184815260058054600090815260028452859020935184559051600190930192909255905482519081529081018490529081018290527f6335d9a954a31d127d43737ee99cf9c5b5f5b0c4c813c136886bef6217092e51906060015b60405180910390a15050565b6006546001600160a01b031633146104fa5760405162461bcd60e51b815260040161041b90613f25565b60055481350361055d5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f74206d6f64696679207265776172647320666f72206f6e676f696e60448201526733903937bab7321760c11b606482015260840161041b565b8035600090815260036020526040902054156106c85760005b813560009081526003602052604090205481101561068a5760065461060e906001600160a01b03166105ab6040850185613f67565b848181106105bb576105bb613fb0565b90506020020135600360008660000135815260200190815260200160002060000184815481106105ed576105ed613fb0565b60009182526020909120600290910201546001600160a01b031691906120fb565b61061b6040830183613f67565b8281811061062b5761062b613fb0565b905060200201356004600084600001358152602001908152602001600020600001828154811061065d5761065d613fb0565b9060005260206000209060020201600101600082825461067d9190613fc6565b9091555050600101610576565b50600554813511156106c857803560009081526003602052604081206106af9161354f565b803560009081526004602052604081206106c89161354f565b8035600090815260036020526040902060010154156109645760005b813560009081526003602052604090206001015481101561091a578135600090815260036020526040812060010180548390811061072457610724613fb0565b906000526020600020906003020160020154905060005b8335600090815260036020526040902060010180548490811061076057610760613fb0565b9060005260206000209060030201600201546003600086600001358152602001908152602001600020600101848154811061079d5761079d613fb0565b9060005260206000209060030201600101805490506107bc9190613fc6565b81101561091057833560009081526003602052604090206001018054849081106107e8576107e8613fb0565b60009182526020808320600392830201546006548835855292909152604090922060010180546001600160a01b03938416936342842e0e9330939116918890811061083557610835613fb0565b9060005260206000209060030201600101868154811061085757610857613fb0565b90600052602060002001546040518463ffffffff1660e01b815260040161088093929190613fd9565b600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b505050506001600460008660000135815260200190815260200160002060010184815481106108df576108df613fb0565b906000526020600020906002020160010160008282546108ff9190613fc6565b90915550506001918201910161073b565b50506001016106e4565b5060055481351115610964578035600090815260036020526040812061094591600190910190613570565b803560009081526004602052604081206109649160019091019061354f565b803560009081526003602052604090206002015415610c275760005b8135600090815260036020526040902060020154811015610c255760005b823560009081526003602052604090206002018054839081106109c3576109c3613fb0565b906000526020600020906003020160010180549050811015610bd05782356000908152600360205260409020600201805483908110610a0457610a04613fb0565b60009182526020808320600392830201546006548735855292909152604090922060020180546001600160a01b039384169363f242432a93309391169187908110610a5157610a51613fb0565b90600052602060002090600302016001018581548110610a7357610a73613fb0565b600091825260209091200154610a8c60c0890189613f67565b88818110610a9c57610a9c613fb0565b9050602002810190610aae9190613f67565b87818110610abe57610abe613fb0565b905060200201356040518563ffffffff1660e01b8152600401610ae49493929190613ffd565b600060405180830381600087803b158015610afe57600080fd5b505af1158015610b12573d6000803e3d6000fd5b50610b249250505060c0840184613f67565b83818110610b3457610b34613fb0565b9050602002810190610b469190613f67565b82818110610b5657610b56613fb0565b9050602002013560046000856000013581526020019081526020016000206002018381548110610b8857610b88613fb0565b906000526020600020018281548110610ba357610ba3613fb0565b90600052602060002090600302016002016000828254610bc39190613fc6565b909155505060010161099e565b5060055460019091019082351115610c205781356000908152600360205260408120610c0191600290910190613591565b81356000908152600460205260408120610c20916002909101906135b2565b610980565b505b6040517ff665bccf3fa0d23a55c77a157157f756295e189977065e4ef7f57c72d77208d790610c5a9083359084906142da565b60405180910390a150565b610c8960405180606001604052806060815260200160608152602001606081525090565b60008281526004602090815260408083208151815460809481028201850190935260608101838152909491938593919285929185015b82821015610d07576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610cbf565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610d7c576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610d34565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610e4557838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610e32576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ddd565b5050505081526020019060010190610da9565b505050915250909392505050565b600080858486604051602001610e6b939291906143fe565b60408051601f1981840301815282825280516020918201208383018352601c84527f19457468657265756d205369676e6564204d6573736167653a0a333200000000848301529151919350610ec491839185910161443d565b60408051601f1981840301815291905280516020909101209150610ee8828561215e565b6008546001600160a01b03908116911614925050505b949350505050565b6006546001600160a01b03163314610f305760405162461bcd60e51b815260040161041b90613f25565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190602001610c5a565b610fa260405180606001604052806060815260200160608152602001606081525090565b60008281526003602090815260408083208151815460809481028201850190935260608101838152909491938593919285929185015b82821015611020576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610fd8565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156110ed576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156110cb57602002820191906000526020600020905b8154815260200190600101908083116110b7575b505050505081526020016002820154815250508152602001906001019061104d565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610e45576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561119857602002820191906000526020600020905b815481526020019060010190808311611184575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156111f057602002820191906000526020600020905b8154815260200190600101908083116111dc575b5050505050815250508152602001906001019061111a565b6006546001600160a01b031633146112325760405162461bcd60e51b815260040161041b90613f25565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f7090602001610c5a565b6006546001600160a01b031633146112aa5760405162461bcd60e51b815260040161041b90613f25565b4281116112c95760405162461bcd60e51b815260040161041b90613eb3565b60008281526002602090815260409182902060010183905581518481529081018390527fc9123c2e200f7f5152a8adda78477d9cd7a4602d8fcad7787bc36e6b8669b64791016104c4565b61131c612182565b61132833848484610e53565b6113695760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964205369676e61747572652160701b604482015260640161041b565b600083815260016020908152604080832033845290915290205460ff16156113dd5760405162461bcd60e51b815260206004820152602160248201527f557365722068617320616c726561647920636c61696d656420726577617264736044820152601760f91b606482015260840161041b565b6000838152600260205260409020600101544211156114335760405162461bcd60e51b81526020600482015260126024820152712937bab732103430b99032bc3834b932b21760711b604482015260640161041b565b60008381526002602052604090205442101561148a5760405162461bcd60e51b81526020600482015260166024820152752937bab732103430b9903737ba1039ba30b93a32b21760511b604482015260640161041b565b60008381526001602081815260408084203385528252808420805460ff19169093179092558151606080820184528082528183018190528184015286845260039091529120546001600160401b038111156114e7576114e761396f565b60405190808252806020026020018201604052801561152c57816020015b60408051808201909152600080825260208201528152602001906001900390816115055790505b5081526000848152600360205260409020600101546001600160401b038111156115585761155861396f565b60405190808252806020026020018201604052801561159d57816020015b60408051808201909152600080825260208201528152602001906001900390816115765790505b506020808301919091526000858152600390915260409020600201546001600160401b038111156115d0576115d061396f565b60405190808252806020026020018201604052801561160357816020015b60608152602001906001900390816115ee5790505b50604080830191909152600085815260036020522054156117e65760005b6000858152600360205260409020548110156117e457600085815260036020526040902080548290811061165757611657613fb0565b90600052602060002090600202016001015460046000878152602001908152602001600020600001828154811061169057611690613fb0565b906000526020600020906002020160010160008282546116b09190613fc6565b909155505060008581526003602052604090208054829081106116d5576116d5613fb0565b6000918252602090912060029091020154825180516001600160a01b03909216918390811061170657611706613fb0565b6020908102919091018101516001600160a01b03909216909152600086815260039091526040902080548290811061174057611740613fb0565b9060005260206000209060020201600101548260000151828151811061176857611768613fb0565b602002602001015160200181815250506117dc336003600088815260200190815260200160002060000183815481106117a3576117a3613fb0565b9060005260206000209060020201600101546003600089815260200190815260200160002060000184815481106105ed576105ed613fb0565b600101611621565b505b60008481526003602052604090206001015415611a745760005b600085815260036020526040902060010154811015611a72576000858152600460205260409020600190810180548390811061183e5761183e613fb0565b9060005260206000209060020201600101600082825461185e9190613fc6565b9091555050600085815260036020526040902060010180548290811061188657611886613fb0565b6000918252602091829020600390910201549083015180516001600160a01b0390921691839081106118ba576118ba613fb0565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250506001826020015182815181106118f6576118f6613fb0565b6020026020010151602001818152505060036000868152602001908152602001600020600101818154811061192d5761192d613fb0565b6000918252602080832060039283020154888452919052604090912060010180546001600160a01b03909216916342842e0e9130913391908690811061197557611975613fb0565b9060005260206000209060030201600101600360008b815260200190815260200160002060010186815481106119ad576119ad613fb0565b906000526020600020906003020160020154815481106119cf576119cf613fb0565b90600052602060002001546040518463ffffffff1660e01b81526004016119f893929190613fd9565b600060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b5050506000868152600360205260409020600101805490915082908110611a4f57611a4f613fb0565b600091825260209091206002600390920201018054600190810190915501611800565b505b60008481526003602052604090206002015415611f735760005b600085815260036020526040902060020154811015611f71576000858152600360205260409020600201805482908110611aca57611aca613fb0565b9060005260206000209060030201600101805490506001600160401b03811115611af657611af661396f565b604051908082528060200260200182016040528015611b5457816020015b611b41604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081611b145790505b5082604001518281518110611b6b57611b6b613fb0565b602002602001018190525060005b6000868152600360205260409020600201805483908110611b9c57611b9c613fb0565b906000526020600020906003020160010180549050811015611f68576000868152600360205260409020600201805483908110611bdb57611bdb613fb0565b90600052602060002090600302016002018181548110611bfd57611bfd613fb0565b9060005260206000200154600460008881526020019081526020016000206002018381548110611c2f57611c2f613fb0565b906000526020600020018281548110611c4a57611c4a613fb0565b90600052602060002090600302016002016000828254611c6a9190613fc6565b90915550506000868152600360205260409020600201805483908110611c9257611c92613fb0565b6000918252602090912060039091020154604084015180516001600160a01b039092169184908110611cc657611cc6613fb0565b60200260200101518281518110611cdf57611cdf613fb0565b6020908102919091018101516001600160a01b039092169091526000878152600390915260409020600201805483908110611d1c57611d1c613fb0565b90600052602060002090600302016001018181548110611d3e57611d3e613fb0565b906000526020600020015483604001518381518110611d5f57611d5f613fb0565b60200260200101518281518110611d7857611d78613fb0565b60200260200101516020018181525050600360008781526020019081526020016000206002018281548110611daf57611daf613fb0565b90600052602060002090600302016002018181548110611dd157611dd1613fb0565b906000526020600020015483604001518381518110611df257611df2613fb0565b60200260200101518281518110611e0b57611e0b613fb0565b60200260200101516040018181525050600360008781526020019081526020016000206002018281548110611e4257611e42613fb0565b6000918252602080832060039283020154898452919052604090912060020180546001600160a01b039092169163f242432a91309133919087908110611e8a57611e8a613fb0565b90600052602060002090600302016001018581548110611eac57611eac613fb0565b9060005260206000200154600360008c81526020019081526020016000206002018781548110611ede57611ede613fb0565b90600052602060002090600302016002018681548110611f0057611f00613fb0565b90600052602060002001546040518563ffffffff1660e01b8152600401611f2a9493929190613ffd565b600060405180830381600087803b158015611f4457600080fd5b505af1158015611f58573d6000803e3d6000fd5b505060019092019150611b799050565b50600101611a8e565b505b336001600160a01b03167f50d77aff18471f02a90108d0890292b485cc931a52bac94c1e33b7eb525e25168583604051611fae92919061445f565b60405180910390a250611fc16001600055565b505050565b6006546001600160a01b03163314611ff05760405162461bcd60e51b815260040161041b90613f25565b6000611fff6020830183614478565b9050111561201057612010816121db565b600061201f6060830183613f67565b905011156120305761203081612508565b600061203f60a0830183613f67565b905011156120505761205081612a2e565b6040517fa2675b8041bce0f157b89f1833dd1c4013ac88fb7d72abd5eee91093fb04ca1790610c5a9083359084906142da565b6006546001600160a01b031633146120ad5760405162461bcd60e51b815260040161041b90613f25565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd69451aace2c16163f3a93c8c3b48e4ae1bdece685316d298c640955c14e1b4090602001610c5a565b6040516001600160a01b038316602482015260448101829052611fc190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613078565b600080600061216d858561314a565b9150915061217a8161318f565b509392505050565b6002600054036121d45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161041b565b6002600055565b803560009081526003602052604081205490036123435760005b6122026020830183614478565b905081101561233d57813560009081526003602090815260409091209061222b90840184614478565b8381811061223b5761223b613fb0565b83546001810185556000948552602090942060409091029290920192600202909101905061226982826144e1565b5050813560009081526004602090815260409182902082518084019093529190819061229790860186614478565b858181106122a7576122a7613fb0565b6122bd9260206040909202019081019150613a90565b6001600160a01b031681526020016122d86040860186613f67565b858181106122e8576122e8613fb0565b60209081029290920135909252835460018082018655600095865294829020845160029092020180546001600160a01b0319166001600160a01b039092169190911781559201519183019190915550016121f5565b50612473565b60005b6123536020830183614478565b9050811015612471576123696020830183614478565b8281811061237957612379613fb0565b61238f9260206040909202019081019150613a90565b8235600090815260036020526040902080546001600160a01b039290921691839081106123be576123be613fb0565b60009182526020909120600290910201546001600160a01b0316146123f55760405162461bcd60e51b815260040161041b90614505565b6124026040830183613f67565b8281811061241257612412613fb0565b905060200201356004600084600001358152602001908152602001600020600001828154811061244457612444613fb0565b90600052602060002090600202016001016000828254612464919061453a565b9091555050600101612346565b505b60005b6124836020830183614478565b9050811015612504576124fc333061249e6040860186613f67565b858181106124ae576124ae613fb0565b905060200201358580602001906124c59190614478565b868181106124d5576124d5613fb0565b6124eb9260206040909202019081019150613a90565b6001600160a01b03169291906132dc565b600101612476565b5050565b803560009081526003602052604081206001015490036126835760005b6125326060830183613f67565b905081101561267d578135600090815260036020526040902060010161255b6060840184613f67565b8381811061256b5761256b613fb0565b905060200281019061257d919061454d565b81546001810183556000928352602090922090916003020161259f8282614600565b5050813560009081526004602052604090819020815180830190925260010190806125cd6060860186613f67565b858181106125dd576125dd613fb0565b90506020028101906125ef919061454d565b6125fd906020810190613a90565b6001600160a01b031681526020016126186080860186613f67565b8581811061262857612628613fb0565b60209081029290920135909252835460018082018655600095865294829020845160029092020180546001600160a01b0319166001600160a01b03909216919091178155920151918301919091555001612525565b506128c6565b60005b6126936060830183613f67565b90508110156128c4576126a96060830183613f67565b828181106126b9576126b9613fb0565b90506020028101906126cb919061454d565b6126d9906020810190613a90565b6001600160a01b03166003600084600001358152602001908152602001600020600101828154811061270d5761270d613fb0565b60009182526020909120600390910201546001600160a01b0316146127445760405162461bcd60e51b815260040161041b90614505565b60005b6127546060840184613f67565b8381811061276457612764613fb0565b9050602002810190612776919061454d565b612784906020810190613f67565b905081101561284757823560009081526003602052604090206001018054839081106127b2576127b2613fb0565b90600052602060002090600302016001018380606001906127d39190613f67565b848181106127e3576127e3613fb0565b90506020028101906127f5919061454d565b612803906020810190613f67565b8381811061281357612813613fb0565b835460018101855560009485526020948590209190940292909201359190920155508061283f81613f0c565b915050612747565b506128556080830183613f67565b8281811061286557612865613fb0565b905060200201356004600084600001358152602001908152602001600020600101828154811061289757612897613fb0565b906000526020600020906002020160010160008282546128b7919061453a565b9091555050600101612686565b505b60005b6128d66060830183613f67565b90508110156125045760005b6128ef6060840184613f67565b838181106128ff576128ff613fb0565b9050602002810190612911919061454d565b61291f906020810190613f67565b9050811015612a25576129356060840184613f67565b8381811061294557612945613fb0565b9050602002810190612957919061454d565b612965906020810190613a90565b6001600160a01b03166342842e0e33306129826060880188613f67565b8781811061299257612992613fb0565b90506020028101906129a4919061454d565b6129b2906020810190613f67565b868181106129c2576129c2613fb0565b905060200201356040518463ffffffff1660e01b81526004016129e793929190613fd9565b600060405180830381600087803b158015612a0157600080fd5b505af1158015612a15573d6000803e3d6000fd5b5050600190920191506128e29050565b506001016128c9565b80356000908152600360205260408120600201549003612cd25760005b612a5860a0830183613f67565b9050811015612ccc5781356000908152600360205260409020600201612a8160a0840184613f67565b83818110612a9157612a91613fb0565b9050602002810190612aa3919061454d565b815460018101835560009283526020909220909160030201612ac582826146c1565b5050813560009081526004602052604081206002018054600101815581525b612af160a0840184613f67565b83818110612b0157612b01613fb0565b9050602002810190612b13919061454d565b612b21906020810190613f67565b9050811015612cb95782356000908152600460205260409020600201805483908110612b4f57612b4f613fb0565b906000526020600020016040518060600160405280858060a00190612b749190613f67565b86818110612b8457612b84613fb0565b9050602002810190612b96919061454d565b612ba4906020810190613a90565b6001600160a01b03168152602001612bbf60a0870187613f67565b86818110612bcf57612bcf613fb0565b9050602002810190612be1919061454d565b612bef906020810190613f67565b85818110612bff57612bff613fb0565b905060200201358152602001858060c00190612c1b9190613f67565b86818110612c2b57612c2b613fb0565b9050602002810190612c3d9190613f67565b85818110612c4d57612c4d613fb0565b60209081029290920135909252835460018082018655600095865294829020845160039092020180546001600160a01b0319166001600160a01b039092169190911781559083015193810193909355506040015160029091015580612cb181613f0c565b915050612ae4565b5080612cc481613f0c565b915050612a4b565b50612eb5565b60005b612ce260a0830183613f67565b9050811015612eb35760005b612cfb60a0840184613f67565b83818110612d0b57612d0b613fb0565b9050602002810190612d1d919061454d565b612d2b906020810190613f67565b9050811015612ea057612d4160a0840184613f67565b83818110612d5157612d51613fb0565b9050602002810190612d63919061454d565b612d71906020810190613a90565b6001600160a01b031660036000856000013581526020019081526020016000206002018381548110612da557612da5613fb0565b60009182526020909120600390910201546001600160a01b031614612ddc5760405162461bcd60e51b815260040161041b90614505565b612de960c0840184613f67565b83818110612df957612df9613fb0565b9050602002810190612e0b9190613f67565b82818110612e1b57612e1b613fb0565b9050602002013560046000856000013581526020019081526020016000206002018381548110612e4d57612e4d613fb0565b906000526020600020018281548110612e6857612e68613fb0565b90600052602060002090600302016002016000828254612e88919061453a565b90915550819050612e9881613f0c565b915050612cee565b5080612eab81613f0c565b915050612cd5565b505b60005b612ec560a0830183613f67565b90508110156125045760005b612ede60a0840184613f67565b83818110612eee57612eee613fb0565b9050602002810190612f00919061454d565b612f0e906020810190613f67565b905081101561306557612f2460a0840184613f67565b83818110612f3457612f34613fb0565b9050602002810190612f46919061454d565b612f54906020810190613a90565b6001600160a01b031663f242432a3330612f7160a0880188613f67565b87818110612f8157612f81613fb0565b9050602002810190612f93919061454d565b612fa1906020810190613f67565b86818110612fb157612fb1613fb0565b90506020020135878060c00190612fc89190613f67565b88818110612fd857612fd8613fb0565b9050602002810190612fea9190613f67565b87818110612ffa57612ffa613fb0565b905060200201356040518563ffffffff1660e01b81526004016130209493929190613ffd565b600060405180830381600087803b15801561303a57600080fd5b505af115801561304e573d6000803e3d6000fd5b50505050808061305d90613f0c565b915050612ed1565b508061307081613f0c565b915050612eb8565b60006130cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133039092919063ffffffff16565b805190915015611fc157808060200190518101906130eb919061478f565b611fc15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161041b565b60008082516041036131805760208301516040840151606085015160001a61317487828585613312565b94509450505050613188565b506000905060025b9250929050565b60008160048111156131a3576131a36147b1565b036131ab5750565b60018160048111156131bf576131bf6147b1565b0361320c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161041b565b6002816004811115613220576132206147b1565b0361326d5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161041b565b6003816004811115613281576132816147b1565b036132d95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161041b565b50565b6132fd846323b872dd60e01b85858560405160240161212793929190613fd9565b50505050565b6060610efe84846000856133d6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561334957506000905060036133cd565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561339d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166133c6576000600192509250506133cd565b9150600090505b94509492505050565b6060824710156134375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161041b565b600080866001600160a01b0316858760405161345391906147c7565b60006040518083038185875af1925050503d8060008114613490576040519150601f19603f3d011682016040523d82523d6000602084013e613495565b606091505b50915091506134a6878383876134b1565b979650505050505050565b60608315613520578251600003613519576001600160a01b0385163b6135195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161041b565b5081610efe565b610efe83838151156135355781518083602001fd5b8060405162461bcd60e51b815260040161041b91906147d9565b50805460008255600202906000526020600020908101906132d991906135d0565b50805460008255600302906000526020600020908101906132d991906135fa565b50805460008255600302906000526020600020908101906132d9919061362f565b50805460008255906000526020600020908101906132d9919061366b565b5b808211156135f65780546001600160a01b0319168155600060018201556002016135d1565b5090565b808211156135f65780546001600160a01b0319168155600061361f6001830182613688565b50600060028201556003016135fa565b808211156135f65780546001600160a01b031916815560006136546001830182613688565b613662600283016000613688565b5060030161362f565b808211156135f657600061367f82826136a6565b5060010161366b565b50805460008255906000526020600020908101906132d991906136c7565b50805460008255600302906000526020600020908101906132d991906136dc565b5b808211156135f657600081556001016136c8565b5b808211156135f65780546001600160a01b031916815560006001820181905560028201556003016136dd565b60006020828403121561371b57600080fd5b81356001600160e01b03198116811461373357600080fd5b9392505050565b6000806040838503121561374d57600080fd5b50508035926020909101359150565b6001600160a01b03811681146132d957600080fd5b6000806040838503121561378457600080fd5b8235915060208301356137968161375c565b809150509250929050565b6000602082840312156137b357600080fd5b81356001600160401b038111156137c957600080fd5b820160e0818503121561373357600080fd5b6000602082840312156137ed57600080fd5b5035919050565b600081518084526020808501808196508360051b810191508286016000805b86811015613881578385038a52825180518087529087019087870190845b8181101561386c57835180516001600160a01b031684528a8101518b8501526040908101519084015292890192606090920191600101613831565b50509a87019a95505091850191600101613813565b509298975050505050505050565b805160608084528151908401819052600091602091908201906080860190845b818110156138e8576138d583855180516001600160a01b03168252602090810151910152565b92840192604092909201916001016138af565b50508483015186820387850152805180835290840192506000918401905b808310156139425761392c82855180516001600160a01b03168252602090810151910152565b6040820191508484019350600183019250613906565b506040860151935086810360408801526134a681856137f4565b602081526000613733602083018461388f565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261399657600080fd5b81356001600160401b03808211156139b0576139b061396f565b604051601f8301601f19908116603f011681019082821181831017156139d8576139d861396f565b816040528381528660208588010111156139f157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215613a2757600080fd5b8435613a328161375c565b93506020850135925060408501356001600160401b0380821115613a5557600080fd5b613a6188838901613985565b93506060870135915080821115613a7757600080fd5b50613a8487828801613985565b91505092959194509250565b600060208284031215613aa257600080fd5b81356137338161375c565b600081518084526020808501945080840160005b83811015613add57815187529582019590820190600101613ac1565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613b6c578284038952815180516001600160a01b0316855285810151606087870181905290613b3b82880182613aad565b91505060408083015192508682038188015250613b588183613aad565b9a87019a9550505090840190600101613b06565b5091979650505050505050565b60208082528251606083830181905281516080850181905260009392830191849160a08701905b80841015613bdc57613bc682865180516001600160a01b03168252602090810151910152565b6040820191508585019450600184019350613ba0565b50848801519350601f19925060408388830301818901528185518084528784019150878160051b850101888801975060005b82811015613c5f5785820388018452885180516001600160a01b031683528a8101518b8401899052613c4289850182613aad565b9187015193870193909352988a0198938a01939150600101613c0e565b50838c01519850868b820301868c0152613c79818a613ae8565b9c9b505050505050505050505050565b60008083601f840112613c9b57600080fd5b5081356001600160401b03811115613cb257600080fd5b6020830191508360208260051b850101111561318857600080fd5b60008083601f840112613cdf57600080fd5b5081356001600160401b03811115613cf657600080fd5b60208301915083602082850101111561318857600080fd5b60008060008060008060008060a0898b031215613d2a57600080fd5b8835613d358161375c565b97506020890135613d458161375c565b965060408901356001600160401b0380821115613d6157600080fd5b613d6d8c838d01613c89565b909850965060608b0135915080821115613d8657600080fd5b613d928c838d01613c89565b909650945060808b0135915080821115613dab57600080fd5b50613db88b828c01613ccd565b999c989b5096995094979396929594505050565b600080600060608486031215613de157600080fd5b8335925060208401356001600160401b0380821115613dff57600080fd5b613e0b87838801613985565b93506040860135915080821115613e2157600080fd5b50613e2e86828701613985565b9150509250925092565b60008060008060008060a08789031215613e5157600080fd5b8635613e5c8161375c565b95506020870135613e6c8161375c565b9450604087013593506060870135925060808701356001600160401b03811115613e9557600080fd5b613ea189828a01613ccd565b979a9699509497509295939492505050565b60208082526023908201527f4578706972792074696d657374616d70206d75737420626520696e206675747560408201526239329760e91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201613f1e57613f1e613ef6565b5060010190565b60208082526022908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b6000808335601e19843603018112613f7e57600080fd5b8301803591506001600160401b03821115613f9857600080fd5b6020019150600581901b360382131561318857600080fd5b634e487b7160e01b600052603260045260246000fd5b818103818111156103af576103af613ef6565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6000808335601e1984360301811261404c57600080fd5b83016020810192503590506001600160401b0381111561406b57600080fd5b8060061b360382131561318857600080fd5b8183526000602080850194508260005b85811015613add5781356140a08161375c565b6001600160a01b0316875281830135838801526040968701969091019060010161408d565b6000808335601e198436030181126140dc57600080fd5b83016020810192503590506001600160401b038111156140fb57600080fd5b8060051b360382131561318857600080fd5b81835260006001600160fb1b0383111561412657600080fd5b8260051b80836020870137939093016020019392505050565b60008235605e1983360301811261415557600080fd5b90910192915050565b81835260006020808501808196508560051b810191508460005b87811015613b6c57828403895261418f828861413f565b6060813561419c8161375c565b6001600160a01b031686526141b3828801836140c5565b82898901526141c5838901828461410d565b6040948501359890940197909752505098850198935090840190600101614178565b81835260006020808501808196508560051b810191508460005b87811015613b6c578284038952614218828861413f565b606081356142258161375c565b6001600160a01b0316865261423c828801836140c5565b828989015261424e838901828461410d565b925050506040614260818401846140c5565b93508783038289015261427483858361410d565b9c89019c97505050928601925050600101614201565b81835260006020808501808196508560051b810191508460005b87811015613b6c5782840389526142bb82886140c5565b6142c686828461410d565b9a87019a95505050908401906001016142a4565b828152604060208201528135604082015260006142fa6020840184614035565b60e060608501526143106101208501828461407d565b91505061432060408501856140c5565b603f198086850301608087015261433884838561410d565b935061434760608801886140c5565b93509150808685030160a087015261436084848461415e565b935061436f60808801886140c5565b93509150808685030160c087015261438884848461410d565b935061439760a08801886140c5565b93509150808685030160e08701526143b08484846141e7565b93506143bf60c08801886140c5565b935091508086850301610100870152506134a683838361428a565b60005b838110156143f55781810151838201526020016143dd565b50506000910152565b6bffffffffffffffffffffffff198460601b168152600083516144288160148501602088016143da565b60149201918201929092526034019392505050565b6000835161444f8184602088016143da565b9190910191825250602001919050565b828152604060208201526000610efe604083018461388f565b6000808335601e1984360301811261448f57600080fd5b8301803591506001600160401b038211156144a957600080fd5b6020019150600681901b360382131561318857600080fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b81356144ec8161375c565b6144f681836144c1565b50602082013560018201555050565b6020808252818101527f546f6b656e20616464726573732063616e6e6f74206265206368616e6765642e604082015260600190565b808201808211156103af576103af613ef6565b60008235605e1983360301811261456357600080fd5b9190910192915050565b6001600160401b038311156145845761458461396f565b600160401b8311156145985761459861396f565b8054838255808410156145cf576000828152602081208581019083015b808210156145cb578282556001820191506145b5565b5050505b5060008181526020812083915b858110156145f8578235828201556020909201916001016145dc565b505050505050565b813561460b8161375c565b61461581836144c1565b506001808201602061462981860186613f67565b6001600160401b038111156146405761464061396f565b600160401b8111156146545761465461396f565b8354818555808210156146885760008581528481208381019083015b808210156146845782825590880190614670565b5050505b50600093845260208420935b818110156146ad57823585820155918301918501614694565b505050505050604082013560028201555050565b81356146cc8161375c565b6146d681836144c1565b50600180820160206146ea81860186613f67565b6001600160401b038111156147015761470161396f565b600160401b8111156147155761471561396f565b8354818555808210156147495760008581528481208381019083015b808210156147455782825590880190614731565b5050505b50600093845260208420935b8181101561476e57823585820155918301918501614755565b5050505050506147816040830183613f67565b6132fd81836002860161456d565b6000602082840312156147a157600080fd5b8151801515811461373357600080fd5b634e487b7160e01b600052602160045260246000fd5b600082516145638184602087016143da565b60208152600082518060208401526147f88160408501602087016143da565b601f01601f1916919091016040019291505056fea2646970667358221220618c68db8eb582f3745e9867c1e941e839284f29e0fed9a21bc797af6444bef464736f6c63430008110033",
  "devdoc": {
    "author": "Kratos",
    "kind": "dev",
    "methods": {
      "claimRewards(uint256,bytes,bytes)": {
        "details": "Claims rewards for a round",
        "params": {
          "_round": "Round number",
          "nonce": "Random bytes32 nonce",
          "signature": "Signature generated off-chain"
        }
      },
      "getRoundAmounts(uint256)": {
        "params": {
          "_round": "Round number"
        }
      },
      "getRoundRewards(uint256)": {
        "params": {
          "_round": "Round number"
        }
      },
      "hasUserClaimed(uint256,address)": {
        "params": {
          "_round": "Round number",
          "user": "Address of user"
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "removeRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))": {
        "details": "Remove rewards for a round, only for admin",
        "params": {
          "data": "Reward data"
        }
      },
      "setAdmin(address)": {
        "details": "Set address of admin EOA",
        "params": {
          "_admin": "Address of admin EOA"
        }
      },
      "setController(address)": {
        "details": "Set address of controller EOA",
        "params": {
          "_controller": "Address of controller EOA"
        }
      },
      "setRoundExpiry(uint256,uint256)": {
        "details": "Set round expiry timestamp",
        "params": {
          "_round": "Round number",
          "expiryTimestamp": "Expiry timestamp for the round"
        }
      },
      "setWhitelistSignerAddress(address)": {
        "details": "Set new whitelist signer address",
        "params": {
          "_whitelistSignerAddress": "Address of new whitelist signer"
        }
      },
      "startNewRound(uint256,uint256)": {
        "details": "Start a new round for controller only",
        "params": {
          "expiryTimestamp": "Expiry timestamp for the round"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "topUpRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))": {
        "details": "Top up rewards for a round, only for admin",
        "params": {
          "data": "Reward data"
        }
      },
      "whitelistSigned(address,uint256,bytes,bytes)": {
        "details": "Checks if the the signature is signed by a valid signer for whitelist",
        "params": {
          "_round": "Round number",
          "nonce": "Random bytes32 nonce",
          "sender": "Address of minter",
          "signature": "Signature generated off-chain"
        }
      }
    },
    "title": "AtlanteanTrove Quest Rewards Claiming Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "admin()": {
        "notice": "The address of the admin"
      },
      "controller()": {
        "notice": "The address of the controller"
      },
      "currentRound()": {
        "notice": "Variable to track current round"
      },
      "getRoundAmounts(uint256)": {
        "notice": "Get round amounts"
      },
      "getRoundRewards(uint256)": {
        "notice": "Get round rewards"
      },
      "hasUserClaimed(uint256,address)": {
        "notice": "Get user claim status for a round"
      },
      "roundTime(uint256)": {
        "notice": "Mapping of round to Round details"
      },
      "whitelistSignerAddress()": {
        "notice": "The address of the whitelist signer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2498,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2504,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Round)2625_storage)"
      },
      {
        "astId": 2510,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Reward)2564_storage)"
      },
      {
        "astId": 2516,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundAmounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Amount)2595_storage)"
      },
      {
        "astId": 2520,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "currentRound",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2523,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2526,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "controller",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2529,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "whitelistSignerAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_struct(RewardERC1155Amount)2581_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_struct(RewardERC1155Amount)2581_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155Amount[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC1155)2551_storage)dyn_storage": {
        "base": "t_struct(RewardERC1155)2551_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC1155Amount)2581_storage)dyn_storage": {
        "base": "t_struct(RewardERC1155Amount)2581_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC20)2534_storage)dyn_storage": {
        "base": "t_struct(RewardERC20)2534_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC20Amount)2569_storage)dyn_storage": {
        "base": "t_struct(RewardERC20Amount)2569_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC20Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC721)2542_storage)dyn_storage": {
        "base": "t_struct(RewardERC721)2542_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC721Amount)2574_storage)dyn_storage": {
        "base": "t_struct(RewardERC721Amount)2574_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC721Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Amount)2595_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Amount)",
        "numberOfBytes": "32",
        "value": "t_struct(Amount)2595_storage"
      },
      "t_mapping(t_uint256,t_struct(Reward)2564_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)2564_storage"
      },
      "t_mapping(t_uint256,t_struct(Round)2625_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)2625_storage"
      },
      "t_struct(Amount)2595_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Amount",
        "members": [
          {
            "astId": 2585,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc20Amount",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(RewardERC20Amount)2569_storage)dyn_storage"
          },
          {
            "astId": 2589,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc721Amount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardERC721Amount)2574_storage)dyn_storage"
          },
          {
            "astId": 2594,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc1155Amount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_struct(RewardERC1155Amount)2581_storage)dyn_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Reward)2564_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Reward",
        "members": [
          {
            "astId": 2555,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc20Rewards",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(RewardERC20)2534_storage)dyn_storage"
          },
          {
            "astId": 2559,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc721Rewards",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardERC721)2542_storage)dyn_storage"
          },
          {
            "astId": 2563,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc1155Rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(RewardERC1155)2551_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC1155)2551_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC1155",
        "members": [
          {
            "astId": 2544,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2547,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2550,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC1155Amount)2581_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC1155Amount",
        "members": [
          {
            "astId": 2576,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2578,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2580,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC20)2534_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC20",
        "members": [
          {
            "astId": 2531,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2533,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardERC20Amount)2569_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC20Amount",
        "members": [
          {
            "astId": 2566,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2568,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardERC721)2542_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC721",
        "members": [
          {
            "astId": 2536,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2539,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2541,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC721Amount)2574_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC721Amount",
        "members": [
          {
            "astId": 2571,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2573,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Round)2625_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Round",
        "members": [
          {
            "astId": 2622,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2624,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}