{
  "address": "0xABC88fF37a3747D00061Ab563027fFc3941A9f11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpeditionAlreadyEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpeditionInProgress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpeditionInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSetGemstoneRateInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSetNFTGemstoneMultiplierInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSetRarityMultiplierInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTCollectionNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfExpedition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIdInputEmpty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        }
      ],
      "name": "AddressRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "BaseStardustRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "ExpeditionDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expeditionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeEnded",
          "type": "uint256"
        }
      ],
      "name": "ExpeditionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expeditionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "collectionAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "ExpeditionStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "_levels",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "GemstoneRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newParameter",
          "type": "uint256"
        }
      ],
      "name": "LevelParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "newMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "NFTGemstoneMultiplierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "newMultipliers",
          "type": "uint256[]"
        }
      ],
      "name": "RarityMultiplierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newParameter",
          "type": "uint256"
        }
      ],
      "name": "RarityParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "expeditionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gemstoneId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gemstoneGenerated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stardust",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "TaxFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "collections",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "WhitelistedCollectionsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseStardustRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_planetLevel",
          "type": "uint8"
        }
      ],
      "name": "calculateNFTsStakable",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "nftsStakable",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expeditionId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum AtlantisLib.Element",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_planetLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_planetOrbit",
          "type": "uint8"
        }
      ],
      "name": "calculateStardustPerExpedition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_expeditionIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExpeditionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_expeditionIds",
          "type": "uint256[]"
        }
      ],
      "name": "endExpeditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expeditionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expeditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasEnded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_planetLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_planetOrbit",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_amountArgonauts",
          "type": "uint8"
        }
      ],
      "name": "gemstoneGenerated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "gemstoneRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expeditionId",
          "type": "uint256"
        }
      ],
      "name": "getExpeditionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "collectionAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasEnded",
              "type": "bool"
            }
          ],
          "internalType": "struct IAtlantis.Expedition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftGemstoneMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rarityMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rarityParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseStardustRate",
          "type": "uint256"
        }
      ],
      "name": "setBaseStardustRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setExpeditionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_levels",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rates",
          "type": "uint256[]"
        }
      ],
      "name": "setGemstoneRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_levelParameter",
          "type": "uint256"
        }
      ],
      "name": "setLevelParameter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_multipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setNftGemstoneMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_multipliers",
          "type": "uint256[]"
        }
      ],
      "name": "setRarityMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rarityParameter",
          "type": "uint256"
        }
      ],
      "name": "setRarityParameter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxFee",
          "type": "uint256"
        }
      ],
      "name": "setTaxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_collectionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_collectionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "startExpedition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_planetIds",
          "type": "uint256[]"
        }
      ],
      "name": "startMultipleExpeditions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedCollections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf8b4071188a22bf3c59702deb6fd3cdc5c81341cad73f52a19e5ae2127b91d5",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xABC88fF37a3747D00061Ab563027fFc3941A9f11",
    "transactionIndex": 0,
    "gasUsed": "3202457",
    "logsBloom": "0x
    "blockHash": "0xb1d9476a6fdabea51a75307c596143758f1fc87902ad7056039f8243dbc58cd1",
    "transactionHash": "0xbf8b4071188a22bf3c59702deb6fd3cdc5c81341cad73f52a19e5ae2127b91d5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9054697,
        "transactionHash": "0xbf8b4071188a22bf3c59702deb6fd3cdc5c81341cad73f52a19e5ae2127b91d5",
        "address": "0xABC88fF37a3747D00061Ab563027fFc3941A9f11",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb1d9476a6fdabea51a75307c596143758f1fc87902ad7056039f8243dbc58cd1"
      }
    ],
    "blockNumber": 9054697,
    "cumulativeGasUsed": "3202457",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf0776a4F32a4F95649D3b1c79eb5FFE6c43e53F3",
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b"
  ],
  "numDeployments": 1,
  "solcInputHash": "34577a6b37a6d9ddf2274aecac30df32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpeditionAlreadyEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpeditionInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpeditionInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSetGemstoneRateInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSetNFTGemstoneMultiplierInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSetRarityMultiplierInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTCollectionNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfExpedition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIdInputEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"AddressRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"BaseStardustRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"ExpeditionDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expeditionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeEnded\",\"type\":\"uint256\"}],\"name\":\"ExpeditionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expeditionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"collectionAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ExpeditionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_levels\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"GemstoneRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newParameter\",\"type\":\"uint256\"}],\"name\":\"LevelParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"NFTGemstoneMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newMultipliers\",\"type\":\"uint256[]\"}],\"name\":\"RarityMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newParameter\",\"type\":\"uint256\"}],\"name\":\"RarityParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expeditionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gemstoneId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gemstoneGenerated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stardust\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"TaxFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistedCollectionsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStardustRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_planetLevel\",\"type\":\"uint8\"}],\"name\":\"calculateNFTsStakable\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"nftsStakable\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expeditionId\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum AtlantisLib.Element\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_planetLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_planetOrbit\",\"type\":\"uint8\"}],\"name\":\"calculateStardustPerExpedition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_expeditionIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExpeditionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_expeditionIds\",\"type\":\"uint256[]\"}],\"name\":\"endExpeditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expeditionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expeditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_planetLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_planetOrbit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_amountArgonauts\",\"type\":\"uint8\"}],\"name\":\"gemstoneGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"gemstoneRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expeditionId\",\"type\":\"uint256\"}],\"name\":\"getExpeditionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasEnded\",\"type\":\"bool\"}],\"internalType\":\"struct IAtlantis.Expedition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftGemstoneMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarityParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseStardustRate\",\"type\":\"uint256\"}],\"name\":\"setBaseStardustRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setExpeditionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_levels\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"setGemstoneRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelParameter\",\"type\":\"uint256\"}],\"name\":\"setLevelParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"}],\"name\":\"setNftGemstoneMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"}],\"name\":\"setRarityMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rarityParameter\",\"type\":\"uint256\"}],\"name\":\"setRarityParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"startExpedition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_planetIds\",\"type\":\"uint256[]\"}],\"name\":\"startMultipleExpeditions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedCollections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Send your Argonauts and Planets on an expedition to earn rewards in terms of Stardust tokens and gemstones!\",\"kind\":\"dev\",\"methods\":{\"calculateNFTsStakable(uint8)\":{\"params\":{\"_planetLevel\":\"Level of the planet\"}},\"calculateStardustPerExpedition(uint8,uint8)\":{\"params\":{\"_planetLevel\":\"Level of the planet\",\"_planetOrbit\":\"Orbit tier of the planet From Spreadsheet: Stardust earned per expedition = (((planet_level -1) ^ 2) * level_parameter + 1) * ((planet_rarity -1) * rarity_parameter + 1) * stardust_base_rate Planet orbit will always start from 1. Hence, planetOrbit which is planet_rarity, will need to + 1 to match the equation.\"}},\"claimRewards(uint256[])\":{\"params\":{\"_expeditionIds\":\"ExpeditionIds of expeditions to claim rewards for\"}},\"constructor\":{\"params\":{\"_registry\":\"Address registry contract\",\"_treasury\":\"Address of EOA treasury\"}},\"endExpeditions(uint256[])\":{\"details\":\"- Must be called by the owner of the expedition      - Must be called after the expedition has ended (block.timestamp > block.timestamp)      - Must be called before the expedition has been claimed (hasEnded == false)\",\"params\":{\"_expeditionIds\":\"ExpeditionIds of expeditions to stop\"}},\"gemstoneGenerated(uint8,uint8,uint8)\":{\"params\":{\"_amountArgonauts\":\"ExpeditionId of the expedition From Spreadsheet: Gemstone generated / expedition = roundup(base_Gemstone_rate * planet_rarity * argonauts_Gemstone_multiplier)\",\"_planetLevel\":\"ExpeditionId of the expedition\",\"_planetOrbit\":\"ExpeditionId of the expedition\"}},\"getExpeditionInfo(uint256)\":{\"params\":{\"_expeditionId\":\"Expedition Id\"},\"returns\":{\"_0\":\"Expedition of given expeditionId\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAddressRegistry(address)\":{\"params\":{\"_addressRegistry\":\"The address of the Address Registry\"}},\"setBaseStardustRate(uint256)\":{\"params\":{\"_baseStardustRate\":\"The base stardust rewards rate\"}},\"setExpeditionDuration(uint256)\":{\"params\":{\"_duration\":\"The duration of an expedition in seconds\"}},\"setGemstoneRate(uint8[],uint256[])\":{\"params\":{\"_levels\":\"The level of the gemstone\",\"_rates\":\"The rate of the gemstone\"}},\"setLevelParameter(uint256)\":{\"params\":{\"_levelParameter\":\"The level parameter for rewards\"}},\"setNftGemstoneMultiplier(uint256[])\":{\"params\":{\"_multipliers\":\"The multiplier of the rewards\"}},\"setRarityParameter(uint256)\":{\"params\":{\"_rarityParameter\":\"The rarity parameter for rewards\"}},\"setTaxFee(uint256)\":{\"params\":{\"_taxFee\":\"The amount tax fee\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"Address of treasury\"}},\"setWhitelistedCollections(address[],bool)\":{\"details\":\"Only whitelisted collections can be staked\",\"params\":{\"_collectionAddresses\":\"The address of the collection\",\"_status\":\"The whitelisted status of the collection\"}},\"startExpedition(uint256,address[],uint256[])\":{\"details\":\"NFTs sent on expedition must be whitelisted\",\"params\":{\"_collectionAddresses\":\"Collection Addresses of nfts to send on expedition\",\"_planetId\":\"PlanetId of planets to send NFTs on expedition\",\"_tokenIds\":\"TokenIds of nfts to send on expedition\"}},\"startMultipleExpeditions(uint256[])\":{\"params\":{\"_planetIds\":\"PlanetId of planets to send NFTs on expedition\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address,uint256)\":{\"params\":{\"_amount\":\"Amount to withdraw\",\"_tokenAddress\":\"The token address to withdraw\"}}},\"title\":\"Atlantis - Expedition contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ArrayLengthMismatch()\":[{\"notice\":\"The length of tokenIds and collectionAddress must be the same\"}],\"ExpeditionAlreadyEnded()\":[{\"notice\":\"Expedition already ended\"}],\"ExpeditionInProgress()\":[{\"notice\":\"Expeditton in progress\"}],\"InvalidExpeditionInput()\":[{\"notice\":\"Invalid expedition input\"}],\"InvalidSetGemstoneRateInput()\":[{\"notice\":\"Invalid gemstone rate input\"}],\"InvalidSetNFTGemstoneMultiplierInput()\":[{\"notice\":\"Invalid inputs while setting NFTGemstoneMultiplier\"}],\"InvalidSetRarityMultiplierInput()\":[{\"notice\":\"Invalid inputs while setting RarityMultiplier\"}],\"NFTCollectionNotWhitelisted()\":[{\"notice\":\"The nft staked must belong to an approved collection\"}],\"NotOwnerOfExpedition()\":[{\"notice\":\"Not the owner of the expedition\"}],\"TokenIdInputEmpty()\":[{\"notice\":\"The length of tokenIds should not be 0\"}]},\"events\":{\"AddressRegistryUpdated(address)\":{\"notice\":\"Event emitted when registry is updated\"},\"BaseStardustRateUpdated(uint256)\":{\"notice\":\"Event emitted when BaseStardustRate is updated\"},\"ExpeditionDurationUpdated(uint256)\":{\"notice\":\"Event emitted when expedition duration is changed\"},\"ExpeditionEnded(address,uint256,uint256)\":{\"notice\":\"Event emitted when expedition is ended\"},\"ExpeditionStarted(address,uint256,uint256,uint256[],address[],uint256,uint256)\":{\"notice\":\"Event emitted when expedition is started\"},\"GemstoneRateUpdated(uint8[],uint256[])\":{\"notice\":\"Event emitted when gemstone rate is updated\"},\"LevelParameterUpdated(uint256)\":{\"notice\":\"Event emitted when level parameter is updated\"},\"NFTGemstoneMultiplierUpdated(uint256[])\":{\"notice\":\"Event emitted when NFTGemstoneMultiplier is updated\"},\"RarityMultiplierUpdated(uint256[])\":{\"notice\":\"Event emitted when RarityMultiplier is updated\"},\"RarityParameterUpdated(uint256)\":{\"notice\":\"Event emitted when rarity parameter is updated\"},\"RewardsClaimed(address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when rewards are claimed\"},\"TaxFeeUpdated(uint256)\":{\"notice\":\"Event emitted when tax fee is updated\"},\"TreasuryUpdated(address)\":{\"notice\":\"Event emitted when treasury is updated\"},\"WhitelistedCollectionsUpdated(address[],bool)\":{\"notice\":\"Event emitted when whitelisted collections are updated\"}},\"kind\":\"user\",\"methods\":{\"DENOMINATOR()\":{\"notice\":\"Denominator used for calculation\"},\"addressRegistry()\":{\"notice\":\"Atlantis address registry, which allows contracts to keep track of the latest deployed addresses at all times.\"},\"baseStardustRate()\":{\"notice\":\"Base rate of stardust per expedition\"},\"calculateNFTsStakable(uint8)\":{\"notice\":\"Returns number of NFTs that can be staked on the planet\"},\"calculateStardustPerExpedition(uint8,uint8)\":{\"notice\":\"Returns the amount of stardust earned\"},\"claimRewards(uint256[])\":{\"notice\":\"Claims rewards for multiple expeditions\"},\"constructor\":{\"notice\":\"Constructor for Atlantis Expedition\"},\"currentExpeditionId()\":{\"notice\":\"Variable to track current Expedition id\"},\"endExpeditions(uint256[])\":{\"notice\":\"Ends multiple Atlantis Expeditions\"},\"expeditionDuration()\":{\"notice\":\"Variable to track expedition duration\"},\"expeditions(uint256)\":{\"notice\":\"Mapping of user address to array of Expedition struct\"},\"gemstoneGenerated(uint8,uint8,uint8)\":{\"notice\":\"Returns the amount of Gemstones earned\"},\"gemstoneRate(uint8)\":{\"notice\":\"Mapping of level to Gemstone rate\"},\"getExpeditionInfo(uint256)\":{\"notice\":\"Get Expedition Info\"},\"levelParameter()\":{\"notice\":\"Level parameter\"},\"nftGemstoneMultiplier(uint256)\":{\"notice\":\"Mapping of NFTs staked to gemstone multiplier\"},\"rarityMultiplier(uint256)\":{\"notice\":\"Array of orbit to rarity multiplier\"},\"rarityParameter()\":{\"notice\":\"Rarity parameter\"},\"setAddressRegistry(address)\":{\"notice\":\"Set the Address Registry\"},\"setBaseStardustRate(uint256)\":{\"notice\":\"Set the Base Stardust Rate parameter\"},\"setExpeditionDuration(uint256)\":{\"notice\":\"Set the duration of an expedition\"},\"setGemstoneRate(uint8[],uint256[])\":{\"notice\":\"Set the gemstone rate for a level\"},\"setLevelParameter(uint256)\":{\"notice\":\"Set the level parameter\"},\"setNftGemstoneMultiplier(uint256[])\":{\"notice\":\"Set the gemstone multiplier for a NFT\"},\"setRarityMultiplier(uint256[])\":{\"notice\":\"Set the Rarity Multiplier parameter\"},\"setRarityParameter(uint256)\":{\"notice\":\"Set the rarity parameter\"},\"setTaxFee(uint256)\":{\"notice\":\"Set the expedition tax fee\"},\"setTreasury(address)\":{\"notice\":\"Set the treasury address\"},\"setWhitelistedCollections(address[],bool)\":{\"notice\":\"Set the whitelisted status of a collection\"},\"startExpedition(uint256,address[],uint256[])\":{\"notice\":\"Starts an Atlantis Expedition\"},\"startMultipleExpeditions(uint256[])\":{\"notice\":\"Starts multiple expeditions without boosting NFTs\"},\"taxFee()\":{\"notice\":\"Tax fee for going on expeditions\"},\"treasury()\":{\"notice\":\"EOA for treasury\"},\"whitelistedCollections(address)\":{\"notice\":\"Mapping of address to boolean whitelisted status\"},\"withdrawERC20(address,uint256)\":{\"notice\":\"Function to withdraw any ERC20 tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Atlantis.sol\":\"Atlantis\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Atlantis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/IAtlantis.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\n\\r\\n/// @title Atlantis - Expedition contract\\r\\n/// @dev Send your Argonauts and Planets on an expedition to earn rewards in terms of Stardust tokens and gemstones!\\r\\ncontract Atlantis is Ownable, ERC721Holder, IAtlantis, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    /// @notice Atlantis address registry, which allows contracts to keep track of the latest deployed addresses at all times.\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n    /// @notice Base rate of stardust per expedition\\r\\n    uint256 public baseStardustRate = 50 ether;\\r\\n    /// @notice Level parameter\\r\\n    uint256 public levelParameter = 1;\\r\\n    /// @notice Rarity parameter\\r\\n    uint256 public rarityParameter = 20;\\r\\n    /// @notice Mapping of level to Gemstone rate\\r\\n    mapping(uint8 => uint256) public gemstoneRate;\\r\\n    /// @notice Mapping of NFTs staked to gemstone multiplier\\r\\n    uint256[4] public nftGemstoneMultiplier;\\r\\n    /// @notice Array of orbit to rarity multiplier\\r\\n    uint256[4] public rarityMultiplier;\\r\\n    /// @notice Mapping of address to boolean whitelisted status\\r\\n    mapping(address => bool) public whitelistedCollections;\\r\\n    /// @notice Mapping of user address to array of Expedition struct\\r\\n    mapping(uint256 => Expedition) public expeditions;\\r\\n    /// @notice Variable to track current Expedition id\\r\\n    uint256 public currentExpeditionId = 0;\\r\\n    /// @notice Variable to track expedition duration\\r\\n    uint256 public expeditionDuration = 3 days;\\r\\n    /// @notice Denominator used for calculation\\r\\n    uint256 public constant DENOMINATOR = 100;\\r\\n    /// @notice Tax fee for going on expeditions\\r\\n    uint256 public taxFee = 0.25 ether;\\r\\n    /// @notice EOA for treasury\\r\\n    address public treasury;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor for Atlantis Expedition\\r\\n     * @param _registry Address registry contract\\r\\n     * @param _treasury Address of EOA treasury\\r\\n     */\\r\\n    constructor(AtlantisAddressRegistry _registry, address _treasury) {\\r\\n        // Set address registry\\r\\n        addressRegistry = _registry;\\r\\n        // Set treasury\\r\\n        // Check that treasury is not address(0)\\r\\n        require(_treasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = _treasury;\\r\\n        // Get argonaut address from registry\\r\\n        address argonautAddress = addressRegistry.getArgonauts();\\r\\n        // Initialise whitelisted collection with Argonauts\\r\\n        whitelistedCollections[argonautAddress] = true;\\r\\n    }\\r\\n\\r\\n    // --------------------- PUBLIC FUNCTINOS ---------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Starts an Atlantis Expedition\\r\\n     * @dev NFTs sent on expedition must be whitelisted\\r\\n     * @param _planetId PlanetId of planets to send NFTs on expedition\\r\\n     * @param _collectionAddresses Collection Addresses of nfts to send on expedition\\r\\n     * @param _tokenIds TokenIds of nfts to send on expedition\\r\\n     */\\r\\n    function startExpedition(\\r\\n        uint256 _planetId,\\r\\n        address[] memory _collectionAddresses,\\r\\n        uint256[] memory _tokenIds\\r\\n    ) external payable {\\r\\n        require(msg.value == taxFee, \\\"Invalid tax fee\\\");\\r\\n        IAtlantisPlanets atlantisPlanets = IAtlantisPlanets(addressRegistry.getAtlantisPlanets());\\r\\n        // Tax fee ether to treasury\\r\\n        (bool success, ) = payable(treasury).call{ value: taxFee }(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        // Get planetLevel from planetId\\r\\n        uint8 planetLevel = atlantisPlanets.getPlanetDetails(_planetId).level;\\r\\n        // REVERT: If _collectionAddresses.length != _tokenIds.length\\r\\n        if (_collectionAddresses.length != _tokenIds.length) {\\r\\n            revert InvalidExpeditionInput();\\r\\n        }\\r\\n        // REVERT: If staked NFTs is more than limit\\r\\n        if (_collectionAddresses.length > calculateNFTsStakable(planetLevel)) {\\r\\n            revert InvalidExpeditionInput();\\r\\n        }\\r\\n        // Record the expedition\\r\\n        expeditions[currentExpeditionId] = Expedition({\\r\\n            collectionAddresses: _collectionAddresses,\\r\\n            tokenIds: _tokenIds,\\r\\n            id: currentExpeditionId,\\r\\n            planetId: _planetId,\\r\\n            startTime: block.timestamp,\\r\\n            endTime: block.timestamp + expeditionDuration,\\r\\n            owner: msg.sender,\\r\\n            hasEnded: false\\r\\n        });\\r\\n\\r\\n        // Increment currentExpeditionId\\r\\n        currentExpeditionId++;\\r\\n        // Transfer Planet NFT to this contract\\r\\n        atlantisPlanets.safeTransferFrom(msg.sender, address(this), _planetId);\\r\\n        // Transfer Staked NFTs to this contract\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            // Check if collection address is whitelisted\\r\\n            if (!whitelistedCollections[_collectionAddresses[i]]) {\\r\\n                revert NFTCollectionNotWhitelisted();\\r\\n            }\\r\\n            IERC721(_collectionAddresses[i]).safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\\r\\n        }\\r\\n        // Emit event\\r\\n        emit ExpeditionStarted(\\r\\n            msg.sender,\\r\\n            currentExpeditionId - 1,\\r\\n            _planetId,\\r\\n            _tokenIds,\\r\\n            _collectionAddresses,\\r\\n            block.timestamp,\\r\\n            block.timestamp + expeditionDuration\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Starts multiple expeditions without boosting NFTs\\r\\n     * @param _planetIds PlanetId of planets to send NFTs on expedition\\r\\n     */\\r\\n    function startMultipleExpeditions(uint256[] memory _planetIds) external payable {\\r\\n        // Check that _planetIds is not empty\\r\\n        require(_planetIds.length > 0, \\\"Invalid planetIds\\\");\\r\\n        require(msg.value == taxFee * _planetIds.length, \\\"Invalid tax fee\\\");\\r\\n        IAtlantisPlanets atlantisPlanets = IAtlantisPlanets(addressRegistry.getAtlantisPlanets());\\r\\n        // Tax fee ether to treasury\\r\\n        (bool success, ) = payable(treasury).call{ value: taxFee * _planetIds.length }(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        // Create empty arrays for collectionAddresses and tokenIds outside the loop\\r\\n        address[] memory emptyCollectionAddresses = new address[](0);\\r\\n        uint256[] memory emptyTokenIds = new uint256[](0);\\r\\n\\r\\n        for (uint256 i; i < _planetIds.length; ) {\\r\\n            // Record the expedition\\r\\n            expeditions[currentExpeditionId] = Expedition({\\r\\n                collectionAddresses: emptyCollectionAddresses,\\r\\n                tokenIds: emptyTokenIds,\\r\\n                id: currentExpeditionId,\\r\\n                planetId: _planetIds[i],\\r\\n                startTime: block.timestamp,\\r\\n                endTime: block.timestamp + expeditionDuration,\\r\\n                owner: msg.sender,\\r\\n                hasEnded: false\\r\\n            });\\r\\n\\r\\n            // Increment currentExpeditionId\\r\\n            currentExpeditionId++;\\r\\n            // Transfer Planet NFT to this contract\\r\\n            atlantisPlanets.safeTransferFrom(msg.sender, address(this), _planetIds[i]);\\r\\n            // Emit event\\r\\n            emit ExpeditionStarted(\\r\\n                msg.sender,\\r\\n                currentExpeditionId - 1,\\r\\n                _planetIds[i],\\r\\n                emptyTokenIds,\\r\\n                emptyCollectionAddresses,\\r\\n                block.timestamp,\\r\\n                block.timestamp + expeditionDuration\\r\\n            );\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stops an Atlantis Expedition\\r\\n     * @param _expeditionId ExpeditionId of expedition to stop\\r\\n     * @dev - Must be called by the owner of the expedition\\r\\n     *      - Must be called after the expedition has ended (block.timestamp > block.timestamp)\\r\\n     *      - Must be called before the expedition has been claimed (hasEnded == false)\\r\\n     */\\r\\n    function _endExpedition(uint256 _expeditionId) internal {\\r\\n        IAtlantisPlanets atlantisPlanets = IAtlantisPlanets(addressRegistry.getAtlantisPlanets());\\r\\n\\r\\n        Expedition storage currentExpedition = expeditions[_expeditionId];\\r\\n\\r\\n        // REVERT: If expedition has ended\\r\\n        if (currentExpedition.hasEnded) {\\r\\n            revert ExpeditionAlreadyEnded();\\r\\n        }\\r\\n        // REVERT: If current time is less than end time\\r\\n        if (currentExpedition.endTime > block.timestamp) {\\r\\n            revert ExpeditionInProgress();\\r\\n        }\\r\\n        // REVERT: If caller is not the owner of the expedition\\r\\n        if (currentExpedition.owner != msg.sender) revert NotOwnerOfExpedition();\\r\\n\\r\\n        // Transfer all staked NFTs back to user\\r\\n        for (uint256 i; i < currentExpedition.collectionAddresses.length; i++) {\\r\\n            IERC721(currentExpedition.collectionAddresses[i]).safeTransferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                currentExpedition.tokenIds[i]\\r\\n            );\\r\\n        }\\r\\n        // Transfer Planet NFT back to user\\r\\n        atlantisPlanets.safeTransferFrom(address(this), msg.sender, currentExpedition.planetId);\\r\\n        _claimReward(_expeditionId);\\r\\n        currentExpedition.hasEnded = true;\\r\\n\\r\\n        emit ExpeditionEnded(msg.sender, _expeditionId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ends multiple Atlantis Expeditions\\r\\n     * @param _expeditionIds ExpeditionIds of expeditions to stop\\r\\n     * @dev - Must be called by the owner of the expedition\\r\\n     *      - Must be called after the expedition has ended (block.timestamp > block.timestamp)\\r\\n     *      - Must be called before the expedition has been claimed (hasEnded == false)\\r\\n     */\\r\\n    function endExpeditions(uint256[] calldata _expeditionIds) external nonReentrant {\\r\\n        // Loop through all expedition ids\\r\\n        for (uint256 i; i < _expeditionIds.length; i++) {\\r\\n            _endExpedition(_expeditionIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claims rewards for multiple expeditions\\r\\n     * @param _expeditionIds ExpeditionIds of expeditions to claim rewards for\\r\\n     */\\r\\n    function claimRewards(uint256[] calldata _expeditionIds) external payable nonReentrant {\\r\\n        require(msg.value == taxFee * _expeditionIds.length, \\\"Invalid tax fee\\\");\\r\\n        // Tax fee ether to treasury\\r\\n        (bool success, ) = payable(treasury).call{ value: taxFee * _expeditionIds.length }(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        // Loop through all expedition ids\\r\\n        for (uint256 i; i < _expeditionIds.length; i++) {\\r\\n            // Get expedition\\r\\n            _claimReward(_expeditionIds[i]);\\r\\n            Expedition memory currentExpedition = expeditions[_expeditionIds[i]];\\r\\n            // Emit event\\r\\n            emit ExpeditionStarted(\\r\\n                msg.sender,\\r\\n                _expeditionIds[i],\\r\\n                currentExpedition.planetId,\\r\\n                currentExpedition.tokenIds,\\r\\n                currentExpedition.collectionAddresses,\\r\\n                block.timestamp,\\r\\n                block.timestamp + expeditionDuration\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claims rewards for an expedition and continues the expedition\\r\\n     * @param _expeditionId ExpeditionId of expedition to claim rewards for\\r\\n     * @dev - Must only be called by the owner of the expedition\\r\\n     *      - Must only be called after the expedition has ended (block.timestamp > block.timestamp)\\r\\n     *      - Stardust is minted to the caller\\r\\n     *      - Atlantisgemstones are minted to the caller\\r\\n     *      - EndDate is Updated\\r\\n     */\\r\\n    function _claimReward(uint256 _expeditionId) internal {\\r\\n        // check if claimant is owner of expeditionId\\r\\n        if (expeditions[_expeditionId].owner != msg.sender) {\\r\\n            revert NotOwnerOfExpedition();\\r\\n        }\\r\\n        IERC20 stardust = IERC20(addressRegistry.getStardust());\\r\\n        IAtlantisGemstones atlantisGemstones = IAtlantisGemstones(addressRegistry.getGemstones());\\r\\n        // Get expedition\\r\\n        Expedition storage expedition = expeditions[_expeditionId];\\r\\n        // Require that expedition hasended = false\\r\\n        if (expedition.hasEnded) {\\r\\n            revert ExpeditionAlreadyEnded();\\r\\n        }\\r\\n        // Check if expedition has ended\\r\\n        if (expedition.endTime > block.timestamp) {\\r\\n            revert ExpeditionInProgress();\\r\\n        }\\r\\n\\r\\n        // Update Expedition startTime and endTime\\r\\n        expeditions[_expeditionId].startTime = block.timestamp;\\r\\n        expeditions[_expeditionId].endTime = block.timestamp + expeditionDuration;\\r\\n\\r\\n        AtlantisLib.Element planetElement;\\r\\n        uint256 _gemstoneGenerated;\\r\\n        uint256 _stardustEarned;\\r\\n        // Calculate rewards\\r\\n        (_gemstoneGenerated, planetElement, _stardustEarned) = calculateRewards(_expeditionId);\\r\\n        // Distribute stardust rewards\\r\\n        stardust.safeTransfer(msg.sender, _stardustEarned);\\r\\n        // Distribute gemstone rewards\\r\\n        atlantisGemstones.mint(msg.sender, uint8(planetElement) + 1, _gemstoneGenerated);\\r\\n\\r\\n        // Emit event\\r\\n        emit RewardsClaimed(\\r\\n            msg.sender,\\r\\n            _expeditionId,\\r\\n            uint8(planetElement) + 1,\\r\\n            _gemstoneGenerated,\\r\\n            _stardustEarned,\\r\\n            expedition.startTime,\\r\\n            expedition.endTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Expedition Info\\r\\n     * @param _expeditionId Expedition Id\\r\\n     * @return Expedition of given expeditionId\\r\\n     */\\r\\n    function getExpeditionInfo(uint256 _expeditionId) external view returns (Expedition memory) {\\r\\n        return expeditions[_expeditionId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of stardust earned\\r\\n     * @param _planetLevel Level of the planet\\r\\n     * @param _planetOrbit Orbit tier of the planet\\r\\n     * From Spreadsheet:\\r\\n     * Stardust earned per expedition =\\r\\n     * (((planet_level -1) ^ 2) * level_parameter + 1) * ((planet_rarity -1) * rarity_parameter + 1) * stardust_base_rate\\r\\n     * Planet orbit will always start from 1. Hence, planetOrbit which is planet_rarity, will need to + 1 to match the equation.\\r\\n     */\\r\\n    function calculateStardustPerExpedition(uint8 _planetLevel, uint8 _planetOrbit) public view returns (uint256) {\\r\\n        // If planet level is 0, return baseStardustRate\\r\\n        if (_planetLevel == 0) {\\r\\n            return baseStardustRate;\\r\\n        }\\r\\n        // Convert _planetLevel and _planetOrbit to uint256\\r\\n        uint256 __planetLevel = uint256(_planetLevel);\\r\\n        uint256 __planetOrbit = uint256(_planetOrbit);\\r\\n        return\\r\\n            (((((__planetLevel - 1) * DENOMINATOR) ** 2 * levelParameter + DENOMINATOR ** 3) / DENOMINATOR ** 2) *\\r\\n                (((__planetOrbit) * DENOMINATOR) * rarityParameter + DENOMINATOR ** 2) *\\r\\n                baseStardustRate) / DENOMINATOR ** 3;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of Gemstones earned\\r\\n     * @param _planetLevel ExpeditionId of the expedition\\r\\n     * @param _planetOrbit ExpeditionId of the expedition\\r\\n     * @param _amountArgonauts ExpeditionId of the expedition\\r\\n     * From Spreadsheet:\\r\\n     * Gemstone generated / expedition =\\r\\n     * roundup(base_Gemstone_rate * planet_rarity * argonauts_Gemstone_multiplier)\\r\\n     */\\r\\n    function gemstoneGenerated(\\r\\n        uint8 _planetLevel,\\r\\n        uint8 _planetOrbit,\\r\\n        uint8 _amountArgonauts\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 _temp = gemstoneRate[_planetLevel] *\\r\\n            (rarityMultiplier[_planetOrbit] * (DENOMINATOR / 10)) *\\r\\n            nftGemstoneMultiplier[_amountArgonauts] *\\r\\n            (DENOMINATOR / 10);\\r\\n\\r\\n        return _roundUp(_temp);\\r\\n    }\\r\\n\\r\\n    function _roundUp(uint256 _number) internal pure returns (uint256) {\\r\\n        if ((_number % (DENOMINATOR ** 2)) != 0) {\\r\\n            return _number / (DENOMINATOR ** 2) + 1;\\r\\n        } else {\\r\\n            return _number / (DENOMINATOR ** 2);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateRewards(uint256 _expeditionId) public view returns (uint256, AtlantisLib.Element, uint256) {\\r\\n        IAtlantisPlanets atlantisPlanets = IAtlantisPlanets(addressRegistry.getAtlantisPlanets());\\r\\n\\r\\n        // Get expedition\\r\\n        Expedition memory expedition = expeditions[_expeditionId];\\r\\n        uint256 planetId = expedition.planetId;\\r\\n\\r\\n        // Get Planet level and Orbit\\r\\n        AtlantisLib.Planet memory planet = atlantisPlanets.getPlanetDetails(planetId);\\r\\n\\r\\n        // gemstone multiplier is in terms of 100s, 1.2 = 120\\r\\n        uint256 _gemstoneGenerated = gemstoneGenerated(\\r\\n            planet.level,\\r\\n            uint8(planet.orbit),\\r\\n            uint8(expedition.tokenIds.length)\\r\\n        );\\r\\n\\r\\n        uint256 _stardustEarned = calculateStardustPerExpedition(planet.level, uint8(planet.orbit));\\r\\n        // Return rewards\\r\\n        return (_gemstoneGenerated, planet.element, _stardustEarned);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns number of NFTs that can be staked on the planet\\r\\n     * @param _planetLevel Level of the planet\\r\\n     */\\r\\n    function calculateNFTsStakable(uint8 _planetLevel) public pure returns (uint8 nftsStakable) {\\r\\n        if (_planetLevel >= 0 && _planetLevel < 20) {\\r\\n            nftsStakable = 0;\\r\\n        } else if (_planetLevel >= 20 && _planetLevel < 30) {\\r\\n            nftsStakable = 1;\\r\\n        } else if (_planetLevel >= 30 && _planetLevel < 40) {\\r\\n            nftsStakable = 2;\\r\\n        } else if (_planetLevel >= 40) {\\r\\n            nftsStakable = 3;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // -------------------- ADMIN FUNCTIONS ----------------------\\r\\n    /**\\r\\n     * @notice Set the duration of an expedition\\r\\n     * @param _duration The duration of an expedition in seconds\\r\\n     */\\r\\n    function setExpeditionDuration(uint256 _duration) external onlyOwner {\\r\\n        expeditionDuration = _duration;\\r\\n        emit ExpeditionDurationUpdated(_duration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the whitelisted status of a collection\\r\\n     * @param _collectionAddresses The address of the collection\\r\\n     * @param _status The whitelisted status of the collection\\r\\n     * @dev Only whitelisted collections can be staked\\r\\n     */\\r\\n    function setWhitelistedCollections(address[] memory _collectionAddresses, bool _status) external onlyOwner {\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            whitelistedCollections[_collectionAddresses[i]] = _status;\\r\\n        }\\r\\n        emit WhitelistedCollectionsUpdated(_collectionAddresses, _status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the gemstone rate for a level\\r\\n     * @param _levels The level of the gemstone\\r\\n     * @param _rates The rate of the gemstone\\r\\n     */\\r\\n    function setGemstoneRate(uint8[] memory _levels, uint256[] memory _rates) external onlyOwner {\\r\\n        if (_levels.length != _rates.length) revert InvalidSetGemstoneRateInput();\\r\\n        for (uint256 i; i < _levels.length; i++) {\\r\\n            gemstoneRate[_levels[i]] = _rates[i];\\r\\n        }\\r\\n        emit GemstoneRateUpdated(_levels, _rates);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the gemstone multiplier for a NFT\\r\\n     * @param _multipliers The multiplier of the rewards\\r\\n     */\\r\\n    function setNftGemstoneMultiplier(uint256[] memory _multipliers) external onlyOwner {\\r\\n        if (_multipliers.length != 4) revert InvalidSetNFTGemstoneMultiplierInput();\\r\\n\\r\\n        for (uint256 i; i < _multipliers.length; i++) {\\r\\n            nftGemstoneMultiplier[i] = _multipliers[i];\\r\\n        }\\r\\n        emit NFTGemstoneMultiplierUpdated(_multipliers);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Rarity Multiplier parameter\\r\\n     */\\r\\n    function setRarityMultiplier(uint256[] memory _multipliers) external onlyOwner {\\r\\n        if (_multipliers.length != 4) revert InvalidSetRarityMultiplierInput();\\r\\n\\r\\n        for (uint256 i; i < _multipliers.length; i++) {\\r\\n            rarityMultiplier[i] = _multipliers[i];\\r\\n        }\\r\\n        emit RarityMultiplierUpdated(_multipliers);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Base Stardust Rate parameter\\r\\n     * @param _baseStardustRate The base stardust rewards rate\\r\\n     */\\r\\n    function setBaseStardustRate(uint256 _baseStardustRate) external onlyOwner {\\r\\n        baseStardustRate = _baseStardustRate;\\r\\n        emit BaseStardustRateUpdated(_baseStardustRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the level parameter\\r\\n     * @param _levelParameter The level parameter for rewards\\r\\n     */\\r\\n    function setLevelParameter(uint256 _levelParameter) external onlyOwner {\\r\\n        levelParameter = _levelParameter;\\r\\n        emit LevelParameterUpdated(_levelParameter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the rarity parameter\\r\\n     * @param _rarityParameter The rarity parameter for rewards\\r\\n     */\\r\\n    function setRarityParameter(uint256 _rarityParameter) external onlyOwner {\\r\\n        rarityParameter = _rarityParameter;\\r\\n        emit RarityParameterUpdated(_rarityParameter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Address Registry\\r\\n     * @param _addressRegistry The address of the Address Registry\\r\\n     */\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit AddressRegistryUpdated(address(_addressRegistry));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the expedition tax fee\\r\\n     * @param _taxFee The amount tax fee\\r\\n     */\\r\\n    function setTaxFee(uint256 _taxFee) external onlyOwner {\\r\\n        taxFee = _taxFee;\\r\\n        emit TaxFeeUpdated(_taxFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to withdraw any ERC20 tokens from the contract\\r\\n     * @param _tokenAddress The token address to withdraw\\r\\n     * @param _amount Amount to withdraw\\r\\n     */\\r\\n    function withdrawERC20(address _tokenAddress, uint256 _amount) external onlyOwner {\\r\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the treasury address\\r\\n     * @param _treasury Address of treasury\\r\\n     */\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        require(_treasury != address(0), \\\"Invalid treasury address\\\");\\r\\n        treasury = _treasury;\\r\\n        emit TreasuryUpdated(_treasury);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe15a464d6cff5853926786ed3a8af79cadca2a9852901cae451b2ac639c29d99\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/AtlantisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary AtlantisLib {\\r\\n    enum Orbit {\\r\\n        COMMON, // 0\\r\\n        UNCOMMON, // 1\\r\\n        RARE, // 2\\r\\n        EPIC // 3\\r\\n    }\\r\\n\\r\\n    enum OrbitName {\\r\\n        HALO_RING, //0\\r\\n        PANDORA, //1\\r\\n        ATLAS, //2\\r\\n        METIS, //3\\r\\n        ENTWINED, //4\\r\\n        RAINBOW_CLOUDS, //5\\r\\n        GALATICA, //6\\r\\n        ASTEROIDS, //7\\r\\n        INTERSTELLAR_PINK, //8\\r\\n        INTERSTELLAR_GRADIENT, //9\\r\\n        // Epic planets\\r\\n        INTERSTELLAR_GOLD //10\\r\\n    }\\r\\n\\r\\n    enum Background {\\r\\n        PURPLE_HUES, //0\\r\\n        BROWN_HUES, //1\\r\\n        WAVY, //2\\r\\n        SHOOTING_STARS, //3\\r\\n        // Epic planets\\r\\n        GOLD_HUES, //4\\r\\n        GOLD_SHOOTING_STARS, //5\\r\\n        WAVY_GOLD, //6\\r\\n        GOLD_SKIES //7\\r\\n    }\\r\\n\\r\\n    enum Evolution {\\r\\n        ALPHA, // 1-19\\r\\n        BETA, // 20-29\\r\\n        GAMMA, // 30-39\\r\\n        DELTA, // 40-49\\r\\n        EPSILON // 50\\r\\n    }\\r\\n\\r\\n    enum Element {\\r\\n        FIRE, // 0\\r\\n        LIGHTNING, // 1\\r\\n        STEEL // 2\\r\\n    }\\r\\n\\r\\n    struct Planet {\\r\\n        uint8 level; // Max Level: 50\\r\\n        Element element;\\r\\n        Orbit orbit;\\r\\n        OrbitName orbitName;\\r\\n        Background background;\\r\\n        bool onExpedition;\\r\\n    }\\r\\n\\r\\n    enum Rarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet element as string\\r\\n     */\\r\\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\\r\\n        if (element == AtlantisLib.Element.FIRE) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else if (element == AtlantisLib.Element.STEEL) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\\r\\n            return \\\"Lightning\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\\r\\n        if (orbit == AtlantisLib.Orbit.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tier of equipment based on level\\r\\n     * @param level Level of an equipment\\r\\n     */\\r\\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\\r\\n        if (level < 1) {\\r\\n            tier = AtlantisLib.Rarity.COMMON;\\r\\n        } else if (level >= 1 && level < 5) {\\r\\n            tier = AtlantisLib.Rarity.UNCOMMON;\\r\\n        } else if (level >= 5 && level < 8) {\\r\\n            tier = AtlantisLib.Rarity.RARE;\\r\\n        } else if (level >= 8 && level <= 10) {\\r\\n            tier = AtlantisLib.Rarity.EPIC;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\\r\\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\\r\\n            return \\\"Halo Ring\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\\r\\n            return \\\"Pandora\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\\r\\n            return \\\"Atlas\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\\r\\n            return \\\"Metis\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\\r\\n            return \\\"Entwined\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\\r\\n            return \\\"Rainbow Clouds\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\\r\\n            return \\\"Galatica\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\\r\\n            return \\\"Asteroids\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\\r\\n            return \\\"Interstellar Pink\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\\r\\n            return \\\"Interstellar Gradient\\\";\\r\\n            // Epic planets\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\\r\\n            return \\\"Interstellar Gold\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\\r\\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\\r\\n            return \\\"Purple Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\\r\\n            return \\\"Brown Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.WAVY) {\\r\\n            return \\\"Wavy\\\";\\r\\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\\r\\n            return \\\"Shooting Stars\\\";\\r\\n            // Epic planets\\r\\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\\r\\n            return \\\"Wavy Gold\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\\r\\n            return \\\"Gold Shooting Stars\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\\r\\n            return \\\"Gold Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\\r\\n            return \\\"Gold Skies\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f94d7d040abad058dbad5d368688e91d19d43bc219df2b2ee1c722950a88b8e\",\"license\":\"MIT\"},\"contracts/interface/IAtlantis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { IAtlantisGemstones } from \\\"./IAtlantisGemstones.sol\\\";\\r\\nimport { IAtlantisPlanets } from \\\"./IAtlantisPlanets.sol\\\";\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantis {\\r\\n    /**\\r\\n     * The nft staked must belong to an approved collection\\r\\n     */\\r\\n    error NFTCollectionNotWhitelisted();\\r\\n\\r\\n    /**\\r\\n     * The length of tokenIds should not be 0\\r\\n     */\\r\\n    error TokenIdInputEmpty();\\r\\n\\r\\n    /**\\r\\n     * The length of tokenIds and collectionAddress must be the same\\r\\n     */\\r\\n    error ArrayLengthMismatch();\\r\\n\\r\\n    /**\\r\\n     * Expeditton in progress\\r\\n     */\\r\\n    error ExpeditionInProgress();\\r\\n\\r\\n    /**\\r\\n     * Not the owner of the expedition\\r\\n     */\\r\\n    error NotOwnerOfExpedition();\\r\\n\\r\\n    /**\\r\\n     * Expedition already ended\\r\\n     */\\r\\n    error ExpeditionAlreadyEnded();\\r\\n    /**\\r\\n     * Invalid expedition input\\r\\n     */\\r\\n    error InvalidExpeditionInput();\\r\\n    /**\\r\\n     * Invalid gemstone rate input\\r\\n     */\\r\\n    error InvalidSetGemstoneRateInput();\\r\\n    /**\\r\\n     * Invalid inputs while setting NFTGemstoneMultiplier\\r\\n     */\\r\\n    error InvalidSetNFTGemstoneMultiplierInput();\\r\\n    /**\\r\\n     * Invalid inputs while setting RarityMultiplier\\r\\n     */\\r\\n    error InvalidSetRarityMultiplierInput();\\r\\n    /**\\r\\n     * @notice Expedition struct\\r\\n     * @param collectionAddresses addresses of collections that corresponds to tokenIds array\\r\\n     * @param tokenIds Array of tokenIds for boosting expedition rewards\\r\\n     * @param id Id of expedition\\r\\n     * @param planetId Id of planet which expedition was started with\\r\\n     * @param startTime Start time of the expedition\\r\\n     * @param endTime End time of the expedition\\r\\n     * @param owner Address of user who started expedition\\r\\n     * @param hasEnded Shows whether expedition has ended or not\\r\\n     */\\r\\n    struct Expedition {\\r\\n        address[] collectionAddresses;\\r\\n        uint256[] tokenIds;\\r\\n        uint256 id;\\r\\n        uint256 planetId;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        address owner;\\r\\n        bool hasEnded;\\r\\n    }\\r\\n\\r\\n    function startExpedition(\\r\\n        uint256 _planetId,\\r\\n        address[] memory _collectionAddresses,\\r\\n        uint256[] memory _tokenIds\\r\\n    ) external payable;\\r\\n\\r\\n    function endExpeditions(uint256[] memory _expeditionIds) external;\\r\\n\\r\\n    function claimRewards(uint256[] memory _expeditionIds) external payable;\\r\\n\\r\\n    function getExpeditionInfo(uint256 _expeditionId) external view returns (Expedition memory);\\r\\n\\r\\n    function setExpeditionDuration(uint256 _duration) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when expedition is started\\r\\n     * @param user Address of user who started expedition\\r\\n     * @param expeditionId Id of expedition\\r\\n     * @param planetId Id of planet which expedition was started with\\r\\n     * @param tokenIds Array of tokenIds for boosting expedition rewards\\r\\n     * @param collectionAddresses addresses of collections that corresponds to tokenIds array\\r\\n     * @param startTime Start time of the expedition\\r\\n     * @param endTime End time of the expedition\\r\\n     */\\r\\n    event ExpeditionStarted(\\r\\n        address indexed user,\\r\\n        uint256 indexed expeditionId,\\r\\n        uint256 planetId,\\r\\n        uint256[] tokenIds,\\r\\n        address[] collectionAddresses,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when expedition is ended\\r\\n     * @param user Address of user who ended expedition\\r\\n     * @param expeditionId Id of expedition\\r\\n     * @param timeEnded Time when expedition ended\\r\\n     */\\r\\n    event ExpeditionEnded(address indexed user, uint256 indexed expeditionId, uint256 timeEnded);\\r\\n    /**\\r\\n     * @notice Event emitted when rewards are claimed\\r\\n     * @param user Address of user who started expedition\\r\\n     * @param expeditionId Id of expedition\\r\\n     * @param gemstoneId Id of gemstone claimed as rewards\\r\\n     * @param gemstoneGenerated Amount of gemstone returned from this expedition\\r\\n     * @param stardust Amount of stardust returned from this expedition\\r\\n     * @param startTime Start time of the expedition\\r\\n     * @param endTime End time of the expedition\\r\\n     */\\r\\n    event RewardsClaimed(\\r\\n        address indexed user,\\r\\n        uint256 indexed expeditionId,\\r\\n        uint256 indexed gemstoneId,\\r\\n        uint256 gemstoneGenerated,\\r\\n        uint256 stardust,\\r\\n        uint256 startTime, // New startTime of the expedition\\r\\n        uint256 endTime // New endTime of the expedition\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when expedition duration is changed\\r\\n     * @param newDuration New duration of expedition\\r\\n     */\\r\\n    event ExpeditionDurationUpdated(uint256 newDuration);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when whitelisted collections are updated\\r\\n     * @param collections Array of whitelisted collections\\r\\n     * @param isWhitelisted Bool to show if collection is whitelisted or not\\r\\n     */\\r\\n    event WhitelistedCollectionsUpdated(address[] collections, bool isWhitelisted);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when gemstone rate is updated\\r\\n     * @param _levels Array of levels\\r\\n     * @param _rates Array of rates\\r\\n     */\\r\\n    event GemstoneRateUpdated(uint8[] _levels, uint256[] _rates);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when NFTGemstoneMultiplier is updated\\r\\n     * @param newMultipliers Array of multipliers\\r\\n     */\\r\\n    event NFTGemstoneMultiplierUpdated(uint256[] newMultipliers);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when RarityMultiplier is updated\\r\\n     * @param newMultipliers Array of multipliers\\r\\n     */\\r\\n    event RarityMultiplierUpdated(uint256[] newMultipliers);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when BaseStardustRate is updated\\r\\n     * @param newRate New rate\\r\\n     */\\r\\n    event BaseStardustRateUpdated(uint256 newRate);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when level parameter is updated\\r\\n     * @param newParameter New parameter\\r\\n     */\\r\\n    event LevelParameterUpdated(uint256 newParameter);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when rarity parameter is updated\\r\\n     * @param newParameter New parameter\\r\\n     */\\r\\n    event RarityParameterUpdated(uint256 newParameter);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when registry is updated\\r\\n     * @param newRegistry New registry address\\r\\n     */\\r\\n    event AddressRegistryUpdated(address newRegistry);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tax fee is updated\\r\\n     * @param newFee New tax fee\\r\\n     */\\r\\n    event TaxFeeUpdated(uint256 newFee);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when treasury is updated\\r\\n     * @param newTreasury New treasury address\\r\\n     */\\r\\n    event TreasuryUpdated(address newTreasury);\\r\\n}\\r\\n\",\"keccak256\":\"0x368a13c52002f8dedb8ab1f327f49df6f1feec96d40f4b1be7b9565ab3da875f\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisGemstones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAtlantisGemstones is IERC1155 {\\r\\n    error NonExistentToken();\\r\\n    error OnlyAtlantisOrOwner();\\r\\n    error InvalidInputAmount();\\r\\n    error InvalidElement();\\r\\n    error InvalidUpgrade();\\r\\n\\r\\n    function fuseGemstones(uint8 _id, uint8 _toId, uint256 _amountToCreate) external;\\r\\n\\r\\n    function burn(address _user, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    event FusionCostUpdated(uint256 _newCost);\\r\\n    event BaseMetadataURIUpdated(string _newBaseMetadataURI);\\r\\n    event AddressRegistryUpdated(address _newAddressRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc7172913c331940714918bcb007f6c96be405e04a88a7706a5cdf39aaaf4a34\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisPlanets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// Import AtlantisLib\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantisPlanets is IERC721 {\\r\\n    error AuctionSettled();\\r\\n\\r\\n    /**\\r\\n     * The signature must be by the correct signer\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * The minting stage must be correct\\r\\n     */\\r\\n    error InvalidStage(uint8 currentStage, uint8 requiredStage);\\r\\n\\r\\n    /**\\r\\n     * The collection has exceeded the max supply\\r\\n     */\\r\\n    error ExceededMaxSupply();\\r\\n\\r\\n    /**\\r\\n     * The user has exceeded allowed mint count\\r\\n     */\\r\\n    error ExceedMaxMintPerWallet();\\r\\n\\r\\n    /**\\r\\n     * The planet has exceeded the max level\\r\\n     */\\r\\n    error ExceededMaxLevel();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown OrbitId\\r\\n     */\\r\\n    error UnknownOrbit();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown ElementId\\r\\n     */\\r\\n    error UnknownElement();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown PlanetId\\r\\n     */\\r\\n    error InvalidUpgradeLevel(uint8 currentLevel, uint8 newLevel);\\r\\n    /**\\r\\n     * User is not the owner of planet\\r\\n     */\\r\\n    error NotOwnerOfPlanet();\\r\\n\\r\\n    error InsufficientCRO(uint256 amountPaid, uint256 amountRequired);\\r\\n\\r\\n    error InvalidInput();\\r\\n\\r\\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external;\\r\\n\\r\\n    function getUpgradeCosts(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _levels\\r\\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory gemstoneRequirements);\\r\\n\\r\\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory);\\r\\n\\r\\n    function setPlanetElements(uint256[] memory _tokenIds, AtlantisLib.Element[] memory _gemstoneType) external;\\r\\n\\r\\n    function setPlanetOrbits(uint256[] memory _tokenIds, AtlantisLib.Orbit[] memory _planetsOrbit) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x535102a2c03d0a734770e65d90ed6b46569aaae9578ff7bcca693ec1bdd94503\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526802b5e3af16b18800006003556001600455601460055560006011556203f4806012556703782dace9d900006013553480156200004057600080fd5b506040516200371938038062003719833981016040819052620000639162000207565b6200006e336200019e565b60018055600280546001600160a01b0319166001600160a01b03848116919091179091558116620000e55760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420747265617375727920616464726573730000000000000000604482015260640160405180910390fd5b601480546001600160a01b0319166001600160a01b0383811691909117909155600254604080516366776c7360e11b81529051600093929092169163cceed8e6916004808201926020929091908290030181865afa1580156200014c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000172919062000246565b6001600160a01b03166000908152600f60205260409020805460ff19166001179055506200026d915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200020457600080fd5b50565b600080604083850312156200021b57600080fd5b82516200022881620001ee565b60208401519092506200023b81620001ee565b809150509250929050565b6000602082840312156200025957600080fd5b81516200026681620001ee565b9392505050565b61349c806200027d6000396000f3fe6080604052600436106102305760003560e01c80638da5cb5b1161012e578063b9c664f2116100ab578063f0f442601161006f578063f0f4426014610729578063f2a66dd814610749578063f2fde38b1461075f578063f3ad65f41461077f578063ff50bdf11461079f57600080fd5b8063b9c664f214610687578063bc706197146106a7578063c4081a4c146106c7578063d3ea4350146106e7578063d9f35af71461071657600080fd5b80639b64e2aa116100f25780639b64e2aa146105ec578063a071dcf41461060c578063a1db978214610622578063aa81f68314610642578063aadc06101461065557600080fd5b80638da5cb5b146105635780638dde84351461058157806390c5451014610597578063918f8674146105b75780639763af1a146105cc57600080fd5b80634f05cbd8116101bc578063715018a611610180578063715018a6146104b457806375175b48146104c9578063773bfc68146104e957806377bcb89014610516578063835a8e8f1461054357600080fd5b80634f05cbd8146103e95780635bb3ce12146104295780635eac62391461044957806361d027b31461045c5780636b46e3161461049457600080fd5b806327c7812c1161020357806327c7812c1461035d57806337ef65d51461037d5780633fc846de14610393578063481b6067146103b35780634c726710146103d357600080fd5b8063020222c5146102355780630df4343e1461025757806314a327501461028a578063150b7a0214610324575b600080fd5b34801561024157600080fd5b506102556102503660046129dc565b6107b5565b005b34801561026357600080fd5b50610277610272366004612a20565b610867565b6040519081526020015b60405180910390f35b34801561029657600080fd5b506102ec6102a5366004612a6b565b60106020526000908152604090206002810154600382015460048301546005840154600690940154929391929091906001600160a01b03811690600160a01b900460ff1686565b6040805196875260208701959095529385019290925260608401526001600160a01b03166080830152151560a082015260c001610281565b34801561033057600080fd5b5061034461033f366004612a99565b610901565b6040516001600160e01b03199091168152602001610281565b34801561036957600080fd5b50610255610378366004612b5d565b610912565b34801561038957600080fd5b5061027760045481565b34801561039f57600080fd5b506102776103ae366004612a6b565b610967565b3480156103bf57600080fd5b506102556103ce3660046129dc565b61097e565b3480156103df57600080fd5b5061027760035481565b3480156103f557600080fd5b50610419610404366004612b5d565b600f6020526000908152604090205460ff1681565b6040519015158152602001610281565b34801561043557600080fd5b50610255610444366004612a6b565b610a25565b610255610457366004612b81565b610a62565b34801561046857600080fd5b5060145461047c906001600160a01b031681565b6040516001600160a01b039091168152602001610281565b3480156104a057600080fd5b506102556104af366004612bf6565b610d2b565b3480156104c057600080fd5b50610255610e02565b3480156104d557600080fd5b506102556104e4366004612a6b565b610e16565b3480156104f557600080fd5b50610509610504366004612a6b565b610e53565b6040516102819190612cf3565b34801561052257600080fd5b50610277610531366004612dc1565b60066020526000908152604090205481565b34801561054f57600080fd5b5061025561055e366004612a6b565b610fc7565b34801561056f57600080fd5b506000546001600160a01b031661047c565b34801561058d57600080fd5b5061027760125481565b3480156105a357600080fd5b506102556105b2366004612a6b565b611004565b3480156105c357600080fd5b50610277606481565b3480156105d857600080fd5b506102556105e7366004612b81565b611041565b3480156105f857600080fd5b50610277610607366004612a6b565b611091565b34801561061857600080fd5b5061027760135481565b34801561062e57600080fd5b5061025561063d366004612dde565b6110a1565b610255610650366004612e6e565b6110bd565b34801561066157600080fd5b50610675610670366004612dc1565b611565565b60405160ff9091168152602001610281565b34801561069357600080fd5b506102556106a2366004612ee9565b6115d7565b3480156106b357600080fd5b506102776106c2366004612f3b565b611678565b3480156106d357600080fd5b506102556106e2366004612a6b565b611758565b3480156106f357600080fd5b50610707610702366004612a6b565b611795565b60405161028193929190612f7f565b6102556107243660046129dc565b611a0e565b34801561073557600080fd5b50610255610744366004612b5d565b611dbd565b34801561075557600080fd5b5061027760115481565b34801561076b57600080fd5b5061025561077a366004612b5d565b611e69565b34801561078b57600080fd5b5060025461047c906001600160a01b031681565b3480156107ab57600080fd5b5061027760055481565b6107bd611ee2565b80516004146107df57604051630a0c531d60e21b815260040160405180910390fd5b60005b815181101561082c578181815181106107fd576107fd612fb5565b6020026020010151600b826004811061081857610818612fb5565b01558061082481612fe1565b9150506107e2565b507f98ca19bdb11270949fde3a63b16fa2bed6423bb119c5c843b790e52dd8e78b738160405161085c9190612ffa565b60405180910390a150565b600080610876600a6064613023565b60078460ff166004811061088c5761088c612fb5565b015461089a600a6064613023565b600b8760ff16600481106108b0576108b0612fb5565b01546108bc9190613037565b60ff88166000908152600660205260409020546108d99190613037565b6108e39190613037565b6108ed9190613037565b90506108f881611f3c565b95945050505050565b630a85bd0160e11b5b949350505050565b61091a611ee2565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a95929060200161085c565b600b816004811061097757600080fd5b0154905081565b610986611ee2565b80516004146109a857604051633c7d600160e21b815260040160405180910390fd5b60005b81518110156109f5578181815181106109c6576109c6612fb5565b6020026020010151600782600481106109e1576109e1612fb5565b0155806109ed81612fe1565b9150506109ab565b507f596fa74df10fee1c054d0da789f1c93264dcabf896d901d62468b96b78acb3968160405161085c9190612ffa565b610a2d611ee2565b60058190556040518181527f37a3f859af53950ef188652dad3d67bd0a3344f046a87c53939feb1995823f389060200161085c565b610a6a611f90565b601354610a78908290613037565b3414610a9f5760405162461bcd60e51b8152600401610a969061304e565b60405180910390fd5b6014546013546000916001600160a01b031690610abd908490613037565b604051600081818185875af1925050503d8060008114610af9576040519150601f19603f3d011682016040523d82523d6000602084013e610afe565b606091505b5050905080610b1f5760405162461bcd60e51b8152600401610a9690613077565b60005b82811015610d1c57610b4b848483818110610b3f57610b3f612fb5565b90506020020135611fe9565b600060106000868685818110610b6357610b63612fb5565b9050602002013581526020019081526020016000206040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610bdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bbf575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c3557602002820191906000526020600020905b815481526020019060010190808311610c21575b5050509183525050600282015460208201526003820154604082015260048201546060820152600582015460808201526006909101546001600160a01b03811660a0830152600160a01b900460ff16151560c0909101529050848483818110610ca057610ca0612fb5565b90506020020135336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b8360600151846020015185600001514260125442610cf091906130a0565b604051610d019594939291906130ec565b60405180910390a35080610d1481612fe1565b915050610b22565b5050610d2760018055565b5050565b610d33611ee2565b8051825114610d5557604051637ee7a24760e01b815260040160405180910390fd5b60005b8251811015610dc457818181518110610d7357610d73612fb5565b602002602001015160066000858481518110610d9157610d91612fb5565b602002602001015160ff1660ff168152602001908152602001600020819055508080610dbc90612fe1565b915050610d58565b507fc156667c1ebccb7c542c0b4cabb127e2cd3677718b0ba369c27d30b452e19d0e8282604051610df692919061312c565b60405180910390a15050565b610e0a611ee2565b610e1460006122f3565b565b610e1e611ee2565b60128190556040518181527fc38cdc4f7fb60e3e5423e4fefd869dfab2469e11d215c708825ae79d48dae0b09060200161085c565b610ea660405180610100016040528060608152602001606081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b600082815260106020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610f1257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ef4575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f6a57602002820191906000526020600020905b815481526020019060010190808311610f56575b5050509183525050600282015460208201526003820154604082015260048201546060820152600582015460808201526006909101546001600160a01b03811660a0830152600160a01b900460ff16151560c09091015292915050565b610fcf611ee2565b60048190556040518181527f8217da956dcf4d73c51aa9de7149058021c2983d24c79e5d7239820b5b2ea81d9060200161085c565b61100c611ee2565b60038190556040518181527f8277f39c6c6c1583753ebd5b813ef80f2e4abe3c7f91be6aaa1713c1b6274ee39060200161085c565b611049611f90565b60005b818110156110875761107583838381811061106957611069612fb5565b90506020020135612343565b8061107f81612fe1565b91505061104c565b50610d2760018055565b6007816004811061097757600080fd5b6110a9611ee2565b610d276001600160a01b03831633836125dc565b60135434146110de5760405162461bcd60e51b8152600401610a969061304e565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190613186565b6014546013546040519293506000926001600160a01b03909216918381818185875af1925050503d806000811461119f576040519150601f19603f3d011682016040523d82523d6000602084013e6111a4565b606091505b50509050806111c55760405162461bcd60e51b8152600401610a9690613077565b60405163058d950160e41b8152600481018690526000906001600160a01b038416906358d950109060240160c060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123191906131cc565b51845186519192501461125757604051632b6ccf6960e11b815260040160405180910390fd5b61126081611565565b60ff168551111561128457604051632b6ccf6960e11b815260040160405180910390fd5b6040518061010001604052808681526020018581526020016011548152602001878152602001428152602001601254426112be91906130a0565b81523360208083019190915260006040928301819052601154815260108252919091208251805191926112f692849290910190612828565b50602082810151805161130f926001850192019061288d565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c08201516006909101805460e0909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790556011805490600061138383612fe1565b9091555050604051632142170760e11b81526001600160a01b038416906342842e0e906113b890339030908b9060040161325b565b600060405180830381600087803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b5050505060005b85518110156114f757600f600087838151811061140c5761140c612fb5565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166114505760405163bd30795160e01b815260040160405180910390fd5b85818151811061146257611462612fb5565b60200260200101516001600160a01b03166342842e0e333088858151811061148c5761148c612fb5565b60200260200101516040518463ffffffff1660e01b81526004016114b29392919061325b565b600060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b5050505080806114ef90612fe1565b9150506113ed565b506001601154611507919061327f565b336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b888789426012544261154491906130a0565b6040516115559594939291906130ec565b60405180910390a3505050505050565b600060148260ff16101561157b57506000919050565b60148260ff16101580156115925750601e8260ff16105b1561159f57506001919050565b601e8260ff16101580156115b6575060288260ff16105b156115c357506002919050565b60288260ff16106115d2575060035b919050565b6115df611ee2565b60005b82518110156116465781600f600085848151811061160257611602612fb5565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061163e81612fe1565b9150506115e2565b507f7070c17b430b654066a20658692bf86a10069f5cd94e3492caee49d9c21f32e88282604051610df6929190613292565b60008260ff1660000361168e5750600354611752565b60ff8084169083166116a26003606461339a565b6003546116b16002606461339a565b6005546116bf606486613037565b6116c99190613037565b6116d391906130a0565b6116df6002606461339a565b6116eb6003606461339a565b600454600260646116fd60018b61327f565b6117079190613037565b611711919061339a565b61171b9190613037565b61172591906130a0565b61172f9190613023565b6117399190613037565b6117439190613037565b61174d9190613023565b925050505b92915050565b611760611ee2565b60138190556040518181527faa4b71ac29531fdea0ef1650c76ef91e3771dac25f4a4dd2a561ff3e0b9a5de29060200161085c565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316635c9a1a3d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118129190613186565b600086815260106020908152604080832081518154610120948102820185019093526101008101838152959650939490928492849184018282801561188057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611862575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156118d857602002820191906000526020600020905b8154815260200190600101908083116118c4575b5050509183525050600282015460208201526003820154604080830191909152600480840154606080850191909152600585015460808501526006909401546001600160a01b0380821660a0860152600160a01b90910460ff16151560c09094019390935292840151905163058d950160e41b8152928301819052929350600091908516906358d950109060240160c060405180830381865afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a791906131cc565b905060006119d48260000151836040015160038111156119c9576119c9612f69565b866020015151610867565b905060006119f68360000151846040015160038111156106c2576106c2612f69565b60209390930151919a91995091975095505050505050565b6000815111611a535760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420706c616e657449647360781b6044820152606401610a96565b8051601354611a629190613037565b3414611a805760405162461bcd60e51b8152600401610a969061304e565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee9190613186565b60145483516013549293506000926001600160a01b0390921691611b129190613037565b604051600081818185875af1925050503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5050905080611b745760405162461bcd60e51b8152600401610a9690613077565b604080516000808252602082018181528284019093529091905b8551811015611db5576040518061010001604052808481526020018381526020016011548152602001878381518110611bc957611bc9612fb5565b6020026020010151815260200142815260200160125442611bea91906130a0565b8152336020808301919091526000604092830181905260115481526010825291909120825180519192611c2292849290910190612828565b506020828101518051611c3b926001850192019061288d565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c08201516006909101805460e0909301511515600160a01b026001600160a81b03199093166001600160a01b039092169190911791909117905560118054906000611caf83612fe1565b9190505550846001600160a01b03166342842e0e3330898581518110611cd757611cd7612fb5565b60200260200101516040518463ffffffff1660e01b8152600401611cfd9392919061325b565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050506001601154611d3e919061327f565b336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b888481518110611d7b57611d7b612fb5565b602002602001015185874260125442611d9491906130a0565b604051611da59594939291906130ec565b60405180910390a3600101611b8e565b505050505050565b611dc5611ee2565b6001600160a01b038116611e1b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207472656173757279206164647265737300000000000000006044820152606401610a96565b601480546001600160a01b0319166001600160a01b0383169081179091556040519081527f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d19060200161085c565b611e71611ee2565b6001600160a01b038116611ed65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a96565b611edf816122f3565b50565b6000546001600160a01b03163314610e145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a96565b6000611f4a6002606461339a565b611f5490836133a9565b15611f7a57611f656002606461339a565b611f6f9083613023565b6117529060016130a0565b611f866002606461339a565b6117529083613023565b600260015403611fe25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a96565b6002600155565b6000818152601060205260409020600601546001600160a01b03163314612023576040516309a6da5960e21b815260040160405180910390fd5b6002546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190613186565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663786d10866040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210c9190613186565b6000848152601060205260409020600681015491925090600160a01b900460ff161561214b57604051631b99c4ff60e21b815260040160405180910390fd5b42816005015411156121705760405163107f326d60e21b815260040160405180910390fd5b6000848152601060205260409020426004909101819055601254612193916130a0565b60008581526010602052604081206005019190915580806121b387611795565b90945090925090506121cf6001600160a01b03871633836125dc565b846001600160a01b031663156e29f6338560028111156121f1576121f1612f69565b6121fc9060016133bd565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260ff16602482015260448101859052606401600060405180830381600087803b15801561224c57600080fd5b505af1158015612260573d6000803e3d6000fd5b5050505082600281111561227657612276612f69565b6122819060016133bd565b60ff1687336001600160a01b03167f81cf85e873bf8ffc652276abd1df29c5cc0765b36ab5af38b47472b8fe55e119858589600401548a600501546040516122e2949392919093845260208401929092526040830152606082015260800190565b60405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa15801561238d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b19190613186565b6000838152601060205260409020600681015491925090600160a01b900460ff16156123f057604051631b99c4ff60e21b815260040160405180910390fd5b42816005015411156124155760405163107f326d60e21b815260040160405180910390fd5b60068101546001600160a01b03163314612442576040516309a6da5960e21b815260040160405180910390fd5b60005b81548110156125145781600001818154811061246357612463612fb5565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166342842e0e30338560010185815481106124a6576124a6612fb5565b90600052602060002001546040518463ffffffff1660e01b81526004016124cf9392919061325b565b600060405180830381600087803b1580156124e957600080fd5b505af11580156124fd573d6000803e3d6000fd5b50505050808061250c90612fe1565b915050612445565b506003810154604051632142170760e11b81526001600160a01b038416916342842e0e9161254991309133919060040161325b565b600060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b5050505061258483611fe9565b60068101805460ff60a01b1916600160a01b179055604051839033907f86d343e090426335e1c377c70b8a7b1a23f035994e759823ebb68398098c0cf1906125cf9042815260200190565b60405180910390a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261262e908490612633565b505050565b6000612688826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127059092919063ffffffff16565b80519091501561262e57808060200190518101906126a691906133d6565b61262e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a96565b606061090a848460008585600080866001600160a01b0316858760405161272c9190613417565b60006040518083038185875af1925050503d8060008114612769576040519150601f19603f3d011682016040523d82523d6000602084013e61276e565b606091505b509150915061277f8783838761278a565b979650505050505050565b606083156127f95782516000036127f2576001600160a01b0385163b6127f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a96565b508161090a565b61090a838381511561280e5781518083602001fd5b8060405162461bcd60e51b8152600401610a969190613433565b82805482825590600052602060002090810192821561287d579160200282015b8281111561287d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612848565b506128899291506128c8565b5090565b82805482825590600052602060002090810192821561287d579160200282015b8281111561287d5782518255916020019190600101906128ad565b5b8082111561288957600081556001016128c9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612916576129166128dd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612945576129456128dd565b604052919050565b600067ffffffffffffffff821115612967576129676128dd565b5060051b60200190565b600082601f83011261298257600080fd5b813560206129976129928361294d565b61291c565b82815260059290921b840181019181810190868411156129b657600080fd5b8286015b848110156129d157803583529183019183016129ba565b509695505050505050565b6000602082840312156129ee57600080fd5b813567ffffffffffffffff811115612a0557600080fd5b61090a84828501612971565b60ff81168114611edf57600080fd5b600080600060608486031215612a3557600080fd5b8335612a4081612a11565b92506020840135612a5081612a11565b91506040840135612a6081612a11565b809150509250925092565b600060208284031215612a7d57600080fd5b5035919050565b6001600160a01b0381168114611edf57600080fd5b60008060008060808587031215612aaf57600080fd5b8435612aba81612a84565b9350602085810135612acb81612a84565b935060408601359250606086013567ffffffffffffffff80821115612aef57600080fd5b818801915088601f830112612b0357600080fd5b813581811115612b1557612b156128dd565b612b27601f8201601f1916850161291c565b91508082528984828501011115612b3d57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215612b6f57600080fd5b8135612b7a81612a84565b9392505050565b60008060208385031215612b9457600080fd5b823567ffffffffffffffff80821115612bac57600080fd5b818501915085601f830112612bc057600080fd5b813581811115612bcf57600080fd5b8660208260051b8501011115612be457600080fd5b60209290920196919550909350505050565b60008060408385031215612c0957600080fd5b823567ffffffffffffffff80821115612c2157600080fd5b818501915085601f830112612c3557600080fd5b81356020612c456129928361294d565b82815260059290921b84018101918181019089841115612c6457600080fd5b948201945b83861015612c8b578535612c7c81612a11565b82529482019490820190612c69565b96505086013592505080821115612ca157600080fd5b50612cae85828601612971565b9150509250929050565b600081518084526020808501945080840160005b83811015612ce857815187529582019590820190600101612ccc565b509495945050505050565b60208082528251610100838301819052815161012085018190526000939283019184916101408701905b80841015612d465784516001600160a01b03168252938501936001939093019290850190612d1d565b5093870151868503601f1901604088015293612d628186612cb8565b9450506040870151606087015260608701516080870152608087015160a087015260a087015160c087015260c08701519250612da960e08701846001600160a01b03169052565b60e09690960151151595909401949094529392505050565b600060208284031215612dd357600080fd5b8135612b7a81612a11565b60008060408385031215612df157600080fd5b8235612dfc81612a84565b946020939093013593505050565b600082601f830112612e1b57600080fd5b81356020612e2b6129928361294d565b82815260059290921b84018101918181019086841115612e4a57600080fd5b8286015b848110156129d1578035612e6181612a84565b8352918301918301612e4e565b600080600060608486031215612e8357600080fd5b83359250602084013567ffffffffffffffff80821115612ea257600080fd5b612eae87838801612e0a565b93506040860135915080821115612ec457600080fd5b50612ed186828701612971565b9150509250925092565b8015158114611edf57600080fd5b60008060408385031215612efc57600080fd5b823567ffffffffffffffff811115612f1357600080fd5b612f1f85828601612e0a565b9250506020830135612f3081612edb565b809150509250929050565b60008060408385031215612f4e57600080fd5b8235612f5981612a11565b91506020830135612f3081612a11565b634e487b7160e01b600052602160045260246000fd5b8381526060810160038410612fa457634e487b7160e01b600052602160045260246000fd5b602082019390935260400152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ff357612ff3612fcb565b5060010190565b602081526000612b7a6020830184612cb8565b634e487b7160e01b600052601260045260246000fd5b6000826130325761303261300d565b500490565b808202811582820484141761175257611752612fcb565b6020808252600f908201526e496e76616c6964207461782066656560881b604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b8082018082111561175257611752612fcb565b600081518084526020808501945080840160005b83811015612ce85781516001600160a01b0316875295820195908201906001016130c7565b85815260a06020820152600061310560a0830187612cb8565b828103604084015261311781876130b3565b60608401959095525050608001529392505050565b604080825283519082018190526000906020906060840190828701845b8281101561316857815160ff1684529284019290840190600101613149565b5050508381038285015261317c8186612cb8565b9695505050505050565b60006020828403121561319857600080fd5b8151612b7a81612a84565b8051600b81106115d257600080fd5b8051600881106115d257600080fd5b80516115d281612edb565b600060c082840312156131de57600080fd5b6131e66128f3565b82516131f181612a11565b815260208301516003811061320557600080fd5b602082015260408301516004811061321c57600080fd5b604082015261322d606084016131a3565b606082015261323e608084016131b2565b608082015261324f60a084016131c1565b60a08201529392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b8181038181111561175257611752612fcb565b6040815260006132a560408301856130b3565b905082151560208301529392505050565b600181815b808511156132f15781600019048211156132d7576132d7612fcb565b808516156132e457918102915b93841c93908002906132bb565b509250929050565b60008261330857506001611752565b8161331557506000611752565b816001811461332b576002811461333557613351565b6001915050611752565b60ff84111561334657613346612fcb565b50506001821b611752565b5060208310610133831016604e8410600b8410161715613374575081810a611752565b61337e83836132b6565b806000190482111561339257613392612fcb565b029392505050565b6000612b7a60ff8416836132f9565b6000826133b8576133b861300d565b500690565b60ff818116838216019081111561175257611752612fcb565b6000602082840312156133e857600080fd5b8151612b7a81612edb565b60005b8381101561340e5781810151838201526020016133f6565b50506000910152565b600082516134298184602087016133f3565b9190910192915050565b60208152600082518060208401526134528160408501602087016133f3565b601f01601f1916919091016040019291505056fea264697066735822122096f81d0ce4ee1fd069163a0e5c9eaf0d032e4cab39b4fd79bf38c09b0f17105464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80638da5cb5b1161012e578063b9c664f2116100ab578063f0f442601161006f578063f0f4426014610729578063f2a66dd814610749578063f2fde38b1461075f578063f3ad65f41461077f578063ff50bdf11461079f57600080fd5b8063b9c664f214610687578063bc706197146106a7578063c4081a4c146106c7578063d3ea4350146106e7578063d9f35af71461071657600080fd5b80639b64e2aa116100f25780639b64e2aa146105ec578063a071dcf41461060c578063a1db978214610622578063aa81f68314610642578063aadc06101461065557600080fd5b80638da5cb5b146105635780638dde84351461058157806390c5451014610597578063918f8674146105b75780639763af1a146105cc57600080fd5b80634f05cbd8116101bc578063715018a611610180578063715018a6146104b457806375175b48146104c9578063773bfc68146104e957806377bcb89014610516578063835a8e8f1461054357600080fd5b80634f05cbd8146103e95780635bb3ce12146104295780635eac62391461044957806361d027b31461045c5780636b46e3161461049457600080fd5b806327c7812c1161020357806327c7812c1461035d57806337ef65d51461037d5780633fc846de14610393578063481b6067146103b35780634c726710146103d357600080fd5b8063020222c5146102355780630df4343e1461025757806314a327501461028a578063150b7a0214610324575b600080fd5b34801561024157600080fd5b506102556102503660046129dc565b6107b5565b005b34801561026357600080fd5b50610277610272366004612a20565b610867565b6040519081526020015b60405180910390f35b34801561029657600080fd5b506102ec6102a5366004612a6b565b60106020526000908152604090206002810154600382015460048301546005840154600690940154929391929091906001600160a01b03811690600160a01b900460ff1686565b6040805196875260208701959095529385019290925260608401526001600160a01b03166080830152151560a082015260c001610281565b34801561033057600080fd5b5061034461033f366004612a99565b610901565b6040516001600160e01b03199091168152602001610281565b34801561036957600080fd5b50610255610378366004612b5d565b610912565b34801561038957600080fd5b5061027760045481565b34801561039f57600080fd5b506102776103ae366004612a6b565b610967565b3480156103bf57600080fd5b506102556103ce3660046129dc565b61097e565b3480156103df57600080fd5b5061027760035481565b3480156103f557600080fd5b50610419610404366004612b5d565b600f6020526000908152604090205460ff1681565b6040519015158152602001610281565b34801561043557600080fd5b50610255610444366004612a6b565b610a25565b610255610457366004612b81565b610a62565b34801561046857600080fd5b5060145461047c906001600160a01b031681565b6040516001600160a01b039091168152602001610281565b3480156104a057600080fd5b506102556104af366004612bf6565b610d2b565b3480156104c057600080fd5b50610255610e02565b3480156104d557600080fd5b506102556104e4366004612a6b565b610e16565b3480156104f557600080fd5b50610509610504366004612a6b565b610e53565b6040516102819190612cf3565b34801561052257600080fd5b50610277610531366004612dc1565b60066020526000908152604090205481565b34801561054f57600080fd5b5061025561055e366004612a6b565b610fc7565b34801561056f57600080fd5b506000546001600160a01b031661047c565b34801561058d57600080fd5b5061027760125481565b3480156105a357600080fd5b506102556105b2366004612a6b565b611004565b3480156105c357600080fd5b50610277606481565b3480156105d857600080fd5b506102556105e7366004612b81565b611041565b3480156105f857600080fd5b50610277610607366004612a6b565b611091565b34801561061857600080fd5b5061027760135481565b34801561062e57600080fd5b5061025561063d366004612dde565b6110a1565b610255610650366004612e6e565b6110bd565b34801561066157600080fd5b50610675610670366004612dc1565b611565565b60405160ff9091168152602001610281565b34801561069357600080fd5b506102556106a2366004612ee9565b6115d7565b3480156106b357600080fd5b506102776106c2366004612f3b565b611678565b3480156106d357600080fd5b506102556106e2366004612a6b565b611758565b3480156106f357600080fd5b50610707610702366004612a6b565b611795565b60405161028193929190612f7f565b6102556107243660046129dc565b611a0e565b34801561073557600080fd5b50610255610744366004612b5d565b611dbd565b34801561075557600080fd5b5061027760115481565b34801561076b57600080fd5b5061025561077a366004612b5d565b611e69565b34801561078b57600080fd5b5060025461047c906001600160a01b031681565b3480156107ab57600080fd5b5061027760055481565b6107bd611ee2565b80516004146107df57604051630a0c531d60e21b815260040160405180910390fd5b60005b815181101561082c578181815181106107fd576107fd612fb5565b6020026020010151600b826004811061081857610818612fb5565b01558061082481612fe1565b9150506107e2565b507f98ca19bdb11270949fde3a63b16fa2bed6423bb119c5c843b790e52dd8e78b738160405161085c9190612ffa565b60405180910390a150565b600080610876600a6064613023565b60078460ff166004811061088c5761088c612fb5565b015461089a600a6064613023565b600b8760ff16600481106108b0576108b0612fb5565b01546108bc9190613037565b60ff88166000908152600660205260409020546108d99190613037565b6108e39190613037565b6108ed9190613037565b90506108f881611f3c565b95945050505050565b630a85bd0160e11b5b949350505050565b61091a611ee2565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a95929060200161085c565b600b816004811061097757600080fd5b0154905081565b610986611ee2565b80516004146109a857604051633c7d600160e21b815260040160405180910390fd5b60005b81518110156109f5578181815181106109c6576109c6612fb5565b6020026020010151600782600481106109e1576109e1612fb5565b0155806109ed81612fe1565b9150506109ab565b507f596fa74df10fee1c054d0da789f1c93264dcabf896d901d62468b96b78acb3968160405161085c9190612ffa565b610a2d611ee2565b60058190556040518181527f37a3f859af53950ef188652dad3d67bd0a3344f046a87c53939feb1995823f389060200161085c565b610a6a611f90565b601354610a78908290613037565b3414610a9f5760405162461bcd60e51b8152600401610a969061304e565b60405180910390fd5b6014546013546000916001600160a01b031690610abd908490613037565b604051600081818185875af1925050503d8060008114610af9576040519150601f19603f3d011682016040523d82523d6000602084013e610afe565b606091505b5050905080610b1f5760405162461bcd60e51b8152600401610a9690613077565b60005b82811015610d1c57610b4b848483818110610b3f57610b3f612fb5565b90506020020135611fe9565b600060106000868685818110610b6357610b63612fb5565b9050602002013581526020019081526020016000206040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610bdd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bbf575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610c3557602002820191906000526020600020905b815481526020019060010190808311610c21575b5050509183525050600282015460208201526003820154604082015260048201546060820152600582015460808201526006909101546001600160a01b03811660a0830152600160a01b900460ff16151560c0909101529050848483818110610ca057610ca0612fb5565b90506020020135336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b8360600151846020015185600001514260125442610cf091906130a0565b604051610d019594939291906130ec565b60405180910390a35080610d1481612fe1565b915050610b22565b5050610d2760018055565b5050565b610d33611ee2565b8051825114610d5557604051637ee7a24760e01b815260040160405180910390fd5b60005b8251811015610dc457818181518110610d7357610d73612fb5565b602002602001015160066000858481518110610d9157610d91612fb5565b602002602001015160ff1660ff168152602001908152602001600020819055508080610dbc90612fe1565b915050610d58565b507fc156667c1ebccb7c542c0b4cabb127e2cd3677718b0ba369c27d30b452e19d0e8282604051610df692919061312c565b60405180910390a15050565b610e0a611ee2565b610e1460006122f3565b565b610e1e611ee2565b60128190556040518181527fc38cdc4f7fb60e3e5423e4fefd869dfab2469e11d215c708825ae79d48dae0b09060200161085c565b610ea660405180610100016040528060608152602001606081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b600082815260106020908152604091829020825181546101209381028201840190945261010081018481529093919284928491840182828015610f1257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ef4575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f6a57602002820191906000526020600020905b815481526020019060010190808311610f56575b5050509183525050600282015460208201526003820154604082015260048201546060820152600582015460808201526006909101546001600160a01b03811660a0830152600160a01b900460ff16151560c09091015292915050565b610fcf611ee2565b60048190556040518181527f8217da956dcf4d73c51aa9de7149058021c2983d24c79e5d7239820b5b2ea81d9060200161085c565b61100c611ee2565b60038190556040518181527f8277f39c6c6c1583753ebd5b813ef80f2e4abe3c7f91be6aaa1713c1b6274ee39060200161085c565b611049611f90565b60005b818110156110875761107583838381811061106957611069612fb5565b90506020020135612343565b8061107f81612fe1565b91505061104c565b50610d2760018055565b6007816004811061097757600080fd5b6110a9611ee2565b610d276001600160a01b03831633836125dc565b60135434146110de5760405162461bcd60e51b8152600401610a969061304e565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa158015611128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114c9190613186565b6014546013546040519293506000926001600160a01b03909216918381818185875af1925050503d806000811461119f576040519150601f19603f3d011682016040523d82523d6000602084013e6111a4565b606091505b50509050806111c55760405162461bcd60e51b8152600401610a9690613077565b60405163058d950160e41b8152600481018690526000906001600160a01b038416906358d950109060240160c060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123191906131cc565b51845186519192501461125757604051632b6ccf6960e11b815260040160405180910390fd5b61126081611565565b60ff168551111561128457604051632b6ccf6960e11b815260040160405180910390fd5b6040518061010001604052808681526020018581526020016011548152602001878152602001428152602001601254426112be91906130a0565b81523360208083019190915260006040928301819052601154815260108252919091208251805191926112f692849290910190612828565b50602082810151805161130f926001850192019061288d565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c08201516006909101805460e0909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790556011805490600061138383612fe1565b9091555050604051632142170760e11b81526001600160a01b038416906342842e0e906113b890339030908b9060040161325b565b600060405180830381600087803b1580156113d257600080fd5b505af11580156113e6573d6000803e3d6000fd5b5050505060005b85518110156114f757600f600087838151811061140c5761140c612fb5565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166114505760405163bd30795160e01b815260040160405180910390fd5b85818151811061146257611462612fb5565b60200260200101516001600160a01b03166342842e0e333088858151811061148c5761148c612fb5565b60200260200101516040518463ffffffff1660e01b81526004016114b29392919061325b565b600060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b5050505080806114ef90612fe1565b9150506113ed565b506001601154611507919061327f565b336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b888789426012544261154491906130a0565b6040516115559594939291906130ec565b60405180910390a3505050505050565b600060148260ff16101561157b57506000919050565b60148260ff16101580156115925750601e8260ff16105b1561159f57506001919050565b601e8260ff16101580156115b6575060288260ff16105b156115c357506002919050565b60288260ff16106115d2575060035b919050565b6115df611ee2565b60005b82518110156116465781600f600085848151811061160257611602612fb5565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061163e81612fe1565b9150506115e2565b507f7070c17b430b654066a20658692bf86a10069f5cd94e3492caee49d9c21f32e88282604051610df6929190613292565b60008260ff1660000361168e5750600354611752565b60ff8084169083166116a26003606461339a565b6003546116b16002606461339a565b6005546116bf606486613037565b6116c99190613037565b6116d391906130a0565b6116df6002606461339a565b6116eb6003606461339a565b600454600260646116fd60018b61327f565b6117079190613037565b611711919061339a565b61171b9190613037565b61172591906130a0565b61172f9190613023565b6117399190613037565b6117439190613037565b61174d9190613023565b925050505b92915050565b611760611ee2565b60138190556040518181527faa4b71ac29531fdea0ef1650c76ef91e3771dac25f4a4dd2a561ff3e0b9a5de29060200161085c565b600080600080600260009054906101000a90046001600160a01b03166001600160a01b0316635c9a1a3d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118129190613186565b600086815260106020908152604080832081518154610120948102820185019093526101008101838152959650939490928492849184018282801561188057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611862575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156118d857602002820191906000526020600020905b8154815260200190600101908083116118c4575b5050509183525050600282015460208201526003820154604080830191909152600480840154606080850191909152600585015460808501526006909401546001600160a01b0380821660a0860152600160a01b90910460ff16151560c09094019390935292840151905163058d950160e41b8152928301819052929350600091908516906358d950109060240160c060405180830381865afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a791906131cc565b905060006119d48260000151836040015160038111156119c9576119c9612f69565b866020015151610867565b905060006119f68360000151846040015160038111156106c2576106c2612f69565b60209390930151919a91995091975095505050505050565b6000815111611a535760405162461bcd60e51b8152602060048201526011602482015270496e76616c696420706c616e657449647360781b6044820152606401610a96565b8051601354611a629190613037565b3414611a805760405162461bcd60e51b8152600401610a969061304e565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee9190613186565b60145483516013549293506000926001600160a01b0390921691611b129190613037565b604051600081818185875af1925050503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5050905080611b745760405162461bcd60e51b8152600401610a9690613077565b604080516000808252602082018181528284019093529091905b8551811015611db5576040518061010001604052808481526020018381526020016011548152602001878381518110611bc957611bc9612fb5565b6020026020010151815260200142815260200160125442611bea91906130a0565b8152336020808301919091526000604092830181905260115481526010825291909120825180519192611c2292849290910190612828565b506020828101518051611c3b926001850192019061288d565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c08201516006909101805460e0909301511515600160a01b026001600160a81b03199093166001600160a01b039092169190911791909117905560118054906000611caf83612fe1565b9190505550846001600160a01b03166342842e0e3330898581518110611cd757611cd7612fb5565b60200260200101516040518463ffffffff1660e01b8152600401611cfd9392919061325b565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050506001601154611d3e919061327f565b336001600160a01b03167fe6a5300ea998c525f257e87871550bc4e6c3c9234da6429f7194854d5131159b888481518110611d7b57611d7b612fb5565b602002602001015185874260125442611d9491906130a0565b604051611da59594939291906130ec565b60405180910390a3600101611b8e565b505050505050565b611dc5611ee2565b6001600160a01b038116611e1b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207472656173757279206164647265737300000000000000006044820152606401610a96565b601480546001600160a01b0319166001600160a01b0383169081179091556040519081527f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d19060200161085c565b611e71611ee2565b6001600160a01b038116611ed65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a96565b611edf816122f3565b50565b6000546001600160a01b03163314610e145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a96565b6000611f4a6002606461339a565b611f5490836133a9565b15611f7a57611f656002606461339a565b611f6f9083613023565b6117529060016130a0565b611f866002606461339a565b6117529083613023565b600260015403611fe25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a96565b6002600155565b6000818152601060205260409020600601546001600160a01b03163314612023576040516309a6da5960e21b815260040160405180910390fd5b6002546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190613186565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663786d10866040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210c9190613186565b6000848152601060205260409020600681015491925090600160a01b900460ff161561214b57604051631b99c4ff60e21b815260040160405180910390fd5b42816005015411156121705760405163107f326d60e21b815260040160405180910390fd5b6000848152601060205260409020426004909101819055601254612193916130a0565b60008581526010602052604081206005019190915580806121b387611795565b90945090925090506121cf6001600160a01b03871633836125dc565b846001600160a01b031663156e29f6338560028111156121f1576121f1612f69565b6121fc9060016133bd565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260ff16602482015260448101859052606401600060405180830381600087803b15801561224c57600080fd5b505af1158015612260573d6000803e3d6000fd5b5050505082600281111561227657612276612f69565b6122819060016133bd565b60ff1687336001600160a01b03167f81cf85e873bf8ffc652276abd1df29c5cc0765b36ab5af38b47472b8fe55e119858589600401548a600501546040516122e2949392919093845260208401929092526040830152606082015260800190565b60405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60025460408051635c9a1a3d60e01b815290516000926001600160a01b031691635c9a1a3d9160048083019260209291908290030181865afa15801561238d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b19190613186565b6000838152601060205260409020600681015491925090600160a01b900460ff16156123f057604051631b99c4ff60e21b815260040160405180910390fd5b42816005015411156124155760405163107f326d60e21b815260040160405180910390fd5b60068101546001600160a01b03163314612442576040516309a6da5960e21b815260040160405180910390fd5b60005b81548110156125145781600001818154811061246357612463612fb5565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166342842e0e30338560010185815481106124a6576124a6612fb5565b90600052602060002001546040518463ffffffff1660e01b81526004016124cf9392919061325b565b600060405180830381600087803b1580156124e957600080fd5b505af11580156124fd573d6000803e3d6000fd5b50505050808061250c90612fe1565b915050612445565b506003810154604051632142170760e11b81526001600160a01b038416916342842e0e9161254991309133919060040161325b565b600060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b5050505061258483611fe9565b60068101805460ff60a01b1916600160a01b179055604051839033907f86d343e090426335e1c377c70b8a7b1a23f035994e759823ebb68398098c0cf1906125cf9042815260200190565b60405180910390a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261262e908490612633565b505050565b6000612688826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127059092919063ffffffff16565b80519091501561262e57808060200190518101906126a691906133d6565b61262e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a96565b606061090a848460008585600080866001600160a01b0316858760405161272c9190613417565b60006040518083038185875af1925050503d8060008114612769576040519150601f19603f3d011682016040523d82523d6000602084013e61276e565b606091505b509150915061277f8783838761278a565b979650505050505050565b606083156127f95782516000036127f2576001600160a01b0385163b6127f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a96565b508161090a565b61090a838381511561280e5781518083602001fd5b8060405162461bcd60e51b8152600401610a969190613433565b82805482825590600052602060002090810192821561287d579160200282015b8281111561287d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612848565b506128899291506128c8565b5090565b82805482825590600052602060002090810192821561287d579160200282015b8281111561287d5782518255916020019190600101906128ad565b5b8082111561288957600081556001016128c9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612916576129166128dd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612945576129456128dd565b604052919050565b600067ffffffffffffffff821115612967576129676128dd565b5060051b60200190565b600082601f83011261298257600080fd5b813560206129976129928361294d565b61291c565b82815260059290921b840181019181810190868411156129b657600080fd5b8286015b848110156129d157803583529183019183016129ba565b509695505050505050565b6000602082840312156129ee57600080fd5b813567ffffffffffffffff811115612a0557600080fd5b61090a84828501612971565b60ff81168114611edf57600080fd5b600080600060608486031215612a3557600080fd5b8335612a4081612a11565b92506020840135612a5081612a11565b91506040840135612a6081612a11565b809150509250925092565b600060208284031215612a7d57600080fd5b5035919050565b6001600160a01b0381168114611edf57600080fd5b60008060008060808587031215612aaf57600080fd5b8435612aba81612a84565b9350602085810135612acb81612a84565b935060408601359250606086013567ffffffffffffffff80821115612aef57600080fd5b818801915088601f830112612b0357600080fd5b813581811115612b1557612b156128dd565b612b27601f8201601f1916850161291c565b91508082528984828501011115612b3d57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600060208284031215612b6f57600080fd5b8135612b7a81612a84565b9392505050565b60008060208385031215612b9457600080fd5b823567ffffffffffffffff80821115612bac57600080fd5b818501915085601f830112612bc057600080fd5b813581811115612bcf57600080fd5b8660208260051b8501011115612be457600080fd5b60209290920196919550909350505050565b60008060408385031215612c0957600080fd5b823567ffffffffffffffff80821115612c2157600080fd5b818501915085601f830112612c3557600080fd5b81356020612c456129928361294d565b82815260059290921b84018101918181019089841115612c6457600080fd5b948201945b83861015612c8b578535612c7c81612a11565b82529482019490820190612c69565b96505086013592505080821115612ca157600080fd5b50612cae85828601612971565b9150509250929050565b600081518084526020808501945080840160005b83811015612ce857815187529582019590820190600101612ccc565b509495945050505050565b60208082528251610100838301819052815161012085018190526000939283019184916101408701905b80841015612d465784516001600160a01b03168252938501936001939093019290850190612d1d565b5093870151868503601f1901604088015293612d628186612cb8565b9450506040870151606087015260608701516080870152608087015160a087015260a087015160c087015260c08701519250612da960e08701846001600160a01b03169052565b60e09690960151151595909401949094529392505050565b600060208284031215612dd357600080fd5b8135612b7a81612a11565b60008060408385031215612df157600080fd5b8235612dfc81612a84565b946020939093013593505050565b600082601f830112612e1b57600080fd5b81356020612e2b6129928361294d565b82815260059290921b84018101918181019086841115612e4a57600080fd5b8286015b848110156129d1578035612e6181612a84565b8352918301918301612e4e565b600080600060608486031215612e8357600080fd5b83359250602084013567ffffffffffffffff80821115612ea257600080fd5b612eae87838801612e0a565b93506040860135915080821115612ec457600080fd5b50612ed186828701612971565b9150509250925092565b8015158114611edf57600080fd5b60008060408385031215612efc57600080fd5b823567ffffffffffffffff811115612f1357600080fd5b612f1f85828601612e0a565b9250506020830135612f3081612edb565b809150509250929050565b60008060408385031215612f4e57600080fd5b8235612f5981612a11565b91506020830135612f3081612a11565b634e487b7160e01b600052602160045260246000fd5b8381526060810160038410612fa457634e487b7160e01b600052602160045260246000fd5b602082019390935260400152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612ff357612ff3612fcb565b5060010190565b602081526000612b7a6020830184612cb8565b634e487b7160e01b600052601260045260246000fd5b6000826130325761303261300d565b500490565b808202811582820484141761175257611752612fcb565b6020808252600f908201526e496e76616c6964207461782066656560881b604082015260600190565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b8082018082111561175257611752612fcb565b600081518084526020808501945080840160005b83811015612ce85781516001600160a01b0316875295820195908201906001016130c7565b85815260a06020820152600061310560a0830187612cb8565b828103604084015261311781876130b3565b60608401959095525050608001529392505050565b604080825283519082018190526000906020906060840190828701845b8281101561316857815160ff1684529284019290840190600101613149565b5050508381038285015261317c8186612cb8565b9695505050505050565b60006020828403121561319857600080fd5b8151612b7a81612a84565b8051600b81106115d257600080fd5b8051600881106115d257600080fd5b80516115d281612edb565b600060c082840312156131de57600080fd5b6131e66128f3565b82516131f181612a11565b815260208301516003811061320557600080fd5b602082015260408301516004811061321c57600080fd5b604082015261322d606084016131a3565b606082015261323e608084016131b2565b608082015261324f60a084016131c1565b60a08201529392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b8181038181111561175257611752612fcb565b6040815260006132a560408301856130b3565b905082151560208301529392505050565b600181815b808511156132f15781600019048211156132d7576132d7612fcb565b808516156132e457918102915b93841c93908002906132bb565b509250929050565b60008261330857506001611752565b8161331557506000611752565b816001811461332b576002811461333557613351565b6001915050611752565b60ff84111561334657613346612fcb565b50506001821b611752565b5060208310610133831016604e8410600b8410161715613374575081810a611752565b61337e83836132b6565b806000190482111561339257613392612fcb565b029392505050565b6000612b7a60ff8416836132f9565b6000826133b8576133b861300d565b500690565b60ff818116838216019081111561175257611752612fcb565b6000602082840312156133e857600080fd5b8151612b7a81612edb565b60005b8381101561340e5781810151838201526020016133f6565b50506000910152565b600082516134298184602087016133f3565b9190910192915050565b60208152600082518060208401526134528160408501602087016133f3565b601f01601f1916919091016040019291505056fea264697066735822122096f81d0ce4ee1fd069163a0e5c9eaf0d032e4cab39b4fd79bf38c09b0f17105464736f6c63430008110033",
  "devdoc": {
    "details": "Send your Argonauts and Planets on an expedition to earn rewards in terms of Stardust tokens and gemstones!",
    "kind": "dev",
    "methods": {
      "calculateNFTsStakable(uint8)": {
        "params": {
          "_planetLevel": "Level of the planet"
        }
      },
      "calculateStardustPerExpedition(uint8,uint8)": {
        "params": {
          "_planetLevel": "Level of the planet",
          "_planetOrbit": "Orbit tier of the planet From Spreadsheet: Stardust earned per expedition = (((planet_level -1) ^ 2) * level_parameter + 1) * ((planet_rarity -1) * rarity_parameter + 1) * stardust_base_rate Planet orbit will always start from 1. Hence, planetOrbit which is planet_rarity, will need to + 1 to match the equation."
        }
      },
      "claimRewards(uint256[])": {
        "params": {
          "_expeditionIds": "ExpeditionIds of expeditions to claim rewards for"
        }
      },
      "constructor": {
        "params": {
          "_registry": "Address registry contract",
          "_treasury": "Address of EOA treasury"
        }
      },
      "endExpeditions(uint256[])": {
        "details": "- Must be called by the owner of the expedition      - Must be called after the expedition has ended (block.timestamp > block.timestamp)      - Must be called before the expedition has been claimed (hasEnded == false)",
        "params": {
          "_expeditionIds": "ExpeditionIds of expeditions to stop"
        }
      },
      "gemstoneGenerated(uint8,uint8,uint8)": {
        "params": {
          "_amountArgonauts": "ExpeditionId of the expedition From Spreadsheet: Gemstone generated / expedition = roundup(base_Gemstone_rate * planet_rarity * argonauts_Gemstone_multiplier)",
          "_planetLevel": "ExpeditionId of the expedition",
          "_planetOrbit": "ExpeditionId of the expedition"
        }
      },
      "getExpeditionInfo(uint256)": {
        "params": {
          "_expeditionId": "Expedition Id"
        },
        "returns": {
          "_0": "Expedition of given expeditionId"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAddressRegistry(address)": {
        "params": {
          "_addressRegistry": "The address of the Address Registry"
        }
      },
      "setBaseStardustRate(uint256)": {
        "params": {
          "_baseStardustRate": "The base stardust rewards rate"
        }
      },
      "setExpeditionDuration(uint256)": {
        "params": {
          "_duration": "The duration of an expedition in seconds"
        }
      },
      "setGemstoneRate(uint8[],uint256[])": {
        "params": {
          "_levels": "The level of the gemstone",
          "_rates": "The rate of the gemstone"
        }
      },
      "setLevelParameter(uint256)": {
        "params": {
          "_levelParameter": "The level parameter for rewards"
        }
      },
      "setNftGemstoneMultiplier(uint256[])": {
        "params": {
          "_multipliers": "The multiplier of the rewards"
        }
      },
      "setRarityParameter(uint256)": {
        "params": {
          "_rarityParameter": "The rarity parameter for rewards"
        }
      },
      "setTaxFee(uint256)": {
        "params": {
          "_taxFee": "The amount tax fee"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "Address of treasury"
        }
      },
      "setWhitelistedCollections(address[],bool)": {
        "details": "Only whitelisted collections can be staked",
        "params": {
          "_collectionAddresses": "The address of the collection",
          "_status": "The whitelisted status of the collection"
        }
      },
      "startExpedition(uint256,address[],uint256[])": {
        "details": "NFTs sent on expedition must be whitelisted",
        "params": {
          "_collectionAddresses": "Collection Addresses of nfts to send on expedition",
          "_planetId": "PlanetId of planets to send NFTs on expedition",
          "_tokenIds": "TokenIds of nfts to send on expedition"
        }
      },
      "startMultipleExpeditions(uint256[])": {
        "params": {
          "_planetIds": "PlanetId of planets to send NFTs on expedition"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address,uint256)": {
        "params": {
          "_amount": "Amount to withdraw",
          "_tokenAddress": "The token address to withdraw"
        }
      }
    },
    "title": "Atlantis - Expedition contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ArrayLengthMismatch()": [
        {
          "notice": "The length of tokenIds and collectionAddress must be the same"
        }
      ],
      "ExpeditionAlreadyEnded()": [
        {
          "notice": "Expedition already ended"
        }
      ],
      "ExpeditionInProgress()": [
        {
          "notice": "Expeditton in progress"
        }
      ],
      "InvalidExpeditionInput()": [
        {
          "notice": "Invalid expedition input"
        }
      ],
      "InvalidSetGemstoneRateInput()": [
        {
          "notice": "Invalid gemstone rate input"
        }
      ],
      "InvalidSetNFTGemstoneMultiplierInput()": [
        {
          "notice": "Invalid inputs while setting NFTGemstoneMultiplier"
        }
      ],
      "InvalidSetRarityMultiplierInput()": [
        {
          "notice": "Invalid inputs while setting RarityMultiplier"
        }
      ],
      "NFTCollectionNotWhitelisted()": [
        {
          "notice": "The nft staked must belong to an approved collection"
        }
      ],
      "NotOwnerOfExpedition()": [
        {
          "notice": "Not the owner of the expedition"
        }
      ],
      "TokenIdInputEmpty()": [
        {
          "notice": "The length of tokenIds should not be 0"
        }
      ]
    },
    "events": {
      "AddressRegistryUpdated(address)": {
        "notice": "Event emitted when registry is updated"
      },
      "BaseStardustRateUpdated(uint256)": {
        "notice": "Event emitted when BaseStardustRate is updated"
      },
      "ExpeditionDurationUpdated(uint256)": {
        "notice": "Event emitted when expedition duration is changed"
      },
      "ExpeditionEnded(address,uint256,uint256)": {
        "notice": "Event emitted when expedition is ended"
      },
      "ExpeditionStarted(address,uint256,uint256,uint256[],address[],uint256,uint256)": {
        "notice": "Event emitted when expedition is started"
      },
      "GemstoneRateUpdated(uint8[],uint256[])": {
        "notice": "Event emitted when gemstone rate is updated"
      },
      "LevelParameterUpdated(uint256)": {
        "notice": "Event emitted when level parameter is updated"
      },
      "NFTGemstoneMultiplierUpdated(uint256[])": {
        "notice": "Event emitted when NFTGemstoneMultiplier is updated"
      },
      "RarityMultiplierUpdated(uint256[])": {
        "notice": "Event emitted when RarityMultiplier is updated"
      },
      "RarityParameterUpdated(uint256)": {
        "notice": "Event emitted when rarity parameter is updated"
      },
      "RewardsClaimed(address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when rewards are claimed"
      },
      "TaxFeeUpdated(uint256)": {
        "notice": "Event emitted when tax fee is updated"
      },
      "TreasuryUpdated(address)": {
        "notice": "Event emitted when treasury is updated"
      },
      "WhitelistedCollectionsUpdated(address[],bool)": {
        "notice": "Event emitted when whitelisted collections are updated"
      }
    },
    "kind": "user",
    "methods": {
      "DENOMINATOR()": {
        "notice": "Denominator used for calculation"
      },
      "addressRegistry()": {
        "notice": "Atlantis address registry, which allows contracts to keep track of the latest deployed addresses at all times."
      },
      "baseStardustRate()": {
        "notice": "Base rate of stardust per expedition"
      },
      "calculateNFTsStakable(uint8)": {
        "notice": "Returns number of NFTs that can be staked on the planet"
      },
      "calculateStardustPerExpedition(uint8,uint8)": {
        "notice": "Returns the amount of stardust earned"
      },
      "claimRewards(uint256[])": {
        "notice": "Claims rewards for multiple expeditions"
      },
      "constructor": {
        "notice": "Constructor for Atlantis Expedition"
      },
      "currentExpeditionId()": {
        "notice": "Variable to track current Expedition id"
      },
      "endExpeditions(uint256[])": {
        "notice": "Ends multiple Atlantis Expeditions"
      },
      "expeditionDuration()": {
        "notice": "Variable to track expedition duration"
      },
      "expeditions(uint256)": {
        "notice": "Mapping of user address to array of Expedition struct"
      },
      "gemstoneGenerated(uint8,uint8,uint8)": {
        "notice": "Returns the amount of Gemstones earned"
      },
      "gemstoneRate(uint8)": {
        "notice": "Mapping of level to Gemstone rate"
      },
      "getExpeditionInfo(uint256)": {
        "notice": "Get Expedition Info"
      },
      "levelParameter()": {
        "notice": "Level parameter"
      },
      "nftGemstoneMultiplier(uint256)": {
        "notice": "Mapping of NFTs staked to gemstone multiplier"
      },
      "rarityMultiplier(uint256)": {
        "notice": "Array of orbit to rarity multiplier"
      },
      "rarityParameter()": {
        "notice": "Rarity parameter"
      },
      "setAddressRegistry(address)": {
        "notice": "Set the Address Registry"
      },
      "setBaseStardustRate(uint256)": {
        "notice": "Set the Base Stardust Rate parameter"
      },
      "setExpeditionDuration(uint256)": {
        "notice": "Set the duration of an expedition"
      },
      "setGemstoneRate(uint8[],uint256[])": {
        "notice": "Set the gemstone rate for a level"
      },
      "setLevelParameter(uint256)": {
        "notice": "Set the level parameter"
      },
      "setNftGemstoneMultiplier(uint256[])": {
        "notice": "Set the gemstone multiplier for a NFT"
      },
      "setRarityMultiplier(uint256[])": {
        "notice": "Set the Rarity Multiplier parameter"
      },
      "setRarityParameter(uint256)": {
        "notice": "Set the rarity parameter"
      },
      "setTaxFee(uint256)": {
        "notice": "Set the expedition tax fee"
      },
      "setTreasury(address)": {
        "notice": "Set the treasury address"
      },
      "setWhitelistedCollections(address[],bool)": {
        "notice": "Set the whitelisted status of a collection"
      },
      "startExpedition(uint256,address[],uint256[])": {
        "notice": "Starts an Atlantis Expedition"
      },
      "startMultipleExpeditions(uint256[])": {
        "notice": "Starts multiple expeditions without boosting NFTs"
      },
      "taxFee()": {
        "notice": "Tax fee for going on expeditions"
      },
      "treasury()": {
        "notice": "EOA for treasury"
      },
      "whitelistedCollections(address)": {
        "notice": "Mapping of address to boolean whitelisted status"
      },
      "withdrawERC20(address,uint256)": {
        "notice": "Function to withdraw any ERC20 tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4319,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AtlantisAddressRegistry)6190"
      },
      {
        "astId": 4323,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "baseStardustRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4327,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "levelParameter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4331,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "rarityParameter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4336,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "gemstoneRate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 4341,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "nftGemstoneMultiplier",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 4346,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "rarityMultiplier",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 4351,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "whitelistedCollections",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4357,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "expeditions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Expedition)12047_storage)"
      },
      {
        "astId": 4361,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "currentExpeditionId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4365,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "expeditionDuration",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4373,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "taxFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4376,
        "contract": "contracts/Atlantis.sol:Atlantis",
        "label": "treasury",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AtlantisAddressRegistry)6190": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Expedition)12047_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAtlantis.Expedition)",
        "numberOfBytes": "32",
        "value": "t_struct(Expedition)12047_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Expedition)12047_storage": {
        "encoding": "inplace",
        "label": "struct IAtlantis.Expedition",
        "members": [
          {
            "astId": 12031,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "collectionAddresses",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 12034,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 12036,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12038,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "planetId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12040,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12042,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12044,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "owner",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 12046,
            "contract": "contracts/Atlantis.sol:Atlantis",
            "label": "hasEnded",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}