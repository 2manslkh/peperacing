{
  "address": "0x2AD2d5b0996F0460ca3D4f1cea398bFbB9Db84E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "rewardData",
          "type": "tuple"
        }
      ],
      "name": "AddRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20Amount[]",
              "name": "erc20Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721Amount[]",
              "name": "erc721Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155Amount[][]",
              "name": "erc1155Amount",
              "type": "tuple[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.Amount",
          "name": "amount",
          "type": "tuple"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "indexed": false,
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "rewardData",
          "type": "tuple"
        }
      ],
      "name": "RemoveRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "SetController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SetRoundExpiry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "whitelistSignerAddress",
          "type": "address"
        }
      ],
      "name": "SetWhitelistSignerAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "StartNewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundAmounts",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20Amount[]",
              "name": "erc20Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721Amount[]",
              "name": "erc721Amount",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155Amount[][]",
              "name": "erc1155Amount",
              "type": "tuple[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.Amount",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundRewards",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AtlanteanTrove.Reward",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "removeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setRoundExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        }
      ],
      "name": "setWhitelistSignerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC20[]",
              "name": "erc20Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc20Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC721[]",
              "name": "erc721Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721Amounts",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AtlanteanTrove.RewardERC1155[]",
              "name": "erc1155Rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[][]",
              "name": "erc1155Amounts",
              "type": "uint256[][]"
            }
          ],
          "internalType": "struct AtlanteanTrove.RewardData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "topUpRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistSigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSignerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf280157f2e864fc5e3345f01e3becd0afc1f5ec7539d08e976978dabbaf0b921",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0x2AD2d5b0996F0460ca3D4f1cea398bFbB9Db84E1",
    "transactionIndex": 0,
    "gasUsed": "4112977",
    "logsBloom": "0x
    "blockHash": "0xbf6e769ff211d17e190e413b6ef5968986151e6e98b6855843f287f698b28e9d",
    "transactionHash": "0xf280157f2e864fc5e3345f01e3becd0afc1f5ec7539d08e976978dabbaf0b921",
    "logs": [],
    "blockNumber": 9868168,
    "cumulativeGasUsed": "4112977",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2FB1C26ec1FBC25d65E415b8CD07e07d5d20dcFc",
    "0x6a952f966c5dcc36a094c8ab141f027fb58f864e"
  ],
  "numDeployments": 7,
  "solcInputHash": "69de7f58144cd97bbe67218483f0e85f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"rewardData\",\"type\":\"tuple\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20Amount[]\",\"name\":\"erc20Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721Amount[]\",\"name\":\"erc721Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155Amount[][]\",\"name\":\"erc1155Amount\",\"type\":\"tuple[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.Amount\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"indexed\":false,\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"rewardData\",\"type\":\"tuple\"}],\"name\":\"RemoveRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"SetRoundExpiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelistSignerAddress\",\"type\":\"address\"}],\"name\":\"SetWhitelistSignerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"StartNewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundAmounts\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20Amount[]\",\"name\":\"erc20Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721Amount[]\",\"name\":\"erc721Amount\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155Amount[][]\",\"name\":\"erc1155Amount\",\"type\":\"tuple[][]\"}],\"internalType\":\"struct AtlanteanTrove.Amount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AtlanteanTrove.Reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"removeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setRoundExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"}],\"name\":\"setWhitelistSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC20[]\",\"name\":\"erc20Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc20Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC721[]\",\"name\":\"erc721Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721Amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AtlanteanTrove.RewardERC1155[]\",\"name\":\"erc1155Rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc1155Amounts\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct AtlanteanTrove.RewardData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"topUpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kratos\",\"kind\":\"dev\",\"methods\":{\"claimRewards(uint256,bytes,bytes)\":{\"details\":\"Claims rewards for a round\",\"params\":{\"_round\":\"Round number\",\"nonce\":\"Random bytes32 nonce\",\"signature\":\"Signature generated off-chain\"}},\"getRoundAmounts(uint256)\":{\"params\":{\"_round\":\"Round number\"}},\"getRoundRewards(uint256)\":{\"params\":{\"_round\":\"Round number\"}},\"hasUserClaimed(uint256,address)\":{\"params\":{\"_round\":\"Round number\",\"user\":\"Address of user\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"removeRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))\":{\"details\":\"Remove rewards for a round, only for admin\",\"params\":{\"data\":\"Reward data\"}},\"setAdmin(address)\":{\"details\":\"Set address of admin EOA\",\"params\":{\"_admin\":\"Address of admin EOA\"}},\"setController(address)\":{\"details\":\"Set address of controller EOA\",\"params\":{\"_controller\":\"Address of controller EOA\"}},\"setRoundExpiry(uint256,uint256)\":{\"details\":\"Set round expiry timestamp\",\"params\":{\"_round\":\"Round number\",\"expiryTimestamp\":\"Expiry timestamp for the round\"}},\"setWhitelistSignerAddress(address)\":{\"details\":\"Set new whitelist signer address\",\"params\":{\"_whitelistSignerAddress\":\"Address of new whitelist signer\"}},\"startNewRound(uint256,uint256)\":{\"details\":\"Start a new round for controller only\",\"params\":{\"expiryTimestamp\":\"Expiry timestamp for the round\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"topUpRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))\":{\"details\":\"Top up rewards for a round, only for admin\",\"params\":{\"data\":\"Reward data\"}},\"whitelistSigned(address,uint256,bytes,bytes)\":{\"details\":\"Checks if the the signature is signed by a valid signer for whitelist\",\"params\":{\"_round\":\"Round number\",\"nonce\":\"Random bytes32 nonce\",\"sender\":\"Address of minter\",\"signature\":\"Signature generated off-chain\"}}},\"title\":\"AtlanteanTrove Quest Rewards Claiming Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"The address of the admin\"},\"controller()\":{\"notice\":\"The address of the controller\"},\"currentRound()\":{\"notice\":\"Variable to track current round\"},\"getRoundAmounts(uint256)\":{\"notice\":\"Get round amounts\"},\"getRoundRewards(uint256)\":{\"notice\":\"Get round rewards\"},\"hasUserClaimed(uint256,address)\":{\"notice\":\"Get user claim status for a round\"},\"roundTime(uint256)\":{\"notice\":\"Mapping of round to Round details\"},\"whitelistSignerAddress()\":{\"notice\":\"The address of the whitelist signer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlanteanTrove.sol\":\"AtlanteanTrove\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlanteanTrove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title AtlanteanTrove Quest Rewards Claiming Contract\\r\\n/// @author Kratos\\r\\n/*\\r\\n                                                  #                             \\r\\n                                               .%%%%%%%%                        \\r\\n                                                %%%%%%%%%,                      \\r\\n                                               /%%%%%%%%%                       \\r\\n                                               %%%%%%%%%%                       \\r\\n                                               %%%%%%%%%(                       \\r\\n                                              (%%%%%%%%%                        \\r\\n                                              %%%%%%%%%#                        \\r\\n                                             %%%%%%%%%%                         \\r\\n                                            #%%%%%%%%%%                         \\r\\n                                  *%&/ *   #%%%%%%%%%% #,.#.                    \\r\\n                   .            ,         %%%%%%%%%%% .@@@#                     \\r\\n                   @&@@@#,     @         %%%%%%%%%%%                            \\r\\n                              @         %%%%%%%%%%%%       #,                   \\r\\n                   , .       @            %%%%%%%%%%%#                          \\r\\n                 ,   ,%.    .               %%%%%%%%%%% /@@@@@ *                \\r\\n                   @@@@@@@@@@              * /%%%%%%@@@@( &@@@@                 \\r\\n                  @@@&@        @@@/ .@*     @@%@@@%%%&@@@%  %.    @             \\r\\n            @      @@@@&( @@@   @@@@@@      @@@@@@   @@.(&.       @             \\r\\n           (@  / .(   %@@@@@@%(@@@@@@         @@@.%%%%%%%%%*      @@@           \\r\\n           @@@  #       @//  **@@@   @      @      %&%%%#%%%%,    @@/           \\r\\n           @@@   @      @             @    @        (%%%&%%%%     @@@,          \\r\\n         %@@@@@  @@    @.             .    @          %%%%%/     @@@@@          \\r\\n         @@@.@@@ @@@@   %@        @, (       ( @      .%%%   &@ @@@@@@          \\r\\n         &@@@#@@@@/.@@@          ,               (     /%# ,@/ @@@@@@@          \\r\\n        @&@@#@@*@&@@@ @@@@@&    (#.@          @@@    #  #  @  @@@@@@@@,         \\r\\n        (@@@@@@@@@@@@@@ @@     &@&@@@@%     (@@@@@@@        @@@@@@@(@@@         \\r\\n        @@@,@@@@*@@&@@@@.@@@ @@*@@.@*@@@@@&(@@@@@@@@@@@(   @@@@/@@@ @@          \\r\\n         @@@@@@@&@%@@@@@@@@@ @/.@#@@@@@@(@@ @@@@@@*@*@@@@@@@@@..@@@.@@@(        \\r\\n         @@@@@@,@@@@@%@@@ @ @.&@@@,@ @@.@@@@@/(@@@.@@@@@@@@@(@@@(@@@*@@         \\r\\n         @@@@ @@@@@@#@#@.@@*@((@@&@@,#        #@&@@@@%@@@@@@,@#@@@@@@@ &        \\r\\n         @@@@@@@@(@@@&@@@@@@@@@@@    ,  .,.#//(& @*@@@#@@ @@@,@@@.@@@@#         \\r\\n         @@@(@@@@@@@@@@ @,@@@@@@@,@@@@@@@@@@@@@#@@/@@@@@@@@@@@@&@@@@@@          \\r\\n          ,@ @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@,@@#@@@@@@@@@@,@@@@@@/@@@@           \\r\\n            @#@@@@(@@@ @@, @@@@@@@@*@@@@@.@@(@@@@*@ @@@@@@@@@@@@(@@             \\r\\n              @@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .            \\r\\n               @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@%@@@@/@@@@@@,@@@@&              \\r\\n                @@ @@@%@@&@@.@@@@*@@@#@@@@@@@@.@@@@@@@@#%@@@@@@@@               \\r\\n                  @@@@@@@@@@@@@ @@@@ @@@,(@@@@@@@@@@@@@@@#@@@ #                 \\r\\n                    @@@@@@@@@@,@@@@@&@@@@@@@@@@@@@@@@@.@@@@@                    \\r\\n                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@                      \\r\\n                        @ @@@@@@@,@@@@@@@#@@@@@@@@@ (@@@*                       \\r\\n                         @@@(@@@@@ @@@*@@@@@@@@@@,@@@&&                         \\r\\n                            @@@@@@@@@@ @@@@@@@@@@@@@@                           \\r\\n                               @@(@@@@@@@@@@@(@@@@@@                            \\r\\n                                  @.@@@@*@@&.@@@@@*      \\r\\n*/\\r\\n\\r\\ncontract AtlanteanTrove is IERC1155Receiver, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    /// @notice Mapping of round to user address to their claim status\\r\\n    mapping(uint256 => mapping(address => bool)) private hasClaimed;\\r\\n\\r\\n    /// @notice Mapping of round to Round details\\r\\n    mapping(uint256 => Round) public roundTime;\\r\\n\\r\\n    /// @notice Mapping to track each round rewards\\r\\n    mapping(uint256 => Reward) internal roundRewards;\\r\\n\\r\\n    /// @notice Mapping to track each round amounts\\r\\n    mapping(uint256 => Amount) internal roundAmounts;\\r\\n\\r\\n    /// @notice Variable to track current round\\r\\n    uint256 public currentRound = 0;\\r\\n\\r\\n    /// @notice The address of the admin\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice The address of the controller\\r\\n    address public controller;\\r\\n\\r\\n    /// @notice The address of the whitelist signer\\r\\n    address public whitelistSignerAddress;\\r\\n\\r\\n    /// Reward structs\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-20 reward is worth\\r\\n    struct RewardERC20 {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-721 reward is worth\\r\\n    struct RewardERC721 {\\r\\n        address tokenAddress;\\r\\n        uint256[] tokenIds;\\r\\n        uint256 index;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of claimable ERC-1155 reward is worth\\r\\n    struct RewardERC1155 {\\r\\n        address tokenAddress;\\r\\n        uint256[] tokenIds;\\r\\n        uint256[] amounts;\\r\\n    }\\r\\n\\r\\n    /// @notice Defines how much a single instance of total rewards claimable is worth\\r\\n    struct Reward {\\r\\n        RewardERC20[] erc20Rewards;\\r\\n        RewardERC721[] erc721Rewards;\\r\\n        RewardERC1155[] erc1155Rewards;\\r\\n    }\\r\\n\\r\\n    /// Accounting structs\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-20 in the contract in a specific round\\r\\n    struct RewardERC20Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-721 in the contract in a specific round\\r\\n    struct RewardERC721Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of ERC-1155 in the contract in a specific round\\r\\n    struct RewardERC1155Amount {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used to track amount of rewards in the contract in a specific round\\r\\n    struct Amount {\\r\\n        RewardERC20Amount[] erc20Amount;\\r\\n        RewardERC721Amount[] erc721Amount;\\r\\n        RewardERC1155Amount[][] erc1155Amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used for managing rewards by admin\\r\\n    struct RewardData {\\r\\n        uint256 round;\\r\\n        RewardERC20[] erc20Rewards;\\r\\n        uint256[] erc20Amounts;\\r\\n        RewardERC721[] erc721Rewards;\\r\\n        uint256[] erc721Amounts;\\r\\n        RewardERC1155[] erc1155Rewards;\\r\\n        uint256[][] erc1155Amounts;\\r\\n    }\\r\\n\\r\\n    /// @notice Struct used for managing rounds\\r\\n    struct Round {\\r\\n        uint256 startTime;\\r\\n        uint256 expiryTimestamp;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event SetRoundExpiry(uint256 round, uint256 expiryTimestamp);\\r\\n    event SetController(address controller);\\r\\n    event SetAdmin(address admin);\\r\\n    event SetWhitelistSignerAddress(address whitelistSignerAddress);\\r\\n    event StartNewRound(uint256 round, uint256 startTime, uint256 expiryTimestamp);\\r\\n    event ClaimRewards(uint256 round, address indexed user, Amount amount);\\r\\n    event AddRewards(uint256 round, RewardData rewardData);\\r\\n    event RemoveRewards(uint256 round, RewardData rewardData);\\r\\n\\r\\n    constructor(address _controller, address _whitelistSignerAddress) {\\r\\n        admin = msg.sender;\\r\\n        controller = _controller;\\r\\n        whitelistSignerAddress = _whitelistSignerAddress;\\r\\n    }\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Only admin can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(msg.sender == controller, \\\"Only controller can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Admin functions\\r\\n\\r\\n    /**\\r\\n     * @dev Set round expiry timestamp\\r\\n     * @param _round Round number\\r\\n     * @param expiryTimestamp Expiry timestamp for the round\\r\\n     */\\r\\n    function setRoundExpiry(uint256 _round, uint256 expiryTimestamp) external onlyAdmin {\\r\\n        // Round expiry can only be set in the future\\r\\n        require(expiryTimestamp > block.timestamp, \\\"Expiry timestamp must be in future.\\\");\\r\\n        // Set round expiry timestamp\\r\\n        roundTime[_round].expiryTimestamp = expiryTimestamp;\\r\\n        // Emit event\\r\\n        emit SetRoundExpiry(_round, expiryTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of controller EOA\\r\\n     * @param _controller Address of controller EOA\\r\\n     */\\r\\n    function setController(address _controller) external onlyAdmin {\\r\\n        // Set controller address\\r\\n        controller = _controller;\\r\\n        // Emit event\\r\\n        emit SetController(_controller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set address of admin EOA\\r\\n     * @param _admin Address of admin EOA\\r\\n     */\\r\\n    function setAdmin(address _admin) external onlyAdmin {\\r\\n        // Set admin address\\r\\n        admin = _admin;\\r\\n        // Emit event\\r\\n        emit SetAdmin(_admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set new whitelist signer address\\r\\n     * @param _whitelistSignerAddress Address of new whitelist signer\\r\\n     */\\r\\n    function setWhitelistSignerAddress(address _whitelistSignerAddress) external onlyAdmin {\\r\\n        // Set whitelist signer address\\r\\n        whitelistSignerAddress = _whitelistSignerAddress;\\r\\n        // Emit event\\r\\n        emit SetWhitelistSignerAddress(_whitelistSignerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Top up rewards for a round, only for admin\\r\\n     * @param data Reward data\\r\\n     */\\r\\n    function topUpRewards(RewardData calldata data) external onlyAdmin {\\r\\n        // Handle ERC20 rewards\\r\\n        if (data.erc20Rewards.length > 0) {\\r\\n            _handleERC20Rewards(data);\\r\\n        }\\r\\n        // Handle ERC721 rewards\\r\\n        if (data.erc721Rewards.length > 0) {\\r\\n            _handleERC721Rewards(data);\\r\\n        }\\r\\n        // Handle ERC1155 rewards\\r\\n        if (data.erc1155Rewards.length > 0) {\\r\\n            _handleERC1155Rewards(data);\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit AddRewards(data.round, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove rewards for a round, only for admin\\r\\n     * @param data Reward data\\r\\n     */\\r\\n    function removeRewards(RewardData calldata data) external onlyAdmin {\\r\\n        // Cannot remove rewards if round is already started\\r\\n        require(data.round != currentRound, \\\"Cannot modify rewards for ongoing round.\\\");\\r\\n        // Remove ERC20 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc20Rewards.length > 0) {\\r\\n            // Transfer rewards to admin\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc20Rewards.length; ) {\\r\\n                require(\\r\\n                    IERC20(roundRewards[data.round].erc20Rewards[i].tokenAddress).transfer(\\r\\n                        admin,\\r\\n                        data.erc20Amounts[i]\\r\\n                    ),\\r\\n                    \\\"Transfer failed.\\\"\\r\\n                );\\r\\n                roundAmounts[data.round].erc20Amount[i].amount-=data.erc20Amounts[i];\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If round is not in the past, delete rewards\\r\\n            if (data.round > currentRound) {\\r\\n                delete roundRewards[data.round].erc20Rewards;\\r\\n                delete roundAmounts[data.round].erc20Amount;\\r\\n            }\\r\\n        }\\r\\n        // Remove ERC721 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc721Rewards.length > 0) {\\r\\n            // Transfer rewards to admin\\r\\n\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc721Rewards.length; ) {\\r\\n                uint256 _index = roundRewards[data.round].erc721Rewards[i].index;\\r\\n                for (\\r\\n                    uint256 j = 0;\\r\\n                    j <\\r\\n                    roundRewards[data.round].erc721Rewards[i].tokenIds.length -\\r\\n                        roundRewards[data.round].erc721Rewards[i].index;\\r\\n\\r\\n                ) {\\r\\n                    IERC721(roundRewards[data.round].erc721Rewards[i].tokenAddress).transferFrom(\\r\\n                        address(this),\\r\\n                        admin,\\r\\n                        roundRewards[data.round].erc721Rewards[i].tokenIds[_index]\\r\\n                    );\\r\\n\\r\\n                    roundAmounts[data.round].erc721Amount[i].amount-=1;\\r\\n                    unchecked {\\r\\n                        _index++;\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If round is not in the past, delete rewards\\r\\n            if (data.round > currentRound) {\\r\\n                delete roundRewards[data.round].erc721Rewards;\\r\\n                delete roundAmounts[data.round].erc721Amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove ERC1155 rewards and transfer back to admin\\r\\n        if (roundRewards[data.round].erc1155Rewards.length > 0)\\r\\n            // Transfer rewards to admin\\r\\n            for (uint256 i = 0; i < roundRewards[data.round].erc1155Rewards.length; ) {\\r\\n                for (uint256 j = 0; j < roundRewards[data.round].erc1155Rewards[i].tokenIds.length; ) {\\r\\n                    IERC1155(roundRewards[data.round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        admin,\\r\\n                        roundRewards[data.round].erc1155Rewards[i].tokenIds[j],\\r\\n                        data.erc1155Amounts[i][j],\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n                    roundAmounts[data.round].erc1155Amount[i][j].amount-=data.erc1155Amounts[i][j];\\r\\n                    unchecked {\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n\\r\\n                if (data.round > currentRound) // If round is not in the past, delete rewards\\r\\n                {\\r\\n                    delete roundRewards[data.round].erc1155Rewards;\\r\\n                    delete roundAmounts[data.round].erc1155Amount;\\r\\n                }\\r\\n            }\\r\\n        emit RemoveRewards(data.round, data);\\r\\n    }\\r\\n\\r\\n    // Controller functions\\r\\n\\r\\n    /**\\r\\n     * @dev Start a new round for controller only\\r\\n     * @param expiryTimestamp Expiry timestamp for the round\\r\\n     */\\r\\n    function startNewRound(uint256 startTime, uint256 expiryTimestamp) external onlyController {\\r\\n        // Timestamp must be in future\\r\\n        require(expiryTimestamp > block.timestamp, \\\"Expiry timestamp must be in future.\\\");\\r\\n        // Increment currentRound\\r\\n        currentRound++;\\r\\n        // Save round details\\r\\n        roundTime[currentRound] = Round(startTime, expiryTimestamp);\\r\\n        // Emit event\\r\\n        emit StartNewRound(currentRound, startTime, expiryTimestamp);\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n\\r\\n    /**\\r\\n     * @notice Get user claim status for a round\\r\\n     * @param _round Round number\\r\\n     * @param user Address of user\\r\\n     */\\r\\n    function hasUserClaimed(uint256 _round, address user) public view returns (bool) {\\r\\n        return hasClaimed[_round][user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get round rewards\\r\\n     * @param _round Round number\\r\\n     */\\r\\n    function getRoundRewards(uint256 _round) external view returns (Reward memory) {\\r\\n        return roundRewards[_round];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get round amounts\\r\\n     * @param _round Round number\\r\\n     */\\r\\n    function getRoundAmounts(uint256 _round) external view returns (Amount memory) {\\r\\n        return roundAmounts[_round];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the the signature is signed by a valid signer for whitelist\\r\\n     * @param sender Address of minter\\r\\n     * @param _round Round number\\r\\n     * @param nonce Random bytes32 nonce\\r\\n     * @param signature Signature generated off-chain\\r\\n     */\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        uint256 _round,\\r\\n        bytes memory nonce,\\r\\n        bytes memory signature\\r\\n    ) public view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(sender, nonce, _round));\\r\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\r\\n        hash = keccak256(abi.encodePacked(prefix, hash));\\r\\n        return whitelistSignerAddress == hash.recover(signature);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claims rewards for a round\\r\\n     * @param _round Round number\\r\\n     * @param nonce Random bytes32 nonce\\r\\n     * @param signature Signature generated off-chain\\r\\n     */\\r\\n    function claimRewards(uint256 _round, bytes memory nonce, bytes memory signature) external nonReentrant {\\r\\n        // Check if user is whitelisted\\r\\n        require(whitelistSigned(msg.sender, _round, nonce, signature), \\\"Invalid Signature!\\\");\\r\\n        // Check if user has already claimed\\r\\n        require(!hasUserClaimed(_round, msg.sender), \\\"User has already claimed rewards.\\\");\\r\\n        // Check if round has expired\\r\\n        require(block.timestamp <= roundTime[_round].expiryTimestamp, \\\"Round has expired.\\\");\\r\\n        // Check if round has started\\r\\n        require(block.timestamp >= roundTime[_round].startTime, \\\"Round has not started.\\\");\\r\\n        // Mark user as claimed\\r\\n        hasClaimed[_round][msg.sender] = true;\\r\\n        // Initialise variables for events logging\\r\\n        Amount memory claimedAmounts;\\r\\n        claimedAmounts.erc20Amount = new RewardERC20Amount[](roundRewards[_round].erc20Rewards.length);\\r\\n        claimedAmounts.erc721Amount = new RewardERC721Amount[](roundRewards[_round].erc721Rewards.length);\\r\\n        claimedAmounts.erc1155Amount = new RewardERC1155Amount[][](roundRewards[_round].erc1155Rewards.length);\\r\\n\\r\\n        // If there are ERC20 token rewards, transfer\\r\\n        if (roundRewards[_round].erc20Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc20Rewards.length; ) {\\r\\n                // Reduce amount of reward amount after transfer\\r\\n                roundAmounts[_round].erc20Amount[i].amount -= roundRewards[_round].erc20Rewards[i].amount;\\r\\n                // Record amount for event logging\\r\\n                claimedAmounts.erc20Amount[i].tokenAddress = roundRewards[_round].erc20Rewards[i].tokenAddress;\\r\\n                claimedAmounts.erc20Amount[i].amount = roundRewards[_round].erc20Rewards[i].amount;\\r\\n                require(\\r\\n                    IERC20(roundRewards[_round].erc20Rewards[i].tokenAddress).transfer(\\r\\n                        msg.sender,\\r\\n                        roundRewards[_round].erc20Rewards[i].amount\\r\\n                    ),\\r\\n                    \\\"Transfer failed\\\"\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If there are ERC721 token rewards, transfer\\r\\n        if (roundRewards[_round].erc721Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc721Rewards.length; ) {\\r\\n                // Reduce amount of reward amount after transfer\\r\\n                roundAmounts[_round].erc721Amount[i].amount -= 1;\\r\\n                // Record amount for event logging\\r\\n                claimedAmounts.erc721Amount[i].tokenAddress = roundRewards[_round].erc721Rewards[i].tokenAddress;\\r\\n                claimedAmounts.erc721Amount[i].amount = 1;\\r\\n                IERC721(roundRewards[_round].erc721Rewards[i].tokenAddress).transferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    roundRewards[_round].erc721Rewards[i].tokenIds[roundRewards[_round].erc721Rewards[i].index]\\r\\n                );\\r\\n                // Increment index\\r\\n                unchecked {\\r\\n                    roundRewards[_round].erc721Rewards[i].index++;\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If there are ERC1155 token rewards, transfer\\r\\n        if (roundRewards[_round].erc1155Rewards.length > 0) {\\r\\n            for (uint256 i = 0; i < roundRewards[_round].erc1155Rewards.length; ) {\\r\\n                claimedAmounts.erc1155Amount[i] = new RewardERC1155Amount[](\\r\\n                    roundRewards[_round].erc1155Rewards[i].tokenIds.length\\r\\n                );\\r\\n                for (uint256 j = 0; j < roundRewards[_round].erc1155Rewards[i].tokenIds.length; ) {\\r\\n                    // Reduce amount of reward amount after transfer\\r\\n                    roundAmounts[_round].erc1155Amount[i][j].amount -= roundRewards[_round].erc1155Rewards[i].amounts[\\r\\n                        j\\r\\n                    ];\\r\\n                    // Record amount for event logging\\r\\n                    claimedAmounts.erc1155Amount[i][j].tokenAddress = roundRewards[_round]\\r\\n                        .erc1155Rewards[i]\\r\\n                        .tokenAddress;\\r\\n                    claimedAmounts.erc1155Amount[i][j].tokenId = roundRewards[_round].erc1155Rewards[i].tokenIds[j];\\r\\n                    claimedAmounts.erc1155Amount[i][j].amount = roundRewards[_round].erc1155Rewards[i].amounts[j];\\r\\n                    IERC1155(roundRewards[_round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        msg.sender,\\r\\n                        roundRewards[_round].erc1155Rewards[i].tokenIds[j],\\r\\n                        roundRewards[_round].erc1155Rewards[i].amounts[j],\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n                    unchecked {\\r\\n                        j++;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Emit event\\r\\n        emit ClaimRewards(_round, msg.sender, claimedAmounts);\\r\\n    }\\r\\n\\r\\n    // Internal helper functions\\r\\n\\r\\n    function _handleERC20Rewards(RewardData calldata data) internal {\\r\\n        if (roundRewards[data.round].erc20Rewards.length == 0) {\\r\\n            // Add rewards to round\\r\\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n                roundRewards[data.round].erc20Rewards.push(data.erc20Rewards[i]);\\r\\n                roundAmounts[data.round].erc20Amount.push(\\r\\n                    RewardERC20Amount(data.erc20Rewards[i].tokenAddress, data.erc20Amounts[i])\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Already existing rewards cannot change reward amount, can only top up reward\\r\\n            // Ensure that the token address is the same\\r\\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n                require(\\r\\n                    roundRewards[data.round].erc20Rewards[i].tokenAddress == data.erc20Rewards[i].tokenAddress,\\r\\n                    \\\"Token address cannot be changed.\\\"\\r\\n                );\\r\\n                roundAmounts[data.round].erc20Amount[i].amount += data.erc20Amounts[i];\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Transfer ERC20 tokens to contract\\r\\n        for (uint256 i = 0; i < data.erc20Rewards.length; ) {\\r\\n            require(\\r\\n                IERC20(data.erc20Rewards[i].tokenAddress).transferFrom(msg.sender, address(this), data.erc20Amounts[i]),\\r\\n                \\\"Transfer failed\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _handleERC721Rewards(RewardData calldata data) internal {\\r\\n        // No existing rewards\\r\\n        if (roundRewards[data.round].erc721Rewards.length == 0) {\\r\\n            // Add rewards to round\\r\\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n                roundRewards[data.round].erc721Rewards.push(data.erc721Rewards[i]);\\r\\n                roundAmounts[data.round].erc721Amount.push(\\r\\n                    RewardERC721Amount(data.erc721Rewards[i].tokenAddress, data.erc721Amounts[i])\\r\\n                );\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // Already existing rewards cannot change reward amount, can only top up reward\\r\\n            // Ensure that the token address is the same\\r\\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n                require(\\r\\n                    roundRewards[data.round].erc721Rewards[i].tokenAddress == data.erc721Rewards[i].tokenAddress,\\r\\n                    \\\"Token address cannot be changed.\\\"\\r\\n                );\\r\\n                if (roundRewards[data.round].erc721Rewards[i].tokenAddress == data.erc721Rewards[i].tokenAddress){\\r\\n                    for (uint256 j; j< data.erc721Rewards[i].tokenIds.length; j++){\\r\\n                        roundRewards[data.round].erc721Rewards[i].tokenIds.push(data.erc721Rewards[i].tokenIds[j]);\\r\\n                    }\\r\\n                    roundAmounts[data.round].erc721Amount[i].amount += data.erc721Amounts[i];\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // Transfer ERC721 tokens to contract\\r\\n        for (uint256 i = 0; i < data.erc721Rewards.length; ) {\\r\\n            for (uint256 j = 0; j < data.erc721Rewards[i].tokenIds.length; ) {\\r\\n                IERC721(data.erc721Rewards[i].tokenAddress).transferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    data.erc721Rewards[i].tokenIds[j]\\r\\n                );\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n   function _handleERC1155Rewards(RewardData calldata data) internal {\\r\\n    if (roundRewards[data.round].erc1155Rewards.length == 0) {\\r\\n        // Add rewards to round\\r\\n        for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n            roundRewards[data.round].erc1155Rewards.push(data.erc1155Rewards[i]);\\r\\n                roundAmounts[data.round].erc1155Amount.push();\\r\\n            for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n                roundAmounts[data.round].erc1155Amount[i].push(\\r\\n                    RewardERC1155Amount(\\r\\n                        data.erc1155Rewards[i].tokenAddress,\\r\\n                        data.erc1155Rewards[i].tokenIds[j],\\r\\n                        data.erc1155Amounts[i][j]\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        // Already existing rewards cannot change reward amount, can only top up reward\\r\\n        // Ensure that the token address is the same\\r\\n        for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n            for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n                require(\\r\\n                    roundRewards[data.round].erc1155Rewards[i].tokenAddress == data.erc1155Rewards[i].tokenAddress,\\r\\n                    \\\"Token address cannot be changed.\\\"\\r\\n                );\\r\\n                roundAmounts[data.round].erc1155Amount[i][j].amount += data.erc1155Amounts[i][j];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Transfer ERC1155 tokens to contract\\r\\n    for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\\r\\n        for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\\r\\n            IERC1155(data.erc1155Rewards[i].tokenAddress).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                data.erc1155Rewards[i].tokenIds[j],\\r\\n                data.erc1155Amounts[i][j],\\r\\n                \\\"\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        // Add your custom logic for handling ERC1155 token transfers\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        // Add your custom logic for handling ERC1155 token transfers\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x86e95cc88e358cf229688c62df2be1d040f261ec6d710129c833459addf1679e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806392eefe9b116100ad578063f23a6e6111610071578063f23a6e61146102e9578063f504764d14610309578063f77c47911461031c578063f851a4401461032f578063fd56981a1461034257600080fd5b806392eefe9b14610262578063bc197c8114610275578063bd9c62b8146102b0578063d7f8d847146102c3578063db51fae3146102d657600080fd5b8063501c6e4f116100f4578063501c6e4f146101e557806353a4554614610205578063704b6c02146102185780638a19c8bc1461022b57806391e2057e1461024257600080fd5b806301ffc9a714610131578063040ae2591461015957806307c7a72d1461016e57806324fccf25146101a757806336116989146101d2575b600080fd5b61014461013f3660046136b1565b61037e565b60405190151581526020015b60405180910390f35b61016c6101673660046136e2565b6103b5565b005b61014461017c366004613719565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6008546101ba906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b61016c6101e0366004613749565b6104d0565b6101f86101f3366004613783565b610d02565b604051610150919061390c565b6101446102133660046139c1565b610ef0565b61016c610226366004613a40565b610fa1565b61023460055481565b604051908152602001610150565b610255610250366004613783565b611019565b6040516101509190613b2c565b61016c610270366004613a40565b6112a3565b610297610283366004613cc1565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b03199091168152602001610150565b61016c6102be3660046136e2565b61131b565b61016c6102d1366004613d7f565b6113af565b61016c6102e4366004613749565b61212b565b6102976102f7366004613deb565b63f23a6e6160e01b9695505050505050565b61016c610317366004613a40565b6121e8565b6007546101ba906001600160a01b031681565b6006546101ba906001600160a01b031681565b610369610350366004613783565b6002602052600090815260409020805460019091015482565b60408051928352602083019190915201610150565b60006001600160e01b03198216630271189760e51b14806103af57506001600160e01b031982166301ffc9a760e01b145b92915050565b6007546001600160a01b031633146104245760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920636f6e74726f6c6c65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084015b60405180910390fd5b4281116104435760405162461bcd60e51b815260040161041b90613e66565b6005805490600061045383613ebf565b9091555050604080518082018252838152602080820184815260058054600090815260028452859020935184559051600190930192909255905482519081529081018490529081018290527f6335d9a954a31d127d43737ee99cf9c5b5f5b0c4c813c136886bef6217092e51906060015b60405180910390a15050565b6006546001600160a01b031633146104fa5760405162461bcd60e51b815260040161041b90613ed8565b60055481350361055d5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f74206d6f64696679207265776172647320666f72206f6e676f696e60448201526733903937bab7321760c11b606482015260840161041b565b8035600090815260036020526040902054156107655760005b813560009081526003602052604090205481101561072757813560009081526003602052604090208054829081106105b0576105b0613f1a565b60009182526020909120600290910201546006546001600160a01b039182169163a9059cbb91166105e46040860186613f30565b858181106105f4576105f4613f1a565b6040516001600160e01b031960e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af1158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190613f79565b6106ab5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161041b565b6106b86040830183613f30565b828181106106c8576106c8613f1a565b90506020020135600460008460000135815260200190815260200160002060000182815481106106fa576106fa613f1a565b9060005260206000209060020201600101600082825461071a9190613f9b565b9091555050600101610576565b5060055481351115610765578035600090815260036020526040812061074c916134f7565b80356000908152600460205260408120610765916134f7565b803560009081526003602052604090206001015415610a015760005b81356000908152600360205260409020600101548110156109b757813560009081526003602052604081206001018054839081106107c1576107c1613f1a565b906000526020600020906003020160020154905060005b833560009081526003602052604090206001018054849081106107fd576107fd613f1a565b9060005260206000209060030201600201546003600086600001358152602001908152602001600020600101848154811061083a5761083a613f1a565b9060005260206000209060030201600101805490506108599190613f9b565b8110156109ad578335600090815260036020526040902060010180548490811061088557610885613f1a565b60009182526020808320600392830201546006548835855292909152604090922060010180546001600160a01b03938416936323b872dd933093911691889081106108d2576108d2613f1a565b906000526020600020906003020160010186815481106108f4576108f4613f1a565b90600052602060002001546040518463ffffffff1660e01b815260040161091d93929190613fae565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b5050505060016004600086600001358152602001908152602001600020600101848154811061097c5761097c613f1a565b9060005260206000209060020201600101600082825461099c9190613f9b565b9091555050600191820191016107d8565b5050600101610781565b5060055481351115610a0157803560009081526003602052604081206109e291600190910190613518565b80356000908152600460205260408120610a01916001909101906134f7565b803560009081526003602052604090206002015415610cc45760005b8135600090815260036020526040902060020154811015610cc25760005b82356000908152600360205260409020600201805483908110610a6057610a60613f1a565b906000526020600020906003020160010180549050811015610c6d5782356000908152600360205260409020600201805483908110610aa157610aa1613f1a565b60009182526020808320600392830201546006548735855292909152604090922060020180546001600160a01b039384169363f242432a93309391169187908110610aee57610aee613f1a565b90600052602060002090600302016001018581548110610b1057610b10613f1a565b600091825260209091200154610b2960c0890189613f30565b88818110610b3957610b39613f1a565b9050602002810190610b4b9190613f30565b87818110610b5b57610b5b613f1a565b905060200201356040518563ffffffff1660e01b8152600401610b819493929190613fd2565b600060405180830381600087803b158015610b9b57600080fd5b505af1158015610baf573d6000803e3d6000fd5b50610bc19250505060c0840184613f30565b83818110610bd157610bd1613f1a565b9050602002810190610be39190613f30565b82818110610bf357610bf3613f1a565b9050602002013560046000856000013581526020019081526020016000206002018381548110610c2557610c25613f1a565b906000526020600020018281548110610c4057610c40613f1a565b90600052602060002090600302016002016000828254610c609190613f9b565b9091555050600101610a3b565b5060055460019091019082351115610cbd5781356000908152600360205260408120610c9e91600290910190613539565b81356000908152600460205260408120610cbd9160029091019061355a565b610a1d565b505b6040517ff665bccf3fa0d23a55c77a157157f756295e189977065e4ef7f57c72d77208d790610cf79083359084906142b8565b60405180910390a150565b610d2660405180606001604052806060815260200160608152602001606081525090565b60008281526004602090815260408083208151815460809481028201850190935260608101838152909491938593919285929185015b82821015610da4576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610d5c565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610e19576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610dd1565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ee257838290600052602060002001805480602002602001604051908101604052809291908181526020016000905b82821015610ecf576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610e7a565b5050505081526020019060010190610e46565b505050915250909392505050565b600080858486604051602001610f08939291906143e8565b60408051601f1981840301815282825280516020918201208383018352601c84527f19457468657265756d205369676e6564204d6573736167653a0a333200000000848301529151919350610f6191839185910161441a565b60408051601f1981840301815291905280516020909101209150610f858285612260565b6008546001600160a01b03918216911614979650505050505050565b6006546001600160a01b03163314610fcb5760405162461bcd60e51b815260040161041b90613ed8565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190602001610cf7565b61103d60405180606001604052806060815260200160608152602001606081525090565b60008281526003602090815260408083208151815460809481028201850190935260608101838152909491938593919285929185015b828210156110bb576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611073565b50505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015611188576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561116657602002820191906000526020600020905b815481526020019060010190808311611152575b50505050508152602001600282015481525050815260200190600101906110e8565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ee2576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561123357602002820191906000526020600020905b81548152602001906001019080831161121f575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561128b57602002820191906000526020600020905b815481526020019060010190808311611277575b505050505081525050815260200190600101906111b5565b6006546001600160a01b031633146112cd5760405162461bcd60e51b815260040161041b90613ed8565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f7090602001610cf7565b6006546001600160a01b031633146113455760405162461bcd60e51b815260040161041b90613ed8565b4281116113645760405162461bcd60e51b815260040161041b90613e66565b60008281526002602090815260409182902060010183905581518481529081018390527fc9123c2e200f7f5152a8adda78477d9cd7a4602d8fcad7787bc36e6b8669b64791016104c4565b6113b7612284565b6113c333848484610ef0565b6114045760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964205369676e61747572652160701b604482015260640161041b565b600083815260016020908152604080832033845290915290205460ff16156114785760405162461bcd60e51b815260206004820152602160248201527f557365722068617320616c726561647920636c61696d656420726577617264736044820152601760f91b606482015260840161041b565b6000838152600260205260409020600101544211156114ce5760405162461bcd60e51b81526020600482015260126024820152712937bab732103430b99032bc3834b932b21760711b604482015260640161041b565b6000838152600260205260409020544210156115255760405162461bcd60e51b81526020600482015260166024820152752937bab732103430b9903737ba1039ba30b93a32b21760511b604482015260640161041b565b60008381526001602081815260408084203385528252808420805460ff19169093179092558151606080820184528082528183018190528184015286845260039091529120546001600160401b038111156115825761158261391f565b6040519080825280602002602001820160405280156115c757816020015b60408051808201909152600080825260208201528152602001906001900390816115a05790505b5081526000848152600360205260409020600101546001600160401b038111156115f3576115f361391f565b60405190808252806020026020018201604052801561163857816020015b60408051808201909152600080825260208201528152602001906001900390816116115790505b506020808301919091526000858152600390915260409020600201546001600160401b0381111561166b5761166b61391f565b60405190808252806020026020018201604052801561169e57816020015b60608152602001906001900390816116895790505b506040808301919091526000858152600360205220541561194b5760005b6000858152600360205260409020548110156119495760008581526003602052604090208054829081106116f2576116f2613f1a565b90600052602060002090600202016001015460046000878152602001908152602001600020600001828154811061172b5761172b613f1a565b9060005260206000209060020201600101600082825461174b9190613f9b565b9091555050600085815260036020526040902080548290811061177057611770613f1a565b6000918252602090912060029091020154825180516001600160a01b0390921691839081106117a1576117a1613f1a565b6020908102919091018101516001600160a01b0390921690915260008681526003909152604090208054829081106117db576117db613f1a565b9060005260206000209060020201600101548260000151828151811061180357611803613f1a565b6020026020010151602001818152505060036000868152602001908152602001600020600001818154811061183a5761183a613f1a565b600091825260208083206002909202909101548783526003909152604090912080546001600160a01b039092169163a9059cbb9133918590811061188057611880613f1a565b60009182526020909120600160029092020101546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156118df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119039190613f79565b6119415760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161041b565b6001016116bc565b505b60008481526003602052604090206001015415611bd95760005b600085815260036020526040902060010154811015611bd757600085815260046020526040902060019081018054839081106119a3576119a3613f1a565b906000526020600020906002020160010160008282546119c39190613f9b565b909155505060008581526003602052604090206001018054829081106119eb576119eb613f1a565b6000918252602091829020600390910201549083015180516001600160a01b039092169183908110611a1f57611a1f613f1a565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050600182602001518281518110611a5b57611a5b613f1a565b60200260200101516020018181525050600360008681526020019081526020016000206001018181548110611a9257611a92613f1a565b6000918252602080832060039283020154888452919052604090912060010180546001600160a01b03909216916323b872dd91309133919086908110611ada57611ada613f1a565b9060005260206000209060030201600101600360008b81526020019081526020016000206001018681548110611b1257611b12613f1a565b90600052602060002090600302016002015481548110611b3457611b34613f1a565b90600052602060002001546040518463ffffffff1660e01b8152600401611b5d93929190613fae565b600060405180830381600087803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b5050506000868152600360205260409020600101805490915082908110611bb457611bb4613f1a565b600091825260209091206002600390920201018054600190810190915501611965565b505b600084815260036020526040902060020154156120d85760005b6000858152600360205260409020600201548110156120d6576000858152600360205260409020600201805482908110611c2f57611c2f613f1a565b9060005260206000209060030201600101805490506001600160401b03811115611c5b57611c5b61391f565b604051908082528060200260200182016040528015611cb957816020015b611ca6604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081611c795790505b5082604001518281518110611cd057611cd0613f1a565b602002602001018190525060005b6000868152600360205260409020600201805483908110611d0157611d01613f1a565b9060005260206000209060030201600101805490508110156120cd576000868152600360205260409020600201805483908110611d4057611d40613f1a565b90600052602060002090600302016002018181548110611d6257611d62613f1a565b9060005260206000200154600460008881526020019081526020016000206002018381548110611d9457611d94613f1a565b906000526020600020018281548110611daf57611daf613f1a565b90600052602060002090600302016002016000828254611dcf9190613f9b565b90915550506000868152600360205260409020600201805483908110611df757611df7613f1a565b6000918252602090912060039091020154604084015180516001600160a01b039092169184908110611e2b57611e2b613f1a565b60200260200101518281518110611e4457611e44613f1a565b6020908102919091018101516001600160a01b039092169091526000878152600390915260409020600201805483908110611e8157611e81613f1a565b90600052602060002090600302016001018181548110611ea357611ea3613f1a565b906000526020600020015483604001518381518110611ec457611ec4613f1a565b60200260200101518281518110611edd57611edd613f1a565b60200260200101516020018181525050600360008781526020019081526020016000206002018281548110611f1457611f14613f1a565b90600052602060002090600302016002018181548110611f3657611f36613f1a565b906000526020600020015483604001518381518110611f5757611f57613f1a565b60200260200101518281518110611f7057611f70613f1a565b60200260200101516040018181525050600360008781526020019081526020016000206002018281548110611fa757611fa7613f1a565b6000918252602080832060039283020154898452919052604090912060020180546001600160a01b039092169163f242432a91309133919087908110611fef57611fef613f1a565b9060005260206000209060030201600101858154811061201157612011613f1a565b9060005260206000200154600360008c8152602001908152602001600020600201878154811061204357612043613f1a565b9060005260206000209060030201600201868154811061206557612065613f1a565b90600052602060002001546040518563ffffffff1660e01b815260040161208f9493929190613fd2565b600060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505060019092019150611cde9050565b50600101611bf3565b505b336001600160a01b03167f50d77aff18471f02a90108d0890292b485cc931a52bac94c1e33b7eb525e25168583604051612113929190614433565b60405180910390a2506121266001600055565b505050565b6006546001600160a01b031633146121555760405162461bcd60e51b815260040161041b90613ed8565b60006121646020830183614454565b9050111561217557612175816122dd565b60006121846060830183613f30565b9050111561219557612195816126a0565b60006121a460a0830183613f30565b905011156121b5576121b581612c57565b6040517fa2675b8041bce0f157b89f1833dd1c4013ac88fb7d72abd5eee91093fb04ca1790610cf79083359084906142b8565b6006546001600160a01b031633146122125760405162461bcd60e51b815260040161041b90613ed8565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd69451aace2c16163f3a93c8c3b48e4ae1bdece685316d298c640955c14e1b4090602001610cf7565b600080600061226f85856132a1565b9150915061227c816132e6565b509392505050565b6002600054036122d65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161041b565b6002600055565b803560009081526003602052604081205490036124455760005b6123046020830183614454565b905081101561243f57813560009081526003602090815260409091209061232d90840184614454565b8381811061233d5761233d613f1a565b83546001810185556000948552602090942060409091029290920192600202909101905061236b82826144bd565b5050813560009081526004602090815260409182902082518084019093529190819061239990860186614454565b858181106123a9576123a9613f1a565b6123bf9260206040909202019081019150613a40565b6001600160a01b031681526020016123da6040860186613f30565b858181106123ea576123ea613f1a565b60209081029290920135909252835460018082018655600095865294829020845160029092020180546001600160a01b0319166001600160a01b039092169190911781559201519183019190915550016122f7565b50612575565b60005b6124556020830183614454565b90508110156125735761246b6020830183614454565b8281811061247b5761247b613f1a565b6124919260206040909202019081019150613a40565b8235600090815260036020526040902080546001600160a01b039290921691839081106124c0576124c0613f1a565b60009182526020909120600290910201546001600160a01b0316146124f75760405162461bcd60e51b815260040161041b906144e1565b6125046040830183613f30565b8281811061251457612514613f1a565b905060200201356004600084600001358152602001908152602001600020600001828154811061254657612546613f1a565b906000526020600020906002020160010160008282546125669190614516565b9091555050600101612448565b505b60005b6125856020830183614454565b905081101561269c5761259b6020830183614454565b828181106125ab576125ab613f1a565b6125c19260206040909202019081019150613a40565b6001600160a01b03166323b872dd33306125de6040870187613f30565b868181106125ee576125ee613f1a565b905060200201356040518463ffffffff1660e01b815260040161261393929190613fae565b6020604051808303816000875af1158015612632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126569190613f79565b6126945760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161041b565b600101612578565b5050565b8035600090815260036020526040812060010154900361281b5760005b6126ca6060830183613f30565b905081101561281557813560009081526003602052604090206001016126f36060840184613f30565b8381811061270357612703613f1a565b90506020028101906127159190614529565b81546001810183556000928352602090922090916003020161273782826145dc565b5050813560009081526004602052604090819020815180830190925260010190806127656060860186613f30565b8581811061277557612775613f1a565b90506020028101906127879190614529565b612795906020810190613a40565b6001600160a01b031681526020016127b06080860186613f30565b858181106127c0576127c0613f1a565b60209081029290920135909252835460018082018655600095865294829020845160029092020180546001600160a01b0319166001600160a01b039092169190911781559201519183019190915550016126bd565b50612aef565b60005b61282b6060830183613f30565b9050811015612aed576128416060830183613f30565b8281811061285157612851613f1a565b90506020028101906128639190614529565b612871906020810190613a40565b6001600160a01b0316600360008460000135815260200190815260200160002060010182815481106128a5576128a5613f1a565b60009182526020909120600390910201546001600160a01b0316146128dc5760405162461bcd60e51b815260040161041b906144e1565b6128e96060830183613f30565b828181106128f9576128f9613f1a565b905060200281019061290b9190614529565b612919906020810190613a40565b6001600160a01b03166003600084600001358152602001908152602001600020600101828154811061294d5761294d613f1a565b60009182526020909120600390910201546001600160a01b031603612ae55760005b61297c6060840184613f30565b8381811061298c5761298c613f1a565b905060200281019061299e9190614529565b6129ac906020810190613f30565b9050811015612a6f57823560009081526003602052604090206001018054839081106129da576129da613f1a565b90600052602060002090600302016001018380606001906129fb9190613f30565b84818110612a0b57612a0b613f1a565b9050602002810190612a1d9190614529565b612a2b906020810190613f30565b83818110612a3b57612a3b613f1a565b8354600181018555600094855260209485902091909402929092013591909201555080612a6781613ebf565b91505061296f565b50612a7d6080830183613f30565b82818110612a8d57612a8d613f1a565b9050602002013560046000846000013581526020019081526020016000206001018281548110612abf57612abf613f1a565b90600052602060002090600202016001016000828254612adf9190614516565b90915550505b60010161281e565b505b60005b612aff6060830183613f30565b905081101561269c5760005b612b186060840184613f30565b83818110612b2857612b28613f1a565b9050602002810190612b3a9190614529565b612b48906020810190613f30565b9050811015612c4e57612b5e6060840184613f30565b83818110612b6e57612b6e613f1a565b9050602002810190612b809190614529565b612b8e906020810190613a40565b6001600160a01b03166323b872dd3330612bab6060880188613f30565b87818110612bbb57612bbb613f1a565b9050602002810190612bcd9190614529565b612bdb906020810190613f30565b86818110612beb57612beb613f1a565b905060200201356040518463ffffffff1660e01b8152600401612c1093929190613fae565b600060405180830381600087803b158015612c2a57600080fd5b505af1158015612c3e573d6000803e3d6000fd5b505060019092019150612b0b9050565b50600101612af2565b80356000908152600360205260408120600201549003612efb5760005b612c8160a0830183613f30565b9050811015612ef55781356000908152600360205260409020600201612caa60a0840184613f30565b83818110612cba57612cba613f1a565b9050602002810190612ccc9190614529565b815460018101835560009283526020909220909160030201612cee828261469d565b5050813560009081526004602052604081206002018054600101815581525b612d1a60a0840184613f30565b83818110612d2a57612d2a613f1a565b9050602002810190612d3c9190614529565b612d4a906020810190613f30565b9050811015612ee25782356000908152600460205260409020600201805483908110612d7857612d78613f1a565b906000526020600020016040518060600160405280858060a00190612d9d9190613f30565b86818110612dad57612dad613f1a565b9050602002810190612dbf9190614529565b612dcd906020810190613a40565b6001600160a01b03168152602001612de860a0870187613f30565b86818110612df857612df8613f1a565b9050602002810190612e0a9190614529565b612e18906020810190613f30565b85818110612e2857612e28613f1a565b905060200201358152602001858060c00190612e449190613f30565b86818110612e5457612e54613f1a565b9050602002810190612e669190613f30565b85818110612e7657612e76613f1a565b60209081029290920135909252835460018082018655600095865294829020845160039092020180546001600160a01b0319166001600160a01b039092169190911781559083015193810193909355506040015160029091015580612eda81613ebf565b915050612d0d565b5080612eed81613ebf565b915050612c74565b506130de565b60005b612f0b60a0830183613f30565b90508110156130dc5760005b612f2460a0840184613f30565b83818110612f3457612f34613f1a565b9050602002810190612f469190614529565b612f54906020810190613f30565b90508110156130c957612f6a60a0840184613f30565b83818110612f7a57612f7a613f1a565b9050602002810190612f8c9190614529565b612f9a906020810190613a40565b6001600160a01b031660036000856000013581526020019081526020016000206002018381548110612fce57612fce613f1a565b60009182526020909120600390910201546001600160a01b0316146130055760405162461bcd60e51b815260040161041b906144e1565b61301260c0840184613f30565b8381811061302257613022613f1a565b90506020028101906130349190613f30565b8281811061304457613044613f1a565b905060200201356004600085600001358152602001908152602001600020600201838154811061307657613076613f1a565b90600052602060002001828154811061309157613091613f1a565b906000526020600020906003020160020160008282546130b19190614516565b909155508190506130c181613ebf565b915050612f17565b50806130d481613ebf565b915050612efe565b505b60005b6130ee60a0830183613f30565b905081101561269c5760005b61310760a0840184613f30565b8381811061311757613117613f1a565b90506020028101906131299190614529565b613137906020810190613f30565b905081101561328e5761314d60a0840184613f30565b8381811061315d5761315d613f1a565b905060200281019061316f9190614529565b61317d906020810190613a40565b6001600160a01b031663f242432a333061319a60a0880188613f30565b878181106131aa576131aa613f1a565b90506020028101906131bc9190614529565b6131ca906020810190613f30565b868181106131da576131da613f1a565b90506020020135878060c001906131f19190613f30565b8881811061320157613201613f1a565b90506020028101906132139190613f30565b8781811061322357613223613f1a565b905060200201356040518563ffffffff1660e01b81526004016132499493929190613fd2565b600060405180830381600087803b15801561326357600080fd5b505af1158015613277573d6000803e3d6000fd5b50505050808061328690613ebf565b9150506130fa565b508061329981613ebf565b9150506130e1565b60008082516041036132d75760208301516040840151606085015160001a6132cb87828585613433565b945094505050506132df565b506000905060025b9250929050565b60008160048111156132fa576132fa614771565b036133025750565b600181600481111561331657613316614771565b036133635760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161041b565b600281600481111561337757613377614771565b036133c45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161041b565b60038160048111156133d8576133d8614771565b036134305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161041b565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561346a57506000905060036134ee565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156134be573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134e7576000600192509250506134ee565b9150600090505b94509492505050565b50805460008255600202906000526020600020908101906134309190613578565b508054600082556003029060005260206000209081019061343091906135a2565b508054600082556003029060005260206000209081019061343091906135d7565b50805460008255906000526020600020908101906134309190613613565b5b8082111561359e5780546001600160a01b031916815560006001820155600201613579565b5090565b8082111561359e5780546001600160a01b031916815560006135c76001830182613630565b50600060028201556003016135a2565b8082111561359e5780546001600160a01b031916815560006135fc6001830182613630565b61360a600283016000613630565b506003016135d7565b8082111561359e576000613627828261364e565b50600101613613565b5080546000825590600052602060002090810190613430919061366f565b50805460008255600302906000526020600020908101906134309190613684565b5b8082111561359e5760008155600101613670565b5b8082111561359e5780546001600160a01b03191681556000600182018190556002820155600301613685565b6000602082840312156136c357600080fd5b81356001600160e01b0319811681146136db57600080fd5b9392505050565b600080604083850312156136f557600080fd5b50508035926020909101359150565b6001600160a01b038116811461343057600080fd5b6000806040838503121561372c57600080fd5b82359150602083013561373e81613704565b809150509250929050565b60006020828403121561375b57600080fd5b81356001600160401b0381111561377157600080fd5b820160e081850312156136db57600080fd5b60006020828403121561379557600080fd5b5035919050565b6000815180845260208085019450848260051b86018286016000805b86811015613826578484038a52825180518086529087019087860190845b8181101561381157835180516001600160a01b031684528a8101518b85015260409081015190840152928901926060909201916001016137d6565b50509a87019a945050918501916001016137b8565b509198975050505050505050565b805160608084528151908401819052600091602091908201906080860190845b8181101561388d5761387a83855180516001600160a01b03168252602090810151910152565b9284019260409290920191600101613854565b50508483015186820387850152805180835290840192506000918401905b808310156138e7576138d182855180516001600160a01b03168252602090810151910152565b60408201915084840193506001830192506138ab565b50604086015193508681036040880152613901818561379c565b979650505050505050565b6020815260006136db6020830184613834565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261394657600080fd5b81356001600160401b03808211156139605761396061391f565b604051601f8301601f19908116603f011681019082821181831017156139885761398861391f565b816040528381528660208588010111156139a157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156139d757600080fd5b84356139e281613704565b93506020850135925060408501356001600160401b0380821115613a0557600080fd5b613a1188838901613935565b93506060870135915080821115613a2757600080fd5b50613a3487828801613935565b91505092959194509250565b600060208284031215613a5257600080fd5b81356136db81613704565b600081518084526020808501945080840160005b83811015613a8d57815187529582019590820190600101613a71565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015613b1f57858303601f19018952815180516001600160a01b0316845284810151606086860181905290613aee82870182613a5d565b91505060408083015192508582038187015250613b0b8183613a5d565b9a86019a9450505090830190600101613ab5565b5090979650505050505050565b60208082528251606083830181905281516080850181905260009392830191849160a08701905b80841015613b8f57613b7982865180516001600160a01b03168252602090810151910152565b6040820191508585019450600184019350613b53565b50848801519350601f19925060408388830301818901528185518084528784019150878160051b850101888801975060005b82811015613c125785820388018452885180516001600160a01b031683528a8101518b8401899052613bf589850182613a5d565b9187015193870193909352988a0198938a01939150600101613bc1565b50838c01519850868b820301868c0152613c2c818a613a98565b9c9b505050505050505050505050565b60008083601f840112613c4e57600080fd5b5081356001600160401b03811115613c6557600080fd5b6020830191508360208260051b85010111156132df57600080fd5b60008083601f840112613c9257600080fd5b5081356001600160401b03811115613ca957600080fd5b6020830191508360208285010111156132df57600080fd5b60008060008060008060008060a0898b031215613cdd57600080fd5b8835613ce881613704565b97506020890135613cf881613704565b965060408901356001600160401b0380821115613d1457600080fd5b613d208c838d01613c3c565b909850965060608b0135915080821115613d3957600080fd5b613d458c838d01613c3c565b909650945060808b0135915080821115613d5e57600080fd5b50613d6b8b828c01613c80565b999c989b5096995094979396929594505050565b600080600060608486031215613d9457600080fd5b8335925060208401356001600160401b0380821115613db257600080fd5b613dbe87838801613935565b93506040860135915080821115613dd457600080fd5b50613de186828701613935565b9150509250925092565b60008060008060008060a08789031215613e0457600080fd5b8635613e0f81613704565b95506020870135613e1f81613704565b9450604087013593506060870135925060808701356001600160401b03811115613e4857600080fd5b613e5489828a01613c80565b979a9699509497509295939492505050565b60208082526023908201527f4578706972792074696d657374616d70206d75737420626520696e206675747560408201526239329760e91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201613ed157613ed1613ea9565b5060010190565b60208082526022908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112613f4757600080fd5b8301803591506001600160401b03821115613f6157600080fd5b6020019150600581901b36038213156132df57600080fd5b600060208284031215613f8b57600080fd5b815180151581146136db57600080fd5b818103818111156103af576103af613ea9565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6000808335601e1984360301811261402157600080fd5b83016020810192503590506001600160401b0381111561404057600080fd5b8060061b36038213156132df57600080fd5b8183526000602080850194508260005b85811015613a8d57813561407581613704565b6001600160a01b03168752818301358388015260409687019690910190600101614062565b6000808335601e198436030181126140b157600080fd5b83016020810192503590506001600160401b038111156140d057600080fd5b8060051b36038213156132df57600080fd5b81835260006001600160fb1b038311156140fb57600080fd5b8260051b80836020870137939093016020019392505050565b60008235605e1983360301811261412a57600080fd5b90910192915050565b60008383855260208086019550808560051b8301018460005b87811015613b1f57848303601f190189526141678288614114565b6060813561417481613704565b6001600160a01b0316855261418b8287018361409a565b828888015261419d83880182846140e2565b604094850135979094019690965250509884019892509083019060010161414c565b60008383855260208086019550808560051b8301018460005b87811015613b1f57848303601f190189526141f38288614114565b6060813561420081613704565b6001600160a01b031685526142178287018361409a565b828888015261422983880182846140e2565b92505050604061423b8184018461409a565b93508683038288015261424f8385836140e2565b9c88019c965050509285019250506001016141d8565b60008383855260208086019550808560051b8301018460005b87811015613b1f57848303601f19018952614299828861409a565b6142a48582846140e2565b9a86019a945050509083019060010161427e565b828152604060208201528135604082015260006142d8602084018461400a565b60e060608501526142ee61012085018284614052565b9150506142fe604085018561409a565b603f19808685030160808701526143168483856140e2565b9350614325606088018861409a565b93509150808685030160a087015261433e848484614133565b935061434d608088018861409a565b93509150808685030160c08701526143668484846140e2565b935061437560a088018861409a565b93509150808685030160e087015261438e8484846141bf565b935061439d60c088018861409a565b93509150808685030161010087015250613901838383614265565b6000815160005b818110156143d957602081850181015186830152016143bf565b50600093019283525090919050565b6bffffffffffffffffffffffff198460601b168152600061440c60148301856143b8565b928352505060200192915050565b600061442682856143b8565b9283525050602001919050565b82815260406020820152600061444c6040830184613834565b949350505050565b6000808335601e1984360301811261446b57600080fd5b8301803591506001600160401b0382111561448557600080fd5b6020019150600681901b36038213156132df57600080fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b81356144c881613704565b6144d2818361449d565b50602082013560018201555050565b6020808252818101527f546f6b656e20616464726573732063616e6e6f74206265206368616e6765642e604082015260600190565b808201808211156103af576103af613ea9565b60008235605e1983360301811261453f57600080fd5b9190910192915050565b6001600160401b038311156145605761456061391f565b600160401b8311156145745761457461391f565b8054838255808410156145ab576000828152602081208581019083015b808210156145a757828255600182019150614591565b5050505b5060008181526020812083915b858110156145d4578235828201556020909201916001016145b8565b505050505050565b81356145e781613704565b6145f1818361449d565b506001808201602061460581860186613f30565b6001600160401b0381111561461c5761461c61391f565b600160401b8111156146305761463061391f565b8354818555808210156146645760008581528481208381019083015b80821015614660578282559088019061464c565b5050505b50600093845260208420935b8181101561468957823585820155918301918501614670565b505050505050604082013560028201555050565b81356146a881613704565b6146b2818361449d565b50600180820160206146c681860186613f30565b6001600160401b038111156146dd576146dd61391f565b600160401b8111156146f1576146f161391f565b8354818555808210156147255760008581528481208381019083015b80821015614721578282559088019061470d565b5050505b50600093845260208420935b8181101561474a57823585820155918301918501614731565b50505050505061475d6040830183613f30565b61476b818360028601614549565b50505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212203151a458720939fb970a081ebf56ca23f8662c58d261d74bae1a2b28af1dfe1b64736f6c63430008110033",
  "devdoc": {
    "author": "Kratos",
    "kind": "dev",
    "methods": {
      "claimRewards(uint256,bytes,bytes)": {
        "details": "Claims rewards for a round",
        "params": {
          "_round": "Round number",
          "nonce": "Random bytes32 nonce",
          "signature": "Signature generated off-chain"
        }
      },
      "getRoundAmounts(uint256)": {
        "params": {
          "_round": "Round number"
        }
      },
      "getRoundRewards(uint256)": {
        "params": {
          "_round": "Round number"
        }
      },
      "hasUserClaimed(uint256,address)": {
        "params": {
          "_round": "Round number",
          "user": "Address of user"
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "removeRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))": {
        "details": "Remove rewards for a round, only for admin",
        "params": {
          "data": "Reward data"
        }
      },
      "setAdmin(address)": {
        "details": "Set address of admin EOA",
        "params": {
          "_admin": "Address of admin EOA"
        }
      },
      "setController(address)": {
        "details": "Set address of controller EOA",
        "params": {
          "_controller": "Address of controller EOA"
        }
      },
      "setRoundExpiry(uint256,uint256)": {
        "details": "Set round expiry timestamp",
        "params": {
          "_round": "Round number",
          "expiryTimestamp": "Expiry timestamp for the round"
        }
      },
      "setWhitelistSignerAddress(address)": {
        "details": "Set new whitelist signer address",
        "params": {
          "_whitelistSignerAddress": "Address of new whitelist signer"
        }
      },
      "startNewRound(uint256,uint256)": {
        "details": "Start a new round for controller only",
        "params": {
          "expiryTimestamp": "Expiry timestamp for the round"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "topUpRewards((uint256,(address,uint256)[],uint256[],(address,uint256[],uint256)[],uint256[],(address,uint256[],uint256[])[],uint256[][]))": {
        "details": "Top up rewards for a round, only for admin",
        "params": {
          "data": "Reward data"
        }
      },
      "whitelistSigned(address,uint256,bytes,bytes)": {
        "details": "Checks if the the signature is signed by a valid signer for whitelist",
        "params": {
          "_round": "Round number",
          "nonce": "Random bytes32 nonce",
          "sender": "Address of minter",
          "signature": "Signature generated off-chain"
        }
      }
    },
    "title": "AtlanteanTrove Quest Rewards Claiming Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "admin()": {
        "notice": "The address of the admin"
      },
      "controller()": {
        "notice": "The address of the controller"
      },
      "currentRound()": {
        "notice": "Variable to track current round"
      },
      "getRoundAmounts(uint256)": {
        "notice": "Get round amounts"
      },
      "getRoundRewards(uint256)": {
        "notice": "Get round rewards"
      },
      "hasUserClaimed(uint256,address)": {
        "notice": "Get user claim status for a round"
      },
      "roundTime(uint256)": {
        "notice": "Mapping of round to Round details"
      },
      "whitelistSignerAddress()": {
        "notice": "The address of the whitelist signer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1846,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1852,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Round)1973_storage)"
      },
      {
        "astId": 1858,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Reward)1912_storage)"
      },
      {
        "astId": 1864,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "roundAmounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Amount)1943_storage)"
      },
      {
        "astId": 1868,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "currentRound",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1871,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1874,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "controller",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1877,
        "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
        "label": "whitelistSignerAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_struct(RewardERC1155Amount)1929_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_struct(RewardERC1155Amount)1929_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155Amount[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC1155)1899_storage)dyn_storage": {
        "base": "t_struct(RewardERC1155)1899_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC1155Amount)1929_storage)dyn_storage": {
        "base": "t_struct(RewardERC1155Amount)1929_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC1155Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC20)1882_storage)dyn_storage": {
        "base": "t_struct(RewardERC20)1882_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC20Amount)1917_storage)dyn_storage": {
        "base": "t_struct(RewardERC20Amount)1917_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC20Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC721)1890_storage)dyn_storage": {
        "base": "t_struct(RewardERC721)1890_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardERC721Amount)1922_storage)dyn_storage": {
        "base": "t_struct(RewardERC721Amount)1922_storage",
        "encoding": "dynamic_array",
        "label": "struct AtlanteanTrove.RewardERC721Amount[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Amount)1943_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Amount)",
        "numberOfBytes": "32",
        "value": "t_struct(Amount)1943_storage"
      },
      "t_mapping(t_uint256,t_struct(Reward)1912_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)1912_storage"
      },
      "t_mapping(t_uint256,t_struct(Round)1973_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlanteanTrove.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)1973_storage"
      },
      "t_struct(Amount)1943_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Amount",
        "members": [
          {
            "astId": 1933,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc20Amount",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(RewardERC20Amount)1917_storage)dyn_storage"
          },
          {
            "astId": 1937,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc721Amount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardERC721Amount)1922_storage)dyn_storage"
          },
          {
            "astId": 1942,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc1155Amount",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_struct(RewardERC1155Amount)1929_storage)dyn_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Reward)1912_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Reward",
        "members": [
          {
            "astId": 1903,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc20Rewards",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(RewardERC20)1882_storage)dyn_storage"
          },
          {
            "astId": 1907,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc721Rewards",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardERC721)1890_storage)dyn_storage"
          },
          {
            "astId": 1911,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "erc1155Rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(RewardERC1155)1899_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC1155)1899_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC1155",
        "members": [
          {
            "astId": 1892,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1895,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1898,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC1155Amount)1929_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC1155Amount",
        "members": [
          {
            "astId": 1924,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1926,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1928,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC20)1882_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC20",
        "members": [
          {
            "astId": 1879,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1881,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardERC20Amount)1917_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC20Amount",
        "members": [
          {
            "astId": 1914,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1916,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardERC721)1890_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC721",
        "members": [
          {
            "astId": 1884,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1887,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1889,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardERC721Amount)1922_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.RewardERC721Amount",
        "members": [
          {
            "astId": 1919,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1921,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Round)1973_storage": {
        "encoding": "inplace",
        "label": "struct AtlanteanTrove.Round",
        "members": [
          {
            "astId": 1970,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1972,
            "contract": "contracts/AtlanteanTrove.sol:AtlanteanTrove",
            "label": "expiryTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}