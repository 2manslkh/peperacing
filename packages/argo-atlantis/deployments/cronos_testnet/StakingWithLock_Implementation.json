{
  "address": "0xfEf67EcCd2751e71e5ba33AD9c87dA713B2FB469",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressRegistry",
          "type": "address"
        }
      ],
      "name": "LogSetAddressRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "atlantis",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSetAtlantisGemstones",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stardust",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSetStardust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSetUnstakeTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stardustAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeUnlocked",
          "type": "uint256"
        }
      ],
      "name": "LogUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stardustAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnTime",
          "type": "uint256"
        }
      ],
      "name": "LogUnstakeAndBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "__StakingWithLock_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserClaimableGold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPendingUnstakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingWithLock.Unstake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalGoldPendingUnstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAtlantisRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeTime",
          "type": "uint256"
        }
      ],
      "name": "setUnstakeTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unstakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51a7ca29f358ac7afff38bb9d3eefb92cdad0d52bc75f7a443c51924c59f38f7",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0xfEf67EcCd2751e71e5ba33AD9c87dA713B2FB469",
    "transactionIndex": 1,
    "gasUsed": "2078827",
    "logsBloom": "0x
    "blockHash": "0xd5846b2a73ee75b444618c57a1a04fdfca87c2363bd561325c92b5a47bd69309",
    "transactionHash": "0x51a7ca29f358ac7afff38bb9d3eefb92cdad0d52bc75f7a443c51924c59f38f7",
    "logs": [],
    "blockNumber": 9054666,
    "cumulativeGasUsed": "6828827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a6d980fc1505f1cf54d4793b02b44993",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressRegistry\",\"type\":\"address\"}],\"name\":\"LogSetAddressRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"atlantis\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSetAtlantisGemstones\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stardust\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSetStardust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSetUnstakeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stardustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeUnlocked\",\"type\":\"uint256\"}],\"name\":\"LogUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stardustAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnTime\",\"type\":\"uint256\"}],\"name\":\"LogUnstakeAndBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"__StakingWithLock_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserClaimableGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPendingUnstakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingWithLock.Unstake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalGoldPendingUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAtlantisRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTime\",\"type\":\"uint256\"}],\"name\":\"setUnstakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__StakingWithLock_init(address,address)\":{\"params\":{\"_admin\":\"address of the admin.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseContract()\":{\"details\":\"Can only be called by pauser role.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAtlantisRegistry(address)\":{\"params\":{\"_addressRegistry\":\"address of Atlantis Registry\"}},\"stake(uint256)\":{\"params\":{\"_amount\":\"amount of gold tokens to stake.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Can only be called by pauser role.\"},\"unstake(uint256)\":{\"params\":{\"_amount\":\"amount of stardust tokens to unstake.\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"StakingWithLock\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__StakingWithLock_init(address,address)\":{\"notice\":\"Initialises StakingWithLock contract with the required addresses.\"},\"claim()\":{\"notice\":\"Function to claim after the unstaking period of Stardust.\"},\"getUserClaimableGold(address)\":{\"notice\":\"View user's claimable Gold.\"},\"getUserPendingUnstakes(address)\":{\"notice\":\"View user's pending unstakes.\"},\"getUserTotalGoldPendingUnstake(address)\":{\"notice\":\"View user's total amount of Gold that is pending unstake (includes Gold that are not yet claimed).\"},\"pauseContract()\":{\"notice\":\"Pauses contract.\"},\"setAtlantisRegistry(address)\":{\"notice\":\"Set Atlantis Registry\"},\"stake(uint256)\":{\"notice\":\"Stake gold tokens in exchange for stardust tokens.\"},\"unpause()\":{\"notice\":\"Unpauses contract.\"},\"unstake(uint256)\":{\"notice\":\"Initiate unstake of stardust tokens which will require unstaking period before claiming.\"}},\"notice\":\"StakingWithLock is the contract that allows users to stake their gold tokens and receive stardust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingWithLock.sol\":\"StakingWithLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/StakingWithLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IMintBurnToken.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakingWithLock\\r\\n * @notice StakingWithLock is the contract that allows users to stake their gold tokens and receive stardust.\\r\\n */\\r\\ncontract StakingWithLock is\\r\\n    Initializable,\\r\\n    AccessControlUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    OwnableUpgradeable\\r\\n{\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    struct Unstake {\\r\\n        uint256 amount; // Amount of stardust unstaked.\\r\\n        uint256 startTime; // Time when unstake is initiated.\\r\\n        uint256 claimTime; // Time where stardust is unlocked and ready for claiming.\\r\\n    }\\r\\n\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n\\r\\n    // Info on user's pending or completed unstakes.\\r\\n    mapping(address => Unstake[]) public unstakeInfo;\\r\\n\\r\\n    // Addresses of gold & stardust.\\r\\n    mapping(address => uint) public whitelistedContracts;\\r\\n    // Unstake time\\r\\n    uint256 public unstakeTime;\\r\\n\\r\\n    // Event that triggers on staking.\\r\\n    event LogStake(address indexed staker, uint256 goldAmount, uint256 timestamp);\\r\\n    // Event that triggers on unstake initiation.\\r\\n    event LogUnstake(address indexed staker, uint256 stardustAmount, uint256 unstakeStart, uint256 unstakeUnlocked);\\r\\n    // Event that triggers when Gold is claimed after unbonding period.\\r\\n    event LogClaimed(address indexed staker, uint256 claimedAmount, uint256 timestamp);\\r\\n    // Event that triggers when Stardust address is set.\\r\\n    event LogSetStardust(address stardust, uint256 timestamp);\\r\\n    // Event that log unstake and burn\\r\\n    event LogUnstakeAndBurn(address indexed staker, address indexed from, uint256 stardustAmount, uint256 burnTime);\\r\\n    // Log set atlantis\\r\\n    event LogSetAtlantisGemstones(address atlantis, uint256 timestamp);\\r\\n    // Change unstake time event\\r\\n    event LogSetUnstakeTime(uint256 unstakeTime, uint256 timestamp);\\r\\n    // Set Address Registry\\r\\n    event LogSetAddressRegistry(address addressRegistry);\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n\\r\\n    modifier onlyAtlantisContracts() {\\r\\n        _isAtlantisContracts();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _isAtlantisContracts() internal view {\\r\\n        require(\\r\\n            addressRegistry.isControllerContract(msg.sender),\\r\\n            \\\"StakingWithLock: Only Atlantis contracts can call this function\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialises StakingWithLock contract with the required addresses.\\r\\n     * @param _admin address of the admin.\\r\\n     */\\r\\n    function __StakingWithLock_init(address _admin, AtlantisAddressRegistry _addressRegistry) external initializer {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __Context_init_unchained();\\r\\n        __Pausable_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n\\r\\n        // _admin will be address of timelock contract.\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\r\\n        _setupRole(PAUSER_ROLE, _admin);\\r\\n        addressRegistry = _addressRegistry;\\r\\n        // TODO: CHANGE TO 6 MONTHS.\\r\\n        unstakeTime = 1 hours;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice View user's pending unstakes.\\r\\n     */\\r\\n    function getUserPendingUnstakes(address _user) external view returns (Unstake[] memory) {\\r\\n        return unstakeInfo[_user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View user's total amount of Gold that is pending unstake (includes Gold that are not yet claimed).\\r\\n     */\\r\\n    function getUserTotalGoldPendingUnstake(address _user) external view returns (uint256) {\\r\\n        // Retrieve user's unstake information.\\r\\n        Unstake[] memory userusInfo = unstakeInfo[_user];\\r\\n        uint256 usLength = userusInfo.length;\\r\\n        uint256 totalGoldPendingUnstake;\\r\\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\\r\\n        for (uint256 i = 0; i < usLength; i++) {\\r\\n            Unstake memory usInfo = userusInfo[i];\\r\\n            uint256 amount = usInfo.amount;\\r\\n            totalGoldPendingUnstake += amount;\\r\\n        }\\r\\n\\r\\n        return totalGoldPendingUnstake - getUserClaimableGold(_user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View user's claimable Gold.\\r\\n     */\\r\\n    function getUserClaimableGold(address _user) public view returns (uint256) {\\r\\n        // Initialise claimable Gold to 0.\\r\\n        uint256 claimableAmount;\\r\\n\\r\\n        // Retrieve user's unstake information.\\r\\n        Unstake[] memory userusInfo = unstakeInfo[_user];\\r\\n        uint256 usLength = userusInfo.length;\\r\\n\\r\\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\\r\\n        for (uint256 i = 0; i < usLength; i++) {\\r\\n            Unstake memory usInfo = userusInfo[i];\\r\\n            uint256 claimTime = usInfo.claimTime;\\r\\n            uint256 amount = usInfo.amount;\\r\\n            if (claimTime < block.timestamp) {\\r\\n                claimableAmount += amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return claimableAmount;\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN CONFIGURATION ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set Atlantis Registry\\r\\n     * @param _addressRegistry address of Atlantis Registry\\r\\n     */\\r\\n    function setAtlantisRegistry(AtlantisAddressRegistry _addressRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit LogSetAddressRegistry(address(addressRegistry));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pauses contract.\\r\\n     * @dev Can only be called by pauser role.\\r\\n     */\\r\\n    function pauseContract() external onlyRole(PAUSER_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unpauses contract.\\r\\n     * @dev Can only be called by pauser role.\\r\\n     */\\r\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake gold tokens in exchange for stardust tokens.\\r\\n     * @param _amount amount of gold tokens to stake.\\r\\n     */\\r\\n    function stake(uint256 _amount) external nonReentrant whenNotPaused returns (bool) {\\r\\n        // Stake amount must be > 0.\\r\\n        require(_amount > 0, \\\"StakingWithLock: Nothing to deposit\\\");\\r\\n\\r\\n        IERC20Upgradeable gold = IERC20Upgradeable(addressRegistry.getGold());\\r\\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\\r\\n\\r\\n        // Receive user's Gold tokens.\\r\\n        gold.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        // Mint stardust tokens to user at 1:1 ratio.\\r\\n        stardust.mint(msg.sender, _amount);\\r\\n\\r\\n        emit LogStake(msg.sender, _amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initiate unstake of stardust tokens which will require unstaking period before claiming.\\r\\n     * @param _amount amount of stardust tokens to unstake.\\r\\n     */\\r\\n    function unstake(uint256 _amount) external nonReentrant whenNotPaused returns (bool) {\\r\\n        // Unstake amount must be > 0.\\r\\n        require(_amount > 0, \\\"StakingWithLock: Nothing to unstake\\\");\\r\\n\\r\\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\\r\\n\\r\\n        // Save unstake details.\\r\\n        Unstake memory usInfo = Unstake(_amount, block.timestamp, block.timestamp + unstakeTime);\\r\\n        unstakeInfo[msg.sender].push(usInfo);\\r\\n\\r\\n        // Receive user's stardust.\\r\\n        stardust.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        // Burn all of user's Stardust.\\r\\n        stardust.burn(_amount);\\r\\n\\r\\n        emit LogUnstake(msg.sender, _amount, block.timestamp, block.timestamp + unstakeTime);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to claim after the unstaking period of Stardust.\\r\\n     */\\r\\n    function claim() external nonReentrant whenNotPaused returns (bool) {\\r\\n        IERC20Upgradeable gold = IERC20Upgradeable(addressRegistry.getGold());\\r\\n\\r\\n        // Initialise claimable Gold to 0.\\r\\n        uint256 claimableAmount;\\r\\n        Unstake[] memory stillUnstaking;\\r\\n        // Retrieve user's unstake information.\\r\\n        Unstake[] storage userusInfo = unstakeInfo[msg.sender];\\r\\n        uint256 usLength = userusInfo.length;\\r\\n        stillUnstaking = new Unstake[](usLength);\\r\\n        // Check unstakeInfo mapping for any unstakes that have passed claimTime and add those specific unstakes' Gold amount to claimableAmount.\\r\\n        for (uint256 i = 0; i < usLength; i++) {\\r\\n            Unstake storage usInfo = userusInfo[i];\\r\\n            uint256 claimTime = usInfo.claimTime;\\r\\n            uint256 amount = usInfo.amount;\\r\\n            if (claimTime < block.timestamp) {\\r\\n                claimableAmount += amount;\\r\\n            } else {\\r\\n                // Push unstake details that have yet to pass claim time into stillUnstaking.\\r\\n                // This is used for reconstruction later.\\r\\n                stillUnstaking[i] = Unstake(amount, usInfo.startTime, claimTime);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Delete all unstake details of the user.\\r\\n        delete unstakeInfo[msg.sender];\\r\\n\\r\\n        // Reconstruct user's unstake details.\\r\\n        uint256 length = stillUnstaking.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            if (stillUnstaking[i].startTime != 0) {\\r\\n                unstakeInfo[msg.sender].push(stillUnstaking[i]);\\r\\n            }\\r\\n        }\\r\\n        delete stillUnstaking;\\r\\n        // Check that user has something to claim.\\r\\n        require(claimableAmount > 0, \\\"StakingWithLock: Nothing to claim\\\");\\r\\n\\r\\n        // Check sufficient gold balance for transfer.\\r\\n        require(\\r\\n            claimableAmount <= IERC20Upgradeable(gold).balanceOf(address(this)),\\r\\n            \\\"StakingWithLock: Insufficient balance, check back later\\\"\\r\\n        );\\r\\n\\r\\n        // Returns user's gold.\\r\\n        IERC20Upgradeable(gold).safeTransfer(msg.sender, claimableAmount);\\r\\n\\r\\n        emit LogClaimed(address(msg.sender), claimableAmount, block.timestamp);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Instant unstake and burn only for atlantis related contracts\\r\\n    function unstakeAndBurn(uint256 _amount) external onlyAtlantisContracts {\\r\\n        IMintBurnToken stardust = IMintBurnToken(addressRegistry.getStardust());\\r\\n        IMintBurnToken gold = IMintBurnToken(addressRegistry.getGold());\\r\\n\\r\\n        // Unstake amount must be > 0.\\r\\n        require(_amount > 0, \\\"StakingWithLock: Nothing to unstake\\\");\\r\\n\\r\\n        // Receive user's stardust.\\r\\n        stardust.transferFrom(tx.origin, address(this), _amount);\\r\\n\\r\\n        // Burn all of user's stardust.\\r\\n        stardust.burn(_amount);\\r\\n        // Burn corresponding gold\\r\\n        gold.burn(_amount);\\r\\n\\r\\n        emit LogUnstakeAndBurn(address(tx.origin), msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setUnstakeTime(uint256 _unstakeTime) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        unstakeTime = _unstakeTime;\\r\\n        emit LogSetUnstakeTime(_unstakeTime, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x52a37592608d03186d2c14077983ea496bf87330f28a5db15a34ea3c4f5cf39f\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/interface/IMintBurnToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMintBurnToken is IERC20 {\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x86cfdd2f8b01c307311e940165eabdfaad121eceb5288e75125cca4f7ea9776e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80634e71d92d116100f9578063a694fc3a11610097578063d7e5274511610071578063d7e52745146103ce578063e63ab1e9146103d8578063f2fde38b146103ed578063f3ad65f41461040057600080fd5b8063a694fc3a14610395578063a7b8b491146103a8578063d547741f146103bb57600080fd5b8063715018a6116100d3578063715018a61461034d5780638da5cb5b1461035557806391d148541461037a578063a217fddf1461038d57600080fd5b80634e71d92d146103275780635c975abb1461032f5780636a8467c11461033a57600080fd5b80632e17de7811610166578063391feebb11610140578063391feebb146102e35780633f4ba83a14610304578063439766ce1461030c5780634b62e0881461031457600080fd5b80632e17de78146102aa5780632f2ff15d146102bd57806336568abe146102d057600080fd5b8063190106ea116101a2578063190106ea146102185780631984cc1d14610238578063248a9ca31461026657806327b1f5791461029757600080fd5b806253e76a146101c857806301ffc9a7146101dd57806313f9f34014610205575b600080fd5b6101db6101d6366004612073565b610414565b005b6101f06101eb366004612090565b610476565b60405190151581526020015b60405180910390f35b6101db6102133660046120ba565b6104ad565b61022b610226366004612073565b6104f3565b6040516101fc91906120d3565b61024b61024636600461212c565b610587565b604080519384526020840192909252908201526060016101fc565b6102896102743660046120ba565b60009081526065602052604090206001015490565b6040519081526020016101fc565b6102896102a5366004612073565b6105ca565b6101f06102b83660046120ba565b6106c7565b6101db6102cb366004612158565b61093a565b6101db6102de366004612158565b610964565b6102896102f1366004612073565b61012f6020526000908152604090205481565b6101db6109e2565b6101db610a05565b610289610322366004612073565b610a25565b6101f0610b22565b60975460ff166101f0565b6101db610348366004612188565b610f39565b6101db6110b9565b60fb546001600160a01b03165b6040516001600160a01b0390911681526020016101fc565b6101f0610388366004612158565b6110cd565b610289600081565b6101f06103a33660046120ba565b6110f8565b6101db6103b63660046120ba565b611311565b6101db6103c9366004612158565b6115b7565b6102896101305481565b61028960008051602061244f83398151915281565b6101db6103fb366004612073565b6115dc565b61012d54610362906001600160a01b031681565b600061041f81611652565b61012d80546001600160a01b0319166001600160a01b0384169081179091556040519081527f18c5c00095c56f1915eddb0ef653ea1a1724615726d5896d706ce09384ecb0f9906020015b60405180910390a15050565b60006001600160e01b03198216637965db0b60e01b14806104a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006104b881611652565b610130829055604080518381524260208201527fb7c986bef6a847c373c37fac58700d5a9443aa7cbed017d47c7ae940e92b1ff5910161046a565b6001600160a01b038116600090815261012e60209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561057c578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061052c565b505050509050919050565b61012e60205281600052604060002081815481106105a457600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b6001600160a01b038116600090815261012e6020908152604080832080548251818502810185019093528083528493849084015b8282101561064e57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906105fe565b50508251929350600091508190505b828110156106aa576000848281518110610679576106796121b6565b6020908102919091010151805190915061069381856121e2565b9350505080806106a2906121fa565b91505061065d565b506106b485610a25565b6106be9082612215565b95945050505050565b60006106d161165c565b6106d96116b6565b600082116107025760405162461bcd60e51b81526004016106f99061222c565b60405180910390fd5b61012d546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610771919061226f565b905060006040518060600160405280858152602001428152602001610130544261079b91906121e2565b905233600081815261012e60209081526040808320805460018082018355918552938390208651600390950201938455918501519183019190915583810151600290920191909155516323b872dd60e01b81526004810191909152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d919061228c565b50604051630852cd8d60e31b8152600481018590526001600160a01b038316906342966c68906024016020604051808303816000875af11580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c9919061228c565b50336001600160a01b03167f753014cc7945cb3c93016ecb5bc2a66e26d69971a934fcfe2a882794cb3448278542610130544261090691906121e2565b604080519384526020840192909252908201526060015b60405180910390a2600192505050610935600160c955565b919050565b60008281526065602052604090206001015461095581611652565b61095f8383611703565b505050565b6001600160a01b03811633146109d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106f9565b6109de8282611789565b5050565b60008051602061244f8339815191526109fa81611652565b610a026117f0565b50565b60008051602061244f833981519152610a1d81611652565b610a02611842565b6001600160a01b038116600090815261012e60209081526040808320805482518185028101850190935280835284938493929190849084015b82821015610aae5783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610a5e565b5050825192935060009150505b81811015610b18576000838281518110610ad757610ad76121b6565b6020908102919091010151604081015181519192509042821015610b0257610aff81886121e2565b96505b5050508080610b10906121fa565b915050610abb565b5091949350505050565b6000610b2c61165c565b610b346116b6565b61012d5460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba3919061226f565b33600090815261012e6020526040812080549293509091606091908067ffffffffffffffff811115610bd757610bd76122ae565b604051908082528060200260200182016040528015610c2c57816020015b610c1960405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610bf55790505b50925060005b81811015610cd5576000838281548110610c4e57610c4e6121b6565b60009182526020909120600390910201600281015481549192509042821015610c8257610c7b81896121e2565b9750610cbf565b60405180606001604052808281526020018460010154815260200183815250878581518110610cb357610cb36121b6565b60200260200101819052505b5050508080610ccd906121fa565b915050610c32565b5033600090815261012e60205260408120610cef9161201c565b825160005b81811015610d9857848181518110610d0e57610d0e6121b6565b602002602001015160200151600014610d865733600090815261012e602052604090208551869083908110610d4557610d456121b6565b602090810291909101810151825460018181018555600094855293839020825160039092020190815591810151928201929092556040909101516002909101555b80610d90816121fa565b915050610cf4565b506060935060008511610df75760405162461bcd60e51b815260206004820152602160248201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f20636c61696044820152606d60f81b60648201526084016106f9565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906122c4565b851115610ed45760405162461bcd60e51b815260206004820152603760248201527f5374616b696e67576974684c6f636b3a20496e73756666696369656e7420626160448201527f6c616e63652c20636865636b206261636b206c6174657200000000000000000060648201526084016106f9565b610ee86001600160a01b038716338761187f565b6040805186815242602082015233917fdaf43f13f8e52679dc580fc78bf80028f7d4ed733283deb8554be3907944533d910160405180910390a260019650505050505050610f36600160c955565b90565b600054610100900460ff1615808015610f595750600054600160ff909116105b80610f735750303b158015610f73575060005460ff166001145b610fd65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f9565b6000805460ff191660011790558015610ff9576000805461ff0019166101001790555b6110016118e2565b611009611909565b611011611930565b611019611909565b611021611909565b611029611963565b611034600084611993565b61104c60008051602061244f83398151915284611993565b61012d80546001600160a01b0319166001600160a01b038416179055610e1061013055801561095f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6110c161199d565b6110cb60006119f7565b565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061110261165c565b61110a6116b6565b600082116111665760405162461bcd60e51b815260206004820152602360248201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f206465706f6044820152621cda5d60ea1b60648201526084016106f9565b61012d5460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d5919061226f565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611251919061226f565b90506112686001600160a01b038316333087611a49565b6040516340c10f1960e01b8152336004820152602481018590526001600160a01b038216906340c10f19906044016020604051808303816000875af11580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d9919061228c565b506040805185815242602082015233917fa0d1fa51224fb08c7c0b48d481448ad6a31c945d1a68cac8758cac3a92d5001c910161091d565b611319611a87565b61012d546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611388919061226f565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b03166342f065326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611404919061226f565b9050600083116114265760405162461bcd60e51b81526004016106f99061222c565b6040516323b872dd60e01b8152326004820152306024820152604481018490526001600160a01b038316906323b872dd906064016020604051808303816000875af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d919061228c565b50604051630852cd8d60e31b8152600481018490526001600160a01b038316906342966c68906024016020604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611509919061228c565b50604051630852cd8d60e31b8152600481018490526001600160a01b038216906342966c68906024016020604051808303816000875af1158015611551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611575919061228c565b5060408051848152426020820152339132917f42849e375a18bc47be6ed47fbd7f66156e75e6a652b2b47a4d5842c802d7c81b910160405180910390a3505050565b6000828152606560205260409020600101546115d281611652565b61095f8383611789565b6115e461199d565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f9565b610a02816119f7565b610a028133611b66565b600260c95414156116af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f9565b600260c955565b60975460ff16156110cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106f9565b600160c955565b61170d82826110cd565b6109de5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61179382826110cd565b156109de5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6117f8611bbf565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61184a6116b6565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118253390565b6040516001600160a01b03831660248201526044810182905261095f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c08565b600054610100900460ff166116fc5760405162461bcd60e51b81526004016106f9906122dd565b600054610100900460ff166110cb5760405162461bcd60e51b81526004016106f9906122dd565b600054610100900460ff166119575760405162461bcd60e51b81526004016106f9906122dd565b6097805460ff19169055565b600054610100900460ff1661198a5760405162461bcd60e51b81526004016106f9906122dd565b6110cb336119f7565b6109de8282611703565b60fb546001600160a01b031633146110cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f9565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611a819085906323b872dd60e01b906084016118ab565b50505050565b61012d54604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af4919061228c565b6110cb5760405162461bcd60e51b815260206004820152603f60248201527f5374616b696e67576974684c6f636b3a204f6e6c792041746c616e746973206360448201527f6f6e7472616374732063616e2063616c6c20746869732066756e6374696f6e0060648201526084016106f9565b611b7082826110cd565b6109de57611b7d81611cda565b611b88836020611cec565b604051602001611b99929190612354565b60408051601f198184030181529082905262461bcd60e51b82526106f9916004016123c9565b60975460ff166110cb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106f9565b6000611c5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e8f9092919063ffffffff16565b80519091501561095f5780806020019051810190611c7b919061228c565b61095f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f9565b60606104a76001600160a01b03831660145b60606000611cfb8360026123fc565b611d069060026121e2565b67ffffffffffffffff811115611d1e57611d1e6122ae565b6040519080825280601f01601f191660200182016040528015611d48576020820181803683370190505b509050600360fc1b81600081518110611d6357611d636121b6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d9257611d926121b6565b60200101906001600160f81b031916908160001a9053506000611db68460026123fc565b611dc19060016121e2565b90505b6001811115611e39576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611df557611df56121b6565b1a60f81b828281518110611e0b57611e0b6121b6565b60200101906001600160f81b031916908160001a90535060049490941c93611e328161241b565b9050611dc4565b508315611e885760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106f9565b9392505050565b6060611e9e8484600085611ea6565b949350505050565b606082471015611f075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f9565b600080866001600160a01b03168587604051611f239190612432565b60006040518083038185875af1925050503d8060008114611f60576040519150601f19603f3d011682016040523d82523d6000602084013e611f65565b606091505b5091509150611f7687838387611f81565b979650505050505050565b60608315611fed578251611fe6576001600160a01b0385163b611fe65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f9565b5081611e9e565b611e9e83838151156120025781518083602001fd5b8060405162461bcd60e51b81526004016106f991906123c9565b5080546000825560030290600052602060002090810190610a0291905b8082111561205a576000808255600182018190556002820155600301612039565b5090565b6001600160a01b0381168114610a0257600080fd5b60006020828403121561208557600080fd5b8135611e888161205e565b6000602082840312156120a257600080fd5b81356001600160e01b031981168114611e8857600080fd5b6000602082840312156120cc57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561211f57815180518552868101518786015285015185850152606090930192908501906001016120f0565b5091979650505050505050565b6000806040838503121561213f57600080fd5b823561214a8161205e565b946020939093013593505050565b6000806040838503121561216b57600080fd5b82359150602083013561217d8161205e565b809150509250929050565b6000806040838503121561219b57600080fd5b82356121a68161205e565b9150602083013561217d8161205e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156121f5576121f56121cc565b500190565b600060001982141561220e5761220e6121cc565b5060010190565b600082821015612227576122276121cc565b500390565b60208082526023908201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f20756e7374604082015262616b6560e81b606082015260800190565b60006020828403121561228157600080fd5b8151611e888161205e565b60006020828403121561229e57600080fd5b81518015158114611e8857600080fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561234357818101518382015260200161232b565b83811115611a815750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161238c816017850160208801612328565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123bd816028840160208801612328565b01602801949350505050565b60208152600082518060208401526123e8816040850160208701612328565b601f01601f19169190910160400192915050565b6000816000190483118215151615612416576124166121cc565b500290565b60008161242a5761242a6121cc565b506000190190565b60008251612444818460208701612328565b919091019291505056fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212204abc52082a62fcfbe56375c02ac1078d6c85c59d1881431e82045f69913f10f864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80634e71d92d116100f9578063a694fc3a11610097578063d7e5274511610071578063d7e52745146103ce578063e63ab1e9146103d8578063f2fde38b146103ed578063f3ad65f41461040057600080fd5b8063a694fc3a14610395578063a7b8b491146103a8578063d547741f146103bb57600080fd5b8063715018a6116100d3578063715018a61461034d5780638da5cb5b1461035557806391d148541461037a578063a217fddf1461038d57600080fd5b80634e71d92d146103275780635c975abb1461032f5780636a8467c11461033a57600080fd5b80632e17de7811610166578063391feebb11610140578063391feebb146102e35780633f4ba83a14610304578063439766ce1461030c5780634b62e0881461031457600080fd5b80632e17de78146102aa5780632f2ff15d146102bd57806336568abe146102d057600080fd5b8063190106ea116101a2578063190106ea146102185780631984cc1d14610238578063248a9ca31461026657806327b1f5791461029757600080fd5b806253e76a146101c857806301ffc9a7146101dd57806313f9f34014610205575b600080fd5b6101db6101d6366004612073565b610414565b005b6101f06101eb366004612090565b610476565b60405190151581526020015b60405180910390f35b6101db6102133660046120ba565b6104ad565b61022b610226366004612073565b6104f3565b6040516101fc91906120d3565b61024b61024636600461212c565b610587565b604080519384526020840192909252908201526060016101fc565b6102896102743660046120ba565b60009081526065602052604090206001015490565b6040519081526020016101fc565b6102896102a5366004612073565b6105ca565b6101f06102b83660046120ba565b6106c7565b6101db6102cb366004612158565b61093a565b6101db6102de366004612158565b610964565b6102896102f1366004612073565b61012f6020526000908152604090205481565b6101db6109e2565b6101db610a05565b610289610322366004612073565b610a25565b6101f0610b22565b60975460ff166101f0565b6101db610348366004612188565b610f39565b6101db6110b9565b60fb546001600160a01b03165b6040516001600160a01b0390911681526020016101fc565b6101f0610388366004612158565b6110cd565b610289600081565b6101f06103a33660046120ba565b6110f8565b6101db6103b63660046120ba565b611311565b6101db6103c9366004612158565b6115b7565b6102896101305481565b61028960008051602061244f83398151915281565b6101db6103fb366004612073565b6115dc565b61012d54610362906001600160a01b031681565b600061041f81611652565b61012d80546001600160a01b0319166001600160a01b0384169081179091556040519081527f18c5c00095c56f1915eddb0ef653ea1a1724615726d5896d706ce09384ecb0f9906020015b60405180910390a15050565b60006001600160e01b03198216637965db0b60e01b14806104a757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006104b881611652565b610130829055604080518381524260208201527fb7c986bef6a847c373c37fac58700d5a9443aa7cbed017d47c7ae940e92b1ff5910161046a565b6001600160a01b038116600090815261012e60209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561057c578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061052c565b505050509050919050565b61012e60205281600052604060002081815481106105a457600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b6001600160a01b038116600090815261012e6020908152604080832080548251818502810185019093528083528493849084015b8282101561064e57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906105fe565b50508251929350600091508190505b828110156106aa576000848281518110610679576106796121b6565b6020908102919091010151805190915061069381856121e2565b9350505080806106a2906121fa565b91505061065d565b506106b485610a25565b6106be9082612215565b95945050505050565b60006106d161165c565b6106d96116b6565b600082116107025760405162461bcd60e51b81526004016106f99061222c565b60405180910390fd5b61012d546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610771919061226f565b905060006040518060600160405280858152602001428152602001610130544261079b91906121e2565b905233600081815261012e60209081526040808320805460018082018355918552938390208651600390950201938455918501519183019190915583810151600290920191909155516323b872dd60e01b81526004810191909152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d919061228c565b50604051630852cd8d60e31b8152600481018590526001600160a01b038316906342966c68906024016020604051808303816000875af11580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c9919061228c565b50336001600160a01b03167f753014cc7945cb3c93016ecb5bc2a66e26d69971a934fcfe2a882794cb3448278542610130544261090691906121e2565b604080519384526020840192909252908201526060015b60405180910390a2600192505050610935600160c955565b919050565b60008281526065602052604090206001015461095581611652565b61095f8383611703565b505050565b6001600160a01b03811633146109d45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106f9565b6109de8282611789565b5050565b60008051602061244f8339815191526109fa81611652565b610a026117f0565b50565b60008051602061244f833981519152610a1d81611652565b610a02611842565b6001600160a01b038116600090815261012e60209081526040808320805482518185028101850190935280835284938493929190849084015b82821015610aae5783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610a5e565b5050825192935060009150505b81811015610b18576000838281518110610ad757610ad76121b6565b6020908102919091010151604081015181519192509042821015610b0257610aff81886121e2565b96505b5050508080610b10906121fa565b915050610abb565b5091949350505050565b6000610b2c61165c565b610b346116b6565b61012d5460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba3919061226f565b33600090815261012e6020526040812080549293509091606091908067ffffffffffffffff811115610bd757610bd76122ae565b604051908082528060200260200182016040528015610c2c57816020015b610c1960405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610bf55790505b50925060005b81811015610cd5576000838281548110610c4e57610c4e6121b6565b60009182526020909120600390910201600281015481549192509042821015610c8257610c7b81896121e2565b9750610cbf565b60405180606001604052808281526020018460010154815260200183815250878581518110610cb357610cb36121b6565b60200260200101819052505b5050508080610ccd906121fa565b915050610c32565b5033600090815261012e60205260408120610cef9161201c565b825160005b81811015610d9857848181518110610d0e57610d0e6121b6565b602002602001015160200151600014610d865733600090815261012e602052604090208551869083908110610d4557610d456121b6565b602090810291909101810151825460018181018555600094855293839020825160039092020190815591810151928201929092556040909101516002909101555b80610d90816121fa565b915050610cf4565b506060935060008511610df75760405162461bcd60e51b815260206004820152602160248201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f20636c61696044820152606d60f81b60648201526084016106f9565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906122c4565b851115610ed45760405162461bcd60e51b815260206004820152603760248201527f5374616b696e67576974684c6f636b3a20496e73756666696369656e7420626160448201527f6c616e63652c20636865636b206261636b206c6174657200000000000000000060648201526084016106f9565b610ee86001600160a01b038716338761187f565b6040805186815242602082015233917fdaf43f13f8e52679dc580fc78bf80028f7d4ed733283deb8554be3907944533d910160405180910390a260019650505050505050610f36600160c955565b90565b600054610100900460ff1615808015610f595750600054600160ff909116105b80610f735750303b158015610f73575060005460ff166001145b610fd65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106f9565b6000805460ff191660011790558015610ff9576000805461ff0019166101001790555b6110016118e2565b611009611909565b611011611930565b611019611909565b611021611909565b611029611963565b611034600084611993565b61104c60008051602061244f83398151915284611993565b61012d80546001600160a01b0319166001600160a01b038416179055610e1061013055801561095f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6110c161199d565b6110cb60006119f7565b565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061110261165c565b61110a6116b6565b600082116111665760405162461bcd60e51b815260206004820152602360248201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f206465706f6044820152621cda5d60ea1b60648201526084016106f9565b61012d5460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d5919061226f565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611251919061226f565b90506112686001600160a01b038316333087611a49565b6040516340c10f1960e01b8152336004820152602481018590526001600160a01b038216906340c10f19906044016020604051808303816000875af11580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d9919061228c565b506040805185815242602082015233917fa0d1fa51224fb08c7c0b48d481448ad6a31c945d1a68cac8758cac3a92d5001c910161091d565b611319611a87565b61012d546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611388919061226f565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b03166342f065326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611404919061226f565b9050600083116114265760405162461bcd60e51b81526004016106f99061222c565b6040516323b872dd60e01b8152326004820152306024820152604481018490526001600160a01b038316906323b872dd906064016020604051808303816000875af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d919061228c565b50604051630852cd8d60e31b8152600481018490526001600160a01b038316906342966c68906024016020604051808303816000875af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611509919061228c565b50604051630852cd8d60e31b8152600481018490526001600160a01b038216906342966c68906024016020604051808303816000875af1158015611551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611575919061228c565b5060408051848152426020820152339132917f42849e375a18bc47be6ed47fbd7f66156e75e6a652b2b47a4d5842c802d7c81b910160405180910390a3505050565b6000828152606560205260409020600101546115d281611652565b61095f8383611789565b6115e461199d565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f9565b610a02816119f7565b610a028133611b66565b600260c95414156116af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f9565b600260c955565b60975460ff16156110cb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106f9565b600160c955565b61170d82826110cd565b6109de5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556117453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61179382826110cd565b156109de5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6117f8611bbf565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61184a6116b6565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118253390565b6040516001600160a01b03831660248201526044810182905261095f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c08565b600054610100900460ff166116fc5760405162461bcd60e51b81526004016106f9906122dd565b600054610100900460ff166110cb5760405162461bcd60e51b81526004016106f9906122dd565b600054610100900460ff166119575760405162461bcd60e51b81526004016106f9906122dd565b6097805460ff19169055565b600054610100900460ff1661198a5760405162461bcd60e51b81526004016106f9906122dd565b6110cb336119f7565b6109de8282611703565b60fb546001600160a01b031633146110cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f9565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611a819085906323b872dd60e01b906084016118ab565b50505050565b61012d54604051634dd20a0360e11b81523360048201526001600160a01b0390911690639ba4140690602401602060405180830381865afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af4919061228c565b6110cb5760405162461bcd60e51b815260206004820152603f60248201527f5374616b696e67576974684c6f636b3a204f6e6c792041746c616e746973206360448201527f6f6e7472616374732063616e2063616c6c20746869732066756e6374696f6e0060648201526084016106f9565b611b7082826110cd565b6109de57611b7d81611cda565b611b88836020611cec565b604051602001611b99929190612354565b60408051601f198184030181529082905262461bcd60e51b82526106f9916004016123c9565b60975460ff166110cb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106f9565b6000611c5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e8f9092919063ffffffff16565b80519091501561095f5780806020019051810190611c7b919061228c565b61095f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106f9565b60606104a76001600160a01b03831660145b60606000611cfb8360026123fc565b611d069060026121e2565b67ffffffffffffffff811115611d1e57611d1e6122ae565b6040519080825280601f01601f191660200182016040528015611d48576020820181803683370190505b509050600360fc1b81600081518110611d6357611d636121b6565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d9257611d926121b6565b60200101906001600160f81b031916908160001a9053506000611db68460026123fc565b611dc19060016121e2565b90505b6001811115611e39576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611df557611df56121b6565b1a60f81b828281518110611e0b57611e0b6121b6565b60200101906001600160f81b031916908160001a90535060049490941c93611e328161241b565b9050611dc4565b508315611e885760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106f9565b9392505050565b6060611e9e8484600085611ea6565b949350505050565b606082471015611f075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106f9565b600080866001600160a01b03168587604051611f239190612432565b60006040518083038185875af1925050503d8060008114611f60576040519150601f19603f3d011682016040523d82523d6000602084013e611f65565b606091505b5091509150611f7687838387611f81565b979650505050505050565b60608315611fed578251611fe6576001600160a01b0385163b611fe65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106f9565b5081611e9e565b611e9e83838151156120025781518083602001fd5b8060405162461bcd60e51b81526004016106f991906123c9565b5080546000825560030290600052602060002090810190610a0291905b8082111561205a576000808255600182018190556002820155600301612039565b5090565b6001600160a01b0381168114610a0257600080fd5b60006020828403121561208557600080fd5b8135611e888161205e565b6000602082840312156120a257600080fd5b81356001600160e01b031981168114611e8857600080fd5b6000602082840312156120cc57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561211f57815180518552868101518786015285015185850152606090930192908501906001016120f0565b5091979650505050505050565b6000806040838503121561213f57600080fd5b823561214a8161205e565b946020939093013593505050565b6000806040838503121561216b57600080fd5b82359150602083013561217d8161205e565b809150509250929050565b6000806040838503121561219b57600080fd5b82356121a68161205e565b9150602083013561217d8161205e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156121f5576121f56121cc565b500190565b600060001982141561220e5761220e6121cc565b5060010190565b600082821015612227576122276121cc565b500390565b60208082526023908201527f5374616b696e67576974684c6f636b3a204e6f7468696e6720746f20756e7374604082015262616b6560e81b606082015260800190565b60006020828403121561228157600080fd5b8151611e888161205e565b60006020828403121561229e57600080fd5b81518015158114611e8857600080fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156122d657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b8381101561234357818101518382015260200161232b565b83811115611a815750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161238c816017850160208801612328565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123bd816028840160208801612328565b01602801949350505050565b60208152600082518060208401526123e8816040850160208701612328565b601f01601f19169190910160400192915050565b6000816000190483118215151615612416576124166121cc565b500290565b60008161242a5761242a6121cc565b506000190190565b60008251612444818460208701612328565b919091019291505056fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212204abc52082a62fcfbe56375c02ac1078d6c85c59d1881431e82045f69913f10f864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__StakingWithLock_init(address,address)": {
        "params": {
          "_admin": "address of the admin."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseContract()": {
        "details": "Can only be called by pauser role."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAtlantisRegistry(address)": {
        "params": {
          "_addressRegistry": "address of Atlantis Registry"
        }
      },
      "stake(uint256)": {
        "params": {
          "_amount": "amount of gold tokens to stake."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Can only be called by pauser role."
      },
      "unstake(uint256)": {
        "params": {
          "_amount": "amount of stardust tokens to unstake."
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "StakingWithLock",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__StakingWithLock_init(address,address)": {
        "notice": "Initialises StakingWithLock contract with the required addresses."
      },
      "claim()": {
        "notice": "Function to claim after the unstaking period of Stardust."
      },
      "getUserClaimableGold(address)": {
        "notice": "View user's claimable Gold."
      },
      "getUserPendingUnstakes(address)": {
        "notice": "View user's pending unstakes."
      },
      "getUserTotalGoldPendingUnstake(address)": {
        "notice": "View user's total amount of Gold that is pending unstake (includes Gold that are not yet claimed)."
      },
      "pauseContract()": {
        "notice": "Pauses contract."
      },
      "setAtlantisRegistry(address)": {
        "notice": "Set Atlantis Registry"
      },
      "stake(uint256)": {
        "notice": "Stake gold tokens in exchange for stardust tokens."
      },
      "unpause()": {
        "notice": "Unpauses contract."
      },
      "unstake(uint256)": {
        "notice": "Initiate unstake of stardust tokens which will require unstaking period before claiming."
      }
    },
    "notice": "StakingWithLock is the contract that allows users to stake their gold tokens and receive stardust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1629,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1848,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 730,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 835,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 908,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3437,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(AtlantisAddressRegistry)3401"
      },
      {
        "astId": 3443,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "unstakeInfo",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_array(t_struct(Unstake)3434_storage)dyn_storage)"
      },
      {
        "astId": 3447,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3449,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "unstakeTime",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 3517,
        "contract": "contracts/StakingWithLock.sol:StakingWithLock",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Unstake)3434_storage)dyn_storage": {
        "base": "t_struct(Unstake)3434_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingWithLock.Unstake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AtlantisAddressRegistry)3401": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Unstake)3434_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingWithLock.Unstake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Unstake)3434_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StakingWithLock.sol:StakingWithLock",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StakingWithLock.sol:StakingWithLock",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Unstake)3434_storage": {
        "encoding": "inplace",
        "label": "struct StakingWithLock.Unstake",
        "members": [
          {
            "astId": 3429,
            "contract": "contracts/StakingWithLock.sol:StakingWithLock",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3431,
            "contract": "contracts/StakingWithLock.sol:StakingWithLock",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3433,
            "contract": "contracts/StakingWithLock.sol:StakingWithLock",
            "label": "claimTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}