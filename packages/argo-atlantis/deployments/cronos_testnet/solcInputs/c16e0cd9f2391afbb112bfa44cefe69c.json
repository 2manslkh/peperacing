{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/AtlantisAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./common/AddressRegistry.sol\";\r\n\r\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\r\n    bytes32 private constant ARGONAUTS = \"ARGONAUTS\";\r\n    bytes32 private constant ARGO = \"ARGO\";\r\n    bytes32 private constant XARGO = \"XARGO\";\r\n    bytes32 private constant GOLD = \"GOLD\";\r\n    bytes32 private constant STARDUST = \"STARDUST\";\r\n    bytes32 private constant ATLANTIS = \"ATLANTIS\";\r\n    bytes32 private constant ATLANTIS_PLANETS = \"ATLANTIS_PLANETS\";\r\n    bytes32 private constant STAKING_WITH_LOCK = \"STAKING_WITH_LOCK\";\r\n    bytes32 private constant ATLANTIS_GEMSTONES = \"GEMSTONES\";\r\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \"EQUIPMENTS\";\r\n    bytes32 private constant ATLANTIS_SPACESHIPS = \"SPACESHIPS\";\r\n    bytes32 private constant ATLANTIS_RACING = \"RACING\";\r\n    bytes32 private constant ATLANTIS_MARKETPLACE = \"MARKETPLACE\";\r\n    bytes32 private constant ATLANTIS_AUCTION = \"AUCTION\";\r\n    bytes32 private constant STARDUST_PLEDGING = \"PLEDGING\";\r\n    bytes32 private constant GOLD_STAKING = \"GOLD_STAKING\";\r\n    mapping(address => bool) private _addresses;\r\n\r\n    function setArgonauts(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGONAUTS, contractAddress);\r\n    }\r\n\r\n    function setArgo(address contractAddress) external onlyOwner {\r\n        _setAddress(ARGO, contractAddress);\r\n    }\r\n\r\n    function setXargo(address contractAddress) external onlyOwner {\r\n        _setAddress(XARGO, contractAddress);\r\n    }\r\n\r\n    function setGold(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD, contractAddress);\r\n    }\r\n\r\n    function setStardust(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST, contractAddress);\r\n    }\r\n\r\n    function setAtlantis(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS, contractAddress);\r\n    }\r\n\r\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\r\n    }\r\n\r\n    function setStakingWithLock(address contractAddress) external onlyOwner {\r\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\r\n    }\r\n\r\n    function setGemstones(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\r\n    }\r\n\r\n    function setEquipments(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\r\n    }\r\n\r\n    function setSpaceships(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\r\n    }\r\n\r\n    function setRacing(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_RACING, contractAddress);\r\n    }\r\n\r\n    function setMarketplace(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\r\n    }\r\n\r\n    function setAuction(address contractAddress) external onlyOwner {\r\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\r\n    }\r\n\r\n    function setPledging(address contractAddress) external onlyOwner {\r\n        _setAddress(STARDUST_PLEDGING, contractAddress);\r\n    }\r\n\r\n    function setGoldStaking(address contractAddress) external onlyOwner {\r\n        _setAddress(GOLD_STAKING, contractAddress);\r\n    }\r\n\r\n    function getArgonauts() external view returns (address) {\r\n        return getAddress(ARGONAUTS);\r\n    }\r\n\r\n    function getArgo() external view returns (address) {\r\n        return getAddress(ARGO);\r\n    }\r\n\r\n    function getXargo() external view returns (address) {\r\n        return getAddress(XARGO);\r\n    }\r\n\r\n    function getGold() external view returns (address) {\r\n        return getAddress(GOLD);\r\n    }\r\n\r\n    function getStardust() external view returns (address) {\r\n        return getAddress(STARDUST);\r\n    }\r\n\r\n    function getAtlantis() public view returns (address) {\r\n        return getAddress(ATLANTIS);\r\n    }\r\n\r\n    function getAtlantisPlanets() public view returns (address) {\r\n        return getAddress(ATLANTIS_PLANETS);\r\n    }\r\n\r\n    function getStakingWithLock() external view returns (address) {\r\n        return getAddress(STAKING_WITH_LOCK);\r\n    }\r\n\r\n    function getGemstones() public view returns (address) {\r\n        return getAddress(ATLANTIS_GEMSTONES);\r\n    }\r\n\r\n    function getEquipments() public view returns (address) {\r\n        return getAddress(ATLANTIS_EQUIPMENTS);\r\n    }\r\n\r\n    function getSpaceships() external view returns (address) {\r\n        return getAddress(ATLANTIS_SPACESHIPS);\r\n    }\r\n\r\n    function getRacing() external view returns (address) {\r\n        return getAddress(ATLANTIS_RACING);\r\n    }\r\n\r\n    function getMarketplace() external view returns (address) {\r\n        return getAddress(ATLANTIS_MARKETPLACE);\r\n    }\r\n\r\n    function getAuction() external view returns (address) {\r\n        return getAddress(ATLANTIS_AUCTION);\r\n    }\r\n\r\n    function getPledging() external view returns (address) {\r\n        return getAddress(STARDUST_PLEDGING);\r\n    }\r\n\r\n    function getGoldStaking() external view returns (address) {\r\n        return getAddress(GOLD_STAKING);\r\n    }\r\n\r\n    function isControllerContract(address _contractAddress) external view returns (bool) {\r\n        if (\r\n            _contractAddress == getAtlantis() ||\r\n            _contractAddress == getGemstones() ||\r\n            _contractAddress == getAtlantisPlanets() ||\r\n            _contractAddress == getEquipments()\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "contracts/AtlantisFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./AtlantisAddressRegistry.sol\";\r\n\r\n// Official incentivised testnet version\r\ncontract AtlantisFaucet is Ownable {\r\n    // Whitelist Mapping\r\n    mapping(address => bool) public whitelisted;\r\n    mapping(address => bool) public dripped;\r\n    AtlantisAddressRegistry public addressRegistry;\r\n\r\n    // // onlyWhitelisted modifier\r\n    // modifier onlyWhitelisted() {\r\n    //     require(whitelisted[msg.sender], \"Faucet: Not whitelisted\");\r\n    //     _;\r\n    // }\r\n\r\n    // receive\r\n    receive() external payable {}\r\n\r\n    constructor(AtlantisAddressRegistry _addressRegistry) {\r\n        addressRegistry = _addressRegistry;\r\n        whitelisted[msg.sender] = true;\r\n    }\r\n\r\n    function drip() external {\r\n        //  require(!dripped[msg.sender], \"Faucet: Already dripped\");\r\n        address argonauts = addressRegistry.getArgonauts();\r\n        address equipment = addressRegistry.getEquipments();\r\n        address gemstones = addressRegistry.getGemstones();\r\n        address spaceships = addressRegistry.getSpaceships();\r\n        address planets = addressRegistry.getAtlantisPlanets();\r\n        address xargo = addressRegistry.getXargo();\r\n        address gold = addressRegistry.getGold();\r\n\r\n        // Transfer 500 cro to user\r\n        //payable(msg.sender).transfer(500 ether);\r\n\r\n        // Transfer 750000 xArgo to user\r\n        (bool success, ) = xargo.call(abi.encodeWithSignature(\"devMint(uint256)\", 750000 ether));\r\n        require(success, \"Faucet: xargo mint failed\");\r\n\r\n        // Transfer 1000000 gold to user\r\n        (success, ) = gold.call(abi.encodeWithSignature(\"mint(uint256)\", 1000000 ether));\r\n        require(success, \"Faucet: gold mint failed\");\r\n\r\n        // devMint Gemstones\r\n        for (uint8 i = 1; i <= 3; i++) {\r\n            (success, ) = gemstones.call(\r\n                abi.encodeWithSignature(\"airdrop(address,uint256,uint256,bytes)\", msg.sender, 1, 100000, \"0x\")\r\n            );\r\n            require(success, \"Faucet: gemstone mint failed\");\r\n            (success, ) = equipment.call(\r\n                abi.encodeWithSignature(\"airdrop(address,uint256,uint256,bytes)\", msg.sender, 1, 100000, \"0x\")\r\n            );\r\n            require(success, \"Faucet: equipment mint failed\");\r\n        }\r\n        // devMint Argonauts using external call\r\n        (success, ) = argonauts.call(abi.encodeWithSignature(\"mint(uint256)\", 30));\r\n        require(success, \"Faucet: argonaut mint failed\");\r\n\r\n        // devMint Spaceships\r\n        uint8[] memory spaceshipRarity = new uint8[](3);\r\n        spaceshipRarity[0] = 0;\r\n        spaceshipRarity[1] = 1;\r\n        spaceshipRarity[2] = 2;\r\n        address[] memory addresses = new address[](3);\r\n        addresses[0] = msg.sender;\r\n        addresses[1] = msg.sender;\r\n        addresses[2] = msg.sender;\r\n        (success, ) = spaceships.call(\r\n            abi.encodeWithSignature(\"airdrop(address[],uint256[])\", addresses, spaceshipRarity)\r\n        );\r\n        require(success, \"Faucet: spaceship mint failed\");\r\n        // devMint Planets\r\n        (success, ) = planets.call(abi.encodeWithSignature(\"faucetMint(address)\", msg.sender));\r\n        require(success, \"Faucet: planet mint failed\");\r\n\r\n        // dripped[msg.sender] = true;\r\n    }\r\n\r\n    function whitelistAddresses(address[] calldata _addresses) external onlyOwner {\r\n        for (uint256 i; i < _addresses.length; i++) {\r\n            whitelisted[_addresses[i]] = true;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/common/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\n\r\ncontract AddressRegistry {\r\n    mapping(bytes32 => address) public addresses;\r\n\r\n    function getAddress(bytes32 _identifier) public view returns (address) {\r\n        return addresses[_identifier];\r\n    }\r\n\r\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\r\n        addresses[_identifier] = contractAddress;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}