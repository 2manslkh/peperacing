{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AtlanteanTrove.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/// @title AtlanteanTrove Quest Rewards Claiming Contract\r\n/// @author Kratos\r\n/*\r\n                                                  #                             \r\n                                               .%%%%%%%%                        \r\n                                                %%%%%%%%%,                      \r\n                                               /%%%%%%%%%                       \r\n                                               %%%%%%%%%%                       \r\n                                               %%%%%%%%%(                       \r\n                                              (%%%%%%%%%                        \r\n                                              %%%%%%%%%#                        \r\n                                             %%%%%%%%%%                         \r\n                                            #%%%%%%%%%%                         \r\n                                  *%&/ *   #%%%%%%%%%% #,.#.                    \r\n                   .            ,         %%%%%%%%%%% .@@@#                     \r\n                   @&@@@#,     @         %%%%%%%%%%%                            \r\n                              @         %%%%%%%%%%%%       #,                   \r\n                   , .       @            %%%%%%%%%%%#                          \r\n                 ,   ,%.    .               %%%%%%%%%%% /@@@@@ *                \r\n                   @@@@@@@@@@              * /%%%%%%@@@@( &@@@@                 \r\n                  @@@&@        @@@/ .@*     @@%@@@%%%&@@@%  %.    @             \r\n            @      @@@@&( @@@   @@@@@@      @@@@@@   @@.(&.       @             \r\n           (@  / .(   %@@@@@@%(@@@@@@         @@@.%%%%%%%%%*      @@@           \r\n           @@@  #       @//  **@@@   @      @      %&%%%#%%%%,    @@/           \r\n           @@@   @      @             @    @        (%%%&%%%%     @@@,          \r\n         %@@@@@  @@    @.             .    @          %%%%%/     @@@@@          \r\n         @@@.@@@ @@@@   %@        @, (       ( @      .%%%   &@ @@@@@@          \r\n         &@@@#@@@@/.@@@          ,               (     /%# ,@/ @@@@@@@          \r\n        @&@@#@@*@&@@@ @@@@@&    (#.@          @@@    #  #  @  @@@@@@@@,         \r\n        (@@@@@@@@@@@@@@ @@     &@&@@@@%     (@@@@@@@        @@@@@@@(@@@         \r\n        @@@,@@@@*@@&@@@@.@@@ @@*@@.@*@@@@@&(@@@@@@@@@@@(   @@@@/@@@ @@          \r\n         @@@@@@@&@%@@@@@@@@@ @/.@#@@@@@@(@@ @@@@@@*@*@@@@@@@@@..@@@.@@@(        \r\n         @@@@@@,@@@@@%@@@ @ @.&@@@,@ @@.@@@@@/(@@@.@@@@@@@@@(@@@(@@@*@@         \r\n         @@@@ @@@@@@#@#@.@@*@((@@&@@,#        #@&@@@@%@@@@@@,@#@@@@@@@ &        \r\n         @@@@@@@@(@@@&@@@@@@@@@@@    ,  .,.#//(& @*@@@#@@ @@@,@@@.@@@@#         \r\n         @@@(@@@@@@@@@@ @,@@@@@@@,@@@@@@@@@@@@@#@@/@@@@@@@@@@@@&@@@@@@          \r\n          ,@ @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@,@@#@@@@@@@@@@,@@@@@@/@@@@           \r\n            @#@@@@(@@@ @@, @@@@@@@@*@@@@@.@@(@@@@*@ @@@@@@@@@@@@(@@             \r\n              @@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .            \r\n               @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@%@@@@/@@@@@@,@@@@&              \r\n                @@ @@@%@@&@@.@@@@*@@@#@@@@@@@@.@@@@@@@@#%@@@@@@@@               \r\n                  @@@@@@@@@@@@@ @@@@ @@@,(@@@@@@@@@@@@@@@#@@@ #                 \r\n                    @@@@@@@@@@,@@@@@&@@@@@@@@@@@@@@@@@.@@@@@                    \r\n                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@                      \r\n                        @ @@@@@@@,@@@@@@@#@@@@@@@@@ (@@@*                       \r\n                         @@@(@@@@@ @@@*@@@@@@@@@@,@@@&&                         \r\n                            @@@@@@@@@@ @@@@@@@@@@@@@@                           \r\n                               @@(@@@@@@@@@@@(@@@@@@                            \r\n                                  @.@@@@*@@&.@@@@@*      \r\n*/\r\n\r\ncontract AtlanteanTrove is IERC1155Receiver, ReentrancyGuard {\r\n    using ECDSA for bytes32;\r\n\r\n    /// @notice Mapping of round to user address to their claim status\r\n    mapping(uint256 => mapping(address => bool)) private hasClaimed;\r\n\r\n    /// @notice Mapping of round to Round details\r\n    mapping(uint256 => Round) public roundTime;\r\n\r\n    /// @notice Mapping to track each round rewards\r\n    mapping(uint256 => Reward) internal roundRewards;\r\n\r\n    /// @notice Mapping to track each round amounts\r\n    mapping(uint256 => Amount) internal roundAmounts;\r\n\r\n    /// @notice Variable to track current round\r\n    uint256 public currentRound = 0;\r\n\r\n    /// @notice The address of the admin\r\n    address public admin;\r\n\r\n    /// @notice The address of the controller\r\n    address public controller;\r\n\r\n    /// @notice The address of the whitelist signer\r\n    address public whitelistSignerAddress;\r\n\r\n    /// Reward structs\r\n\r\n    /// @notice Defines how much a single instance of claimable ERC-20 reward is worth\r\n    struct RewardERC20 {\r\n        address tokenAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    /// @notice Defines how much a single instance of claimable ERC-721 reward is worth\r\n    struct RewardERC721 {\r\n        address tokenAddress;\r\n        uint256[] tokenIds;\r\n        uint256 index;\r\n    }\r\n\r\n    /// @notice Defines how much a single instance of claimable ERC-1155 reward is worth\r\n    struct RewardERC1155 {\r\n        address tokenAddress;\r\n        uint256[] tokenIds;\r\n        uint256[] amounts;\r\n    }\r\n\r\n    /// @notice Defines how much a single instance of total rewards claimable is worth\r\n    struct Reward {\r\n        RewardERC20[] erc20Rewards;\r\n        RewardERC721[] erc721Rewards;\r\n        RewardERC1155[] erc1155Rewards;\r\n    }\r\n\r\n    /// Accounting structs\r\n\r\n    /// @notice Struct used to track amount of ERC-20 in the contract in a specific round\r\n    struct RewardERC20Amount {\r\n        address tokenAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    /// @notice Struct used to track amount of ERC-721 in the contract in a specific round\r\n    struct RewardERC721Amount {\r\n        address tokenAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    /// @notice Struct used to track amount of ERC-1155 in the contract in a specific round\r\n    struct RewardERC1155Amount {\r\n        address tokenAddress;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n    }\r\n\r\n    /// @notice Struct used to track amount of rewards in the contract in a specific round\r\n    struct Amount {\r\n        RewardERC20Amount[] erc20Amount;\r\n        RewardERC721Amount[] erc721Amount;\r\n        RewardERC1155Amount[][] erc1155Amount;\r\n    }\r\n\r\n    /// @notice Struct used for managing rewards by admin\r\n    struct RewardData {\r\n        uint256 round;\r\n        RewardERC20[] erc20Rewards;\r\n        uint256[] erc20Amounts;\r\n        RewardERC721[] erc721Rewards;\r\n        uint256[] erc721Amounts;\r\n        RewardERC1155[] erc1155Rewards;\r\n        uint256[][] erc1155Amounts;\r\n    }\r\n\r\n    /// @notice Struct used for managing rounds\r\n    struct Round {\r\n        uint256 startTime;\r\n        uint256 expiryTimestamp;\r\n    }\r\n\r\n    // Events\r\n    event SetRoundExpiry(uint256 round, uint256 expiryTimestamp);\r\n    event SetController(address controller);\r\n    event SetAdmin(address admin);\r\n    event SetWhitelistSignerAddress(address whitelistSignerAddress);\r\n    event StartNewRound(uint256 round, uint256 startTime, uint256 expiryTimestamp);\r\n    event ClaimRewards(uint256 round, address indexed user, Amount amount);\r\n    event AddRewards(uint256 round, RewardData rewardData);\r\n    event RemoveRewards(uint256 round, RewardData rewardData);\r\n\r\n    constructor(address _controller, address _whitelistSignerAddress) {\r\n        admin = msg.sender;\r\n        controller = _controller;\r\n        whitelistSignerAddress = _whitelistSignerAddress;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Only admin can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller, \"Only controller can call this function.\");\r\n        _;\r\n    }\r\n\r\n    // Admin functions\r\n\r\n    /**\r\n     * @dev Set round expiry timestamp\r\n     * @param _round Round number\r\n     * @param expiryTimestamp Expiry timestamp for the round\r\n     */\r\n    function setRoundExpiry(uint256 _round, uint256 expiryTimestamp) external onlyAdmin {\r\n        // Round expiry can only be set in the future\r\n        require(expiryTimestamp > block.timestamp, \"Expiry timestamp must be in future.\");\r\n        // Set round expiry timestamp\r\n        roundTime[_round].expiryTimestamp = expiryTimestamp;\r\n        // Emit event\r\n        emit SetRoundExpiry(_round, expiryTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Set address of controller EOA\r\n     * @param _controller Address of controller EOA\r\n     */\r\n    function setController(address _controller) external onlyAdmin {\r\n        // Set controller address\r\n        controller = _controller;\r\n        // Emit event\r\n        emit SetController(_controller);\r\n    }\r\n\r\n    /**\r\n     * @dev Set address of admin EOA\r\n     * @param _admin Address of admin EOA\r\n     */\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        // Set admin address\r\n        admin = _admin;\r\n        // Emit event\r\n        emit SetAdmin(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new whitelist signer address\r\n     * @param _whitelistSignerAddress Address of new whitelist signer\r\n     */\r\n    function setWhitelistSignerAddress(address _whitelistSignerAddress) external onlyAdmin {\r\n        // Set whitelist signer address\r\n        whitelistSignerAddress = _whitelistSignerAddress;\r\n        // Emit event\r\n        emit SetWhitelistSignerAddress(_whitelistSignerAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Top up rewards for a round, only for admin\r\n     * @param data Reward data\r\n     */\r\n    function topUpRewards(RewardData calldata data) external onlyAdmin {\r\n        // Handle ERC20 rewards\r\n        if (data.erc20Rewards.length > 0) {\r\n            _handleERC20Rewards(data);\r\n        }\r\n        // Handle ERC721 rewards\r\n        if (data.erc721Rewards.length > 0) {\r\n            _handleERC721Rewards(data);\r\n        }\r\n        // Handle ERC1155 rewards\r\n        if (data.erc1155Rewards.length > 0) {\r\n            _handleERC1155Rewards(data);\r\n        }\r\n\r\n        // Emit event\r\n        emit AddRewards(data.round, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove rewards for a round, only for admin\r\n     * @param data Reward data\r\n     */\r\n    function removeRewards(RewardData calldata data) external onlyAdmin {\r\n        // Cannot remove rewards if round is already started\r\n        require(data.round != currentRound, \"Cannot modify rewards for ongoing round.\");\r\n        // Remove ERC20 rewards and transfer back to admin\r\n        if (roundRewards[data.round].erc20Rewards.length > 0) {\r\n            // Transfer rewards to admin\r\n            for (uint256 i = 0; i < roundRewards[data.round].erc20Rewards.length; ) {\r\n                require(\r\n                    IERC20(roundRewards[data.round].erc20Rewards[i].tokenAddress).transfer(\r\n                        admin,\r\n                        data.erc20Amounts[i]\r\n                    ),\r\n                    \"Transfer failed.\"\r\n                );\r\n                roundAmounts[data.round].erc20Amount[i].amount-=data.erc20Amounts[i];\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            // If round is not in the past, delete rewards\r\n            if (data.round > currentRound) {\r\n                delete roundRewards[data.round].erc20Rewards;\r\n                delete roundAmounts[data.round].erc20Amount;\r\n            }\r\n        }\r\n        // Remove ERC721 rewards and transfer back to admin\r\n        if (roundRewards[data.round].erc721Rewards.length > 0) {\r\n            // Transfer rewards to admin\r\n\r\n            for (uint256 i = 0; i < roundRewards[data.round].erc721Rewards.length; ) {\r\n                uint256 _index = roundRewards[data.round].erc721Rewards[i].index;\r\n                for (\r\n                    uint256 j = 0;\r\n                    j <\r\n                    roundRewards[data.round].erc721Rewards[i].tokenIds.length -\r\n                        roundRewards[data.round].erc721Rewards[i].index;\r\n\r\n                ) {\r\n                    IERC721(roundRewards[data.round].erc721Rewards[i].tokenAddress).transferFrom(\r\n                        address(this),\r\n                        admin,\r\n                        roundRewards[data.round].erc721Rewards[i].tokenIds[_index]\r\n                    );\r\n\r\n                    roundAmounts[data.round].erc721Amount[i].amount-=1;\r\n                    unchecked {\r\n                        _index++;\r\n                        j++;\r\n                    }\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            // If round is not in the past, delete rewards\r\n            if (data.round > currentRound) {\r\n                delete roundRewards[data.round].erc721Rewards;\r\n                delete roundAmounts[data.round].erc721Amount;\r\n            }\r\n        }\r\n\r\n        // Remove ERC1155 rewards and transfer back to admin\r\n        if (roundRewards[data.round].erc1155Rewards.length > 0)\r\n            // Transfer rewards to admin\r\n            for (uint256 i = 0; i < roundRewards[data.round].erc1155Rewards.length; ) {\r\n                for (uint256 j = 0; j < roundRewards[data.round].erc1155Rewards[i].tokenIds.length; ) {\r\n                    IERC1155(roundRewards[data.round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\r\n                        address(this),\r\n                        admin,\r\n                        roundRewards[data.round].erc1155Rewards[i].tokenIds[j],\r\n                        data.erc1155Amounts[i][j],\r\n                        \"\"\r\n                    );\r\n                    roundAmounts[data.round].erc1155Amount[i][j].amount-=data.erc1155Amounts[i][j];\r\n                    unchecked {\r\n                        j++;\r\n                    }\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n\r\n                if (data.round > currentRound) // If round is not in the past, delete rewards\r\n                {\r\n                    delete roundRewards[data.round].erc1155Rewards;\r\n                    delete roundAmounts[data.round].erc1155Amount;\r\n                }\r\n            }\r\n        emit RemoveRewards(data.round, data);\r\n    }\r\n\r\n    // Controller functions\r\n\r\n    /**\r\n     * @dev Start a new round for controller only\r\n     * @param expiryTimestamp Expiry timestamp for the round\r\n     */\r\n    function startNewRound(uint256 startTime, uint256 expiryTimestamp) external onlyController {\r\n        // Timestamp must be in future\r\n        require(expiryTimestamp > block.timestamp, \"Expiry timestamp must be in future.\");\r\n        // Increment currentRound\r\n        currentRound++;\r\n        // Save round details\r\n        roundTime[currentRound] = Round(startTime, expiryTimestamp);\r\n        // Emit event\r\n        emit StartNewRound(currentRound, startTime, expiryTimestamp);\r\n    }\r\n\r\n    // View functions\r\n\r\n    /**\r\n     * @notice Get user claim status for a round\r\n     * @param _round Round number\r\n     * @param user Address of user\r\n     */\r\n    function hasUserClaimed(uint256 _round, address user) public view returns (bool) {\r\n        return hasClaimed[_round][user];\r\n    }\r\n\r\n    /**\r\n     * @notice Get round rewards\r\n     * @param _round Round number\r\n     */\r\n    function getRoundRewards(uint256 _round) external view returns (Reward memory) {\r\n        return roundRewards[_round];\r\n    }\r\n\r\n    /**\r\n     * @notice Get round amounts\r\n     * @param _round Round number\r\n     */\r\n    function getRoundAmounts(uint256 _round) external view returns (Amount memory) {\r\n        return roundAmounts[_round];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the the signature is signed by a valid signer for whitelist\r\n     * @param sender Address of minter\r\n     * @param _round Round number\r\n     * @param nonce Random bytes32 nonce\r\n     * @param signature Signature generated off-chain\r\n     */\r\n    function whitelistSigned(\r\n        address sender,\r\n        uint256 _round,\r\n        bytes memory nonce,\r\n        bytes memory signature\r\n    ) public view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(sender, nonce, _round));\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        hash = keccak256(abi.encodePacked(prefix, hash));\r\n        return whitelistSignerAddress == hash.recover(signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims rewards for a round\r\n     * @param _round Round number\r\n     * @param nonce Random bytes32 nonce\r\n     * @param signature Signature generated off-chain\r\n     */\r\n    function claimRewards(uint256 _round, bytes memory nonce, bytes memory signature) external nonReentrant {\r\n        // Check if user is whitelisted\r\n        require(whitelistSigned(msg.sender, _round, nonce, signature), \"Invalid Signature!\");\r\n        // Check if user has already claimed\r\n        require(!hasUserClaimed(_round, msg.sender), \"User has already claimed rewards.\");\r\n        // Check if round has expired\r\n        require(block.timestamp <= roundTime[_round].expiryTimestamp, \"Round has expired.\");\r\n        // Check if round has started\r\n        require(block.timestamp >= roundTime[_round].startTime, \"Round has not started.\");\r\n        // Mark user as claimed\r\n        hasClaimed[_round][msg.sender] = true;\r\n        // Initialise variables for events logging\r\n        Amount memory claimedAmounts;\r\n        claimedAmounts.erc20Amount = new RewardERC20Amount[](roundRewards[_round].erc20Rewards.length);\r\n        claimedAmounts.erc721Amount = new RewardERC721Amount[](roundRewards[_round].erc721Rewards.length);\r\n        claimedAmounts.erc1155Amount = new RewardERC1155Amount[][](roundRewards[_round].erc1155Rewards.length);\r\n\r\n        // If there are ERC20 token rewards, transfer\r\n        if (roundRewards[_round].erc20Rewards.length > 0) {\r\n            for (uint256 i = 0; i < roundRewards[_round].erc20Rewards.length; ) {\r\n                // Reduce amount of reward amount after transfer\r\n                roundAmounts[_round].erc20Amount[i].amount -= roundRewards[_round].erc20Rewards[i].amount;\r\n                // Record amount for event logging\r\n                claimedAmounts.erc20Amount[i].tokenAddress = roundRewards[_round].erc20Rewards[i].tokenAddress;\r\n                claimedAmounts.erc20Amount[i].amount = roundRewards[_round].erc20Rewards[i].amount;\r\n                require(\r\n                    IERC20(roundRewards[_round].erc20Rewards[i].tokenAddress).transfer(\r\n                        msg.sender,\r\n                        roundRewards[_round].erc20Rewards[i].amount\r\n                    ),\r\n                    \"Transfer failed\"\r\n                );\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If there are ERC721 token rewards, transfer\r\n        if (roundRewards[_round].erc721Rewards.length > 0) {\r\n            for (uint256 i = 0; i < roundRewards[_round].erc721Rewards.length; ) {\r\n                // Reduce amount of reward amount after transfer\r\n                roundAmounts[_round].erc721Amount[i].amount -= 1;\r\n                // Record amount for event logging\r\n                claimedAmounts.erc721Amount[i].tokenAddress = roundRewards[_round].erc721Rewards[i].tokenAddress;\r\n                claimedAmounts.erc721Amount[i].amount = 1;\r\n                IERC721(roundRewards[_round].erc721Rewards[i].tokenAddress).transferFrom(\r\n                    address(this),\r\n                    msg.sender,\r\n                    roundRewards[_round].erc721Rewards[i].tokenIds[roundRewards[_round].erc721Rewards[i].index]\r\n                );\r\n                // Increment index\r\n                unchecked {\r\n                    roundRewards[_round].erc721Rewards[i].index++;\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If there are ERC1155 token rewards, transfer\r\n        if (roundRewards[_round].erc1155Rewards.length > 0) {\r\n            for (uint256 i = 0; i < roundRewards[_round].erc1155Rewards.length; ) {\r\n                claimedAmounts.erc1155Amount[i] = new RewardERC1155Amount[](\r\n                    roundRewards[_round].erc1155Rewards[i].tokenIds.length\r\n                );\r\n                for (uint256 j = 0; j < roundRewards[_round].erc1155Rewards[i].tokenIds.length; ) {\r\n                    // Reduce amount of reward amount after transfer\r\n                    roundAmounts[_round].erc1155Amount[i][j].amount -= roundRewards[_round].erc1155Rewards[i].amounts[\r\n                        j\r\n                    ];\r\n                    // Record amount for event logging\r\n                    claimedAmounts.erc1155Amount[i][j].tokenAddress = roundRewards[_round]\r\n                        .erc1155Rewards[i]\r\n                        .tokenAddress;\r\n                    claimedAmounts.erc1155Amount[i][j].tokenId = roundRewards[_round].erc1155Rewards[i].tokenIds[j];\r\n                    claimedAmounts.erc1155Amount[i][j].amount = roundRewards[_round].erc1155Rewards[i].amounts[j];\r\n                    IERC1155(roundRewards[_round].erc1155Rewards[i].tokenAddress).safeTransferFrom(\r\n                        address(this),\r\n                        msg.sender,\r\n                        roundRewards[_round].erc1155Rewards[i].tokenIds[j],\r\n                        roundRewards[_round].erc1155Rewards[i].amounts[j],\r\n                        \"\"\r\n                    );\r\n                    unchecked {\r\n                        j++;\r\n                    }\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // Emit event\r\n        emit ClaimRewards(_round, msg.sender, claimedAmounts);\r\n    }\r\n\r\n    // Internal helper functions\r\n\r\n    function _handleERC20Rewards(RewardData calldata data) internal {\r\n        if (roundRewards[data.round].erc20Rewards.length == 0) {\r\n            // Add rewards to round\r\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\r\n                roundRewards[data.round].erc20Rewards.push(data.erc20Rewards[i]);\r\n                roundAmounts[data.round].erc20Amount.push(\r\n                    RewardERC20Amount(data.erc20Rewards[i].tokenAddress, data.erc20Amounts[i])\r\n                );\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        } else {\r\n            // Already existing rewards cannot change reward amount, can only top up reward\r\n            // Ensure that the token address is the same\r\n            for (uint256 i = 0; i < data.erc20Rewards.length; ) {\r\n                require(\r\n                    roundRewards[data.round].erc20Rewards[i].tokenAddress == data.erc20Rewards[i].tokenAddress,\r\n                    \"Token address cannot be changed.\"\r\n                );\r\n                roundAmounts[data.round].erc20Amount[i].amount += data.erc20Amounts[i];\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // Transfer ERC20 tokens to contract\r\n        for (uint256 i = 0; i < data.erc20Rewards.length; ) {\r\n            require(\r\n                IERC20(data.erc20Rewards[i].tokenAddress).transferFrom(msg.sender, address(this), data.erc20Amounts[i]),\r\n                \"Transfer failed\"\r\n            );\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _handleERC721Rewards(RewardData calldata data) internal {\r\n        // No existing rewards\r\n        if (roundRewards[data.round].erc721Rewards.length == 0) {\r\n            // Add rewards to round\r\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\r\n                roundRewards[data.round].erc721Rewards.push(data.erc721Rewards[i]);\r\n                roundAmounts[data.round].erc721Amount.push(\r\n                    RewardERC721Amount(data.erc721Rewards[i].tokenAddress, data.erc721Amounts[i])\r\n                );\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        } else {\r\n            // Already existing rewards cannot change reward amount, can only top up reward\r\n            // Ensure that the token address is the same\r\n            for (uint256 i = 0; i < data.erc721Rewards.length; ) {\r\n                require(\r\n                    roundRewards[data.round].erc721Rewards[i].tokenAddress == data.erc721Rewards[i].tokenAddress,\r\n                    \"Token address cannot be changed.\"\r\n                );\r\n                if (roundRewards[data.round].erc721Rewards[i].tokenAddress == data.erc721Rewards[i].tokenAddress){\r\n                    for (uint256 j; j< data.erc721Rewards[i].tokenIds.length; j++){\r\n                        roundRewards[data.round].erc721Rewards[i].tokenIds.push(data.erc721Rewards[i].tokenIds[j]);\r\n                    }\r\n                    roundAmounts[data.round].erc721Amount[i].amount += data.erc721Amounts[i];\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // Transfer ERC721 tokens to contract\r\n        for (uint256 i = 0; i < data.erc721Rewards.length; ) {\r\n            for (uint256 j = 0; j < data.erc721Rewards[i].tokenIds.length; ) {\r\n                IERC721(data.erc721Rewards[i].tokenAddress).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    data.erc721Rewards[i].tokenIds[j]\r\n                );\r\n                unchecked {\r\n                    j++;\r\n                }\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n   function _handleERC1155Rewards(RewardData calldata data) internal {\r\n    if (roundRewards[data.round].erc1155Rewards.length == 0) {\r\n        // Add rewards to round\r\n        for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\r\n            roundRewards[data.round].erc1155Rewards.push(data.erc1155Rewards[i]);\r\n                roundAmounts[data.round].erc1155Amount.push();\r\n            for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\r\n                roundAmounts[data.round].erc1155Amount[i].push(\r\n                    RewardERC1155Amount(\r\n                        data.erc1155Rewards[i].tokenAddress,\r\n                        data.erc1155Rewards[i].tokenIds[j],\r\n                        data.erc1155Amounts[i][j]\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        // Already existing rewards cannot change reward amount, can only top up reward\r\n        // Ensure that the token address is the same\r\n        for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\r\n            for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\r\n                require(\r\n                    roundRewards[data.round].erc1155Rewards[i].tokenAddress == data.erc1155Rewards[i].tokenAddress,\r\n                    \"Token address cannot be changed.\"\r\n                );\r\n                roundAmounts[data.round].erc1155Amount[i][j].amount += data.erc1155Amounts[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Transfer ERC1155 tokens to contract\r\n    for (uint256 i = 0; i < data.erc1155Rewards.length; i++) {\r\n        for (uint256 j = 0; j < data.erc1155Rewards[i].tokenIds.length; j++) {\r\n            IERC1155(data.erc1155Rewards[i].tokenAddress).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                data.erc1155Rewards[i].tokenIds[j],\r\n                data.erc1155Amounts[i][j],\r\n                \"\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external override returns (bytes4) {\r\n        // Add your custom logic for handling ERC1155 token transfers\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external override returns (bytes4) {\r\n        // Add your custom logic for handling ERC1155 token transfers\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}