{
  "address": "0x5156179cbD6514F63Aa2e2f830fA4c5Ae209b6A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "__baseURI",
          "type": "string"
        },
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongElement",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddressRegistry",
          "type": "address"
        }
      ],
      "name": "AddressRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "spaceshipId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fireEquipmentString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "lightningEquipmentString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "steelEquipmentString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        }
      ],
      "name": "EquipmentModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PublicMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "spaceshipId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rarityString",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        }
      ],
      "name": "SpaceshipRaritySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_rarities",
          "type": "uint8[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AtlantisLib.Rarity",
          "name": "_rarity",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_lightningLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_fireLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_steelLevel",
          "type": "uint8"
        }
      ],
      "name": "getImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRarity",
      "outputs": [
        {
          "internalType": "enum AtlantisLib.Rarity",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSpaceship",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AtlantisLib.Rarity",
                  "name": "rarity",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "fireEquipmentId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lightningEquipmentId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "steelEquipmentId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAtlantisSpaceships.Spaceship",
              "name": "spaceship",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "speed",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAtlantisSpaceships.SpaceshipData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spaceshipId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fireEquipmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lightningEquipmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_steelEquipmentId",
          "type": "uint256"
        }
      ],
      "name": "modifyEquipment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "spaceships",
      "outputs": [
        {
          "internalType": "enum AtlantisLib.Rarity",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "fireEquipmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lightningEquipmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "steelEquipmentId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d32d3f36b9495b4a7a847b1b280a8cb7d8318ec7f213b079776bee73aed2dff",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0x5156179cbD6514F63Aa2e2f830fA4c5Ae209b6A9",
    "transactionIndex": 4,
    "gasUsed": "3418906",
    "logsBloom": "0x
    "blockHash": "0x0b2ebb8450be310d2c58952a8cd1a5f3c29000e7aaae150564a9d96cf869478e",
    "transactionHash": "0x7d32d3f36b9495b4a7a847b1b280a8cb7d8318ec7f213b079776bee73aed2dff",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9055897,
        "transactionHash": "0x7d32d3f36b9495b4a7a847b1b280a8cb7d8318ec7f213b079776bee73aed2dff",
        "address": "0x5156179cbD6514F63Aa2e2f830fA4c5Ae209b6A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0b2ebb8450be310d2c58952a8cd1a5f3c29000e7aaae150564a9d96cf869478e"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9055897,
        "transactionHash": "0x7d32d3f36b9495b4a7a847b1b280a8cb7d8318ec7f213b079776bee73aed2dff",
        "address": "0x5156179cbD6514F63Aa2e2f830fA4c5Ae209b6A9",
        "topics": [
          "0x6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad",
          "0x5aa0c19a02dea9a159a41fd86a4d43783b56d24ce2a1c79d52092d733539145b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0b2ebb8450be310d2c58952a8cd1a5f3c29000e7aaae150564a9d96cf869478e"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9055897,
        "transactionHash": "0x7d32d3f36b9495b4a7a847b1b280a8cb7d8318ec7f213b079776bee73aed2dff",
        "address": "0x5156179cbD6514F63Aa2e2f830fA4c5Ae209b6A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0b2ebb8450be310d2c58952a8cd1a5f3c29000e7aaae150564a9d96cf869478e"
      }
    ],
    "blockNumber": 9055897,
    "cumulativeGasUsed": "4492370",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "ipfs://bafybeifjxfjxjenulf3hnp3ghrbq54po42c7plkm3aw2wkpayz26eogfca/",
    "0xf0776a4F32a4F95649D3b1c79eb5FFE6c43e53F3"
  ],
  "numDeployments": 3,
  "solcInputHash": "61d93f86e0a83c0b3d4bdd83e42307ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"},{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongElement\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressRegistry\",\"type\":\"address\"}],\"name\":\"AddressRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"spaceshipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fireEquipmentString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lightningEquipmentString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"steelEquipmentString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"EquipmentModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PublicMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"spaceshipId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rarityString\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"SpaceshipRaritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_rarities\",\"type\":\"uint8[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtlantisLib.Rarity\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_lightningLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fireLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_steelLevel\",\"type\":\"uint8\"}],\"name\":\"getImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"enum AtlantisLib.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpaceship\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AtlantisLib.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fireEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightningEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"steelEquipmentId\",\"type\":\"uint256\"}],\"internalType\":\"struct IAtlantisSpaceships.Spaceship\",\"name\":\"spaceship\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"internalType\":\"struct IAtlantisSpaceships.SpaceshipData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spaceshipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fireEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lightningEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_steelEquipmentId\",\"type\":\"uint256\"}],\"name\":\"modifyEquipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spaceships\",\"outputs\":[{\"internalType\":\"enum AtlantisLib.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fireEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lightningEquipmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"steelEquipmentId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Race your spaceships on the racing contract! Equip equipments to boost speed!\",\"kind\":\"dev\",\"methods\":{\"airdrop(address[],uint8[])\":{\"params\":{\"_addresses\":\"All addresses that will receive nfts\",\"_rarities\":\"Amount of nfts that will be minted for each address\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"exists(uint256)\":{\"params\":{\"tokenId\":\"Token ID\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getImageURI(uint8,uint8,uint8,uint8)\":{\"params\":{\"_fireLevel\":\"Fire level of spaceship\",\"_lightningLevel\":\"Lightning level of spaceship\",\"_rarity\":\"Rarity of spaceship\",\"_steelLevel\":\"Steel level of spaceship\"}},\"getRarity(uint256)\":{\"params\":{\"_tokenId\":\"Token ID of spaceship\"}},\"getSpaceship(uint256)\":{\"params\":{\"_tokenId\":\"Token ID of spaceship\"}},\"getSpeed(uint256)\":{\"params\":{\"_tokenId\":\"Token ID of spaceship\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set Metadata URI\",\"params\":{\"_newBaseURI\":\"new base uri\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Metadata is stored on-chainMetadata is stored in JSON format\",\"params\":{\"_tokenId\":\"Token ID of spaceship\"},\"returns\":{\"_0\":\"String of token metadata\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Atlantis Spaceships Mint Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"airdrop(address[],uint8[])\":{\"notice\":\"Airdrop multiple nfts to multiple addresses\"},\"exists(uint256)\":{\"notice\":\"Checks if token exists\"},\"getImageURI(uint8,uint8,uint8,uint8)\":{\"notice\":\"Get ImageURI\"},\"getRarity(uint256)\":{\"notice\":\"Get rarity of a spaceship from its id\"},\"getSpaceship(uint256)\":{\"notice\":\"Get details of a spaceship from its id\"},\"getSpeed(uint256)\":{\"notice\":\"Get speed of a spaceship from its id\"},\"modifyEquipment(uint256,uint256,uint256,uint256)\":{\"notice\":\"Token Ids of equipments 1 2 3 Fire Lightning Steel Equipment Level 1 4 5 6 Fire Lightning Steel Equipment Level 2 7 8 9 Fire Lightning Steel Equipment Level 3 10 11 12 Fire Lightning Steel Equipment Level 4 13 14 15 Fire Lightning Steel Equipment Level 5 16 17 18 Fire Lightning Steel Equipment Level 6 19 20 21 Fire Lightning Steel Equipment Level 7 22 23 24 Fire Lightning Steel Equipment Level 8 25 26 27 Fire Lightning Steel Equipment Level 9 28 29 30 Fire Lightning Steel Equipment Level 10\"},\"tokenURI(uint256)\":{\"notice\":\"Returns token metadata\"},\"totalSupply()\":{\"notice\":\"Returns total supply of spaceships\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlantisSpaceships.sol\":\"AtlantisSpaceships\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/AtlantisSpaceships.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./interface/IAtlantisSpaceships.sol\\\";\\r\\nimport \\\"./interface/IAtlantisEquipments.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\nimport \\\"./common/Base64.sol\\\";\\r\\n\\r\\n/// @title Atlantis Spaceships Mint Contract\\r\\n/// @dev Race your spaceships on the racing contract! Equip equipments to boost speed!\\r\\ncontract AtlantisSpaceships is ERC721, Ownable, IAtlantisSpaceships, IERC1155Receiver, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public currentSupply;\\r\\n    uint256 public currentIndex = 1;\\r\\n    // Mapping of spaceshipIDs to spaceships\\r\\n    mapping(uint256 => Spaceship) public spaceships;\\r\\n\\r\\n    // Events\\r\\n    event EquipmentModified(\\r\\n        uint256 indexed spaceshipId,\\r\\n        string fireEquipmentString,\\r\\n        string lightningEquipmentString,\\r\\n        string steelEquipmentString,\\r\\n        uint256 speed\\r\\n    );\\r\\n    event PublicMint(address indexed to);\\r\\n    event AddressRegistryUpdated(address indexed newAddressRegistry);\\r\\n    event BaseURIUpdated(string indexed newBaseURI);\\r\\n    event SpaceshipRaritySet(uint256 indexed spaceshipId, string rarityString, uint256 speed);\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        string memory __baseURI,\\r\\n        AtlantisAddressRegistry _addressRegistry\\r\\n    ) ERC721(\\\"Atlantis Spaceships\\\", \\\"SPACESHIPS\\\") {\\r\\n        setBaseURI(__baseURI);\\r\\n        transferOwnership(_owner);\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    // -------------------- ATLANTIS FUNCTIONS --------------------------\\r\\n    /** Token Ids of equipments\\r\\n     * 1 2 3 Fire Lightning Steel Equipment Level 1\\r\\n     * 4 5 6 Fire Lightning Steel Equipment Level 2\\r\\n     * 7 8 9 Fire Lightning Steel Equipment Level 3\\r\\n     * 10 11 12 Fire Lightning Steel Equipment Level 4\\r\\n     * 13 14 15 Fire Lightning Steel Equipment Level 5\\r\\n     * 16 17 18 Fire Lightning Steel Equipment Level 6\\r\\n     * 19 20 21 Fire Lightning Steel Equipment Level 7\\r\\n     * 22 23 24 Fire Lightning Steel Equipment Level 8\\r\\n     * 25 26 27 Fire Lightning Steel Equipment Level 9\\r\\n     * 28 29 30 Fire Lightning Steel Equipment Level 10\\r\\n     */\\r\\n\\r\\n    function modifyEquipment(\\r\\n        uint256 _spaceshipId,\\r\\n        uint256 _fireEquipmentId,\\r\\n        uint256 _lightningEquipmentId,\\r\\n        uint256 _steelEquipmentId\\r\\n    ) external nonReentrant {\\r\\n        // Check if the spaceship is owned by the caller if not throw notOwner error\\r\\n        if (ownerOf(_spaceshipId) != msg.sender) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        IAtlantisEquipments atlantisEquipments = IAtlantisEquipments(addressRegistry.getEquipments());\\r\\n        // Get spaceship\\r\\n        Spaceship storage spaceship = spaceships[_spaceshipId];\\r\\n\\r\\n        // Set spaceship Equipments to new Equipments\\r\\n        _equipHelper(spaceship.fireEquipmentId, _fireEquipmentId, 1);\\r\\n        _equipHelper(spaceship.lightningEquipmentId, _lightningEquipmentId, 2);\\r\\n        _equipHelper(spaceship.steelEquipmentId, _steelEquipmentId, 0);\\r\\n\\r\\n        spaceship.fireEquipmentId = _fireEquipmentId;\\r\\n        spaceship.lightningEquipmentId = _lightningEquipmentId;\\r\\n        spaceship.steelEquipmentId = _steelEquipmentId;\\r\\n\\r\\n        emit EquipmentModified(\\r\\n            _spaceshipId,\\r\\n            atlantisEquipments.getLevel(_fireEquipmentId) != 0\\r\\n                ? uint256(atlantisEquipments.getLevel(_fireEquipmentId)).toString()\\r\\n                : \\\"Unequipped\\\",\\r\\n            atlantisEquipments.getLevel(_lightningEquipmentId) != 0\\r\\n                ? uint256(atlantisEquipments.getLevel(_lightningEquipmentId)).toString()\\r\\n                : \\\"Unequipped\\\",\\r\\n            atlantisEquipments.getLevel(_steelEquipmentId) != 0\\r\\n                ? uint256(atlantisEquipments.getLevel(_steelEquipmentId)).toString()\\r\\n                : \\\"Unequipped\\\",\\r\\n            getSpeed(_spaceshipId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to handle equipping\\r\\n     * @param _oldId Token ID of old equipment\\r\\n     * @param _newId Token ID of new equipment\\r\\n     * @param _element Element of equipment\\r\\n     */\\r\\n    function _equipHelper(uint256 _oldId, uint256 _newId, uint8 _element) internal {\\r\\n        IAtlantisEquipments atlantisEquipments = IAtlantisEquipments(addressRegistry.getEquipments());\\r\\n\\r\\n        // Do nothing if oldId and newId are the same\\r\\n        if (_oldId == _newId) {\\r\\n            return;\\r\\n        }\\r\\n        // Check that newId is the correct element if not throw wrongelement\\r\\n        if (_newId != 0 && atlantisEquipments.getElement(_newId) != _element) {\\r\\n            revert WrongElement();\\r\\n        }\\r\\n        // Check if newId is not zero\\r\\n        if (_newId != 0) {\\r\\n            // Transfer newId to contract\\r\\n            IERC1155(address(atlantisEquipments)).safeTransferFrom(msg.sender, address(this), _newId, 1, \\\"\\\");\\r\\n        }\\r\\n        // Check if oldId is not zero\\r\\n        if (_oldId != 0) {\\r\\n            // Transfer oldId to owner\\r\\n            IERC1155(address(atlantisEquipments)).safeTransferFrom(address(this), msg.sender, _oldId, 1, \\\"\\\");\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get details of a spaceship from its id\\r\\n     * @param _tokenId Token ID of spaceship\\r\\n     */\\r\\n    function getSpaceship(uint256 _tokenId) external view returns (SpaceshipData memory) {\\r\\n        SpaceshipData memory _spaceshipData = SpaceshipData(spaceships[_tokenId], getSpeed(_tokenId));\\r\\n        return _spaceshipData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get speed of a spaceship from its id\\r\\n     * @param _tokenId Token ID of spaceship\\r\\n     */\\r\\n\\r\\n    function getSpeed(uint256 _tokenId) public view returns (uint256) {\\r\\n        IAtlantisEquipments atlantisEquipments = IAtlantisEquipments(addressRegistry.getEquipments());\\r\\n        // Get spaceship\\r\\n        Spaceship memory spaceship = spaceships[_tokenId];\\r\\n        // Get rarity\\r\\n        AtlantisLib.Rarity _rarity = spaceship.rarity;\\r\\n        uint16 fireSpeed = atlantisEquipments.getSpeed(spaceship.fireEquipmentId);\\r\\n        uint16 lightningSpeed = atlantisEquipments.getSpeed(spaceship.lightningEquipmentId);\\r\\n        uint16 steelSpeed = atlantisEquipments.getSpeed(spaceship.steelEquipmentId);\\r\\n\\r\\n        return (uint16(_rarity) + 1) * (fireSpeed + lightningSpeed + steelSpeed + 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get rarity of a spaceship from its id\\r\\n     * @param _tokenId Token ID of spaceship\\r\\n     */\\r\\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity) {\\r\\n        // Check exists\\r\\n        require(_exists(_tokenId), \\\"Spaceship does not exist\\\");\\r\\n        // Get spaceship\\r\\n        Spaceship memory spaceship = spaceships[_tokenId];\\r\\n        return spaceship.rarity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set rarity of all spaceships\\r\\n     * @param _tokenId Token id of spaceship\\r\\n     * @param _rarity Rarity of spaceship\\r\\n     */\\r\\n    function setSpaceshipRarity(uint256 _tokenId, AtlantisLib.Rarity _rarity) internal {\\r\\n        spaceships[_tokenId].rarity = _rarity;\\r\\n        uint256 _speed = getSpeed(_tokenId);\\r\\n        emit SpaceshipRaritySet(_tokenId, _spaceshipRarityToString(_rarity), _speed);\\r\\n    }\\r\\n\\r\\n    // -------------------- ATLANTIS METADATA FUNCTIONS --------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     * @param _rarity Rarity of spaceship\\r\\n     * @return String of planet orbit\\r\\n     */\\r\\n    function _spaceshipRarityToString(AtlantisLib.Rarity _rarity) internal pure returns (string memory) {\\r\\n        if (_rarity == AtlantisLib.Rarity.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (_rarity == AtlantisLib.Rarity.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (_rarity == AtlantisLib.Rarity.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (_rarity == AtlantisLib.Rarity.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get ImageURI\\r\\n     * @param _rarity Rarity of spaceship\\r\\n     * @param _lightningLevel Lightning level of spaceship\\r\\n     * @param _fireLevel Fire level of spaceship\\r\\n     * @param _steelLevel Steel level of spaceship\\r\\n     */\\r\\n    function getImageURI(\\r\\n        AtlantisLib.Rarity _rarity,\\r\\n        uint8 _lightningLevel,\\r\\n        uint8 _fireLevel,\\r\\n        uint8 _steelLevel\\r\\n    ) public view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    uint256(_rarity).toString(),\\r\\n                    \\\"/\\\",\\r\\n                    uint256(AtlantisLib._getEquipmentTier(_steelLevel)).toString(),\\r\\n                    \\\"/\\\",\\r\\n                    uint256(AtlantisLib._getEquipmentTier(_fireLevel)).toString(),\\r\\n                    \\\"/\\\",\\r\\n                    uint256(AtlantisLib._getEquipmentTier(_lightningLevel)).toString(),\\r\\n                    \\\".png\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns token metadata\\r\\n     * @param _tokenId Token ID of spaceship\\r\\n     * @dev Metadata is stored on-chain\\r\\n     * @dev Metadata is stored in JSON format\\r\\n     * @return String of token metadata\\r\\n     */\\r\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\r\\n        _requireMinted(_tokenId);\\r\\n        IAtlantisEquipments atlantisEquipments = IAtlantisEquipments(addressRegistry.getEquipments());\\r\\n        // Get Spaceship\\r\\n        Spaceship memory spaceship = spaceships[_tokenId];\\r\\n\\r\\n        // Get rarity\\r\\n        AtlantisLib.Rarity rarity = spaceship.rarity;\\r\\n\\r\\n        // Name\\r\\n        string memory json = string(abi.encodePacked('{\\\"name\\\": \\\"', name(), \\\" #\\\", _tokenId.toString(), '\\\",'));\\r\\n\\r\\n        uint8 lightningLevel = atlantisEquipments.getLevel(spaceship.lightningEquipmentId);\\r\\n        uint8 fireLevel = atlantisEquipments.getLevel(spaceship.fireEquipmentId);\\r\\n        uint8 steelLevel = atlantisEquipments.getLevel(spaceship.steelEquipmentId);\\r\\n\\r\\n        string memory lightningString = lightningLevel != 0 ? uint256(lightningLevel).toString() : \\\"Unequipped\\\";\\r\\n        string memory fireString = fireLevel != 0 ? uint256(fireLevel).toString() : \\\"Unequipped\\\";\\r\\n        string memory steelString = steelLevel != 0 ? uint256(steelLevel).toString() : \\\"Unequipped\\\";\\r\\n        // Description\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"description\\\": \\\"Welcome to the captivating realm of Atlantis, the game-verse and home of the legendary Argonauts. Acquire Spaceships to take part in the Atlantis race and earn attractive rewards!\\\",'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Attributes\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Rarity\\\", \\\"value\\\": \\\"',\\r\\n                _spaceshipRarityToString(rarity),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Thunderbolt Wings Level\\\", \\\"value\\\": \\\"',\\r\\n                lightningString,\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Inferno Thrusters Level\\\", \\\"value\\\": \\\"',\\r\\n                fireString,\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Argonium Exoshell Level\\\", \\\"value\\\": \\\"',\\r\\n                steelString,\\r\\n                '\\\"},'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        json = string(\\r\\n            abi.encodePacked(json, '{\\\"trait_type\\\": \\\"Speed\\\", \\\"value\\\": \\\"', uint256(getSpeed(_tokenId)).toString(), '\\\"}],')\\r\\n        );\\r\\n\\r\\n        json = Base64.encode(\\r\\n            bytes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        json,\\r\\n                        '\\\"image\\\": \\\"',\\r\\n                        getImageURI(rarity, lightningLevel, fireLevel, steelLevel),\\r\\n                        '\\\"}'\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    // -------------------- MINT FUNCTIONS --------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Public Mint\\r\\n     * @param _address Address of user\\r\\n     */\\r\\n    function _mintOne(address _address) internal {\\r\\n        currentSupply += 1;\\r\\n        _safeMint(_address, currentIndex);\\r\\n        currentIndex += 1;\\r\\n\\r\\n        emit PublicMint(_address);\\r\\n    }\\r\\n\\r\\n    // TODO: SET ONLYOWNER\\r\\n    /**\\r\\n     * @notice Airdrop multiple nfts to multiple addresses\\r\\n     * @param _addresses All addresses that will receive nfts\\r\\n     * @param _rarities Amount of nfts that will be minted for each address\\r\\n     */\\r\\n    function airdrop(address[] calldata _addresses, uint8[] calldata _rarities) external {\\r\\n        // Check that both arrays are the same length\\r\\n        require(_addresses.length == _rarities.length, \\\"Arrays must be the same length\\\");\\r\\n        for (uint256 i; i < _addresses.length; i++) {\\r\\n            _mintOne(_addresses[i]);\\r\\n            setSpaceshipRarity(currentIndex - 1, AtlantisLib.Rarity(_rarities[i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------- OWNER FUNCTIONS ----------------------------\\r\\n    /**\\r\\n     * @dev Set Metadata URI\\r\\n     * @param _newBaseURI new base uri\\r\\n     */\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n        emit BaseURIUpdated(_newBaseURI);\\r\\n    }\\r\\n\\r\\n    // Set Address registry\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) public onlyOwner {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit AddressRegistryUpdated(address(_addressRegistry));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if token exists\\r\\n     * @param tokenId Token ID\\r\\n     */\\r\\n    function exists(uint256 tokenId) external view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns total supply of spaceships\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return currentSupply;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external pure returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external pure returns (bytes4) {\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49a184d787662cdc538c41fbdd870fe2a8909e7be5180742000345d0cddcfbf7\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/AtlantisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary AtlantisLib {\\r\\n    enum Orbit {\\r\\n        COMMON, // 0\\r\\n        UNCOMMON, // 1\\r\\n        RARE, // 2\\r\\n        EPIC // 3\\r\\n    }\\r\\n\\r\\n    enum OrbitName {\\r\\n        HALO_RING, //0\\r\\n        PANDORA, //1\\r\\n        ATLAS, //2\\r\\n        METIS, //3\\r\\n        ENTWINED, //4\\r\\n        RAINBOW_CLOUDS, //5\\r\\n        GALATICA, //6\\r\\n        ASTEROIDS, //7\\r\\n        INTERSTELLAR_PINK, //8\\r\\n        INTERSTELLAR_GRADIENT, //9\\r\\n        // Epic planets\\r\\n        INTERSTELLAR_GOLD //10\\r\\n    }\\r\\n\\r\\n    enum Background {\\r\\n        PURPLE_HUES, //0\\r\\n        BROWN_HUES, //1\\r\\n        WAVY, //2\\r\\n        SHOOTING_STARS, //3\\r\\n        // Epic planets\\r\\n        GOLD_HUES, //4\\r\\n        GOLD_SHOOTING_STARS, //5\\r\\n        WAVY_GOLD, //6\\r\\n        GOLD_SKIES //7\\r\\n    }\\r\\n\\r\\n    enum Evolution {\\r\\n        ALPHA, // 1-19\\r\\n        BETA, // 20-29\\r\\n        GAMMA, // 30-39\\r\\n        DELTA, // 40-49\\r\\n        EPSILON // 50\\r\\n    }\\r\\n\\r\\n    enum Element {\\r\\n        FIRE, // 0\\r\\n        LIGHTNING, // 1\\r\\n        STEEL // 2\\r\\n    }\\r\\n\\r\\n    struct Planet {\\r\\n        uint8 level; // Max Level: 50\\r\\n        Element element;\\r\\n        Orbit orbit;\\r\\n        OrbitName orbitName;\\r\\n        Background background;\\r\\n        bool onExpedition;\\r\\n    }\\r\\n\\r\\n    enum Rarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet element as string\\r\\n     */\\r\\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\\r\\n        if (element == AtlantisLib.Element.FIRE) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else if (element == AtlantisLib.Element.STEEL) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\\r\\n            return \\\"Lightning\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\\r\\n        if (orbit == AtlantisLib.Orbit.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tier of equipment based on level\\r\\n     * @param level Level of an equipment\\r\\n     */\\r\\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\\r\\n        if (level < 1) {\\r\\n            tier = AtlantisLib.Rarity.COMMON;\\r\\n        } else if (level >= 1 && level < 5) {\\r\\n            tier = AtlantisLib.Rarity.UNCOMMON;\\r\\n        } else if (level >= 5 && level < 8) {\\r\\n            tier = AtlantisLib.Rarity.RARE;\\r\\n        } else if (level >= 8 && level <= 10) {\\r\\n            tier = AtlantisLib.Rarity.EPIC;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\\r\\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\\r\\n            return \\\"Halo Ring\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\\r\\n            return \\\"Pandora\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\\r\\n            return \\\"Atlas\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\\r\\n            return \\\"Metis\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\\r\\n            return \\\"Entwined\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\\r\\n            return \\\"Rainbow Clouds\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\\r\\n            return \\\"Galatica\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\\r\\n            return \\\"Asteroids\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\\r\\n            return \\\"Interstellar Pink\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\\r\\n            return \\\"Interstellar Gradient\\\";\\r\\n            // Epic planets\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\\r\\n            return \\\"Interstellar Gold\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\\r\\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\\r\\n            return \\\"Purple Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\\r\\n            return \\\"Brown Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.WAVY) {\\r\\n            return \\\"Wavy\\\";\\r\\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\\r\\n            return \\\"Shooting Stars\\\";\\r\\n            // Epic planets\\r\\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\\r\\n            return \\\"Wavy Gold\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\\r\\n            return \\\"Gold Shooting Stars\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\\r\\n            return \\\"Gold Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\\r\\n            return \\\"Gold Skies\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f94d7d040abad058dbad5d368688e91d19d43bc219df2b2ee1c722950a88b8e\",\"license\":\"MIT\"},\"contracts/common/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a989d8dbb30529182950111aa77902fa22b4472c93588f1240b0524a423fbbd\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisEquipments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IAtlantisEquipments {\\r\\n    // ------------------------- EVENTS --------------------------\\r\\n    event FuseEquipment(address indexed _from, uint256 indexed _id, uint256 _amount, uint256 _totalSupply);\\r\\n    event BaseMetadataURIUpdated(string _baseMetadataURI);\\r\\n    event TokenURIUpdated(uint256 indexed _id, string _tokenURI);\\r\\n    event AddressRegistryUpdated(address _address);\\r\\n    event StardustCostsUpdated(uint256[] _stardustCosts);\\r\\n    event GemstonesRequiredUpdated(uint16[] _gemstonesRequired);\\r\\n    event EquipmentSpeedsUpdated(uint16[] _equipmentSpeeds);\\r\\n    event MintCostUpdated(uint256 _mintCost);\\r\\n    event PaymentModeUpdated(PaymentMode _paymentMode);\\r\\n    event PaymentTokenUpdated(address _paymentToken);\\r\\n    // ------------------------- ERRORS --------------------------\\r\\n    error UpgradeError();\\r\\n    error IdNotExistsError();\\r\\n\\r\\n    /// @notice Enum for payment mode\\r\\n    enum PaymentMode {\\r\\n        CRYPTO,\\r\\n        TOKEN\\r\\n    }\\r\\n\\r\\n    function fuseEquipment(uint256 _id, uint16 _amountToCreate) external;\\r\\n\\r\\n    function calculateFusionCost(uint256 _id, uint16 _amountToCreate) external view returns (uint256);\\r\\n\\r\\n    function fuseEquipmentsView(uint256 _id, uint16 _amountToCreate) external view returns (uint16);\\r\\n\\r\\n    function getLevel(uint256 _id) external pure returns (uint8);\\r\\n\\r\\n    function getSpeed(uint256 _id) external view returns (uint16);\\r\\n\\r\\n    function setStardustCosts(uint256[] calldata _stardustCost) external;\\r\\n\\r\\n    function getElement(uint256 _id) external pure returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x842469eb6fc7674b2a89e3ff3b1301118c32218fb06cfe6abc69edf1c9e5164c\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisSpaceships.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantisSpaceships {\\r\\n    error NotOwner();\\r\\n    error WrongElement();\\r\\n\\r\\n    struct Spaceship {\\r\\n        AtlantisLib.Rarity rarity;\\r\\n        uint256 fireEquipmentId;\\r\\n        uint256 lightningEquipmentId;\\r\\n        uint256 steelEquipmentId;\\r\\n    }\\r\\n\\r\\n    struct SpaceshipData {\\r\\n        Spaceship spaceship;\\r\\n        uint256 speed;\\r\\n    }\\r\\n\\r\\n    function modifyEquipment(\\r\\n        uint256 _spaceshipId,\\r\\n        uint256 _fireEquipmentId,\\r\\n        uint256 _lightningEquipmentId,\\r\\n        uint256 _steelEquipmentId\\r\\n    ) external;\\r\\n\\r\\n    function getSpaceship(uint256 _tokenId) external view returns (SpaceshipData memory);\\r\\n\\r\\n    function getSpeed(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity);\\r\\n}\\r\\n\",\"keccak256\":\"0x7855f2c43a835376e00692737f31ce3dcb0af5c5ac34d69f5a2bbfc35187f75e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600b553480156200001657600080fd5b5060405162003dc738038062003dc783398101604081905262000039916200030a565b6040518060400160405280601381526020017f41746c616e7469732053706163657368697073000000000000000000000000008152506040518060400160405280600a8152602001695350414345534849505360b01b8152508160009081620000a391906200047b565b506001620000b282826200047b565b505050620000cf620000c96200011360201b60201c565b62000117565b6001600755620000df8262000169565b620000ea83620001c5565b600880546001600160a01b0319166001600160a01b039290921691909117905550620005659050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200017362000248565b60096200018182826200047b565b508060405162000192919062000547565b604051908190038120907f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad90600090a250565b620001cf62000248565b6001600160a01b0381166200023a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620002458162000117565b50565b6006546001600160a01b03163314620002a45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000231565b565b6001600160a01b03811681146200024557600080fd5b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002ef578181015183820152602001620002d5565b50506000910152565b80516200030581620002a6565b919050565b6000806000606084860312156200032057600080fd5b83516200032d81620002a6565b60208501519093506001600160401b03808211156200034b57600080fd5b818601915086601f8301126200036057600080fd5b815181811115620003755762000375620002bc565b604051601f8201601f19908116603f01168101908382118183101715620003a057620003a0620002bc565b81604052828152896020848701011115620003ba57600080fd5b620003cd836020830160208801620002d2565b8096505050505050620003e360408501620002f8565b90509250925092565b600181811c908216806200040157607f821691505b6020821081036200042257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200047657600081815260208120601f850160051c81016020861015620004515750805b601f850160051c820191505b8181101562000472578281556001016200045d565b5050505b505050565b81516001600160401b03811115620004975762000497620002bc565b620004af81620004a88454620003ec565b8462000428565b602080601f831160018114620004e75760008415620004ce5750858301515b600019600386901b1c1916600185901b17855562000472565b600085815260208120601f198616915b828110156200051857888601518255948401946001909101908401620004f7565b5085821015620005375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516200055b818460208701620002d2565b9190910192915050565b61385280620005756000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063715018a61161011a578063b88d4fde116100ad578063d600671c1161007c578063d600671c14610485578063e985e9c514610498578063f23a6e61146104ab578063f2fde38b146104cb578063f3ad65f4146104de57600080fd5b8063b88d4fde14610404578063bc197c8114610417578063c87b56dd14610452578063c964e4931461046557600080fd5b806395d89b41116100e957806395d89b41146103c3578063a061a03a146103cb578063a22cb465146103de578063abac3fc3146103f157600080fd5b8063715018a614610358578063771282f6146103605780638da5cb5b1461036957806395ca8acb1461037a57600080fd5b806342842e0e1161019257806355f804b31161016157806355f804b3146103175780636352211e1461032a5780636c0360eb1461033d57806370a082311461034557600080fd5b806342842e0e146102be57806348758697146102d15780634b93f753146102f15780634f558e791461030457600080fd5b806318160ddd116101ce57806318160ddd1461027d57806323b872dd1461028f57806326987b60146102a257806327c7812c146102ab57600080fd5b806301ffc9a71461020057806306fdde0314610228578063081812fc1461023d578063095ea7b314610268575b600080fd5b61021361020e3660046127e6565b6104f1565b60405190151581526020015b60405180910390f35b610230610543565b60405161021f919061285a565b61025061024b36600461286d565b6105d5565b6040516001600160a01b03909116815260200161021f565b61027b61027636600461289b565b6105fc565b005b600a545b60405190815260200161021f565b61027b61029d3660046128c7565b610716565b610281600b5481565b61027b6102b9366004612908565b610747565b61027b6102cc3660046128c7565b610798565b6102e46102df36600461286d565b6107b3565b60405161021f919061295d565b6102816102ff36600461286d565b610882565b61021361031236600461286d565b610b2e565b61027b6103253660046129f7565b610b4d565b61025061033836600461286d565b610ba3565b610230610c03565b610281610353366004612908565b610c91565b61027b610d17565b610281600a5481565b6006546001600160a01b0316610250565b6103b361038836600461286d565b600c60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60405161021f9493929190612a40565b610230610d2b565b61027b6103d9366004612ab5565b610d3a565b61027b6103ec366004612b21565b610e2e565b61027b6103ff366004612b5f565b610e3d565b61027b610412366004612b91565b61123d565b610439610425366004612c53565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b0319909116815260200161021f565b61023061046036600461286d565b61126f565b61047861047336600461286d565b6116a2565b60405161021f9190612d12565b610230610493366004612d65565b611755565b6102136104a6366004612dc5565b6117d7565b6104396104b9366004612df3565b63f23a6e6160e01b9695505050505050565b61027b6104d9366004612908565b611805565b600854610250906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b148061052257506001600160e01b03198216635b5e139f60e01b145b8061053d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461055290612e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90612e6f565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b5050505050905090565b60006105e08261187e565b506000908152600460205260409020546001600160a01b031690565b600061060782610ba3565b9050806001600160a01b0316836001600160a01b0316036106795760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610695575061069581336117d7565b6107075760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610670565b61071183836118dd565b505050565b610720338261194b565b61073c5760405162461bcd60e51b815260040161067090612ea9565b6107118383836119a9565b61074f611b1a565b600880546001600160a01b0319166001600160a01b0383169081179091556040517e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a959290600090a250565b6107118383836040518060200160405280600081525061123d565b6000818152600260205260408120546001600160a01b03166108175760405162461bcd60e51b815260206004820152601860248201527f53706163657368697020646f6573206e6f7420657869737400000000000000006044820152606401610670565b6000828152600c60205260408082208151608081019092528054829060ff16600381111561084757610847612925565b600381111561085857610858612925565b81526001820154602082015260028201546040820152600390910154606090910152519392505050565b600080600860009054906101000a90046001600160a01b03166001600160a01b0316638e9797296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190612ef6565b6000848152600c602052604080822081516080810190925280549394509192909190829060ff16600381111561093457610934612925565b600381111561094557610945612925565b8152602001600182015481526020016002820154815260200160038201548152505090506000816000015190506000836001600160a01b0316634b93f75384602001516040518263ffffffff1660e01b81526004016109a691815260200190565b602060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190612f13565b90506000846001600160a01b0316634b93f75385604001516040518263ffffffff1660e01b8152600401610a1d91815260200190565b602060405180830381865afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190612f13565b90506000856001600160a01b0316634b93f75386606001516040518263ffffffff1660e01b8152600401610a9491815260200190565b602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190612f13565b905080610ae28385612f4d565b610aec9190612f4d565b610af7906001612f4d565b846003811115610b0957610b09612925565b610b14906001612f4d565b610b1e9190612f6f565b61ffff1698975050505050505050565b6000818152600260205260408120546001600160a01b0316151561053d565b610b55611b1a565b6009610b618282612fe3565b5080604051610b7091906130bf565b604051908190038120907f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad90600090a250565b6000818152600260205260408120546001600160a01b03168061053d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610670565b60098054610c1090612e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90612e6f565b8015610c895780601f10610c5e57610100808354040283529160200191610c89565b820191906000526020600020905b815481529060010190602001808311610c6c57829003601f168201915b505050505081565b60006001600160a01b038216610cfb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610670565b506001600160a01b031660009081526003602052604090205490565b610d1f611b1a565b610d296000611b74565b565b60606001805461055290612e6f565b828114610d895760405162461bcd60e51b815260206004820152601e60248201527f417272617973206d757374206265207468652073616d65206c656e67746800006044820152606401610670565b60005b83811015610e2757610dc3858583818110610da957610da96130db565b9050602002016020810190610dbe9190612908565b611bc6565b610e156001600b54610dd591906130f1565b848484818110610de757610de76130db565b9050602002016020810190610dfc9190613104565b60ff166003811115610e1057610e10612925565b611c3b565b80610e1f81613121565b915050610d8c565b5050505050565b610e39338383611cbf565b5050565b610e45611d8d565b33610e4f85610ba3565b6001600160a01b031614610e76576040516330cd747160e01b815260040160405180910390fd5b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612ef6565b6000868152600c602052604090206001808201549293509091610f08918790611de6565b610f188160020154856002611de6565b610f288160030154846000611de6565b600181018590556002810184905560038101839055604051630219207560e61b81526004810186905286907f5cb29d191dfe603d478a647638b5f89bdfd66de0c9089135f437435b72a3d0f5906001600160a01b038516906386481d4090602401602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca919061313a565b60ff16600003610ffc576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b815250611072565b604051630219207560e61b815260048101889052611072906001600160a01b038616906386481d40906024015b602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a919061313a565b60ff16611fdc565b604051630219207560e61b8152600481018890526001600160a01b038616906386481d4090602401602060405180830381865afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db919061313a565b60ff1660000361110d576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061113e565b604051630219207560e61b81526004810188905261113e906001600160a01b038716906386481d4090602401611029565b604051630219207560e61b8152600481018890526001600160a01b038716906386481d4090602401602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061313a565b60ff166000036111d9576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061120a565b604051630219207560e61b81526004810188905261120a906001600160a01b038816906386481d4090602401611029565b6112138b610882565b6040516112239493929190613157565b60405180910390a250506112376001600755565b50505050565b611247338361194b565b6112635760405162461bcd60e51b815260040161067090612ea9565b6112378484848461206f565b606061127a8261187e565b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190612ef6565b6000848152600c602052604080822081516080810190925280549394509192909190829060ff16600381111561132057611320612925565b600381111561133157611331612925565b8152600182015460208201526002820154604082015260039091015460609091015280519091506000611362610543565b61136b87611fdc565b60405160200161137c9291906131a2565b60408051808303601f1901815282825290850151630219207560e61b8352600483015291506000906001600160a01b038616906386481d4090602401602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f9919061313a565b90506000856001600160a01b03166386481d4086602001516040518263ffffffff1660e01b815260040161142f91815260200190565b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611470919061313a565b90506000866001600160a01b03166386481d4087606001516040518263ffffffff1660e01b81526004016114a691815260200190565b602060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e7919061313a565b905060008360ff1660000361151e576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061152a565b61152a8460ff16611fdc565b905060008360ff16600003611561576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061156d565b61156d8460ff16611fdc565b905060008360ff166000036115a4576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b8152506115b0565b6115b08460ff16611fdc565b9050866040516020016115c39190613205565b6040516020818303038152906040529650866115de896120a2565b8484846040516020016115f5959493929190613312565b6040516020818303038152906040529650866116186116138e610882565b611fdc565b604051602001611629929190613499565b604051602081830303815290604052965061166f8761164a8a898989611755565b60405160200161165b92919061350e565b604051602081830303815290604052612193565b9650866040516020016116829190613562565b6040516020818303038152906040529a5050505050505050505050919050565b6040805160c0810182526000918101828152606082018390526080820183905260a0820183905281526020810191909152604080516000848152600c60205282812060c0830184528054919383929083019190829060ff16600381111561170b5761170b612925565b600381111561171c5761171c612925565b81526020016001820154815260200160028201548152602001600382015481525050815260200161174c85610882565b90529392505050565b606061175f6122fa565b61177486600381111561161357611613612925565b61179161178085612309565b600381111561161357611613612925565b61179d61178087612309565b6117a961178089612309565b6040516020016117bd9594939291906135a7565b60405160208183030381529060405290505b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61180d611b1a565b6001600160a01b0381166118725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610670565b61187b81611b74565b50565b6000818152600260205260409020546001600160a01b031661187b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610670565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061191282610ba3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061195783610ba3565b9050806001600160a01b0316846001600160a01b0316148061197e575061197e81856117d7565b806117cf5750836001600160a01b0316611997846105d5565b6001600160a01b031614949350505050565b826001600160a01b03166119bc82610ba3565b6001600160a01b0316146119e25760405162461bcd60e51b815260040161067090613645565b6001600160a01b038216611a445760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610670565b611a51838383600161238c565b826001600160a01b0316611a6482610ba3565b6001600160a01b031614611a8a5760405162461bcd60e51b815260040161067090613645565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b03163314610d295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610670565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600a6000828254611bd9919061368a565b92505081905550611bec81600b54612414565b6001600b6000828254611bff919061368a565b90915550506040516001600160a01b038216907f3e4f823260c0ce29668141f615360eac28cc3b82ca6e9ef19552eba69b42bdfc90600090a250565b6000828152600c60205260409020805482919060ff19166001836003811115611c6657611c66612925565b02179055506000611c7683610882565b9050827fcb9675d4ccdd2cd44d781b848134afaf0d5f510432eece9c70f3baa6b61d76d1611ca3846120a2565b83604051611cb292919061369d565b60405180910390a2505050565b816001600160a01b0316836001600160a01b031603611d205760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610670565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600260075403611ddf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610670565b6002600755565b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612ef6565b9050828403611e635750505050565b8215801590611ee15750604051630e9f48af60e21b81526004810184905260ff8316906001600160a01b03831690633a7d22bc90602401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb919061313a565b60ff1614155b15611eff57604051630fd7210b60e11b815260040160405180910390fd5b8215611f6b57604051637921219560e11b81526001600160a01b0382169063f242432a90611f38903390309088906001906004016136bf565b600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050505b831561123757604051637921219560e11b81526001600160a01b0382169063f242432a90611fa4903090339089906001906004016136bf565b600060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b5050505050505050565b60606000611fe98361242e565b600101905060008167ffffffffffffffff8111156120095761200961296b565b6040519080825280601f01601f191660200182016040528015612033576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461203d57509392505050565b61207a8484846119a9565b61208684848484612506565b6112375760405162461bcd60e51b8152600401610670906136f7565b606060008260038111156120b8576120b8612925565b036120df57505060408051808201909152600681526521b7b6b6b7b760d11b602082015290565b60018260038111156120f3576120f3612925565b0361211c5750506040805180820190915260088152672ab731b7b6b6b7b760c11b602082015290565b600282600381111561213057612130612925565b036121555750506040805180820190915260048152635261726560e01b602082015290565b600382600381111561216957612169612925565b0361218e5750506040805180820190915260048152634570696360e01b602082015290565b919050565b606081516000036121b257505060408051602081019091526000815290565b60006040518060600160405280604081526020016137dd60409139905060006003845160026121e1919061368a565b6121eb9190613749565b6121f690600461376b565b9050600061220582602061368a565b67ffffffffffffffff81111561221d5761221d61296b565b6040519080825280601f01601f191660200182016040528015612247576020820181803683370190505b509050818152600183018586518101602084015b818310156122b55760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161225b565b6003895106600181146122cf57600281146122e0576122ec565b613d3d60f01b6001198301526122ec565b603d60f81b6000198301525b509398975050505050505050565b60606009805461055290612e6f565b600060018260ff16101561231f57506000919050565b60018260ff1610158015612336575060058260ff16105b1561234357506001919050565b60058260ff161015801561235a575060088260ff16105b1561236757506002919050565b60088260ff161015801561237f5750600a8260ff1611155b1561218e57506003919050565b6001811115611237576001600160a01b038416156123d2576001600160a01b038416600090815260036020526040812080548392906123cc9084906130f1565b90915550505b6001600160a01b03831615611237576001600160a01b0383166000908152600360205260408120805483929061240990849061368a565b909155505050505050565b610e39828260405180602001604052806000815250612604565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061246d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612499576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106124b757662386f26fc10000830492506010015b6305f5e10083106124cf576305f5e100830492506008015b61271083106124e357612710830492506004015b606483106124f5576064830492506002015b600a831061053d5760010192915050565b60006001600160a01b0384163b156125fc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061254a903390899088908890600401613782565b6020604051808303816000875af1925050508015612585575060408051601f3d908101601f19168201909252612582918101906137bf565b60015b6125e2573d8080156125b3576040519150601f19603f3d011682016040523d82523d6000602084013e6125b8565b606091505b5080516000036125da5760405162461bcd60e51b8152600401610670906136f7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117cf565b5060016117cf565b61260e8383612637565b61261b6000848484612506565b6107115760405162461bcd60e51b8152600401610670906136f7565b6001600160a01b03821661268d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610670565b6000818152600260205260409020546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610670565b61270060008383600161238c565b6000818152600260205260409020546001600160a01b0316156127655760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610670565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461187b57600080fd5b6000602082840312156127f857600080fd5b8135612803816127d0565b9392505050565b60005b8381101561282557818101518382015260200161280d565b50506000910152565b6000815180845261284681602086016020860161280a565b601f01601f19169290920160200192915050565b602081526000612803602083018461282e565b60006020828403121561287f57600080fd5b5035919050565b6001600160a01b038116811461187b57600080fd5b600080604083850312156128ae57600080fd5b82356128b981612886565b946020939093013593505050565b6000806000606084860312156128dc57600080fd5b83356128e781612886565b925060208401356128f781612886565b929592945050506040919091013590565b60006020828403121561291a57600080fd5b813561280381612886565b634e487b7160e01b600052602160045260246000fd5b6004811061295957634e487b7160e01b600052602160045260246000fd5b9052565b6020810161053d828461293b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561299c5761299c61296b565b604051601f8501601f19908116603f011681019082821181831017156129c4576129c461296b565b816040528093508581528686860111156129dd57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a0957600080fd5b813567ffffffffffffffff811115612a2057600080fd5b8201601f81018413612a3157600080fd5b6117cf84823560208401612981565b60808101612a4e828761293b565b84602083015283604083015282606083015295945050505050565b60008083601f840112612a7b57600080fd5b50813567ffffffffffffffff811115612a9357600080fd5b6020830191508360208260051b8501011115612aae57600080fd5b9250929050565b60008060008060408587031215612acb57600080fd5b843567ffffffffffffffff80821115612ae357600080fd5b612aef88838901612a69565b90965094506020870135915080821115612b0857600080fd5b50612b1587828801612a69565b95989497509550505050565b60008060408385031215612b3457600080fd5b8235612b3f81612886565b915060208301358015158114612b5457600080fd5b809150509250929050565b60008060008060808587031215612b7557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060808587031215612ba757600080fd5b8435612bb281612886565b93506020850135612bc281612886565b925060408501359150606085013567ffffffffffffffff811115612be557600080fd5b8501601f81018713612bf657600080fd5b612c0587823560208401612981565b91505092959194509250565b60008083601f840112612c2357600080fd5b50813567ffffffffffffffff811115612c3b57600080fd5b602083019150836020828501011115612aae57600080fd5b60008060008060008060008060a0898b031215612c6f57600080fd5b8835612c7a81612886565b97506020890135612c8a81612886565b9650604089013567ffffffffffffffff80821115612ca757600080fd5b612cb38c838d01612a69565b909850965060608b0135915080821115612ccc57600080fd5b612cd88c838d01612a69565b909650945060808b0135915080821115612cf157600080fd5b50612cfe8b828c01612c11565b999c989b5096995094979396929594505050565b600060a0820190508251612d2783825161293b565b602081015160208401526040810151604084015260608101516060840152506020830151608083015292915050565b60ff8116811461187b57600080fd5b60008060008060808587031215612d7b57600080fd5b843560048110612d8a57600080fd5b93506020850135612d9a81612d56565b92506040850135612daa81612d56565b91506060850135612dba81612d56565b939692955090935050565b60008060408385031215612dd857600080fd5b8235612de381612886565b91506020830135612b5481612886565b60008060008060008060a08789031215612e0c57600080fd5b8635612e1781612886565b95506020870135612e2781612886565b94506040870135935060608701359250608087013567ffffffffffffffff811115612e5157600080fd5b612e5d89828a01612c11565b979a9699509497509295939492505050565b600181811c90821680612e8357607f821691505b602082108103612ea357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060208284031215612f0857600080fd5b815161280381612886565b600060208284031215612f2557600080fd5b815161ffff8116811461280357600080fd5b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115612f6857612f68612f37565b5092915050565b61ffff818116838216028082169190828114612f8d57612f8d612f37565b505092915050565b601f82111561071157600081815260208120601f850160051c81016020861015612fbc5750805b601f850160051c820191505b81811015612fdb57828155600101612fc8565b505050505050565b815167ffffffffffffffff811115612ffd57612ffd61296b565b6130118161300b8454612e6f565b84612f95565b602080601f831160018114613046576000841561302e5750858301515b600019600386901b1c1916600185901b178555612fdb565b600085815260208120601f198616915b8281101561307557888601518255948401946001909101908401613056565b50858210156130935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081516130b581856020860161280a565b9290920192915050565b600082516130d181846020870161280a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b8181038181111561053d5761053d612f37565b60006020828403121561311657600080fd5b813561280381612d56565b60006001820161313357613133612f37565b5060010190565b60006020828403121561314c57600080fd5b815161280381612d56565b60808152600061316a608083018761282e565b828103602084015261317c818761282e565b90508281036040840152613190818661282e565b91505082606083015295945050505050565b693d913730b6b2911d101160b11b815282516000906131c881600a85016020880161280a565b61202360f01b600a9184019182015283516131ea81600c84016020880161280a565b61088b60f21b600c9290910191820152600e01949350505050565b6000825161321781846020870161280a565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e20416371756972652053706163657360608201527f6869707320746f2074616b65207061727420696e207468652041746c616e746960808201527f73207261636520616e64206561726e206174747261637469766520726577617260a082015264191cc8488b60da1b60c082015260c501919050565b60008651613324818460208b0161280a565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a20225281527130b934ba3c911610113b30b63ab2911d101160711b6020820152865161337a816032840160208b0161280a565b62089f4b60ea1b6032929091019182018190527f7b2274726169745f74797065223a20225468756e646572626f6c742057696e6760358301527339902632bb32b6111610113b30b63ab2911d101160611b6055830181905287516133e5816069860160208c0161280a565b60699301928301919091527f7b2274726169745f74797065223a2022496e6665726e6f205468727573746572606c830152608c82015261348d6134326134876134418260a086018a6130a3565b62089f4b60ea1b815260030190565b7f7b2274726169745f74797065223a20224172676f6e69756d2045786f7368656c81527336102632bb32b6111610113b30b63ab2911d101160611b602082015260340190565b866130a3565b98975050505050505050565b600083516134ab81846020880161280a565b80830190507f7b2274726169745f74797065223a20225370656564222c202276616c7565223a815261101160f11b602082015283516134f181602284016020880161280a565b63089f574b60e21b60229290910191820152602601949350505050565b6000835161352081846020880161280a565b691134b6b0b3b2911d101160b11b908301908152835161354781600a84016020880161280a565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161359a81601d85016020870161280a565b91909101601d0192915050565b600086516135b9818460208b0161280a565b8651908301906135cd818360208b0161280a565b602f60f81b910181815286519091906135ed816001850160208b0161280a565b60019201918201819052855161360a816002850160208a0161280a565b6002920191820152835161362581600384016020880161280a565b632e706e6760e01b60039290910191820152600701979650505050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b8082018082111561053d5761053d612f37565b6040815260006136b0604083018561282e565b90508260208301529392505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261376657634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761053d5761053d612f37565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137b59083018461282e565b9695505050505050565b6000602082840312156137d157600080fd5b8151612803816127d056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122052001312466a26ba36e0fa9b5914d5c861c3f9e348b2cf78ccf3254c9726c9ed64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063715018a61161011a578063b88d4fde116100ad578063d600671c1161007c578063d600671c14610485578063e985e9c514610498578063f23a6e61146104ab578063f2fde38b146104cb578063f3ad65f4146104de57600080fd5b8063b88d4fde14610404578063bc197c8114610417578063c87b56dd14610452578063c964e4931461046557600080fd5b806395d89b41116100e957806395d89b41146103c3578063a061a03a146103cb578063a22cb465146103de578063abac3fc3146103f157600080fd5b8063715018a614610358578063771282f6146103605780638da5cb5b1461036957806395ca8acb1461037a57600080fd5b806342842e0e1161019257806355f804b31161016157806355f804b3146103175780636352211e1461032a5780636c0360eb1461033d57806370a082311461034557600080fd5b806342842e0e146102be57806348758697146102d15780634b93f753146102f15780634f558e791461030457600080fd5b806318160ddd116101ce57806318160ddd1461027d57806323b872dd1461028f57806326987b60146102a257806327c7812c146102ab57600080fd5b806301ffc9a71461020057806306fdde0314610228578063081812fc1461023d578063095ea7b314610268575b600080fd5b61021361020e3660046127e6565b6104f1565b60405190151581526020015b60405180910390f35b610230610543565b60405161021f919061285a565b61025061024b36600461286d565b6105d5565b6040516001600160a01b03909116815260200161021f565b61027b61027636600461289b565b6105fc565b005b600a545b60405190815260200161021f565b61027b61029d3660046128c7565b610716565b610281600b5481565b61027b6102b9366004612908565b610747565b61027b6102cc3660046128c7565b610798565b6102e46102df36600461286d565b6107b3565b60405161021f919061295d565b6102816102ff36600461286d565b610882565b61021361031236600461286d565b610b2e565b61027b6103253660046129f7565b610b4d565b61025061033836600461286d565b610ba3565b610230610c03565b610281610353366004612908565b610c91565b61027b610d17565b610281600a5481565b6006546001600160a01b0316610250565b6103b361038836600461286d565b600c60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60405161021f9493929190612a40565b610230610d2b565b61027b6103d9366004612ab5565b610d3a565b61027b6103ec366004612b21565b610e2e565b61027b6103ff366004612b5f565b610e3d565b61027b610412366004612b91565b61123d565b610439610425366004612c53565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b0319909116815260200161021f565b61023061046036600461286d565b61126f565b61047861047336600461286d565b6116a2565b60405161021f9190612d12565b610230610493366004612d65565b611755565b6102136104a6366004612dc5565b6117d7565b6104396104b9366004612df3565b63f23a6e6160e01b9695505050505050565b61027b6104d9366004612908565b611805565b600854610250906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b148061052257506001600160e01b03198216635b5e139f60e01b145b8061053d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461055290612e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461057e90612e6f565b80156105cb5780601f106105a0576101008083540402835291602001916105cb565b820191906000526020600020905b8154815290600101906020018083116105ae57829003601f168201915b5050505050905090565b60006105e08261187e565b506000908152600460205260409020546001600160a01b031690565b600061060782610ba3565b9050806001600160a01b0316836001600160a01b0316036106795760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610695575061069581336117d7565b6107075760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610670565b61071183836118dd565b505050565b610720338261194b565b61073c5760405162461bcd60e51b815260040161067090612ea9565b6107118383836119a9565b61074f611b1a565b600880546001600160a01b0319166001600160a01b0383169081179091556040517e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a959290600090a250565b6107118383836040518060200160405280600081525061123d565b6000818152600260205260408120546001600160a01b03166108175760405162461bcd60e51b815260206004820152601860248201527f53706163657368697020646f6573206e6f7420657869737400000000000000006044820152606401610670565b6000828152600c60205260408082208151608081019092528054829060ff16600381111561084757610847612925565b600381111561085857610858612925565b81526001820154602082015260028201546040820152600390910154606090910152519392505050565b600080600860009054906101000a90046001600160a01b03166001600160a01b0316638e9797296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fc9190612ef6565b6000848152600c602052604080822081516080810190925280549394509192909190829060ff16600381111561093457610934612925565b600381111561094557610945612925565b8152602001600182015481526020016002820154815260200160038201548152505090506000816000015190506000836001600160a01b0316634b93f75384602001516040518263ffffffff1660e01b81526004016109a691815260200190565b602060405180830381865afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190612f13565b90506000846001600160a01b0316634b93f75385604001516040518263ffffffff1660e01b8152600401610a1d91815260200190565b602060405180830381865afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190612f13565b90506000856001600160a01b0316634b93f75386606001516040518263ffffffff1660e01b8152600401610a9491815260200190565b602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190612f13565b905080610ae28385612f4d565b610aec9190612f4d565b610af7906001612f4d565b846003811115610b0957610b09612925565b610b14906001612f4d565b610b1e9190612f6f565b61ffff1698975050505050505050565b6000818152600260205260408120546001600160a01b0316151561053d565b610b55611b1a565b6009610b618282612fe3565b5080604051610b7091906130bf565b604051908190038120907f6741b2fc379fad678116fe3d4d4b9a1a184ab53ba36b86ad0fa66340b1ab41ad90600090a250565b6000818152600260205260408120546001600160a01b03168061053d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610670565b60098054610c1090612e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3c90612e6f565b8015610c895780601f10610c5e57610100808354040283529160200191610c89565b820191906000526020600020905b815481529060010190602001808311610c6c57829003601f168201915b505050505081565b60006001600160a01b038216610cfb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610670565b506001600160a01b031660009081526003602052604090205490565b610d1f611b1a565b610d296000611b74565b565b60606001805461055290612e6f565b828114610d895760405162461bcd60e51b815260206004820152601e60248201527f417272617973206d757374206265207468652073616d65206c656e67746800006044820152606401610670565b60005b83811015610e2757610dc3858583818110610da957610da96130db565b9050602002016020810190610dbe9190612908565b611bc6565b610e156001600b54610dd591906130f1565b848484818110610de757610de76130db565b9050602002016020810190610dfc9190613104565b60ff166003811115610e1057610e10612925565b611c3b565b80610e1f81613121565b915050610d8c565b5050505050565b610e39338383611cbf565b5050565b610e45611d8d565b33610e4f85610ba3565b6001600160a01b031614610e76576040516330cd747160e01b815260040160405180910390fd5b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612ef6565b6000868152600c602052604090206001808201549293509091610f08918790611de6565b610f188160020154856002611de6565b610f288160030154846000611de6565b600181018590556002810184905560038101839055604051630219207560e61b81526004810186905286907f5cb29d191dfe603d478a647638b5f89bdfd66de0c9089135f437435b72a3d0f5906001600160a01b038516906386481d4090602401602060405180830381865afa158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca919061313a565b60ff16600003610ffc576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b815250611072565b604051630219207560e61b815260048101889052611072906001600160a01b038616906386481d40906024015b602060405180830381865afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a919061313a565b60ff16611fdc565b604051630219207560e61b8152600481018890526001600160a01b038616906386481d4090602401602060405180830381865afa1580156110b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110db919061313a565b60ff1660000361110d576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061113e565b604051630219207560e61b81526004810188905261113e906001600160a01b038716906386481d4090602401611029565b604051630219207560e61b8152600481018890526001600160a01b038716906386481d4090602401602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061313a565b60ff166000036111d9576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061120a565b604051630219207560e61b81526004810188905261120a906001600160a01b038816906386481d4090602401611029565b6112138b610882565b6040516112239493929190613157565b60405180910390a250506112376001600755565b50505050565b611247338361194b565b6112635760405162461bcd60e51b815260040161067090612ea9565b6112378484848461206f565b606061127a8261187e565b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190612ef6565b6000848152600c602052604080822081516080810190925280549394509192909190829060ff16600381111561132057611320612925565b600381111561133157611331612925565b8152600182015460208201526002820154604082015260039091015460609091015280519091506000611362610543565b61136b87611fdc565b60405160200161137c9291906131a2565b60408051808303601f1901815282825290850151630219207560e61b8352600483015291506000906001600160a01b038616906386481d4090602401602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f9919061313a565b90506000856001600160a01b03166386481d4086602001516040518263ffffffff1660e01b815260040161142f91815260200190565b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611470919061313a565b90506000866001600160a01b03166386481d4087606001516040518263ffffffff1660e01b81526004016114a691815260200190565b602060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e7919061313a565b905060008360ff1660000361151e576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061152a565b61152a8460ff16611fdc565b905060008360ff16600003611561576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b81525061156d565b61156d8460ff16611fdc565b905060008360ff166000036115a4576040518060400160405280600a815260200169155b995c5d5a5c1c195960b21b8152506115b0565b6115b08460ff16611fdc565b9050866040516020016115c39190613205565b6040516020818303038152906040529650866115de896120a2565b8484846040516020016115f5959493929190613312565b6040516020818303038152906040529650866116186116138e610882565b611fdc565b604051602001611629929190613499565b604051602081830303815290604052965061166f8761164a8a898989611755565b60405160200161165b92919061350e565b604051602081830303815290604052612193565b9650866040516020016116829190613562565b6040516020818303038152906040529a5050505050505050505050919050565b6040805160c0810182526000918101828152606082018390526080820183905260a0820183905281526020810191909152604080516000848152600c60205282812060c0830184528054919383929083019190829060ff16600381111561170b5761170b612925565b600381111561171c5761171c612925565b81526020016001820154815260200160028201548152602001600382015481525050815260200161174c85610882565b90529392505050565b606061175f6122fa565b61177486600381111561161357611613612925565b61179161178085612309565b600381111561161357611613612925565b61179d61178087612309565b6117a961178089612309565b6040516020016117bd9594939291906135a7565b60405160208183030381529060405290505b949350505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61180d611b1a565b6001600160a01b0381166118725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610670565b61187b81611b74565b50565b6000818152600260205260409020546001600160a01b031661187b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610670565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061191282610ba3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061195783610ba3565b9050806001600160a01b0316846001600160a01b0316148061197e575061197e81856117d7565b806117cf5750836001600160a01b0316611997846105d5565b6001600160a01b031614949350505050565b826001600160a01b03166119bc82610ba3565b6001600160a01b0316146119e25760405162461bcd60e51b815260040161067090613645565b6001600160a01b038216611a445760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610670565b611a51838383600161238c565b826001600160a01b0316611a6482610ba3565b6001600160a01b031614611a8a5760405162461bcd60e51b815260040161067090613645565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b03163314610d295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610670565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600a6000828254611bd9919061368a565b92505081905550611bec81600b54612414565b6001600b6000828254611bff919061368a565b90915550506040516001600160a01b038216907f3e4f823260c0ce29668141f615360eac28cc3b82ca6e9ef19552eba69b42bdfc90600090a250565b6000828152600c60205260409020805482919060ff19166001836003811115611c6657611c66612925565b02179055506000611c7683610882565b9050827fcb9675d4ccdd2cd44d781b848134afaf0d5f510432eece9c70f3baa6b61d76d1611ca3846120a2565b83604051611cb292919061369d565b60405180910390a2505050565b816001600160a01b0316836001600160a01b031603611d205760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610670565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600260075403611ddf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610670565b6002600755565b60085460408051638e97972960e01b815290516000926001600160a01b031691638e9797299160048083019260209291908290030181865afa158015611e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e549190612ef6565b9050828403611e635750505050565b8215801590611ee15750604051630e9f48af60e21b81526004810184905260ff8316906001600160a01b03831690633a7d22bc90602401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb919061313a565b60ff1614155b15611eff57604051630fd7210b60e11b815260040160405180910390fd5b8215611f6b57604051637921219560e11b81526001600160a01b0382169063f242432a90611f38903390309088906001906004016136bf565b600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b505050505b831561123757604051637921219560e11b81526001600160a01b0382169063f242432a90611fa4903090339089906001906004016136bf565b600060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b5050505050505050565b60606000611fe98361242e565b600101905060008167ffffffffffffffff8111156120095761200961296b565b6040519080825280601f01601f191660200182016040528015612033576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461203d57509392505050565b61207a8484846119a9565b61208684848484612506565b6112375760405162461bcd60e51b8152600401610670906136f7565b606060008260038111156120b8576120b8612925565b036120df57505060408051808201909152600681526521b7b6b6b7b760d11b602082015290565b60018260038111156120f3576120f3612925565b0361211c5750506040805180820190915260088152672ab731b7b6b6b7b760c11b602082015290565b600282600381111561213057612130612925565b036121555750506040805180820190915260048152635261726560e01b602082015290565b600382600381111561216957612169612925565b0361218e5750506040805180820190915260048152634570696360e01b602082015290565b919050565b606081516000036121b257505060408051602081019091526000815290565b60006040518060600160405280604081526020016137dd60409139905060006003845160026121e1919061368a565b6121eb9190613749565b6121f690600461376b565b9050600061220582602061368a565b67ffffffffffffffff81111561221d5761221d61296b565b6040519080825280601f01601f191660200182016040528015612247576020820181803683370190505b509050818152600183018586518101602084015b818310156122b55760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161225b565b6003895106600181146122cf57600281146122e0576122ec565b613d3d60f01b6001198301526122ec565b603d60f81b6000198301525b509398975050505050505050565b60606009805461055290612e6f565b600060018260ff16101561231f57506000919050565b60018260ff1610158015612336575060058260ff16105b1561234357506001919050565b60058260ff161015801561235a575060088260ff16105b1561236757506002919050565b60088260ff161015801561237f5750600a8260ff1611155b1561218e57506003919050565b6001811115611237576001600160a01b038416156123d2576001600160a01b038416600090815260036020526040812080548392906123cc9084906130f1565b90915550505b6001600160a01b03831615611237576001600160a01b0383166000908152600360205260408120805483929061240990849061368a565b909155505050505050565b610e39828260405180602001604052806000815250612604565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061246d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612499576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106124b757662386f26fc10000830492506010015b6305f5e10083106124cf576305f5e100830492506008015b61271083106124e357612710830492506004015b606483106124f5576064830492506002015b600a831061053d5760010192915050565b60006001600160a01b0384163b156125fc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061254a903390899088908890600401613782565b6020604051808303816000875af1925050508015612585575060408051601f3d908101601f19168201909252612582918101906137bf565b60015b6125e2573d8080156125b3576040519150601f19603f3d011682016040523d82523d6000602084013e6125b8565b606091505b5080516000036125da5760405162461bcd60e51b8152600401610670906136f7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117cf565b5060016117cf565b61260e8383612637565b61261b6000848484612506565b6107115760405162461bcd60e51b8152600401610670906136f7565b6001600160a01b03821661268d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610670565b6000818152600260205260409020546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610670565b61270060008383600161238c565b6000818152600260205260409020546001600160a01b0316156127655760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610670565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461187b57600080fd5b6000602082840312156127f857600080fd5b8135612803816127d0565b9392505050565b60005b8381101561282557818101518382015260200161280d565b50506000910152565b6000815180845261284681602086016020860161280a565b601f01601f19169290920160200192915050565b602081526000612803602083018461282e565b60006020828403121561287f57600080fd5b5035919050565b6001600160a01b038116811461187b57600080fd5b600080604083850312156128ae57600080fd5b82356128b981612886565b946020939093013593505050565b6000806000606084860312156128dc57600080fd5b83356128e781612886565b925060208401356128f781612886565b929592945050506040919091013590565b60006020828403121561291a57600080fd5b813561280381612886565b634e487b7160e01b600052602160045260246000fd5b6004811061295957634e487b7160e01b600052602160045260246000fd5b9052565b6020810161053d828461293b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561299c5761299c61296b565b604051601f8501601f19908116603f011681019082821181831017156129c4576129c461296b565b816040528093508581528686860111156129dd57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a0957600080fd5b813567ffffffffffffffff811115612a2057600080fd5b8201601f81018413612a3157600080fd5b6117cf84823560208401612981565b60808101612a4e828761293b565b84602083015283604083015282606083015295945050505050565b60008083601f840112612a7b57600080fd5b50813567ffffffffffffffff811115612a9357600080fd5b6020830191508360208260051b8501011115612aae57600080fd5b9250929050565b60008060008060408587031215612acb57600080fd5b843567ffffffffffffffff80821115612ae357600080fd5b612aef88838901612a69565b90965094506020870135915080821115612b0857600080fd5b50612b1587828801612a69565b95989497509550505050565b60008060408385031215612b3457600080fd5b8235612b3f81612886565b915060208301358015158114612b5457600080fd5b809150509250929050565b60008060008060808587031215612b7557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060008060808587031215612ba757600080fd5b8435612bb281612886565b93506020850135612bc281612886565b925060408501359150606085013567ffffffffffffffff811115612be557600080fd5b8501601f81018713612bf657600080fd5b612c0587823560208401612981565b91505092959194509250565b60008083601f840112612c2357600080fd5b50813567ffffffffffffffff811115612c3b57600080fd5b602083019150836020828501011115612aae57600080fd5b60008060008060008060008060a0898b031215612c6f57600080fd5b8835612c7a81612886565b97506020890135612c8a81612886565b9650604089013567ffffffffffffffff80821115612ca757600080fd5b612cb38c838d01612a69565b909850965060608b0135915080821115612ccc57600080fd5b612cd88c838d01612a69565b909650945060808b0135915080821115612cf157600080fd5b50612cfe8b828c01612c11565b999c989b5096995094979396929594505050565b600060a0820190508251612d2783825161293b565b602081015160208401526040810151604084015260608101516060840152506020830151608083015292915050565b60ff8116811461187b57600080fd5b60008060008060808587031215612d7b57600080fd5b843560048110612d8a57600080fd5b93506020850135612d9a81612d56565b92506040850135612daa81612d56565b91506060850135612dba81612d56565b939692955090935050565b60008060408385031215612dd857600080fd5b8235612de381612886565b91506020830135612b5481612886565b60008060008060008060a08789031215612e0c57600080fd5b8635612e1781612886565b95506020870135612e2781612886565b94506040870135935060608701359250608087013567ffffffffffffffff811115612e5157600080fd5b612e5d89828a01612c11565b979a9699509497509295939492505050565b600181811c90821680612e8357607f821691505b602082108103612ea357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060208284031215612f0857600080fd5b815161280381612886565b600060208284031215612f2557600080fd5b815161ffff8116811461280357600080fd5b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115612f6857612f68612f37565b5092915050565b61ffff818116838216028082169190828114612f8d57612f8d612f37565b505092915050565b601f82111561071157600081815260208120601f850160051c81016020861015612fbc5750805b601f850160051c820191505b81811015612fdb57828155600101612fc8565b505050505050565b815167ffffffffffffffff811115612ffd57612ffd61296b565b6130118161300b8454612e6f565b84612f95565b602080601f831160018114613046576000841561302e5750858301515b600019600386901b1c1916600185901b178555612fdb565b600085815260208120601f198616915b8281101561307557888601518255948401946001909101908401613056565b50858210156130935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081516130b581856020860161280a565b9290920192915050565b600082516130d181846020870161280a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b8181038181111561053d5761053d612f37565b60006020828403121561311657600080fd5b813561280381612d56565b60006001820161313357613133612f37565b5060010190565b60006020828403121561314c57600080fd5b815161280381612d56565b60808152600061316a608083018761282e565b828103602084015261317c818761282e565b90508281036040840152613190818661282e565b91505082606083015295945050505050565b693d913730b6b2911d101160b11b815282516000906131c881600a85016020880161280a565b61202360f01b600a9184019182015283516131ea81600c84016020880161280a565b61088b60f21b600c9290910191820152600e01949350505050565b6000825161321781846020870161280a565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e20416371756972652053706163657360608201527f6869707320746f2074616b65207061727420696e207468652041746c616e746960808201527f73207261636520616e64206561726e206174747261637469766520726577617260a082015264191cc8488b60da1b60c082015260c501919050565b60008651613324818460208b0161280a565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a20225281527130b934ba3c911610113b30b63ab2911d101160711b6020820152865161337a816032840160208b0161280a565b62089f4b60ea1b6032929091019182018190527f7b2274726169745f74797065223a20225468756e646572626f6c742057696e6760358301527339902632bb32b6111610113b30b63ab2911d101160611b6055830181905287516133e5816069860160208c0161280a565b60699301928301919091527f7b2274726169745f74797065223a2022496e6665726e6f205468727573746572606c830152608c82015261348d6134326134876134418260a086018a6130a3565b62089f4b60ea1b815260030190565b7f7b2274726169745f74797065223a20224172676f6e69756d2045786f7368656c81527336102632bb32b6111610113b30b63ab2911d101160611b602082015260340190565b866130a3565b98975050505050505050565b600083516134ab81846020880161280a565b80830190507f7b2274726169745f74797065223a20225370656564222c202276616c7565223a815261101160f11b602082015283516134f181602284016020880161280a565b63089f574b60e21b60229290910191820152602601949350505050565b6000835161352081846020880161280a565b691134b6b0b3b2911d101160b11b908301908152835161354781600a84016020880161280a565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161359a81601d85016020870161280a565b91909101601d0192915050565b600086516135b9818460208b0161280a565b8651908301906135cd818360208b0161280a565b602f60f81b910181815286519091906135ed816001850160208b0161280a565b60019201918201819052855161360a816002850160208a0161280a565b6002920191820152835161362581600384016020880161280a565b632e706e6760e01b60039290910191820152600701979650505050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b8082018082111561053d5761053d612f37565b6040815260006136b0604083018561282e565b90508260208301529392505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261376657634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761053d5761053d612f37565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137b59083018461282e565b9695505050505050565b6000602082840312156137d157600080fd5b8151612803816127d056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122052001312466a26ba36e0fa9b5914d5c861c3f9e348b2cf78ccf3254c9726c9ed64736f6c63430008110033",
  "devdoc": {
    "details": "Race your spaceships on the racing contract! Equip equipments to boost speed!",
    "kind": "dev",
    "methods": {
      "airdrop(address[],uint8[])": {
        "params": {
          "_addresses": "All addresses that will receive nfts",
          "_rarities": "Amount of nfts that will be minted for each address"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "exists(uint256)": {
        "params": {
          "tokenId": "Token ID"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getImageURI(uint8,uint8,uint8,uint8)": {
        "params": {
          "_fireLevel": "Fire level of spaceship",
          "_lightningLevel": "Lightning level of spaceship",
          "_rarity": "Rarity of spaceship",
          "_steelLevel": "Steel level of spaceship"
        }
      },
      "getRarity(uint256)": {
        "params": {
          "_tokenId": "Token ID of spaceship"
        }
      },
      "getSpaceship(uint256)": {
        "params": {
          "_tokenId": "Token ID of spaceship"
        }
      },
      "getSpeed(uint256)": {
        "params": {
          "_tokenId": "Token ID of spaceship"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set Metadata URI",
        "params": {
          "_newBaseURI": "new base uri"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Metadata is stored on-chainMetadata is stored in JSON format",
        "params": {
          "_tokenId": "Token ID of spaceship"
        },
        "returns": {
          "_0": "String of token metadata"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Atlantis Spaceships Mint Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "airdrop(address[],uint8[])": {
        "notice": "Airdrop multiple nfts to multiple addresses"
      },
      "exists(uint256)": {
        "notice": "Checks if token exists"
      },
      "getImageURI(uint8,uint8,uint8,uint8)": {
        "notice": "Get ImageURI"
      },
      "getRarity(uint256)": {
        "notice": "Get rarity of a spaceship from its id"
      },
      "getSpaceship(uint256)": {
        "notice": "Get details of a spaceship from its id"
      },
      "getSpeed(uint256)": {
        "notice": "Get speed of a spaceship from its id"
      },
      "modifyEquipment(uint256,uint256,uint256,uint256)": {
        "notice": "Token Ids of equipments 1 2 3 Fire Lightning Steel Equipment Level 1 4 5 6 Fire Lightning Steel Equipment Level 2 7 8 9 Fire Lightning Steel Equipment Level 3 10 11 12 Fire Lightning Steel Equipment Level 4 13 14 15 Fire Lightning Steel Equipment Level 5 16 17 18 Fire Lightning Steel Equipment Level 6 19 20 21 Fire Lightning Steel Equipment Level 7 22 23 24 Fire Lightning Steel Equipment Level 8 25 26 27 Fire Lightning Steel Equipment Level 9 28 29 30 Fire Lightning Steel Equipment Level 10"
      },
      "tokenURI(uint256)": {
        "notice": "Returns token metadata"
      },
      "totalSupply()": {
        "notice": "Returns total supply of spaceships"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 355,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 357,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 361,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 365,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 369,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 375,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3670,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(AtlantisAddressRegistry)3325"
      },
      {
        "astId": 3672,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 3674,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "currentSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3677,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "currentIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3682,
        "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
        "label": "spaceships",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Spaceship)5256_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AtlantisAddressRegistry)3325": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(Rarity)4720": {
        "encoding": "inplace",
        "label": "enum AtlantisLib.Rarity",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Spaceship)5256_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAtlantisSpaceships.Spaceship)",
        "numberOfBytes": "32",
        "value": "t_struct(Spaceship)5256_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Spaceship)5256_storage": {
        "encoding": "inplace",
        "label": "struct IAtlantisSpaceships.Spaceship",
        "members": [
          {
            "astId": 5249,
            "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
            "label": "rarity",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Rarity)4720"
          },
          {
            "astId": 5251,
            "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
            "label": "fireEquipmentId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5253,
            "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
            "label": "lightningEquipmentId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5255,
            "contract": "contracts/AtlantisSpaceships.sol:AtlantisSpaceships",
            "label": "steelEquipmentId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}