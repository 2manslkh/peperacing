{
  "address": "0x16bA5454f6dE344cc094dAf29cb9192489f592EF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalRewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seasonEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_nftMultipliers",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddressRegistry",
          "type": "address"
        }
      ],
      "name": "AddressRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawGold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawStardust",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "EndSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "poolId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stardustAmount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEndTime",
          "type": "uint256"
        }
      ],
      "name": "SeasonEndTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shipScore",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numOfNfts",
          "type": "uint256"
        }
      ],
      "name": "StakeNfts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "StartSeason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numOfNfts",
          "type": "uint256"
        }
      ],
      "name": "UnstakeNfts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_TOKEN_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NFTS_STAKED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cachedSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "getCurrentlyStakedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getCurrentlyStakedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "getPreviouslyStakedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stardustWeightage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "goldWeightage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accStardustPerPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveGold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveStardust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seasonEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seasonStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seasonStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setSeasonEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_collectionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setWhitelistedCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_collectionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_nfts",
          "type": "uint256[]"
        }
      ],
      "name": "stakeNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "stakeSpaceships",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedSpaceships",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_collectionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_nfts",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeSpaceships",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "spaceshipsStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostingNftsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewBoostingNfts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "viewBoostingNftsPoolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "viewCurrentlyStakedSpaceships",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "viewPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stardustWeightage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "goldWeightage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accStardustPerPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPoints",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAtlantisRacing.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "viewRewards",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewSpaceshipsStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewTotalSpeeds",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedCollections",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9a4cd2abc5a3e27a2593952aefc1aa6b701793bd743b9dad1877bdc7bdee861",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0x16bA5454f6dE344cc094dAf29cb9192489f592EF",
    "transactionIndex": 1,
    "gasUsed": "4189163",
    "logsBloom": "0x
    "blockHash": "0x1c6be52526e6915d7cc9ee3ed51cf75022756862b3e6906945da3d8a9e03b527",
    "transactionHash": "0xc9a4cd2abc5a3e27a2593952aefc1aa6b701793bd743b9dad1877bdc7bdee861",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9351046,
        "transactionHash": "0xc9a4cd2abc5a3e27a2593952aefc1aa6b701793bd743b9dad1877bdc7bdee861",
        "address": "0x16bA5454f6dE344cc094dAf29cb9192489f592EF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1c6be52526e6915d7cc9ee3ed51cf75022756862b3e6906945da3d8a9e03b527"
      }
    ],
    "blockNumber": 9351046,
    "cumulativeGasUsed": "4457529",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf0776a4F32a4F95649D3b1c79eb5FFE6c43e53F3",
    "1500000000000000000",
    1687188597,
    [
      10,
      11,
      12,
      13,
      14,
      15
    ]
  ],
  "numDeployments": 4,
  "solcInputHash": "106eebcf0127e11d99771bf7535fb763",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seasonEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_nftMultipliers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddressRegistry\",\"type\":\"address\"}],\"name\":\"AddressRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawGold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawStardust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"EndSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"poolId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stardustAmount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"SeasonEndTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shipScore\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfNfts\",\"type\":\"uint256\"}],\"name\":\"StakeNfts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StartSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfNfts\",\"type\":\"uint256\"}],\"name\":\"UnstakeNfts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_TOKEN_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NFTS_STAKED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getCurrentlyStakedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getCurrentlyStakedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getPreviouslyStakedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stardustWeightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldWeightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accStardustPerPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveGold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveStardust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSeasonEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelistedCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nfts\",\"type\":\"uint256[]\"}],\"name\":\"stakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeSpaceships\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedSpaceships\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_collectionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nfts\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"unstakeSpaceships\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spaceshipsStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostingNftsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewBoostingNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"viewBoostingNftsPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"viewCurrentlyStakedSpaceships\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stardustWeightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldWeightage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accStardustPerPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCount\",\"type\":\"uint256\"}],\"internalType\":\"struct IAtlantisRacing.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"viewRewards\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewSpaceshipsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewTotalSpeeds\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedCollections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Send your Spaceships to race for rewards. Add supported Nft collections to boost speed and earn a larger share of the rewards.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_registry\":\"Address registry contract\",\"_seasonEndTime\":\"Season end time\",\"_totalRewardPerSecond\":\"Total stardust per second\"}},\"getCurrentlyStakedTokenIds(address)\":{\"params\":{\"_collectionAddress\":\"Address of the collection contract\"},\"returns\":{\"_0\":\"Array of tokenIds which are currently staked for the given token contract\"}},\"getCurrentlyStakedTokenIds(uint8,address,address)\":{\"params\":{\"_collectionAddress\":\"Address of the collection contract\",\"_pid\":\"Pool id\",\"_staker\":\"User for whom to retrieve staked token ids\"},\"returns\":{\"_0\":\"Array of tokenIds which are currently staked by the user for the given token contract\"}},\"getPreviouslyStakedTokenIds(address)\":{\"params\":{\"_collectionAddress\":\"Address of the collection contract\"},\"returns\":{\"_0\":\"Array of tokenIds which have ever been staked for the given token contract\"}},\"getReward(uint8)\":{\"params\":{\"_pid\":\"Pool id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAddressRegistry(address)\":{\"params\":{\"_addressRegistry\":\"The address of the Address Registry\"}},\"setSeasonEndTime(uint256)\":{\"params\":{\"_time\":\"season end time in unix timestamp\"}},\"setWhitelistedCollections(address[],bool)\":{\"details\":\"Only whitelisted collections can be staked\",\"params\":{\"_collectionAddresses\":\"The address of the collection\",\"_status\":\"The whitelisted status of the collection\"}},\"stakeNfts(uint8,address[],uint256[])\":{\"params\":{\"_collectionAddresses\":\"Array of collection addresses\",\"_nfts\":\"Array of token ids to stake\",\"_pid\":\"Id of the pool to boost\"}},\"stakeSpaceships(uint256[])\":{\"params\":{\"_ids\":\"The ids of the spaceships to stake\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeNfts(uint8,address[],uint256[])\":{\"params\":{\"_collectionAddresses\":\"Array of nft contract addresses\",\"_nfts\":\"Array of structs containing the nft contract and token id to unstake\",\"_pid\":\"Id of the farm to unstake the nfts from\"}},\"unstakeSpaceships(uint256[])\":{\"params\":{\"_ids\":\"The ids of the spaceships to unstake\"}},\"viewBoostingNfts(uint8,address,address)\":{\"params\":{\"_collectionAddress\":\"Address of the collection contract\",\"_pid\":\"Pool id\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"boostingNfts Array of nft ids\"}},\"viewBoostingNftsPoolCount(address,uint8)\":{\"params\":{\"_pid\":\"Pool id\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"number of boosting nfts in a specific pool\"}},\"viewCurrentlyStakedSpaceships(address,uint8)\":{\"params\":{\"_pid\":\"Pool id\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"spaceshipIds Array of spaceship ids\"}},\"viewPoolInfo(uint256)\":{\"params\":{\"_pid\":\"Pool id\"}},\"viewRewards(address,uint8)\":{\"params\":{\"_pid\":\"Pool id\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"rewards  Array of rewards [stardust, gold]\"}},\"viewSpaceshipsStaked(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"spaceshipsStaked  Number of spaceships staked\"}},\"viewTotalSpeeds(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"totalSpeeds  Array of total speeds [Global, Common, Uncommon, Rare/Epic]\"}}},\"title\":\"Atlantis - Racing contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ACC_TOKEN_PRECISION()\":{\"notice\":\"Precision factor for calculations\"},\"MAX_NFTS_STAKED()\":{\"notice\":\"Max limit of Nfts staked in all pools\"},\"addressRegistry()\":{\"notice\":\"Address registry contract\"},\"cachedSpeeds(uint256)\":{\"notice\":\"Cached speed\"},\"constructor\":{\"notice\":\"Constructor for Atlantis Racing\"},\"endSeason()\":{\"notice\":\"Ends the season early\"},\"getCurrentlyStakedTokenIds(address)\":{\"notice\":\"Get tokenIds of a given collection currently staked by any user\"},\"getCurrentlyStakedTokenIds(uint8,address,address)\":{\"notice\":\"Get tokenIds of a given collection currently staked by specific user\"},\"getPreviouslyStakedTokenIds(address)\":{\"notice\":\"Get tokenIds of a given collection that have ever been staked by any user\"},\"getReward(uint8)\":{\"notice\":\"Harvest rewards for a certain poolId for msg.sender\"},\"getRewards()\":{\"notice\":\"Harvest all rewards for msg.sender\"},\"nftMultiplier(uint256)\":{\"notice\":\"Multiplier when a user stakes Nfts\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"For receiving ERC721 tokens\"},\"poolInfo(uint256)\":{\"notice\":\"Information of each respective pool (Global, Common, Uncommon, Rare/Epic)\"},\"retrieveGold()\":{\"notice\":\"Used to retrieve any gold on the contract\"},\"retrieveStardust()\":{\"notice\":\"Used to retrieve any stardust on the contract\"},\"seasonEndTime()\":{\"notice\":\"Unix timestamp of season end time\"},\"seasonStartTime()\":{\"notice\":\"Unix timestamp of season start time\"},\"seasonStarted()\":{\"notice\":\"Whether the season has started\"},\"setAddressRegistry(address)\":{\"notice\":\"Set the Address Registry\"},\"setSeasonEndTime(uint256)\":{\"notice\":\"Setter for season end time\"},\"setWhitelistedCollections(address[],bool)\":{\"notice\":\"Set the whitelisted status of a collection\"},\"stakeNfts(uint8,address[],uint256[])\":{\"notice\":\"Stakes given nfts and uses them to boost the given pool.\"},\"stakeSpaceships(uint256[])\":{\"notice\":\"Stake spaceships to earn stardust + gold\"},\"stakedSpaceships(address,uint256)\":{\"notice\":\"Mapping of (user) => (tokenId) => (bool) if token is staked\"},\"startSeason()\":{\"notice\":\"Starts the season\"},\"totalRewardPerSecond()\":{\"notice\":\"Total reward per second\"},\"unstakeNfts(uint8,address[],uint256[])\":{\"notice\":\"Unstakes nfts without unboosting the pool\"},\"unstakeSpaceships(uint256[])\":{\"notice\":\"Unstake spaceships\"},\"userInfo(address)\":{\"notice\":\"Information of each user that stakes spaceships\"},\"viewBoostingNfts(uint8,address,address)\":{\"notice\":\"View number of NFTs staked by user\"},\"viewBoostingNftsPoolCount(address,uint8)\":{\"notice\":\"View boosting nfts count in a specific pool\"},\"viewCurrentlyStakedSpaceships(address,uint8)\":{\"notice\":\"View currently staked spaceship ids\"},\"viewPoolInfo(uint256)\":{\"notice\":\"View pool info\"},\"viewRewards(address,uint8)\":{\"notice\":\"View rewards for a certain poolId and user\"},\"viewSpaceshipsStaked(address)\":{\"notice\":\"View number of spaceships staked by user\"},\"viewTotalSpeeds(address)\":{\"notice\":\"View the total speeds of a user across all pools\"},\"whitelistedCollections(address)\":{\"notice\":\"Mapping of address to boolean whitelisted status\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AtlantisRacing.sol\":\"AtlantisRacing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/AtlantisRacing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"./interface/IAtlantisSpaceships.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./common/SetUtils.sol\\\";\\r\\nimport \\\"./interface/IAtlantisRacing.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/// @title Atlantis - Racing contract\\r\\n/// @dev Send your Spaceships to race for rewards. Add supported Nft collections to boost speed and earn a larger share of the rewards.\\r\\ncontract AtlantisRacing is IAtlantisRacing, Ownable, IERC721Receiver, ReentrancyGuard {\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using SetUtils for EnumerableSet.UintSet;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Address registry contract\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n    /// @notice Unix timestamp of season end time\\r\\n    uint256 public seasonEndTime;\\r\\n    /// @notice Total reward per second\\r\\n    uint256 public totalRewardPerSecond;\\r\\n    /// @notice Precision factor for calculations\\r\\n    uint256 public immutable ACC_TOKEN_PRECISION;\\r\\n    /// @notice Unix timestamp of season start time\\r\\n    uint256 public seasonStartTime;\\r\\n    /// @notice Max limit of Nfts staked in all pools\\r\\n    uint256 public constant MAX_NFTS_STAKED = 15;\\r\\n    /// @notice Number of pools\\r\\n    uint256 internal constant amountOfPools = 4;\\r\\n    /// @notice Whether the season has started\\r\\n    bool public seasonStarted = false;\\r\\n    /// @notice Information of each respective pool (Global, Common, Uncommon, Rare/Epic)\\r\\n    mapping(uint256 => PoolInfo) public poolInfo;\\r\\n    /// @notice Information of each user that stakes spaceships\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    /// @notice Cached speed\\r\\n    mapping(uint256 => uint256) public cachedSpeeds;\\r\\n    /// @notice Multiplier when a user stakes Nfts\\r\\n    uint256[6] public nftMultiplier;\\r\\n    /// @notice Mapping of (user) => (tokenId) => (bool) if token is staked\\r\\n    mapping(address => mapping(uint256 => bool)) public stakedSpaceships;\\r\\n    /// @notice Mapping of (user) => (PoolId) => address => (EnumerableSet of NFT tokenIds) Number of NFTs staked in each pool\\r\\n    mapping(address => mapping(uint8 => mapping(address => EnumerableSet.UintSet))) internal stakedNFTs;\\r\\n\\r\\n    /// @notice Mapping of address to boolean whitelisted status\\r\\n    mapping(address => bool) public whitelistedCollections;\\r\\n    /// @notice All tokenIds currently staked\\r\\n    mapping(address => mapping(uint8 => EnumerableSet.UintSet)) internal currentlyStakedSpaceshipIds;\\r\\n    /// @notice All tokenIds currently staked\\r\\n    mapping(address => EnumerableSet.UintSet) internal currentlyStakedIds;\\r\\n    /// @notice All tokenIds previously staked\\r\\n    mapping(address => EnumerableSet.UintSet) internal previouslyStakedIds;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor for Atlantis Racing\\r\\n     * @param _registry Address registry contract\\r\\n     * @param _totalRewardPerSecond Total stardust per second\\r\\n     * @param _seasonEndTime Season end time\\r\\n     */\\r\\n    constructor(\\r\\n        AtlantisAddressRegistry _registry,\\r\\n        uint256 _totalRewardPerSecond,\\r\\n        uint256 _seasonEndTime,\\r\\n        uint256[] memory _nftMultipliers\\r\\n    ) {\\r\\n        require(_nftMultipliers[0] == 10, \\\"Invalid nft multipliers\\\");\\r\\n        require(_seasonEndTime > block.timestamp, \\\"Invalid season end time\\\");\\r\\n        for (uint256 i; i < _nftMultipliers.length; i++) {\\r\\n            nftMultiplier[i] = _nftMultipliers[i];\\r\\n        }\\r\\n        // Set total stardust per second\\r\\n        totalRewardPerSecond = _totalRewardPerSecond;\\r\\n\\r\\n        addressRegistry = _registry;\\r\\n        // Global race pool, 15% of total\\r\\n        poolInfo[0].poolType = 0;\\r\\n        poolInfo[0].rewardPerSecond = (_totalRewardPerSecond * 225) / 1000;\\r\\n        poolInfo[0].stardustWeightage = 80;\\r\\n        poolInfo[0].goldWeightage = 20;\\r\\n        poolInfo[0].lastRewardTime = block.timestamp;\\r\\n        poolInfo[0].accStardustPerPoint = 0;\\r\\n        poolInfo[0].totalPoints = 0;\\r\\n        poolInfo[0].totalCount = 0;\\r\\n\\r\\n        // Common race pool, 50% of total\\r\\n        poolInfo[1].poolType = 1;\\r\\n        poolInfo[1].rewardPerSecond = (_totalRewardPerSecond * 45) / 100;\\r\\n        poolInfo[1].stardustWeightage = 80;\\r\\n        poolInfo[1].goldWeightage = 20;\\r\\n        poolInfo[1].lastRewardTime = block.timestamp;\\r\\n        poolInfo[1].accStardustPerPoint = 0;\\r\\n        poolInfo[1].totalPoints = 0;\\r\\n        poolInfo[1].totalCount = 0;\\r\\n\\r\\n        // Uncommon race pool, 30% of total\\r\\n        poolInfo[2].poolType = 2;\\r\\n        poolInfo[2].rewardPerSecond = (_totalRewardPerSecond * 25) / 100;\\r\\n        poolInfo[2].stardustWeightage = 80;\\r\\n        poolInfo[2].goldWeightage = 20;\\r\\n        poolInfo[2].lastRewardTime = block.timestamp;\\r\\n        poolInfo[2].accStardustPerPoint = 0;\\r\\n        poolInfo[2].totalPoints = 0;\\r\\n        poolInfo[2].totalCount = 0;\\r\\n\\r\\n        // Rare + Epic race pool, 5% of total\\r\\n        poolInfo[3].poolType = 3;\\r\\n        poolInfo[3].rewardPerSecond = (_totalRewardPerSecond * 75) / 1000;\\r\\n        poolInfo[3].stardustWeightage = 80;\\r\\n        poolInfo[3].goldWeightage = 20;\\r\\n        poolInfo[3].lastRewardTime = block.timestamp;\\r\\n        poolInfo[3].accStardustPerPoint = 0;\\r\\n        poolInfo[3].totalPoints = 0;\\r\\n        poolInfo[3].totalCount = 0;\\r\\n\\r\\n        // Scratch generation cut off date\\r\\n        seasonEndTime = _seasonEndTime;\\r\\n        ACC_TOKEN_PRECISION = 10 ** 18;\\r\\n\\r\\n        // Get argonauts from registry\\r\\n        address argonauts = addressRegistry.getArgonauts();\\r\\n        // Set whitelisted collections\\r\\n        whitelistedCollections[argonauts] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        onlyOwner functions >:]\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @notice Setter for season end time\\r\\n     * @param _time season end time in unix timestamp\\r\\n     */\\r\\n    function setSeasonEndTime(uint256 _time) public onlyOwner {\\r\\n        require(_time > block.timestamp, \\\"Season end time must be in the future\\\");\\r\\n        seasonEndTime = _time;\\r\\n        _massUpdatePools();\\r\\n        emit SeasonEndTimeChanged(_time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Starts the season\\r\\n     */\\r\\n    function startSeason() external onlyOwner {\\r\\n        require(!seasonStarted, \\\"Season already started\\\");\\r\\n        require(block.timestamp < seasonEndTime, \\\"Season already ended\\\");\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        seasonStartTime = currentTime;\\r\\n        seasonStarted = true;\\r\\n        // Update last reward time\\r\\n        for (uint256 i; i < amountOfPools; i++) {\\r\\n            poolInfo[i].lastRewardTime = currentTime;\\r\\n        }\\r\\n        emit StartSeason(currentTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ends the season early\\r\\n     */\\r\\n    function endSeason() external onlyOwner {\\r\\n        require(seasonStarted, \\\"Season not started\\\");\\r\\n        require(block.timestamp < seasonEndTime, \\\"Season already ended\\\");\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        seasonEndTime = currentTime;\\r\\n        _massUpdatePools();\\r\\n        emit EndSeason(currentTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Address Registry\\r\\n     * @param _addressRegistry The address of the Address Registry\\r\\n     */\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        emit AddressRegistryUpdated(address(_addressRegistry));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve any stardust on the contract\\r\\n     */\\r\\n    function retrieveStardust() external onlyOwner {\\r\\n        IERC20 stardust = IERC20(addressRegistry.getStardust());\\r\\n        uint256 total = stardust.balanceOf(address(this));\\r\\n        stardust.safeTransfer(msg.sender, total);\\r\\n        emit EmergencyWithdrawStardust(total);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve any gold on the contract\\r\\n     */\\r\\n    function retrieveGold() external onlyOwner {\\r\\n        IERC20 gold = IERC20(addressRegistry.getGold());\\r\\n        uint256 total = gold.balanceOf(address(this));\\r\\n        gold.safeTransfer(msg.sender, total);\\r\\n        emit EmergencyWithdrawGold(total);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake spaceships to earn stardust + gold\\r\\n     * @param _ids The ids of the spaceships to stake\\r\\n     */\\r\\n    function stakeSpaceships(uint256[] memory _ids) external nonReentrant {\\r\\n        require(block.timestamp < seasonEndTime, \\\"Season already ended\\\");\\r\\n        IAtlantisSpaceships spaceships = IAtlantisSpaceships(addressRegistry.getSpaceships());\\r\\n        // Harvest any pending rewards\\r\\n        if (seasonStarted) {\\r\\n            _massUpdatePools();\\r\\n            for (uint8 i; i < amountOfPools; i++) {\\r\\n                _harvest(i, msg.sender);\\r\\n            }\\r\\n        }\\r\\n        for (uint256 i; i < _ids.length; i++) {\\r\\n            AtlantisLib.Rarity _type = spaceships.getRarity(_ids[i]);\\r\\n            // Convert spaceship type to uint256\\r\\n            uint8 _spaceshipRarity = uint8(_type) + 1;\\r\\n            // If spaceship type is 4, it is an epic and in same pool as rare, so we set it to 3\\r\\n            if (_spaceshipRarity == 4) {\\r\\n                _spaceshipRarity = 3;\\r\\n            }\\r\\n            uint256 _speed = spaceships.getSpeed(_ids[i]) * 10;\\r\\n            cachedSpeeds[_ids[i]] = _speed;\\r\\n            require(_speed > 0, \\\"Spaceship speed cannot be 0\\\");\\r\\n            currentlyStakedSpaceshipIds[msg.sender][_spaceshipRarity].add(_ids[i]);\\r\\n            //Take Token and Transfer to Contract for Holding\\r\\n            IERC721(address(spaceships)).safeTransferFrom(msg.sender, address(this), _ids[i]);\\r\\n            // Increase to free pool and increase to protected pool\\r\\n            if (userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity] == 0) {\\r\\n                _increasePoolAndUserStats(_speed, 0, msg.sender, false);\\r\\n                _increasePoolAndUserStats(_speed, _spaceshipRarity, msg.sender, false);\\r\\n            } else {\\r\\n                uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity]];\\r\\n                _increasePoolAndUserStats((_speed * _multiplier) / 10, 0, msg.sender, false);\\r\\n                _increasePoolAndUserStats((_speed * _multiplier) / 10, _spaceshipRarity, msg.sender, false);\\r\\n            }\\r\\n            stakedSpaceships[msg.sender][_ids[i]] = true;\\r\\n            userInfo[msg.sender].spaceshipsStaked++;\\r\\n            emit Stake(msg.sender, _ids[i], _speed);\\r\\n        }\\r\\n        _updateRewardDebts(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake spaceships\\r\\n     * @param _ids The ids of the spaceships to unstake\\r\\n     */\\r\\n    function unstakeSpaceships(uint256[] calldata _ids) external nonReentrant {\\r\\n        IAtlantisSpaceships spaceships = IAtlantisSpaceships(addressRegistry.getSpaceships());\\r\\n\\r\\n        require(userInfo[msg.sender].spaceshipsStaked >= _ids.length, \\\"Not enough spaceships staked\\\");\\r\\n        // Harvest any pending rewards\\r\\n        if (seasonStarted) {\\r\\n            _massUpdatePools();\\r\\n            for (uint8 i; i < amountOfPools; i++) {\\r\\n                _harvest(i, msg.sender);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < _ids.length; i++) {\\r\\n            // if id found in stakedSpaceships, unstake it\\r\\n            uint256 _id = _ids[i];\\r\\n            require(stakedSpaceships[msg.sender][_id], \\\"Spaceship not staked\\\");\\r\\n            uint8 _spaceshipRarity = uint8(spaceships.getRarity(_id)) + 1;\\r\\n            uint256 _speed = cachedSpeeds[_id];\\r\\n            if (_spaceshipRarity == 4) {\\r\\n                _spaceshipRarity = 3;\\r\\n            }\\r\\n\\r\\n            // decrease for free pool and protected pool\\r\\n            if (userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity] == 0) {\\r\\n                _decreasePoolAndUserStats(_speed, 0, msg.sender, false);\\r\\n                _decreasePoolAndUserStats(_speed, _spaceshipRarity, msg.sender, false);\\r\\n            } else {\\r\\n                uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_spaceshipRarity]];\\r\\n                _decreasePoolAndUserStats((_speed * _multiplier) / 10, 0, msg.sender, false);\\r\\n                _decreasePoolAndUserStats((_speed * _multiplier) / 10, _spaceshipRarity, msg.sender, false);\\r\\n            }\\r\\n\\r\\n            stakedSpaceships[msg.sender][_id] = false;\\r\\n            userInfo[msg.sender].spaceshipsStaked--;\\r\\n            currentlyStakedSpaceshipIds[msg.sender][_spaceshipRarity].remove(_ids[i]);\\r\\n            // transfer spaceship back to user\\r\\n            IERC721(address(spaceships)).safeTransferFrom(address(this), msg.sender, _id);\\r\\n            emit Unstaked(msg.sender, _id);\\r\\n        }\\r\\n        _updateRewardDebts(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stakes given nfts and uses them to boost the given pool.\\r\\n     * @param _pid  Id of the pool to boost\\r\\n     * @param _collectionAddresses Array of collection addresses\\r\\n     * @param _nfts Array of token ids to stake\\r\\n     */\\r\\n    function stakeNfts(\\r\\n        uint8 _pid,\\r\\n        address[] calldata _collectionAddresses,\\r\\n        uint256[] calldata _nfts\\r\\n    ) external nonReentrant {\\r\\n        require(block.timestamp < seasonEndTime, \\\"Season already ended\\\");\\r\\n        // Require pid to be 1-3 only\\r\\n        require(_pid >= 1 && _pid <= 3, \\\"Invalid pool id\\\");\\r\\n        require(_nfts.length == _collectionAddresses.length, \\\"NFTs and collection addresses must be same length\\\");\\r\\n        if (seasonStarted) {\\r\\n            _massUpdatePools();\\r\\n            for (uint8 i; i < amountOfPools; i++) {\\r\\n                _harvest(i, msg.sender);\\r\\n            }\\r\\n        }\\r\\n        // Get userInfo\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(user.boostingNftsCount + _nfts.length <= MAX_NFTS_STAKED, \\\"Too many NFTs staked\\\");\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            // Check whitelisted nfts\\r\\n            require(whitelistedCollections[_collectionAddresses[i]], \\\"Collection not whitelisted\\\");\\r\\n        }\\r\\n        uint256 _initialNftsCount = user.boostingNftsPoolCount[_pid];\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            user.boostingNfts[_pid][_collectionAddresses[i]].push(_nfts[i]);\\r\\n\\r\\n            // print currentNfts length\\r\\n            user.boostingNftsPoolCount[_pid]++;\\r\\n            user.boostingNftsCount++;\\r\\n            _stake(_pid, _collectionAddresses[i], _nfts[i]);\\r\\n        }\\r\\n        uint256 _currentSpeed = user.totalSpeeds[_pid];\\r\\n        uint256 _initialMultiplier = nftMultiplier[_initialNftsCount];\\r\\n        uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_pid]];\\r\\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, 0, msg.sender, true);\\r\\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, _pid, msg.sender, true);\\r\\n        _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\\r\\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, 0, msg.sender, true);\\r\\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, _pid, msg.sender, true);\\r\\n        _updateRewardDebts(msg.sender);\\r\\n        emit StakeNfts(_pid, msg.sender, _nfts.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unstakes nfts without unboosting the pool\\r\\n     * @param _pid  Id of the farm to unstake the nfts from\\r\\n     * @param _collectionAddresses Array of nft contract addresses\\r\\n     * @param _nfts Array of structs containing the nft contract and token id to unstake\\r\\n     */\\r\\n    function unstakeNfts(\\r\\n        uint8 _pid,\\r\\n        address[] calldata _collectionAddresses,\\r\\n        uint256[] calldata _nfts\\r\\n    ) external nonReentrant {\\r\\n        require(_nfts.length == _collectionAddresses.length, \\\"NFTs and collection addresses must be same length\\\");\\r\\n        require(_pid >= 1 && _pid <= 3, \\\"Invalid pool id\\\");\\r\\n        if (seasonStarted) {\\r\\n            _massUpdatePools();\\r\\n            for (uint8 i; i < amountOfPools; i++) {\\r\\n                _harvest(i, msg.sender);\\r\\n            }\\r\\n        }\\r\\n        uint256 _initialNftsCount = userInfo[msg.sender].boostingNftsPoolCount[_pid];\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            _removeNftFromPool(_pid, _collectionAddresses[i], _nfts[i]);\\r\\n            _unstake(_pid, _collectionAddresses[i], _nfts[i]);\\r\\n        }\\r\\n        uint256 _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\\r\\n        uint256 _initialMultiplier = nftMultiplier[_initialNftsCount];\\r\\n        uint256 _multiplier = nftMultiplier[userInfo[msg.sender].boostingNftsPoolCount[_pid]];\\r\\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, 0, msg.sender, true);\\r\\n        _decreasePoolAndUserStats(_currentSpeed - (_currentSpeed * 10) / _initialMultiplier, _pid, msg.sender, true);\\r\\n        _currentSpeed = userInfo[msg.sender].totalSpeeds[_pid];\\r\\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, 0, msg.sender, true);\\r\\n        _increasePoolAndUserStats((_currentSpeed * _multiplier) / 10 - _currentSpeed, _pid, msg.sender, true);\\r\\n        _updateRewardDebts(msg.sender);\\r\\n        emit UnstakeNfts(_pid, msg.sender, _nfts.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tokenIds of a given collection currently staked by specific user\\r\\n     * @param _pid  Pool id\\r\\n     * @param _collectionAddress  Address of the collection contract\\r\\n     * @param _staker  User for whom to retrieve staked token ids\\r\\n     * @return Array of tokenIds which are currently staked by the user for the given token contract\\r\\n     */\\r\\n    function getCurrentlyStakedTokenIds(\\r\\n        uint8 _pid,\\r\\n        address _collectionAddress,\\r\\n        address _staker\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return stakedNFTs[_staker][_pid][_collectionAddress].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tokenIds of a given collection currently staked by any user\\r\\n     * @param _collectionAddress  Address of the collection contract\\r\\n     * @return Array of tokenIds which are currently staked for the given token contract\\r\\n     */\\r\\n    function getCurrentlyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory) {\\r\\n        return currentlyStakedIds[_collectionAddress].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tokenIds of a given collection that have ever been staked by any user\\r\\n     * @param _collectionAddress  Address of the collection contract\\r\\n     * @return Array of tokenIds which have ever been staked for the given token contract\\r\\n     */\\r\\n    function getPreviouslyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory) {\\r\\n        return previouslyStakedIds[_collectionAddress].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest all rewards for msg.sender\\r\\n     */\\r\\n    function getRewards() external nonReentrant {\\r\\n        _massUpdatePools();\\r\\n        for (uint8 i; i < amountOfPools; i++) {\\r\\n            _harvest(i, msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest rewards for a certain poolId for msg.sender\\r\\n     * @param _pid Pool id\\r\\n     */\\r\\n    function getReward(uint8 _pid) external nonReentrant {\\r\\n        _massUpdatePools();\\r\\n        _harvest(_pid, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View rewards for a certain poolId and user\\r\\n     * @param _user  User address\\r\\n     * @param _pid Pool id\\r\\n     * @return rewards  Array of rewards [stardust, gold]\\r\\n     */\\r\\n    function viewRewards(address _user, uint8 _pid) external view returns (uint256[2] memory) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256[2] memory rewards;\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if (currentTime >= seasonEndTime) {\\r\\n            currentTime = seasonEndTime;\\r\\n        }\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        if (!seasonStarted || pool.totalPoints == 0) {\\r\\n            rewards[0] = 0;\\r\\n            rewards[1] = 0;\\r\\n        } else {\\r\\n            uint256 accStardustPerPoint = pool.accStardustPerPoint;\\r\\n            uint256 multiplier = currentTime - pool.lastRewardTime;\\r\\n            uint256 total = multiplier * pool.rewardPerSecond;\\r\\n            accStardustPerPoint += ((total * ACC_TOKEN_PRECISION) / pool.totalPoints);\\r\\n            uint256 accStardust = (userInfo[_user].totalSpeeds[_pid] * accStardustPerPoint) / ACC_TOKEN_PRECISION;\\r\\n            uint256 pending = accStardust - user.rewardDebts[_pid];\\r\\n            uint256 stardustAmount = (pending * poolInfo[_pid].stardustWeightage) / 100;\\r\\n            uint256 goldAmount = pending - stardustAmount;\\r\\n            rewards[0] = stardustAmount;\\r\\n            rewards[1] = goldAmount;\\r\\n        }\\r\\n\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View the total speeds of a user across all pools\\r\\n     * @param _user  User address\\r\\n     * @return totalSpeeds  Array of total speeds [Global, Common, Uncommon, Rare/Epic]\\r\\n     */\\r\\n    function viewTotalSpeeds(address _user) external view returns (uint256[4] memory) {\\r\\n        // Get userinfo memory\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return user.totalSpeeds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View number of spaceships staked by user\\r\\n     * @param _user  User address\\r\\n     * @return spaceshipsStaked  Number of spaceships staked\\r\\n     */\\r\\n    function viewSpaceshipsStaked(address _user) external view returns (uint256) {\\r\\n        // Get userinfo memory\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return user.spaceshipsStaked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View number of NFTs staked by user\\r\\n     * @param _pid Pool id\\r\\n     * @param _collectionAddress  Address of the collection contract\\r\\n     * @param _user  User address\\r\\n     * @return boostingNfts Array of nft ids\\r\\n     */\\r\\n    function viewBoostingNfts(\\r\\n        uint8 _pid,\\r\\n        address _collectionAddress,\\r\\n        address _user\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        // Get userinfo storage\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256[] storage boostingNfts = user.boostingNfts[_pid][_collectionAddress];\\r\\n        uint256[] memory result = new uint256[](boostingNfts.length);\\r\\n        // Copy boosting nfts to memory\\r\\n        for (uint256 i = 0; i < boostingNfts.length; i++) {\\r\\n            result[i] = boostingNfts[i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View boosting nfts count in a specific pool\\r\\n     * @param _user  User address\\r\\n     * @param _pid Pool id\\r\\n     * @return number of boosting nfts in a specific pool\\r\\n     */\\r\\n    function viewBoostingNftsPoolCount(address _user, uint8 _pid) external view returns (uint256) {\\r\\n        // Get userinfo memory\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return user.boostingNftsPoolCount[_pid];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View currently staked spaceship ids\\r\\n     * @param _user  User address\\r\\n     * @param _pid Pool id\\r\\n     * @return spaceshipIds Array of spaceship ids\\r\\n     */\\r\\n    function viewCurrentlyStakedSpaceships(address _user, uint8 _pid) external view returns (uint256[] memory) {\\r\\n        return currentlyStakedSpaceshipIds[_user][_pid].toArray();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View pool info\\r\\n     * @param _pid Pool id\\r\\n     */\\r\\n    function viewPoolInfo(uint256 _pid) external view returns (PoolInfo memory) {\\r\\n        return poolInfo[_pid];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates pool's core values\\r\\n     * @param _pid The pool id\\r\\n     */\\r\\n    function _updatePool(uint256 _pid) internal {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        // Check if season is over\\r\\n        if (seasonEndTime <= currentTime) {\\r\\n            currentTime = seasonEndTime;\\r\\n        }\\r\\n        // Update based on pool type\\r\\n        if (poolInfo[_pid].totalPoints > 0) {\\r\\n            uint256 stardustReward = (currentTime - poolInfo[_pid].lastRewardTime) * poolInfo[_pid].rewardPerSecond;\\r\\n            poolInfo[_pid].accStardustPerPoint += ((stardustReward * ACC_TOKEN_PRECISION) / poolInfo[_pid].totalPoints);\\r\\n        }\\r\\n\\r\\n        poolInfo[_pid].lastRewardTime = currentTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates all pools core values\\r\\n     */\\r\\n    function _massUpdatePools() internal {\\r\\n        for (uint256 i; i < amountOfPools; i++) {\\r\\n            _updatePool(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward debts of user\\r\\n     * @param _user User address\\r\\n     */\\r\\n    function _updateRewardDebts(address _user) internal {\\r\\n        for (uint256 i; i < amountOfPools; i++) {\\r\\n            userInfo[_user].rewardDebts[i] =\\r\\n                (userInfo[_user].totalSpeeds[i] * poolInfo[i].accStardustPerPoint) /\\r\\n                ACC_TOKEN_PRECISION;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function for staking nfts\\r\\n     * @param _pid The pool id to stake Nfts in\\r\\n     * @param _collectionAddress The address of the collection the nft is from\\r\\n     * @param _tokenId The id of the nft to stake\\r\\n     */\\r\\n    function _stake(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal virtual {\\r\\n        require(!stakedNFTs[msg.sender][_pid][_collectionAddress].contains(_tokenId), \\\"NFT already staked\\\");\\r\\n        // Transfer ERC721 from user\\r\\n        IERC721(_collectionAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\\r\\n\\r\\n        // Update stakers specific data\\r\\n        stakedNFTs[msg.sender][_pid][_collectionAddress].add(_tokenId);\\r\\n        // Update token specific data\\r\\n        currentlyStakedIds[_collectionAddress].add(_tokenId);\\r\\n        previouslyStakedIds[_collectionAddress].add(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function for unstaking Nfts\\r\\n     * @param _pid The pool id to unstake Nfts from\\r\\n     * @param _collectionAddress The address of the collection the Nft is from\\r\\n     * @param _tokenId The id of the Nft to unstake\\r\\n     */\\r\\n    function _unstake(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal virtual {\\r\\n        require(_isTokenStaked(_pid, msg.sender, _collectionAddress, _tokenId), \\\"NFT not staked\\\");\\r\\n        // Update tokens currently staked\\r\\n        stakedNFTs[msg.sender][_pid][_collectionAddress].remove(_tokenId);\\r\\n        currentlyStakedIds[_collectionAddress].remove(_tokenId);\\r\\n        // Transfer ERC721 from user\\r\\n        IERC721(_collectionAddress).safeTransferFrom(address(this), msg.sender, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether a specific token is currently staked by a specific user\\r\\n     * @param _pid  Pool id\\r\\n     * @param _staker  User for whom to retrieve staked token ids\\r\\n     * @param _collectionAddress Address of the collection the token is from\\r\\n     * @param _tokenId TokenId to check for staking\\r\\n     * @return bool True if token is staked by user, false otherwise\\r\\n     */\\r\\n    function _isTokenStaked(\\r\\n        uint8 _pid,\\r\\n        address _staker,\\r\\n        address _collectionAddress,\\r\\n        uint256 _tokenId\\r\\n    ) internal view returns (bool) {\\r\\n        return stakedNFTs[_staker][_pid][_collectionAddress].contains(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Increase pool and user stats\\r\\n     * @param _speed Speed to increase\\r\\n     * @param _pid Pool id\\r\\n     * @param _user User address\\r\\n     * @param _nft Is boosting nft or not\\r\\n     */\\r\\n    function _increasePoolAndUserStats(uint256 _speed, uint8 _pid, address _user, bool _nft) internal {\\r\\n        poolInfo[_pid].totalPoints += _speed;\\r\\n        if (_speed > 0 && !_nft) {\\r\\n            poolInfo[_pid].totalCount++;\\r\\n        }\\r\\n        userInfo[_user].totalSpeeds[_pid] += _speed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Decrease pool and user stats\\r\\n     * @param _speed Speed to decrease\\r\\n     * @param _pid Pool id\\r\\n     * @param _user User address\\r\\n     * @param _nft Is boosting nft or not\\r\\n     */\\r\\n    function _decreasePoolAndUserStats(uint256 _speed, uint8 _pid, address _user, bool _nft) internal {\\r\\n        poolInfo[_pid].totalPoints -= _speed;\\r\\n        if (_speed > 0 && !_nft) {\\r\\n            poolInfo[_pid].totalCount--;\\r\\n        }\\r\\n        userInfo[_user].totalSpeeds[_pid] -= _speed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function for harvesting rewards\\r\\n     * @param _pid Pool id\\r\\n     * @param _user User address\\r\\n     * @return pending Pending rewards\\r\\n     */\\r\\n    function _harvest(uint8 _pid, address _user) internal returns (uint256 pending) {\\r\\n        IERC20 gold = IERC20(addressRegistry.getGold());\\r\\n        IERC20 stardust = IERC20(addressRegistry.getStardust());\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 oldShares = userInfo[_user].totalSpeeds[_pid];\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (oldShares > 0) {\\r\\n            uint256 accStardust = (oldShares * pool.accStardustPerPoint) / ACC_TOKEN_PRECISION;\\r\\n            pending = accStardust - user.rewardDebts[_pid];\\r\\n        }\\r\\n        if (pending > 0) {\\r\\n            user.rewardDebts[_pid] = (oldShares * pool.accStardustPerPoint) / ACC_TOKEN_PRECISION;\\r\\n        }\\r\\n        // Split total into 80% stardust, 20% gold\\r\\n        stardust.safeTransfer(_user, (pending * poolInfo[_pid].stardustWeightage) / 100);\\r\\n        gold.safeTransfer(_user, (pending * poolInfo[_pid].goldWeightage) / 100);\\r\\n        emit Payout(\\r\\n            _pid,\\r\\n            _user,\\r\\n            (pending * poolInfo[_pid].goldWeightage) / 100,\\r\\n            (pending * poolInfo[_pid].stardustWeightage) / 100\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove nfts from pool\\r\\n     * @param _pid  Pool id\\r\\n     * @param _collectionAddress Nft collection address\\r\\n     * @param _tokenId  Nft id\\r\\n     */\\r\\n    function _removeNftFromPool(uint8 _pid, address _collectionAddress, uint256 _tokenId) internal {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256[] storage currentNfts = user.boostingNfts[_pid][_collectionAddress];\\r\\n        for (uint256 i; i < currentNfts.length; i++) {\\r\\n            uint256 currentNft = currentNfts[i];\\r\\n            if (currentNft == _tokenId) {\\r\\n                currentNfts[i] = currentNfts[currentNfts.length - 1];\\r\\n                currentNfts.pop();\\r\\n                user.boostingNftsPoolCount[_pid]--;\\r\\n                user.boostingNftsCount--;\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Nft not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the whitelisted status of a collection\\r\\n     * @param _collectionAddresses The address of the collection\\r\\n     * @param _status The whitelisted status of the collection\\r\\n     * @dev Only whitelisted collections can be staked\\r\\n     */\\r\\n    function setWhitelistedCollections(address[] memory _collectionAddresses, bool _status) external onlyOwner {\\r\\n        for (uint256 i; i < _collectionAddresses.length; i++) {\\r\\n            whitelistedCollections[_collectionAddresses[i]] = _status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice For receiving ERC721 tokens\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9aa407df0651248a522beb655efb3c089a4516414c31c9f6198dc8c7159b833b\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/AtlantisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary AtlantisLib {\\r\\n    enum Orbit {\\r\\n        COMMON, // 0\\r\\n        UNCOMMON, // 1\\r\\n        RARE, // 2\\r\\n        EPIC // 3\\r\\n    }\\r\\n\\r\\n    enum OrbitName {\\r\\n        HALO_RING, //0\\r\\n        PANDORA, //1\\r\\n        ATLAS, //2\\r\\n        METIS, //3\\r\\n        ENTWINED, //4\\r\\n        RAINBOW_CLOUDS, //5\\r\\n        GALATICA, //6\\r\\n        ASTEROIDS, //7\\r\\n        INTERSTELLAR_PINK, //8\\r\\n        INTERSTELLAR_GRADIENT, //9\\r\\n        // Epic planets\\r\\n        INTERSTELLAR_GOLD //10\\r\\n    }\\r\\n\\r\\n    enum Background {\\r\\n        PURPLE_HUES, //0\\r\\n        BROWN_HUES, //1\\r\\n        WAVY, //2\\r\\n        SHOOTING_STARS, //3\\r\\n        // Epic planets\\r\\n        GOLD_HUES, //4\\r\\n        GOLD_SHOOTING_STARS, //5\\r\\n        WAVY_GOLD, //6\\r\\n        GOLD_SKIES //7\\r\\n    }\\r\\n\\r\\n    enum Evolution {\\r\\n        ALPHA, // 1-19\\r\\n        BETA, // 20-29\\r\\n        GAMMA, // 30-39\\r\\n        DELTA, // 40-49\\r\\n        EPSILON // 50\\r\\n    }\\r\\n\\r\\n    enum Element {\\r\\n        FIRE, // 0\\r\\n        LIGHTNING, // 1\\r\\n        STEEL // 2\\r\\n    }\\r\\n\\r\\n    struct Planet {\\r\\n        uint8 level; // Max Level: 50\\r\\n        Element element;\\r\\n        Orbit orbit;\\r\\n        OrbitName orbitName;\\r\\n        Background background;\\r\\n        bool onExpedition;\\r\\n    }\\r\\n\\r\\n    enum Rarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet element as string\\r\\n     */\\r\\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\\r\\n        if (element == AtlantisLib.Element.FIRE) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else if (element == AtlantisLib.Element.STEEL) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\\r\\n            return \\\"Lightning\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\\r\\n        if (orbit == AtlantisLib.Orbit.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tier of equipment based on level\\r\\n     * @param level Level of an equipment\\r\\n     */\\r\\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\\r\\n        if (level < 1) {\\r\\n            tier = AtlantisLib.Rarity.COMMON;\\r\\n        } else if (level >= 1 && level < 5) {\\r\\n            tier = AtlantisLib.Rarity.UNCOMMON;\\r\\n        } else if (level >= 5 && level < 8) {\\r\\n            tier = AtlantisLib.Rarity.RARE;\\r\\n        } else if (level >= 8 && level <= 10) {\\r\\n            tier = AtlantisLib.Rarity.EPIC;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\\r\\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\\r\\n            return \\\"Halo Ring\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\\r\\n            return \\\"Pandora\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\\r\\n            return \\\"Atlas\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\\r\\n            return \\\"Metis\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\\r\\n            return \\\"Entwined\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\\r\\n            return \\\"Rainbow Clouds\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\\r\\n            return \\\"Galatica\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\\r\\n            return \\\"Asteroids\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\\r\\n            return \\\"Interstellar Pink\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\\r\\n            return \\\"Interstellar Gradient\\\";\\r\\n            // Epic planets\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\\r\\n            return \\\"Interstellar Gold\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\\r\\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\\r\\n            return \\\"Purple Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\\r\\n            return \\\"Brown Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.WAVY) {\\r\\n            return \\\"Wavy\\\";\\r\\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\\r\\n            return \\\"Shooting Stars\\\";\\r\\n            // Epic planets\\r\\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\\r\\n            return \\\"Wavy Gold\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\\r\\n            return \\\"Gold Shooting Stars\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\\r\\n            return \\\"Gold Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\\r\\n            return \\\"Gold Skies\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f94d7d040abad058dbad5d368688e91d19d43bc219df2b2ee1c722950a88b8e\",\"license\":\"MIT\"},\"contracts/common/SetUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nlibrary SetUtils {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /// @dev Converst an iterable set of addresses to a corresponding array\\r\\n    function toArray(EnumerableSet.AddressSet storage _set) internal view returns (address[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        address[] memory elements = new address[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n\\r\\n    /// @dev Converst an iterable set of uint to a corresponding array\\r\\n    function toArray(EnumerableSet.UintSet storage _set) internal view returns (uint256[] memory) {\\r\\n        uint256 numElements = _set.length();\\r\\n        uint256[] memory elements = new uint256[](numElements);\\r\\n        for (uint256 i = 0; i < numElements; ++i) {\\r\\n            elements[i] = _set.at(i);\\r\\n        }\\r\\n        return elements;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaed461f20be292afd9a4c4839ed3ca31c29a41f247988ce9050ae308bce708ad\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisRacing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IAtlantisRacing {\\r\\n    /**\\r\\n        Structs\\r\\n    */\\r\\n    struct PoolInfo {\\r\\n        uint256 poolType;\\r\\n        uint256 rewardPerSecond;\\r\\n        uint256 stardustWeightage;\\r\\n        uint256 goldWeightage;\\r\\n        uint256 lastRewardTime;\\r\\n        uint256 accStardustPerPoint;\\r\\n        uint256 totalPoints;\\r\\n        uint256 totalCount;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256[4] totalSpeeds;\\r\\n        uint256[4] rewardDebts;\\r\\n        uint256 spaceshipsStaked;\\r\\n        mapping(uint8 => mapping(address => uint256[])) boostingNfts;\\r\\n        uint256 boostingNftsCount;\\r\\n        mapping(uint8 => uint8) boostingNftsPoolCount;\\r\\n    }\\r\\n    event Stake(address indexed user, uint256 indexed tokenID, uint256 shipScore);\\r\\n    event Unstaked(address indexed user, uint256 indexed tokenID);\\r\\n    event Payout(uint8 poolId, address indexed user, uint256 goldAmount, uint256 stardustAmount);\\r\\n    event EmergencyWithdraw(address user, uint256 tokenID);\\r\\n    event EmergencyWithdrawStardust(uint256 amount);\\r\\n    event EmergencyWithdrawGold(uint256 amount);\\r\\n    event StakeNfts(uint256 indexed pid, address indexed user, uint256 numOfNfts);\\r\\n    event UnstakeNfts(uint256 indexed pid, address indexed user, uint256 numOfNfts);\\r\\n    event SeasonEndTimeChanged(uint256 newEndTime);\\r\\n    event StartSeason(uint256 startTime);\\r\\n    event EndSeason(uint256 endTime);\\r\\n    event AddressRegistryUpdated(address newAddressRegistry);\\r\\n\\r\\n    /**\\r\\n        Functions\\r\\n    */\\r\\n    function stakeSpaceships(uint256[] memory _ids) external;\\r\\n\\r\\n    function unstakeSpaceships(uint256[] memory _ids) external;\\r\\n\\r\\n    function stakeNfts(uint8 _pid, address[] calldata _collectionAddresses, uint256[] calldata _nfts) external;\\r\\n\\r\\n    function unstakeNfts(uint8 _pid, address[] calldata _collectionAddresses, uint256[] calldata _nfts) external;\\r\\n\\r\\n    function viewRewards(address _user, uint8 _poolId) external view returns (uint256[2] memory);\\r\\n\\r\\n    function getRewards() external;\\r\\n\\r\\n    function viewTotalSpeeds(address _user) external view returns (uint256[4] memory);\\r\\n\\r\\n    function viewBoostingNfts(\\r\\n        uint8 _pid,\\r\\n        address _collectionAddress,\\r\\n        address _user\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function viewPoolInfo(uint256 _pid) external view returns (PoolInfo memory);\\r\\n\\r\\n    function getCurrentlyStakedTokenIds(\\r\\n        uint8 _pid,\\r\\n        address _collectionAddress,\\r\\n        address _staker\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getPreviouslyStakedTokenIds(address _collectionAddress) external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9dd05a596998ae37de3f1f69d90f5c64a08f62c2a59c3819b7a1d4df3c74abd4\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisSpaceships.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantisSpaceships {\\r\\n    error NotOwner();\\r\\n    error WrongElement();\\r\\n\\r\\n    struct Spaceship {\\r\\n        AtlantisLib.Rarity rarity;\\r\\n        uint256 fireEquipmentId;\\r\\n        uint256 lightningEquipmentId;\\r\\n        uint256 steelEquipmentId;\\r\\n    }\\r\\n\\r\\n    struct SpaceshipData {\\r\\n        Spaceship spaceship;\\r\\n        uint256 speed;\\r\\n    }\\r\\n\\r\\n    function modifyEquipment(\\r\\n        uint256 _spaceshipId,\\r\\n        uint256 _fireEquipmentId,\\r\\n        uint256 _lightningEquipmentId,\\r\\n        uint256 _steelEquipmentId\\r\\n    ) external;\\r\\n\\r\\n    function getSpaceship(uint256 _tokenId) external view returns (SpaceshipData memory);\\r\\n\\r\\n    function getSpeed(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    function getRarity(uint256 _tokenId) external view returns (AtlantisLib.Rarity);\\r\\n}\\r\\n\",\"keccak256\":\"0x7855f2c43a835376e00692737f31ce3dcb0af5c5ac34d69f5a2bbfc35187f75e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526006805460ff191690553480156200001b57600080fd5b50604051620046bd380380620046bd8339810160408190526200003e91620007d2565b620000493362000753565b6001805580518190600090620000635762000063620008c6565b6020026020010151600a14620000c05760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206e6674206d756c7469706c6965727300000000000000000060448201526064015b60405180910390fd5b428211620001115760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420736561736f6e20656e642074696d650000000000000000006044820152606401620000b7565b60005b81518110156200016857818181518110620001335762000133620008c6565b6020026020010151600a8260068110620001515762000151620008c6565b0155806200015f81620008f2565b91505062000114565b506004839055600280546001600160a01b0319166001600160a01b038616179055600080805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df556103e8620001c58460e16200090e565b620001d191906200092e565b60076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e05560507f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e15560147f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e255427f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e35560007f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e48190557f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e58190557f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6e68190556001908190527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8285560646200030884602d6200090e565b6200031491906200092e565b60076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b8295560507fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82a5560147fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82b55427fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82c5560007fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82d8190557fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82e8190557fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82f8190556002908190527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d5560646200044b8460196200090e565b6200045791906200092e565b60076020527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96e5560507fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96f5560147fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb97055427fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb9715560007fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb9728190557fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb9738190557fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb9748190556003908190527f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c6556103e86200058f84604b6200090e565b6200059b91906200092e565b60036000818152600760209081527f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c79390935560507f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c85560147f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c955427f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6ca557f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6cb8190557f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6cc8190557f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6cd81905590849055670de0b6b3a7640000608052600254604080516366776c7360e11b8152905192936001600160a01b039092169263cceed8e6926004838101939192918290030181865afa158015620006ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000725919062000951565b6001600160a01b03166000908152601260205260409020805460ff1916600117905550620009789350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620007b957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620007e957600080fd5b8451620007f681620007a3565b602086810151604088015160608901519397509095509350906001600160401b03808211156200082557600080fd5b818801915088601f8301126200083a57600080fd5b8151818111156200084f576200084f620007bc565b8060051b604051601f19603f83011681018181108582111715620008775762000877620007bc565b60405291825284820192508381018501918b8311156200089657600080fd5b938501935b82851015620008b6578451845293850193928501926200089b565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620009075762000907620008dc565b5060010190565b8082028115828204841417620009285762000928620008dc565b92915050565b6000826200094c57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156200096457600080fd5b81516200097181620007a3565b9392505050565b608051613cff620009be60003960008181610687015281816113be01528181611415015281816125b10152818161261c01528181612bc40152612fd10152613cff6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c8063587210cf1161013b578063b499da75116100b8578063eea016041161007c578063eea0160414610682578063f2fde38b146106a9578063f3ad65f4146106bc578063f5dbe609146106cf578063fec34809146106e257600080fd5b8063b499da7514610609578063b4a7a4791461061c578063b9c664f214610649578063bf2cf3991461065c578063d34e7a291461066f57600080fd5b80638da5cb5b116100ff5780638da5cb5b146105ae578063915ac442146105d3578063952a9633146105e65780639a6a327c146105ee5780639b1e63d01461060157600080fd5b8063587210cf14610564578063715018a6146105775780637f4ca1d71461057f5780638104ae4d1461059257806387f520b81461059b57600080fd5b8063230620c7116101c95780633dcdb6721161018d5780633dcdb672146104cb578063420fad88146104d3578063434c0498146104f35780634f05cbd814610521578063500ab1571461054457600080fd5b8063230620c7146103df57806327c7812c146103fc578063280126fa1461040f5780633a3ce08c1461044e5780633c2466b4146104c257600080fd5b80631526fe27116102105780631526fe27146102d2578063157ad5c3146103635780631639f1fe1461036b5780631959a0021461038b5780631ec26003146103cc57600080fd5b80630572b0cc1461024d57806307ac1a53146102575780630d755bd2146102735780630e8953a714610293578063150b7a02146102a6575b600080fd5b6102556106ea565b005b61026060035481565b6040519081526020015b60405180910390f35b6102866102813660046134c7565b610732565b60405161026a91906134e4565b6102556102a1366004613577565b610788565b6102b96102b436600461363f565b610ad4565b6040516001600160e01b0319909116815260200161026a565b6103286102e0366004613703565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161026a565b610255610ae5565b61037e6103793660046134c7565b610c17565b60405161026a919061371c565b6103b76103993660046134c7565b600860208190526000918252604090912090810154600a9091015482565b6040805192835260208301919091520161026a565b6102556103da366004613577565b610c41565b6006546103ec9060ff1681565b604051901515815260200161026a565b61025561040a3660046134c7565b6110fb565b61026061041d366004613760565b6001600160a01b0391909116600090815260086020908152604080832060ff9485168452600b019091529020541690565b61046161045c366004613703565b611157565b60405161026a9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b61026060045481565b61025561120a565b6102606104e1366004613703565b60096020526000908152604090205481565b6103ec610501366004613795565b601060209081526000928352604080842090915290825290205460ff1681565b6103ec61052f3660046134c7565b60126020526000908152604090205460ff1681565b610557610552366004613760565b6112b8565b60405161026a91906137c1565b61037e6105723660046137e9565b6114e2565b61025561151e565b61026061058d366004613703565b611530565b61026060055481565b61037e6105a9366004613760565b611547565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161026a565b6102556105e1366004613832565b611580565b6102556119e1565b6102556105fc366004613874565b611acc565b610260600f81565b610255610617366004613703565b611af3565b61026061062a3660046134c7565b6001600160a01b03166000908152600860208190526040909120015490565b6102556106573660046138cc565b611b95565b61037e61066a3660046134c7565b611c09565b61025561067d36600461397d565b611c2d565b6102607f000000000000000000000000000000000000000000000000000000000000000081565b6102556106b73660046134c7565b612167565b6002546105bb906001600160a01b031681565b61037e6106dd3660046137e9565b6121dd565b6102556122c1565b6106f26123eb565b6106fa612444565b60005b60048160ff16101561072657610713813361246b565b508061071e81613a19565b9150506106fd565b5061073060018055565b565b61073a613476565b6001600160a01b03821660009081526008602052604090819020815160808101928390529091829060049082845b815481526020019060010190808311610768575050505050915050919050565b6107906123eb565b8083146107b85760405162461bcd60e51b81526004016107af90613a38565b60405180910390fd5b60018560ff16101580156107d0575060038560ff1611155b61080e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081a59608a1b60448201526064016107af565b60065460ff161561084f57610821612444565b60005b60048160ff16101561084d5761083a813361246b565b508061084581613a19565b915050610824565b505b33600090815260086020908152604080832060ff808a168552600b90910190925282205416905b84811015610922576108c78787878481811061089457610894613a89565b90506020020160208101906108a991906134c7565b8686858181106108bb576108bb613a89565b905060200201356127af565b610910878787848181106108dd576108dd613a89565b90506020020160208101906108f291906134c7565b86868581811061090457610904613a89565b90506020020135612934565b8061091a81613a9f565b915050610876565b5033600090815260086020526040812060ff88166004811061094657610946613a89565b015490506000600a836006811061095f5761095f613a89565b015433600090815260086020908152604080832060ff808e168552600b9091019092528220549293509091600a91166006811061099e5761099e613a89565b015490506109cf826109b185600a613ab8565b6109bb9190613acf565b6109c59085613af1565b6000336001612a40565b6109fb826109de85600a613ab8565b6109e89190613acf565b6109f29085613af1565b8a336001612a40565b33600090815260086020526040902060ff8a1660048110610a1e57610a1e613a89565b01549250610a5083600a610a328483613ab8565b610a3c9190613acf565b610a469190613af1565b6000336001612aec565b610a7d83600a610a608483613ab8565b610a6a9190613acf565b610a749190613af1565b8a336001612aec565b610a8633612b8d565b604051858152339060ff8b16907fdcfcdf4a6ad1072a25aa5f40b0b08aa1a5085a8ad16aa8ee1ccce6a8e8c8b76e9060200160405180910390a350505050610acd60018055565b5050505050565b630a85bd0160e11b5b949350505050565b610aed612c4e565b6002546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190613b04565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190613b21565b9050610bdf6001600160a01b0383163383612ca8565b6040518181527f14bd6191cc1853697dffe6990f3fc6a04effceccc4e24f8f8d4d267b31d2728c906020015b60405180910390a15050565b6001600160a01b0381166000908152601460205260409020606090610c3b90612cfa565b92915050565b610c496123eb565b6003544210610c6a5760405162461bcd60e51b81526004016107af90613b3a565b60018560ff1610158015610c82575060038560ff1611155b610cc05760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081a59608a1b60448201526064016107af565b808314610cdf5760405162461bcd60e51b81526004016107af90613a38565b60065460ff1615610d2057610cf2612444565b60005b60048160ff161015610d1e57610d0b813361246b565b5080610d1681613a19565b915050610cf5565b505b336000908152600860205260409020600a810154600f90610d42908490613b68565b1115610d875760405162461bcd60e51b8152602060048201526014602482015273151bdbc81b585b9e481391951cc81cdd185ad95960621b60448201526064016107af565b60005b84811015610e385760126000878784818110610da857610da8613a89565b9050602002016020810190610dbd91906134c7565b6001600160a01b0316815260208101919091526040016000205460ff16610e265760405162461bcd60e51b815260206004820152601a60248201527f436f6c6c656374696f6e206e6f742077686974656c697374656400000000000060448201526064016107af565b80610e3081613a9f565b915050610d8a565b5060ff8087166000908152600b83016020526040812054909116905b85811015610f975760ff88166000908152600984016020526040812090888884818110610e8357610e83613a89565b9050602002016020810190610e9891906134c7565b6001600160a01b03166001600160a01b03168152602001908152602001600020858583818110610eca57610eca613a89565b83546001810185556000948552602080862092810294909401359101555060ff808b168352600b860190915260408220805490911691610f0983613a19565b91906101000a81548160ff021916908360ff1602179055505082600a016000815480929190610f3790613a9f565b9190505550610f8588888884818110610f5257610f52613a89565b9050602002016020810190610f6791906134c7565b878785818110610f7957610f79613a89565b90506020020135612d9a565b80610f8f81613a9f565b915050610e54565b5060008260ff891660048110610faf57610faf613a89565b015490506000600a8360068110610fc857610fc8613a89565b015433600090815260086020908152604080832060ff808f168552600b9091019092528220549293509091600a91166006811061100757611007613a89565b0154905061101a826109b185600a613ab8565b6110468261102985600a613ab8565b6110339190613acf565b61103d9085613af1565b8b336001612a40565b33600090815260086020526040902060ff8b166004811061106957611069613a89565b0154925061107d83600a610a328483613ab8565b6110aa83600a61108d8483613ab8565b6110979190613acf565b6110a19190613af1565b8b336001612aec565b6110b333612b8d565b604051868152339060ff8c16907f53ba5e81dfec8b205d4f90024d203c259cb22af4f24780bbb4bcd3b11999824e9060200160405180910390a35050505050610acd60018055565b611103612c4e565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b61119f60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260076020818152604092839020835161010081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c082015291015460e082015290565b611212612c4e565b60065460ff166112595760405162461bcd60e51b815260206004820152601260248201527114d9585cdbdb881b9bdd081cdd185c9d195960721b60448201526064016107af565b600354421061127a5760405162461bcd60e51b81526004016107af90613b3a565b426003819055611288612444565b6040518181527f1e5f886c115fd3c0687f80e465d7485187a87f4a2e97c52e977ce50c76a96d419060200161114c565b6112c0613494565b6001600160a01b03831660009081526008602052604090206112e0613494565b600354429081106112f057506003545b60ff808616600090815260076020818152604092839020835161010081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260068084015460c0830152929091015460e082015290549091161580611372575060c0810151155b1561138657600080845260208401526114d7565b60a0810151608082015160009061139d9085613af1565b905060008360200151826113b19190613ab8565b60c08501519091506113e37f000000000000000000000000000000000000000000000000000000000000000083613ab8565b6113ed9190613acf565b6113f79084613b68565b6001600160a01b038b166000908152600860205260408120919450907f000000000000000000000000000000000000000000000000000000000000000090859060ff8d166004811061144b5761144b613a89565b01546114579190613ab8565b6114619190613acf565b90506000886004018b60ff166004811061147d5761147d613a89565b01546114899083613af1565b60ff8c16600090815260076020526040812060020154919250906064906114b09084613ab8565b6114ba9190613acf565b905060006114c88284613af1565b918a5250602089015250505050505b509095945050505050565b6001600160a01b03808216600090815260116020908152604080832060ff881684528252808320938616835292905220606090610add90612cfa565b611526612c4e565b6107306000612efb565b600a816006811061154057600080fd5b0154905081565b6001600160a01b038216600090815260136020908152604080832060ff85168452909152902060609061157990612cfa565b9392505050565b6115886123eb565b600254604080516359f34bef60e01b815290516000926001600160a01b0316916359f34bef9160048083019260209291908290030181865afa1580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f69190613b04565b336000908152600860208190526040909120015490915082111561165c5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f7567682073706163657368697073207374616b65640000000060448201526064016107af565b60065460ff161561169d5761166f612444565b60005b60048160ff16101561169b57611688813361246b565b508061169381613a19565b915050611672565b505b60005b828110156119c95760008484838181106116bc576116bc613a89565b336000908152601060209081526040808320938202959095013580835292905292909220549192505060ff1661172b5760405162461bcd60e51b815260206004820152601460248201527314dc1858d95cda1a5c081b9bdd081cdd185ad95960621b60448201526064016107af565b604051634875869760e01b8152600481018290526000906001600160a01b03851690634875869790602401602060405180830381865afa158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190613b7b565b60038111156117a8576117a8613b9c565b6117b3906001613bb2565b60008381526009602052604090205490915060ff82166004036117d557600391505b33600090815260086020908152604080832060ff8087168552600b9091019092528220541690036118205761180e816000336000612a40565b61181b8183336000612a40565b6118a3565b33600090815260086020908152604080832060ff8087168552600b909101909252822054600a91166006811061185857611858613a89565b0154905061187f600a61186b8385613ab8565b6118759190613acf565b6000336000612a40565b6118a1600a61188e8385613ab8565b6118989190613acf565b84336000612a40565b505b3360008181526010602090815260408083208784528252808320805460ff191690559282526008908190529181209091018054916118e083613bcb565b91905055506119238787868181106118fa576118fa613a89565b33600090815260136020908152604080832060ff8a168452825290912093910201359050612f4b565b50604051632142170760e11b81526001600160a01b038616906342842e0e9061195490309033908890600401613be2565b600060405180830381600087803b15801561196e57600080fd5b505af1158015611982573d6000803e3d6000fd5b50506040518592503391507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590600090a350505080806119c190613a9f565b9150506116a0565b506119d333612b8d565b506119dd60018055565b5050565b6119e9612c4e565b60065460ff1615611a355760405162461bcd60e51b815260206004820152601660248201527514d9585cdbdb88185b1c9958591e481cdd185c9d195960521b60448201526064016107af565b6003544210611a565760405162461bcd60e51b81526004016107af90613b3a565b4260058190556006805460ff1916600117905560005b6004811015611a9b57600081815260076020526040902060040182905580611a9381613a9f565b915050611a6c565b506040518181527fe1475d48e0afd234267e215f80142c078986c5c445465deb3eccdc69f2ec94fb9060200161114c565b611ad46123eb565b611adc612444565b611ae6813361246b565b50611af060018055565b50565b611afb612c4e565b428111611b585760405162461bcd60e51b815260206004820152602560248201527f536561736f6e20656e642074696d65206d75737420626520696e207468652066604482015264757475726560d81b60648201526084016107af565b6003819055611b65612444565b6040518181527f0ea528f030c9fbba29db4824d8eb3970a40602e20984acefa7715a09ed0450dd9060200161114c565b611b9d612c4e565b60005b8251811015611c04578160126000858481518110611bc057611bc0613a89565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611bfc81613a9f565b915050611ba0565b505050565b6001600160a01b0381166000908152601560205260409020606090610c3b90612cfa565b611c356123eb565b6003544210611c565760405162461bcd60e51b81526004016107af90613b3a565b600254604080516359f34bef60e01b815290516000926001600160a01b0316916359f34bef9160048083019260209291908290030181865afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190613b04565b60065490915060ff1615611d0857611cda612444565b60005b60048160ff161015611d0657611cf3813361246b565b5080611cfe81613a19565b915050611cdd565b505b60005b825181101561215d576000826001600160a01b03166348758697858481518110611d3757611d37613a89565b60200260200101516040518263ffffffff1660e01b8152600401611d5d91815260200190565b602060405180830381865afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190613b7b565b90506000816003811115611db457611db4613b9c565b611dbf906001613bb2565b90508060ff16600403611dd0575060035b6000846001600160a01b0316634b93f753878681518110611df357611df3613a89565b60200260200101516040518263ffffffff1660e01b8152600401611e1991815260200190565b602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190613b21565b611e6590600a613ab8565b90508060096000888781518110611e7e57611e7e613a89565b602002602001015181526020019081526020016000208190555060008111611ee85760405162461bcd60e51b815260206004820152601b60248201527f5370616365736869702073706565642063616e6e6f742062652030000000000060448201526064016107af565b611f2b868581518110611efd57611efd613a89565b60209081029190910181015133600090815260138352604080822060ff881683529093529190912090612f57565b50846001600160a01b03166342842e0e3330898881518110611f4f57611f4f613a89565b60200260200101516040518463ffffffff1660e01b8152600401611f7593929190613be2565b600060405180830381600087803b158015611f8f57600080fd5b505af1158015611fa3573d6000803e3d6000fd5b505033600090815260086020908152604080832060ff8089168552600b9091019092528220541690039150611ff4905057611fe2816000336000612aec565b611fef8183336000612aec565b612077565b33600090815260086020908152604080832060ff8087168552600b909101909252822054600a91166006811061202c5761202c613a89565b01549050612053600a61203f8385613ab8565b6120499190613acf565b6000336000612aec565b612075600a6120628385613ab8565b61206c9190613acf565b84336000612aec565b505b33600090815260106020526040812087516001929089908890811061209e5761209e613a89565b60209081029190910181015182528181019290925260409081016000908120805460ff1916941515949094179093553383526008918290528220018054916120e583613a9f565b91905055508584815181106120fc576120fc613a89565b6020026020010151336001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68360405161213f91815260200190565b60405180910390a3505050808061215590613a9f565b915050611d0b565b50611ae633612b8d565b61216f612c4e565b6001600160a01b0381166121d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107af565b611af081612efb565b6001600160a01b03808216600090815260086020908152604080832060ff8816845260098101835281842094871684529390915281208054606093929067ffffffffffffffff811115612232576122326135f8565b60405190808252806020026020018201604052801561225b578160200160208202803683370190505b50905060005b82548110156122b65782818154811061227c5761227c613a89565b906000526020600020015482828151811061229957612299613a89565b6020908102919091010152806122ae81613a9f565b915050612261565b509695505050505050565b6122c9612c4e565b60025460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190613b04565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a59190613b21565b90506123bb6001600160a01b0383163383612ca8565b6040518181527ff4bf8311fca39e843ef50ab1f47b3e88ba45cfeb73370110f685790557931c5890602001610c0b565b60026001540361243d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107af565b6002600155565b60005b6004811015611af05761245981612f63565b8061246381613a9f565b915050612447565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166342f065326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190613b04565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190613b04565b6001600160a01b03851660009081526008602052604081209192508160ff88166004811061259057612590613a89565b015460ff8816600090815260076020526040902090915081156126145760007f00000000000000000000000000000000000000000000000000000000000000008260050154846125e09190613ab8565b6125ea9190613acf565b9050836004018960ff166004811061260457612604613a89565b01546126109082613af1565b9650505b8515612670577f000000000000000000000000000000000000000000000000000000000000000081600501548361264b9190613ab8565b6126559190613acf565b836004018960ff166004811061266d5761266d613a89565b01555b60ff88166000908152600760205260409020600201546126b4908890606490612699908a613ab8565b6126a39190613acf565b6001600160a01b0387169190612ca8565b60ff88166000908152600760205260409020600301546126f89088906064906126dd908a613ab8565b6126e79190613acf565b6001600160a01b0388169190612ca8565b866001600160a01b03167fd6ec06334e0c48f4d7b58215205f5826ed4fee3ef3d795c69fa7864fce166207896064600760008d60ff168152602001908152602001600020600301548a61274b9190613ab8565b6127559190613acf565b60ff8c16600090815260076020526040902060020154606490612778908c613ab8565b6127829190613acf565b6040805160ff909416845260208401929092529082015260600160405180910390a2505050505092915050565b33600090815260086020908152604080832060ff871684526009810183528184206001600160a01b0387168552909252822090915b81548110156128fb57600082828154811061280157612801613a89565b906000526020600020015490508481036128e8578254839061282590600190613af1565b8154811061283557612835613a89565b906000526020600020015483838154811061285257612852613a89565b90600052602060002001819055508280548061287057612870613c06565b60008281526020808220830160001990810183905590920190925560ff808a168352600b8701909152604082208054909116916128ac83613c1c565b91906101000a81548160ff021916908360ff1602179055505083600a0160008154809291906128da90613bcb565b919050555050505050505050565b50806128f381613a9f565b9150506127e4565b5060405162461bcd60e51b815260206004820152600d60248201526c13999d081b9bdd08199bdd5b99609a1b60448201526064016107af565b6129408333848461303d565b61297d5760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081cdd185ad95960921b60448201526064016107af565b33600090815260116020908152604080832060ff8716845282528083206001600160a01b038616845290915290206129b59082612f4b565b506001600160a01b03821660009081526014602052604090206129d89082612f4b565b50604051632142170760e11b81526001600160a01b038316906342842e0e90612a0990309033908690600401613be2565b600060405180830381600087803b158015612a2357600080fd5b505af1158015612a37573d6000803e3d6000fd5b50505050505050565b60ff831660009081526007602052604081206006018054869290612a65908490613af1565b90915550508315801590612a77575080155b15612aa35760ff83166000908152600760208190526040822001805491612a9d83613bcb565b91905055505b6001600160a01b0382166000908152600860205260409020849060ff851660048110612ad157612ad1613a89565b016000828254612ae19190613af1565b909155505050505050565b60ff831660009081526007602052604081206006018054869290612b11908490613b68565b90915550508315801590612b23575080155b15612b4f5760ff83166000908152600760208190526040822001805491612b4983613a9f565b91905055505b6001600160a01b0382166000908152600860205260409020849060ff851660048110612b7d57612b7d613a89565b016000828254612ae19190613b68565b60005b60048110156119dd576000818152600760209081526040808320600501546001600160a01b038616845260089092529091207f000000000000000000000000000000000000000000000000000000000000000091908360048110612bf657612bf6613a89565b0154612c029190613ab8565b612c0c9190613acf565b6001600160a01b038316600090815260086020526040902060049081019083908110612c3a57612c3a613a89565b015580612c4681613a9f565b915050612b90565b6000546001600160a01b031633146107305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107af565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c04908490613082565b60606000612d0783613154565b905060008167ffffffffffffffff811115612d2457612d246135f8565b604051908082528060200260200182016040528015612d4d578160200160208202803683370190505b50905060005b82811015612d9257612d65858261315e565b828281518110612d7757612d77613a89565b6020908102919091010152612d8b81613a9f565b9050612d53565b509392505050565b33600090815260116020908152604080832060ff8716845282528083206001600160a01b03861684529091529020612dd2908261316a565b15612e145760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e481cdd185ad95960721b60448201526064016107af565b604051632142170760e11b81526001600160a01b038316906342842e0e90612e4490339030908690600401613be2565b600060405180830381600087803b158015612e5e57600080fd5b505af1158015612e72573d6000803e3d6000fd5b505033600090815260116020908152604080832060ff8916845282528083206001600160a01b03881684529091529020612eaf9250905082612f57565b506001600160a01b0382166000908152601460205260409020612ed29082612f57565b506001600160a01b0382166000908152601560205260409020612ef59082612f57565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006115798383613182565b60006115798383613275565b60035442908110612f7357506003545b600082815260076020526040902060060154156130285760008281526007602052604081206001810154600490910154612fad9084613af1565b612fb79190613ab8565b600084815260076020526040902060060154909150612ff67f000000000000000000000000000000000000000000000000000000000000000083613ab8565b6130009190613acf565b60008481526007602052604081206005018054909190613021908490613b68565b9091555050505b60009182526007602052604090912060040155565b6001600160a01b03808416600090815260116020908152604080832060ff8916845282528083209386168352929052908120613079908361316a565b95945050505050565b60006130d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132c49092919063ffffffff16565b805190915015611c0457808060200190518101906130f59190613c39565b611c045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107af565b6000610c3b825490565b600061157983836132d3565b60008181526001830160205260408120541515611579565b6000818152600183016020526040812054801561326b5760006131a6600183613af1565b85549091506000906131ba90600190613af1565b905081811461321f5760008660000182815481106131da576131da613a89565b90600052602060002001549050808760000184815481106131fd576131fd613a89565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061323057613230613c06565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c3b565b6000915050610c3b565b60008181526001830160205260408120546132bc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c3b565b506000610c3b565b6060610add84846000856132fd565b60008260000182815481106132ea576132ea613a89565b9060005260206000200154905092915050565b60608247101561335e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107af565b600080866001600160a01b0316858760405161337a9190613c7a565b60006040518083038185875af1925050503d80600081146133b7576040519150601f19603f3d011682016040523d82523d6000602084013e6133bc565b606091505b50915091506133cd878383876133d8565b979650505050505050565b60608315613447578251600003613440576001600160a01b0385163b6134405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107af565b5081610add565b610add838381511561345c5781518083602001fd5b8060405162461bcd60e51b81526004016107af9190613c96565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b0381168114611af057600080fd5b6000602082840312156134d957600080fd5b8135611579816134b2565b60808101818360005b600481101561350c5781518352602092830192909101906001016134ed565b50505092915050565b803560ff8116811461352657600080fd5b919050565b60008083601f84011261353d57600080fd5b50813567ffffffffffffffff81111561355557600080fd5b6020830191508360208260051b850101111561357057600080fd5b9250929050565b60008060008060006060868803121561358f57600080fd5b61359886613515565b9450602086013567ffffffffffffffff808211156135b557600080fd5b6135c189838a0161352b565b909650945060408801359150808211156135da57600080fd5b506135e78882890161352b565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613637576136376135f8565b604052919050565b6000806000806080858703121561365557600080fd5b8435613660816134b2565b9350602085810135613671816134b2565b935060408601359250606086013567ffffffffffffffff8082111561369557600080fd5b818801915088601f8301126136a957600080fd5b8135818111156136bb576136bb6135f8565b6136cd601f8201601f1916850161360e565b915080825289848285010111156136e357600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561371557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561375457835183529284019291840191600101613738565b50909695505050505050565b6000806040838503121561377357600080fd5b823561377e816134b2565b915061378c60208401613515565b90509250929050565b600080604083850312156137a857600080fd5b82356137b3816134b2565b946020939093013593505050565b60408101818360005b600281101561350c5781518352602092830192909101906001016137ca565b6000806000606084860312156137fe57600080fd5b61380784613515565b92506020840135613817816134b2565b91506040840135613827816134b2565b809150509250925092565b6000806020838503121561384557600080fd5b823567ffffffffffffffff81111561385c57600080fd5b6138688582860161352b565b90969095509350505050565b60006020828403121561388657600080fd5b61157982613515565b600067ffffffffffffffff8211156138a9576138a96135f8565b5060051b60200190565b8015158114611af057600080fd5b8035613526816138b3565b600080604083850312156138df57600080fd5b823567ffffffffffffffff8111156138f657600080fd5b8301601f8101851361390757600080fd5b8035602061391c6139178361388f565b61360e565b82815260059290921b8301810191818101908884111561393b57600080fd5b938201935b83851015613962578435613953816134b2565b82529382019390820190613940565b955061397190508682016138c1565b93505050509250929050565b6000602080838503121561399057600080fd5b823567ffffffffffffffff8111156139a757600080fd5b8301601f810185136139b857600080fd5b80356139c66139178261388f565b81815260059190911b820183019083810190878311156139e557600080fd5b928401925b828410156133cd578335825292840192908401906139ea565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103613a2f57613a2f613a03565b60010192915050565b60208082526031908201527f4e46547320616e6420636f6c6c656374696f6e20616464726573736573206d756040820152700e6e840c4ca40e6c2daca40d8cadccee8d607b1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060018201613ab157613ab1613a03565b5060010190565b8082028115828204841417610c3b57610c3b613a03565b600082613aec57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c3b57610c3b613a03565b600060208284031215613b1657600080fd5b8151611579816134b2565b600060208284031215613b3357600080fd5b5051919050565b60208082526014908201527314d9585cdbdb88185b1c9958591e48195b99195960621b604082015260600190565b80820180821115610c3b57610c3b613a03565b600060208284031215613b8d57600080fd5b81516004811061157957600080fd5b634e487b7160e01b600052602160045260246000fd5b60ff8181168382160190811115610c3b57610c3b613a03565b600081613bda57613bda613a03565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603160045260246000fd5b600060ff821680613c2f57613c2f613a03565b6000190192915050565b600060208284031215613c4b57600080fd5b8151611579816138b3565b60005b83811015613c71578181015183820152602001613c59565b50506000910152565b60008251613c8c818460208701613c56565b9190910192915050565b6020815260008251806020840152613cb5816040850160208701613c56565b601f01601f1916919091016040019291505056fea264697066735822122028d21138aa3e8fdfd4b9235ea18baf1f99503cc9f17a361d0096127d63a3162364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c8063587210cf1161013b578063b499da75116100b8578063eea016041161007c578063eea0160414610682578063f2fde38b146106a9578063f3ad65f4146106bc578063f5dbe609146106cf578063fec34809146106e257600080fd5b8063b499da7514610609578063b4a7a4791461061c578063b9c664f214610649578063bf2cf3991461065c578063d34e7a291461066f57600080fd5b80638da5cb5b116100ff5780638da5cb5b146105ae578063915ac442146105d3578063952a9633146105e65780639a6a327c146105ee5780639b1e63d01461060157600080fd5b8063587210cf14610564578063715018a6146105775780637f4ca1d71461057f5780638104ae4d1461059257806387f520b81461059b57600080fd5b8063230620c7116101c95780633dcdb6721161018d5780633dcdb672146104cb578063420fad88146104d3578063434c0498146104f35780634f05cbd814610521578063500ab1571461054457600080fd5b8063230620c7146103df57806327c7812c146103fc578063280126fa1461040f5780633a3ce08c1461044e5780633c2466b4146104c257600080fd5b80631526fe27116102105780631526fe27146102d2578063157ad5c3146103635780631639f1fe1461036b5780631959a0021461038b5780631ec26003146103cc57600080fd5b80630572b0cc1461024d57806307ac1a53146102575780630d755bd2146102735780630e8953a714610293578063150b7a02146102a6575b600080fd5b6102556106ea565b005b61026060035481565b6040519081526020015b60405180910390f35b6102866102813660046134c7565b610732565b60405161026a91906134e4565b6102556102a1366004613577565b610788565b6102b96102b436600461363f565b610ad4565b6040516001600160e01b0319909116815260200161026a565b6103286102e0366004613703565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161026a565b610255610ae5565b61037e6103793660046134c7565b610c17565b60405161026a919061371c565b6103b76103993660046134c7565b600860208190526000918252604090912090810154600a9091015482565b6040805192835260208301919091520161026a565b6102556103da366004613577565b610c41565b6006546103ec9060ff1681565b604051901515815260200161026a565b61025561040a3660046134c7565b6110fb565b61026061041d366004613760565b6001600160a01b0391909116600090815260086020908152604080832060ff9485168452600b019091529020541690565b61046161045c366004613703565b611157565b60405161026a9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b61026060045481565b61025561120a565b6102606104e1366004613703565b60096020526000908152604090205481565b6103ec610501366004613795565b601060209081526000928352604080842090915290825290205460ff1681565b6103ec61052f3660046134c7565b60126020526000908152604090205460ff1681565b610557610552366004613760565b6112b8565b60405161026a91906137c1565b61037e6105723660046137e9565b6114e2565b61025561151e565b61026061058d366004613703565b611530565b61026060055481565b61037e6105a9366004613760565b611547565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161026a565b6102556105e1366004613832565b611580565b6102556119e1565b6102556105fc366004613874565b611acc565b610260600f81565b610255610617366004613703565b611af3565b61026061062a3660046134c7565b6001600160a01b03166000908152600860208190526040909120015490565b6102556106573660046138cc565b611b95565b61037e61066a3660046134c7565b611c09565b61025561067d36600461397d565b611c2d565b6102607f000000000000000000000000000000000000000000000000000000000000000081565b6102556106b73660046134c7565b612167565b6002546105bb906001600160a01b031681565b61037e6106dd3660046137e9565b6121dd565b6102556122c1565b6106f26123eb565b6106fa612444565b60005b60048160ff16101561072657610713813361246b565b508061071e81613a19565b9150506106fd565b5061073060018055565b565b61073a613476565b6001600160a01b03821660009081526008602052604090819020815160808101928390529091829060049082845b815481526020019060010190808311610768575050505050915050919050565b6107906123eb565b8083146107b85760405162461bcd60e51b81526004016107af90613a38565b60405180910390fd5b60018560ff16101580156107d0575060038560ff1611155b61080e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081a59608a1b60448201526064016107af565b60065460ff161561084f57610821612444565b60005b60048160ff16101561084d5761083a813361246b565b508061084581613a19565b915050610824565b505b33600090815260086020908152604080832060ff808a168552600b90910190925282205416905b84811015610922576108c78787878481811061089457610894613a89565b90506020020160208101906108a991906134c7565b8686858181106108bb576108bb613a89565b905060200201356127af565b610910878787848181106108dd576108dd613a89565b90506020020160208101906108f291906134c7565b86868581811061090457610904613a89565b90506020020135612934565b8061091a81613a9f565b915050610876565b5033600090815260086020526040812060ff88166004811061094657610946613a89565b015490506000600a836006811061095f5761095f613a89565b015433600090815260086020908152604080832060ff808e168552600b9091019092528220549293509091600a91166006811061099e5761099e613a89565b015490506109cf826109b185600a613ab8565b6109bb9190613acf565b6109c59085613af1565b6000336001612a40565b6109fb826109de85600a613ab8565b6109e89190613acf565b6109f29085613af1565b8a336001612a40565b33600090815260086020526040902060ff8a1660048110610a1e57610a1e613a89565b01549250610a5083600a610a328483613ab8565b610a3c9190613acf565b610a469190613af1565b6000336001612aec565b610a7d83600a610a608483613ab8565b610a6a9190613acf565b610a749190613af1565b8a336001612aec565b610a8633612b8d565b604051858152339060ff8b16907fdcfcdf4a6ad1072a25aa5f40b0b08aa1a5085a8ad16aa8ee1ccce6a8e8c8b76e9060200160405180910390a350505050610acd60018055565b5050505050565b630a85bd0160e11b5b949350505050565b610aed612c4e565b6002546040805163301c981160e21b815290516000926001600160a01b03169163c07260449160048083019260209291908290030181865afa158015610b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190613b04565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190613b21565b9050610bdf6001600160a01b0383163383612ca8565b6040518181527f14bd6191cc1853697dffe6990f3fc6a04effceccc4e24f8f8d4d267b31d2728c906020015b60405180910390a15050565b6001600160a01b0381166000908152601460205260409020606090610c3b90612cfa565b92915050565b610c496123eb565b6003544210610c6a5760405162461bcd60e51b81526004016107af90613b3a565b60018560ff1610158015610c82575060038560ff1611155b610cc05760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081a59608a1b60448201526064016107af565b808314610cdf5760405162461bcd60e51b81526004016107af90613a38565b60065460ff1615610d2057610cf2612444565b60005b60048160ff161015610d1e57610d0b813361246b565b5080610d1681613a19565b915050610cf5565b505b336000908152600860205260409020600a810154600f90610d42908490613b68565b1115610d875760405162461bcd60e51b8152602060048201526014602482015273151bdbc81b585b9e481391951cc81cdd185ad95960621b60448201526064016107af565b60005b84811015610e385760126000878784818110610da857610da8613a89565b9050602002016020810190610dbd91906134c7565b6001600160a01b0316815260208101919091526040016000205460ff16610e265760405162461bcd60e51b815260206004820152601a60248201527f436f6c6c656374696f6e206e6f742077686974656c697374656400000000000060448201526064016107af565b80610e3081613a9f565b915050610d8a565b5060ff8087166000908152600b83016020526040812054909116905b85811015610f975760ff88166000908152600984016020526040812090888884818110610e8357610e83613a89565b9050602002016020810190610e9891906134c7565b6001600160a01b03166001600160a01b03168152602001908152602001600020858583818110610eca57610eca613a89565b83546001810185556000948552602080862092810294909401359101555060ff808b168352600b860190915260408220805490911691610f0983613a19565b91906101000a81548160ff021916908360ff1602179055505082600a016000815480929190610f3790613a9f565b9190505550610f8588888884818110610f5257610f52613a89565b9050602002016020810190610f6791906134c7565b878785818110610f7957610f79613a89565b90506020020135612d9a565b80610f8f81613a9f565b915050610e54565b5060008260ff891660048110610faf57610faf613a89565b015490506000600a8360068110610fc857610fc8613a89565b015433600090815260086020908152604080832060ff808f168552600b9091019092528220549293509091600a91166006811061100757611007613a89565b0154905061101a826109b185600a613ab8565b6110468261102985600a613ab8565b6110339190613acf565b61103d9085613af1565b8b336001612a40565b33600090815260086020526040902060ff8b166004811061106957611069613a89565b0154925061107d83600a610a328483613ab8565b6110aa83600a61108d8483613ab8565b6110979190613acf565b6110a19190613af1565b8b336001612aec565b6110b333612b8d565b604051868152339060ff8c16907f53ba5e81dfec8b205d4f90024d203c259cb22af4f24780bbb4bcd3b11999824e9060200160405180910390a35050505050610acd60018055565b611103612c4e565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527e642c94770a2c959864e4fbb2263a24c595122ac021c793bde7e74ccd8a9592906020015b60405180910390a150565b61119f60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260076020818152604092839020835161010081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c082015291015460e082015290565b611212612c4e565b60065460ff166112595760405162461bcd60e51b815260206004820152601260248201527114d9585cdbdb881b9bdd081cdd185c9d195960721b60448201526064016107af565b600354421061127a5760405162461bcd60e51b81526004016107af90613b3a565b426003819055611288612444565b6040518181527f1e5f886c115fd3c0687f80e465d7485187a87f4a2e97c52e977ce50c76a96d419060200161114c565b6112c0613494565b6001600160a01b03831660009081526008602052604090206112e0613494565b600354429081106112f057506003545b60ff808616600090815260076020818152604092839020835161010081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260068084015460c0830152929091015460e082015290549091161580611372575060c0810151155b1561138657600080845260208401526114d7565b60a0810151608082015160009061139d9085613af1565b905060008360200151826113b19190613ab8565b60c08501519091506113e37f000000000000000000000000000000000000000000000000000000000000000083613ab8565b6113ed9190613acf565b6113f79084613b68565b6001600160a01b038b166000908152600860205260408120919450907f000000000000000000000000000000000000000000000000000000000000000090859060ff8d166004811061144b5761144b613a89565b01546114579190613ab8565b6114619190613acf565b90506000886004018b60ff166004811061147d5761147d613a89565b01546114899083613af1565b60ff8c16600090815260076020526040812060020154919250906064906114b09084613ab8565b6114ba9190613acf565b905060006114c88284613af1565b918a5250602089015250505050505b509095945050505050565b6001600160a01b03808216600090815260116020908152604080832060ff881684528252808320938616835292905220606090610add90612cfa565b611526612c4e565b6107306000612efb565b600a816006811061154057600080fd5b0154905081565b6001600160a01b038216600090815260136020908152604080832060ff85168452909152902060609061157990612cfa565b9392505050565b6115886123eb565b600254604080516359f34bef60e01b815290516000926001600160a01b0316916359f34bef9160048083019260209291908290030181865afa1580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f69190613b04565b336000908152600860208190526040909120015490915082111561165c5760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f7567682073706163657368697073207374616b65640000000060448201526064016107af565b60065460ff161561169d5761166f612444565b60005b60048160ff16101561169b57611688813361246b565b508061169381613a19565b915050611672565b505b60005b828110156119c95760008484838181106116bc576116bc613a89565b336000908152601060209081526040808320938202959095013580835292905292909220549192505060ff1661172b5760405162461bcd60e51b815260206004820152601460248201527314dc1858d95cda1a5c081b9bdd081cdd185ad95960621b60448201526064016107af565b604051634875869760e01b8152600481018290526000906001600160a01b03851690634875869790602401602060405180830381865afa158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190613b7b565b60038111156117a8576117a8613b9c565b6117b3906001613bb2565b60008381526009602052604090205490915060ff82166004036117d557600391505b33600090815260086020908152604080832060ff8087168552600b9091019092528220541690036118205761180e816000336000612a40565b61181b8183336000612a40565b6118a3565b33600090815260086020908152604080832060ff8087168552600b909101909252822054600a91166006811061185857611858613a89565b0154905061187f600a61186b8385613ab8565b6118759190613acf565b6000336000612a40565b6118a1600a61188e8385613ab8565b6118989190613acf565b84336000612a40565b505b3360008181526010602090815260408083208784528252808320805460ff191690559282526008908190529181209091018054916118e083613bcb565b91905055506119238787868181106118fa576118fa613a89565b33600090815260136020908152604080832060ff8a168452825290912093910201359050612f4b565b50604051632142170760e11b81526001600160a01b038616906342842e0e9061195490309033908890600401613be2565b600060405180830381600087803b15801561196e57600080fd5b505af1158015611982573d6000803e3d6000fd5b50506040518592503391507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590600090a350505080806119c190613a9f565b9150506116a0565b506119d333612b8d565b506119dd60018055565b5050565b6119e9612c4e565b60065460ff1615611a355760405162461bcd60e51b815260206004820152601660248201527514d9585cdbdb88185b1c9958591e481cdd185c9d195960521b60448201526064016107af565b6003544210611a565760405162461bcd60e51b81526004016107af90613b3a565b4260058190556006805460ff1916600117905560005b6004811015611a9b57600081815260076020526040902060040182905580611a9381613a9f565b915050611a6c565b506040518181527fe1475d48e0afd234267e215f80142c078986c5c445465deb3eccdc69f2ec94fb9060200161114c565b611ad46123eb565b611adc612444565b611ae6813361246b565b50611af060018055565b50565b611afb612c4e565b428111611b585760405162461bcd60e51b815260206004820152602560248201527f536561736f6e20656e642074696d65206d75737420626520696e207468652066604482015264757475726560d81b60648201526084016107af565b6003819055611b65612444565b6040518181527f0ea528f030c9fbba29db4824d8eb3970a40602e20984acefa7715a09ed0450dd9060200161114c565b611b9d612c4e565b60005b8251811015611c04578160126000858481518110611bc057611bc0613a89565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611bfc81613a9f565b915050611ba0565b505050565b6001600160a01b0381166000908152601560205260409020606090610c3b90612cfa565b611c356123eb565b6003544210611c565760405162461bcd60e51b81526004016107af90613b3a565b600254604080516359f34bef60e01b815290516000926001600160a01b0316916359f34bef9160048083019260209291908290030181865afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190613b04565b60065490915060ff1615611d0857611cda612444565b60005b60048160ff161015611d0657611cf3813361246b565b5080611cfe81613a19565b915050611cdd565b505b60005b825181101561215d576000826001600160a01b03166348758697858481518110611d3757611d37613a89565b60200260200101516040518263ffffffff1660e01b8152600401611d5d91815260200190565b602060405180830381865afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190613b7b565b90506000816003811115611db457611db4613b9c565b611dbf906001613bb2565b90508060ff16600403611dd0575060035b6000846001600160a01b0316634b93f753878681518110611df357611df3613a89565b60200260200101516040518263ffffffff1660e01b8152600401611e1991815260200190565b602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190613b21565b611e6590600a613ab8565b90508060096000888781518110611e7e57611e7e613a89565b602002602001015181526020019081526020016000208190555060008111611ee85760405162461bcd60e51b815260206004820152601b60248201527f5370616365736869702073706565642063616e6e6f742062652030000000000060448201526064016107af565b611f2b868581518110611efd57611efd613a89565b60209081029190910181015133600090815260138352604080822060ff881683529093529190912090612f57565b50846001600160a01b03166342842e0e3330898881518110611f4f57611f4f613a89565b60200260200101516040518463ffffffff1660e01b8152600401611f7593929190613be2565b600060405180830381600087803b158015611f8f57600080fd5b505af1158015611fa3573d6000803e3d6000fd5b505033600090815260086020908152604080832060ff8089168552600b9091019092528220541690039150611ff4905057611fe2816000336000612aec565b611fef8183336000612aec565b612077565b33600090815260086020908152604080832060ff8087168552600b909101909252822054600a91166006811061202c5761202c613a89565b01549050612053600a61203f8385613ab8565b6120499190613acf565b6000336000612aec565b612075600a6120628385613ab8565b61206c9190613acf565b84336000612aec565b505b33600090815260106020526040812087516001929089908890811061209e5761209e613a89565b60209081029190910181015182528181019290925260409081016000908120805460ff1916941515949094179093553383526008918290528220018054916120e583613a9f565b91905055508584815181106120fc576120fc613a89565b6020026020010151336001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68360405161213f91815260200190565b60405180910390a3505050808061215590613a9f565b915050611d0b565b50611ae633612b8d565b61216f612c4e565b6001600160a01b0381166121d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107af565b611af081612efb565b6001600160a01b03808216600090815260086020908152604080832060ff8816845260098101835281842094871684529390915281208054606093929067ffffffffffffffff811115612232576122326135f8565b60405190808252806020026020018201604052801561225b578160200160208202803683370190505b50905060005b82548110156122b65782818154811061227c5761227c613a89565b906000526020600020015482828151811061229957612299613a89565b6020908102919091010152806122ae81613a9f565b915050612261565b509695505050505050565b6122c9612c4e565b60025460408051632178329960e11b815290516000926001600160a01b0316916342f065329160048083019260209291908290030181865afa158015612313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123379190613b04565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a59190613b21565b90506123bb6001600160a01b0383163383612ca8565b6040518181527ff4bf8311fca39e843ef50ab1f47b3e88ba45cfeb73370110f685790557931c5890602001610c0b565b60026001540361243d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107af565b6002600155565b60005b6004811015611af05761245981612f63565b8061246381613a9f565b915050612447565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166342f065326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e59190613b04565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663c07260446040518163ffffffff1660e01b8152600401602060405180830381865afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190613b04565b6001600160a01b03851660009081526008602052604081209192508160ff88166004811061259057612590613a89565b015460ff8816600090815260076020526040902090915081156126145760007f00000000000000000000000000000000000000000000000000000000000000008260050154846125e09190613ab8565b6125ea9190613acf565b9050836004018960ff166004811061260457612604613a89565b01546126109082613af1565b9650505b8515612670577f000000000000000000000000000000000000000000000000000000000000000081600501548361264b9190613ab8565b6126559190613acf565b836004018960ff166004811061266d5761266d613a89565b01555b60ff88166000908152600760205260409020600201546126b4908890606490612699908a613ab8565b6126a39190613acf565b6001600160a01b0387169190612ca8565b60ff88166000908152600760205260409020600301546126f89088906064906126dd908a613ab8565b6126e79190613acf565b6001600160a01b0388169190612ca8565b866001600160a01b03167fd6ec06334e0c48f4d7b58215205f5826ed4fee3ef3d795c69fa7864fce166207896064600760008d60ff168152602001908152602001600020600301548a61274b9190613ab8565b6127559190613acf565b60ff8c16600090815260076020526040902060020154606490612778908c613ab8565b6127829190613acf565b6040805160ff909416845260208401929092529082015260600160405180910390a2505050505092915050565b33600090815260086020908152604080832060ff871684526009810183528184206001600160a01b0387168552909252822090915b81548110156128fb57600082828154811061280157612801613a89565b906000526020600020015490508481036128e8578254839061282590600190613af1565b8154811061283557612835613a89565b906000526020600020015483838154811061285257612852613a89565b90600052602060002001819055508280548061287057612870613c06565b60008281526020808220830160001990810183905590920190925560ff808a168352600b8701909152604082208054909116916128ac83613c1c565b91906101000a81548160ff021916908360ff1602179055505083600a0160008154809291906128da90613bcb565b919050555050505050505050565b50806128f381613a9f565b9150506127e4565b5060405162461bcd60e51b815260206004820152600d60248201526c13999d081b9bdd08199bdd5b99609a1b60448201526064016107af565b6129408333848461303d565b61297d5760405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081cdd185ad95960921b60448201526064016107af565b33600090815260116020908152604080832060ff8716845282528083206001600160a01b038616845290915290206129b59082612f4b565b506001600160a01b03821660009081526014602052604090206129d89082612f4b565b50604051632142170760e11b81526001600160a01b038316906342842e0e90612a0990309033908690600401613be2565b600060405180830381600087803b158015612a2357600080fd5b505af1158015612a37573d6000803e3d6000fd5b50505050505050565b60ff831660009081526007602052604081206006018054869290612a65908490613af1565b90915550508315801590612a77575080155b15612aa35760ff83166000908152600760208190526040822001805491612a9d83613bcb565b91905055505b6001600160a01b0382166000908152600860205260409020849060ff851660048110612ad157612ad1613a89565b016000828254612ae19190613af1565b909155505050505050565b60ff831660009081526007602052604081206006018054869290612b11908490613b68565b90915550508315801590612b23575080155b15612b4f5760ff83166000908152600760208190526040822001805491612b4983613a9f565b91905055505b6001600160a01b0382166000908152600860205260409020849060ff851660048110612b7d57612b7d613a89565b016000828254612ae19190613b68565b60005b60048110156119dd576000818152600760209081526040808320600501546001600160a01b038616845260089092529091207f000000000000000000000000000000000000000000000000000000000000000091908360048110612bf657612bf6613a89565b0154612c029190613ab8565b612c0c9190613acf565b6001600160a01b038316600090815260086020526040902060049081019083908110612c3a57612c3a613a89565b015580612c4681613a9f565b915050612b90565b6000546001600160a01b031633146107305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107af565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c04908490613082565b60606000612d0783613154565b905060008167ffffffffffffffff811115612d2457612d246135f8565b604051908082528060200260200182016040528015612d4d578160200160208202803683370190505b50905060005b82811015612d9257612d65858261315e565b828281518110612d7757612d77613a89565b6020908102919091010152612d8b81613a9f565b9050612d53565b509392505050565b33600090815260116020908152604080832060ff8716845282528083206001600160a01b03861684529091529020612dd2908261316a565b15612e145760405162461bcd60e51b815260206004820152601260248201527113919508185b1c9958591e481cdd185ad95960721b60448201526064016107af565b604051632142170760e11b81526001600160a01b038316906342842e0e90612e4490339030908690600401613be2565b600060405180830381600087803b158015612e5e57600080fd5b505af1158015612e72573d6000803e3d6000fd5b505033600090815260116020908152604080832060ff8916845282528083206001600160a01b03881684529091529020612eaf9250905082612f57565b506001600160a01b0382166000908152601460205260409020612ed29082612f57565b506001600160a01b0382166000908152601560205260409020612ef59082612f57565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006115798383613182565b60006115798383613275565b60035442908110612f7357506003545b600082815260076020526040902060060154156130285760008281526007602052604081206001810154600490910154612fad9084613af1565b612fb79190613ab8565b600084815260076020526040902060060154909150612ff67f000000000000000000000000000000000000000000000000000000000000000083613ab8565b6130009190613acf565b60008481526007602052604081206005018054909190613021908490613b68565b9091555050505b60009182526007602052604090912060040155565b6001600160a01b03808416600090815260116020908152604080832060ff8916845282528083209386168352929052908120613079908361316a565b95945050505050565b60006130d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132c49092919063ffffffff16565b805190915015611c0457808060200190518101906130f59190613c39565b611c045760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107af565b6000610c3b825490565b600061157983836132d3565b60008181526001830160205260408120541515611579565b6000818152600183016020526040812054801561326b5760006131a6600183613af1565b85549091506000906131ba90600190613af1565b905081811461321f5760008660000182815481106131da576131da613a89565b90600052602060002001549050808760000184815481106131fd576131fd613a89565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061323057613230613c06565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c3b565b6000915050610c3b565b60008181526001830160205260408120546132bc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c3b565b506000610c3b565b6060610add84846000856132fd565b60008260000182815481106132ea576132ea613a89565b9060005260206000200154905092915050565b60608247101561335e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107af565b600080866001600160a01b0316858760405161337a9190613c7a565b60006040518083038185875af1925050503d80600081146133b7576040519150601f19603f3d011682016040523d82523d6000602084013e6133bc565b606091505b50915091506133cd878383876133d8565b979650505050505050565b60608315613447578251600003613440576001600160a01b0385163b6134405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107af565b5081610add565b610add838381511561345c5781518083602001fd5b8060405162461bcd60e51b81526004016107af9190613c96565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b0381168114611af057600080fd5b6000602082840312156134d957600080fd5b8135611579816134b2565b60808101818360005b600481101561350c5781518352602092830192909101906001016134ed565b50505092915050565b803560ff8116811461352657600080fd5b919050565b60008083601f84011261353d57600080fd5b50813567ffffffffffffffff81111561355557600080fd5b6020830191508360208260051b850101111561357057600080fd5b9250929050565b60008060008060006060868803121561358f57600080fd5b61359886613515565b9450602086013567ffffffffffffffff808211156135b557600080fd5b6135c189838a0161352b565b909650945060408801359150808211156135da57600080fd5b506135e78882890161352b565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613637576136376135f8565b604052919050565b6000806000806080858703121561365557600080fd5b8435613660816134b2565b9350602085810135613671816134b2565b935060408601359250606086013567ffffffffffffffff8082111561369557600080fd5b818801915088601f8301126136a957600080fd5b8135818111156136bb576136bb6135f8565b6136cd601f8201601f1916850161360e565b915080825289848285010111156136e357600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561371557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561375457835183529284019291840191600101613738565b50909695505050505050565b6000806040838503121561377357600080fd5b823561377e816134b2565b915061378c60208401613515565b90509250929050565b600080604083850312156137a857600080fd5b82356137b3816134b2565b946020939093013593505050565b60408101818360005b600281101561350c5781518352602092830192909101906001016137ca565b6000806000606084860312156137fe57600080fd5b61380784613515565b92506020840135613817816134b2565b91506040840135613827816134b2565b809150509250925092565b6000806020838503121561384557600080fd5b823567ffffffffffffffff81111561385c57600080fd5b6138688582860161352b565b90969095509350505050565b60006020828403121561388657600080fd5b61157982613515565b600067ffffffffffffffff8211156138a9576138a96135f8565b5060051b60200190565b8015158114611af057600080fd5b8035613526816138b3565b600080604083850312156138df57600080fd5b823567ffffffffffffffff8111156138f657600080fd5b8301601f8101851361390757600080fd5b8035602061391c6139178361388f565b61360e565b82815260059290921b8301810191818101908884111561393b57600080fd5b938201935b83851015613962578435613953816134b2565b82529382019390820190613940565b955061397190508682016138c1565b93505050509250929050565b6000602080838503121561399057600080fd5b823567ffffffffffffffff8111156139a757600080fd5b8301601f810185136139b857600080fd5b80356139c66139178261388f565b81815260059190911b820183019083810190878311156139e557600080fd5b928401925b828410156133cd578335825292840192908401906139ea565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103613a2f57613a2f613a03565b60010192915050565b60208082526031908201527f4e46547320616e6420636f6c6c656374696f6e20616464726573736573206d756040820152700e6e840c4ca40e6c2daca40d8cadccee8d607b1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060018201613ab157613ab1613a03565b5060010190565b8082028115828204841417610c3b57610c3b613a03565b600082613aec57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c3b57610c3b613a03565b600060208284031215613b1657600080fd5b8151611579816134b2565b600060208284031215613b3357600080fd5b5051919050565b60208082526014908201527314d9585cdbdb88185b1c9958591e48195b99195960621b604082015260600190565b80820180821115610c3b57610c3b613a03565b600060208284031215613b8d57600080fd5b81516004811061157957600080fd5b634e487b7160e01b600052602160045260246000fd5b60ff8181168382160190811115610c3b57610c3b613a03565b600081613bda57613bda613a03565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052603160045260246000fd5b600060ff821680613c2f57613c2f613a03565b6000190192915050565b600060208284031215613c4b57600080fd5b8151611579816138b3565b60005b83811015613c71578181015183820152602001613c59565b50506000910152565b60008251613c8c818460208701613c56565b9190910192915050565b6020815260008251806020840152613cb5816040850160208701613c56565b601f01601f1916919091016040019291505056fea264697066735822122028d21138aa3e8fdfd4b9235ea18baf1f99503cc9f17a361d0096127d63a3162364736f6c63430008110033",
  "devdoc": {
    "details": "Send your Spaceships to race for rewards. Add supported Nft collections to boost speed and earn a larger share of the rewards.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_registry": "Address registry contract",
          "_seasonEndTime": "Season end time",
          "_totalRewardPerSecond": "Total stardust per second"
        }
      },
      "getCurrentlyStakedTokenIds(address)": {
        "params": {
          "_collectionAddress": "Address of the collection contract"
        },
        "returns": {
          "_0": "Array of tokenIds which are currently staked for the given token contract"
        }
      },
      "getCurrentlyStakedTokenIds(uint8,address,address)": {
        "params": {
          "_collectionAddress": "Address of the collection contract",
          "_pid": "Pool id",
          "_staker": "User for whom to retrieve staked token ids"
        },
        "returns": {
          "_0": "Array of tokenIds which are currently staked by the user for the given token contract"
        }
      },
      "getPreviouslyStakedTokenIds(address)": {
        "params": {
          "_collectionAddress": "Address of the collection contract"
        },
        "returns": {
          "_0": "Array of tokenIds which have ever been staked for the given token contract"
        }
      },
      "getReward(uint8)": {
        "params": {
          "_pid": "Pool id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAddressRegistry(address)": {
        "params": {
          "_addressRegistry": "The address of the Address Registry"
        }
      },
      "setSeasonEndTime(uint256)": {
        "params": {
          "_time": "season end time in unix timestamp"
        }
      },
      "setWhitelistedCollections(address[],bool)": {
        "details": "Only whitelisted collections can be staked",
        "params": {
          "_collectionAddresses": "The address of the collection",
          "_status": "The whitelisted status of the collection"
        }
      },
      "stakeNfts(uint8,address[],uint256[])": {
        "params": {
          "_collectionAddresses": "Array of collection addresses",
          "_nfts": "Array of token ids to stake",
          "_pid": "Id of the pool to boost"
        }
      },
      "stakeSpaceships(uint256[])": {
        "params": {
          "_ids": "The ids of the spaceships to stake"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeNfts(uint8,address[],uint256[])": {
        "params": {
          "_collectionAddresses": "Array of nft contract addresses",
          "_nfts": "Array of structs containing the nft contract and token id to unstake",
          "_pid": "Id of the farm to unstake the nfts from"
        }
      },
      "unstakeSpaceships(uint256[])": {
        "params": {
          "_ids": "The ids of the spaceships to unstake"
        }
      },
      "viewBoostingNfts(uint8,address,address)": {
        "params": {
          "_collectionAddress": "Address of the collection contract",
          "_pid": "Pool id",
          "_user": "User address"
        },
        "returns": {
          "_0": "boostingNfts Array of nft ids"
        }
      },
      "viewBoostingNftsPoolCount(address,uint8)": {
        "params": {
          "_pid": "Pool id",
          "_user": "User address"
        },
        "returns": {
          "_0": "number of boosting nfts in a specific pool"
        }
      },
      "viewCurrentlyStakedSpaceships(address,uint8)": {
        "params": {
          "_pid": "Pool id",
          "_user": "User address"
        },
        "returns": {
          "_0": "spaceshipIds Array of spaceship ids"
        }
      },
      "viewPoolInfo(uint256)": {
        "params": {
          "_pid": "Pool id"
        }
      },
      "viewRewards(address,uint8)": {
        "params": {
          "_pid": "Pool id",
          "_user": "User address"
        },
        "returns": {
          "_0": "rewards  Array of rewards [stardust, gold]"
        }
      },
      "viewSpaceshipsStaked(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "spaceshipsStaked  Number of spaceships staked"
        }
      },
      "viewTotalSpeeds(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "totalSpeeds  Array of total speeds [Global, Common, Uncommon, Rare/Epic]"
        }
      }
    },
    "title": "Atlantis - Racing contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ACC_TOKEN_PRECISION()": {
        "notice": "Precision factor for calculations"
      },
      "MAX_NFTS_STAKED()": {
        "notice": "Max limit of Nfts staked in all pools"
      },
      "addressRegistry()": {
        "notice": "Address registry contract"
      },
      "cachedSpeeds(uint256)": {
        "notice": "Cached speed"
      },
      "constructor": {
        "notice": "Constructor for Atlantis Racing"
      },
      "endSeason()": {
        "notice": "Ends the season early"
      },
      "getCurrentlyStakedTokenIds(address)": {
        "notice": "Get tokenIds of a given collection currently staked by any user"
      },
      "getCurrentlyStakedTokenIds(uint8,address,address)": {
        "notice": "Get tokenIds of a given collection currently staked by specific user"
      },
      "getPreviouslyStakedTokenIds(address)": {
        "notice": "Get tokenIds of a given collection that have ever been staked by any user"
      },
      "getReward(uint8)": {
        "notice": "Harvest rewards for a certain poolId for msg.sender"
      },
      "getRewards()": {
        "notice": "Harvest all rewards for msg.sender"
      },
      "nftMultiplier(uint256)": {
        "notice": "Multiplier when a user stakes Nfts"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "For receiving ERC721 tokens"
      },
      "poolInfo(uint256)": {
        "notice": "Information of each respective pool (Global, Common, Uncommon, Rare/Epic)"
      },
      "retrieveGold()": {
        "notice": "Used to retrieve any gold on the contract"
      },
      "retrieveStardust()": {
        "notice": "Used to retrieve any stardust on the contract"
      },
      "seasonEndTime()": {
        "notice": "Unix timestamp of season end time"
      },
      "seasonStartTime()": {
        "notice": "Unix timestamp of season start time"
      },
      "seasonStarted()": {
        "notice": "Whether the season has started"
      },
      "setAddressRegistry(address)": {
        "notice": "Set the Address Registry"
      },
      "setSeasonEndTime(uint256)": {
        "notice": "Setter for season end time"
      },
      "setWhitelistedCollections(address[],bool)": {
        "notice": "Set the whitelisted status of a collection"
      },
      "stakeNfts(uint8,address[],uint256[])": {
        "notice": "Stakes given nfts and uses them to boost the given pool."
      },
      "stakeSpaceships(uint256[])": {
        "notice": "Stake spaceships to earn stardust + gold"
      },
      "stakedSpaceships(address,uint256)": {
        "notice": "Mapping of (user) => (tokenId) => (bool) if token is staked"
      },
      "startSeason()": {
        "notice": "Starts the season"
      },
      "totalRewardPerSecond()": {
        "notice": "Total reward per second"
      },
      "unstakeNfts(uint8,address[],uint256[])": {
        "notice": "Unstakes nfts without unboosting the pool"
      },
      "unstakeSpaceships(uint256[])": {
        "notice": "Unstake spaceships"
      },
      "userInfo(address)": {
        "notice": "Information of each user that stakes spaceships"
      },
      "viewBoostingNfts(uint8,address,address)": {
        "notice": "View number of NFTs staked by user"
      },
      "viewBoostingNftsPoolCount(address,uint8)": {
        "notice": "View boosting nfts count in a specific pool"
      },
      "viewCurrentlyStakedSpaceships(address,uint8)": {
        "notice": "View currently staked spaceship ids"
      },
      "viewPoolInfo(uint256)": {
        "notice": "View pool info"
      },
      "viewRewards(address,uint8)": {
        "notice": "View rewards for a certain poolId and user"
      },
      "viewSpaceshipsStaked(address)": {
        "notice": "View number of spaceships staked by user"
      },
      "viewTotalSpeeds(address)": {
        "notice": "View the total speeds of a user across all pools"
      },
      "whitelistedCollections(address)": {
        "notice": "Mapping of address to boolean whitelisted status"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2172,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AtlantisAddressRegistry)2134"
      },
      {
        "astId": 2175,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "seasonEndTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2178,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "totalRewardPerSecond",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2184,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "seasonStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2196,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "seasonStarted",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2202,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "poolInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)5411_storage)"
      },
      {
        "astId": 2208,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)5435_storage)"
      },
      {
        "astId": 2213,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "cachedSpeeds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2218,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "nftMultiplier",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 2225,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "stakedSpaceships",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2235,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "stakedNFTs",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_address,t_struct(UintSet)1542_storage)))"
      },
      {
        "astId": 2240,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "whitelistedCollections",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2248,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "currentlyStakedSpaceshipIds",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_struct(UintSet)1542_storage))"
      },
      {
        "astId": 2254,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "currentlyStakedIds",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(UintSet)1542_storage)"
      },
      {
        "astId": 2260,
        "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
        "label": "previouslyStakedIds",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(UintSet)1542_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AtlantisAddressRegistry)2134": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_mapping(t_address,t_struct(UintSet)1542_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => mapping(address => struct EnumerableSet.UintSet)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_mapping(t_address,t_struct(UintSet)1542_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_struct(UintSet)1542_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_struct(UintSet)1542_storage)"
      },
      "t_mapping(t_address,t_struct(UintSet)1542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1542_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)5435_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAtlantisRacing.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5435_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)5411_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAtlantisRacing.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)5411_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint8,t_mapping(t_address,t_struct(UintSet)1542_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(address => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UintSet)1542_storage)"
      },
      "t_mapping(t_uint8,t_struct(UintSet)1542_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1542_storage"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(PoolInfo)5411_storage": {
        "encoding": "inplace",
        "label": "struct IAtlantisRacing.PoolInfo",
        "members": [
          {
            "astId": 5396,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5398,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "rewardPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5400,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "stardustWeightage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5402,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "goldWeightage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5404,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5406,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "accStardustPerPoint",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5408,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "totalPoints",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5410,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "totalCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)1070_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1065,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1069,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1542_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1541,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1070_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)5435_storage": {
        "encoding": "inplace",
        "label": "struct IAtlantisRacing.UserInfo",
        "members": [
          {
            "astId": 5415,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "totalSpeeds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 5419,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "rewardDebts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)4_storage"
          },
          {
            "astId": 5421,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "spaceshipsStaked",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5428,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "boostingNfts",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint8,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
          },
          {
            "astId": 5430,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "boostingNftsCount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 5434,
            "contract": "contracts/AtlantisRacing.sol:AtlantisRacing",
            "label": "boostingNftsPoolCount",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint8,t_uint8)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}