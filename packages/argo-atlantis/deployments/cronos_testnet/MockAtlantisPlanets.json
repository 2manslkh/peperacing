{
  "address": "0x5ac34D9C21FEDdFc809ca5693A598c67E34a615c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whitelistSignerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "__baseURI",
          "type": "string"
        },
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctionSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedMaxMintPerWallet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceededMaxLevel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceededMaxSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountRequired",
          "type": "uint256"
        }
      ],
      "name": "InsufficientCRO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "currentStage",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredStage",
          "type": "uint8"
        }
      ],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "currentLevel",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "newLevel",
          "type": "uint8"
        }
      ],
      "name": "InvalidUpgradeLevel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfPlanet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownElement",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownOrbit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "name": "PlanetUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrivateMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PublicMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "SupplyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[12]",
          "name": "_auctionWinners",
          "type": "address[12]"
        }
      ],
      "name": "devEpicMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "faucetMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gemstoneTiers",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum AtlantisLib.Background",
          "name": "background",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.Element",
          "name": "element",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.OrbitName",
          "name": "orbitName",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.Evolution",
          "name": "evo",
          "type": "uint8"
        }
      ],
      "name": "getImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        }
      ],
      "name": "getPlanetDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "enum AtlantisLib.Element",
              "name": "element",
              "type": "uint8"
            },
            {
              "internalType": "enum AtlantisLib.Orbit",
              "name": "orbit",
              "type": "uint8"
            },
            {
              "internalType": "enum AtlantisLib.OrbitName",
              "name": "orbitName",
              "type": "uint8"
            },
            {
              "internalType": "enum AtlantisLib.Background",
              "name": "background",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "onExpedition",
              "type": "bool"
            }
          ],
          "internalType": "struct AtlantisLib.Planet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_levels",
          "type": "uint8"
        }
      ],
      "name": "getUpgradeCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stardustCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xArgoCost",
          "type": "uint256"
        },
        {
          "internalType": "uint16[4]",
          "name": "gemstoneRequirements",
          "type": "uint16[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelUpGemstone",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlanetLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "planets",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.Element",
          "name": "element",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.Orbit",
          "name": "orbit",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.OrbitName",
          "name": "orbitName",
          "type": "uint8"
        },
        {
          "internalType": "enum AtlantisLib.Background",
          "name": "background",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "onExpedition",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "publicMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintMaxPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AtlantisAddressRegistry",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "setAddressRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xArgoBaseCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stardustBaseCost",
          "type": "uint256"
        }
      ],
      "name": "setBaseCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setLevelUpGemstone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum AtlantisLib.Background[]",
          "name": "_backgrounds",
          "type": "uint8[]"
        }
      ],
      "name": "setPlanetBackgrounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum AtlantisLib.Element[]",
          "name": "_gemstoneTypes",
          "type": "uint8[]"
        }
      ],
      "name": "setPlanetElements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum AtlantisLib.OrbitName[]",
          "name": "_planetOrbitNames",
          "type": "uint8[]"
        }
      ],
      "name": "setPlanetOrbitNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum AtlantisLib.Orbit[]",
          "name": "_planetOrbits",
          "type": "uint8[]"
        }
      ],
      "name": "setPlanetOrbits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setPublicMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stardustBaseCostScaling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stardustRarityCostScaling",
          "type": "uint256"
        }
      ],
      "name": "setScaling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newStage",
          "type": "uint8"
        }
      ],
      "name": "setStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newUnrevealedImageURI",
          "type": "string"
        }
      ],
      "name": "setUnrevealedImageURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setVipMaxMintPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vipMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setVipMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistMaxMintPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistMintPrice",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_whitelistPhase",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setWhitelistSignerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stardustBaseCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stardustBaseCostScaling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stardustRarityCostScaling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unrevealedImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_levels",
          "type": "uint8"
        }
      ],
      "name": "upgradePlanet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vipMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipMintMaxPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vipMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nonce",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMintMaxPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistPhase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xArgoBaseCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d1d7b411600a5f87c91799215355a6ebd78a3eb5439a3e74b0069409d47d7f5",
  "receipt": {
    "to": null,
    "from": "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "contractAddress": "0x5ac34D9C21FEDdFc809ca5693A598c67E34a615c",
    "transactionIndex": 4,
    "gasUsed": "5902480",
    "logsBloom": "0x
    "blockHash": "0xd2193ccb8234ccd5c46f8355aca69ace2ce4107136a04c530bb4c0dca8eac413",
    "transactionHash": "0x8d1d7b411600a5f87c91799215355a6ebd78a3eb5439a3e74b0069409d47d7f5",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9109800,
        "transactionHash": "0x8d1d7b411600a5f87c91799215355a6ebd78a3eb5439a3e74b0069409d47d7f5",
        "address": "0x5ac34D9C21FEDdFc809ca5693A598c67E34a615c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd2193ccb8234ccd5c46f8355aca69ace2ce4107136a04c530bb4c0dca8eac413"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9109800,
        "transactionHash": "0x8d1d7b411600a5f87c91799215355a6ebd78a3eb5439a3e74b0069409d47d7f5",
        "address": "0x5ac34D9C21FEDdFc809ca5693A598c67E34a615c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b",
          "0x0000000000000000000000007aeca63e4b51b0ff8a8a82b3231033ca4ca6301b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd2193ccb8234ccd5c46f8355aca69ace2ce4107136a04c530bb4c0dca8eac413"
      }
    ],
    "blockNumber": 9109800,
    "cumulativeGasUsed": "6975944",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7AECa63e4B51b0Ff8A8a82b3231033ca4CA6301b",
    "0x6A952f966c5DcC36A094c8AB141f027fb58F864e",
    "ipfs://bafybeifrdwqiiptmgfkmlbotmm352d5fw5acqpfvyqrnot3ceboevbddgq/",
    "0xf0776a4F32a4F95649D3b1c79eb5FFE6c43e53F3"
  ],
  "numDeployments": 2,
  "solcInputHash": "4770d55940b829a972c45125087e16b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistSignerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__baseURI\",\"type\":\"string\"},{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctionSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxMintPerWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMaxLevel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRequired\",\"type\":\"uint256\"}],\"name\":\"InsufficientCRO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"currentStage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredStage\",\"type\":\"uint8\"}],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"currentLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"InvalidUpgradeLevel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfPlanet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownElement\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownOrbit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"PlanetUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrivateMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PublicMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[12]\",\"name\":\"_auctionWinners\",\"type\":\"address[12]\"}],\"name\":\"devEpicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"faucetMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemstoneTiers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AtlantisLib.Background\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Element\",\"name\":\"element\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.OrbitName\",\"name\":\"orbitName\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Evolution\",\"name\":\"evo\",\"type\":\"uint8\"}],\"name\":\"getImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"getPlanetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Element\",\"name\":\"element\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Orbit\",\"name\":\"orbit\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.OrbitName\",\"name\":\"orbitName\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Background\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"onExpedition\",\"type\":\"bool\"}],\"internalType\":\"struct AtlantisLib.Planet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_levels\",\"type\":\"uint8\"}],\"name\":\"getUpgradeCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stardustCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xArgoCost\",\"type\":\"uint256\"},{\"internalType\":\"uint16[4]\",\"name\":\"gemstoneRequirements\",\"type\":\"uint16[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelUpGemstone\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlanetLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planets\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Element\",\"name\":\"element\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Orbit\",\"name\":\"orbit\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.OrbitName\",\"name\":\"orbitName\",\"type\":\"uint8\"},{\"internalType\":\"enum AtlantisLib.Background\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"onExpedition\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintMaxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AtlantisAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xArgoBaseCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stardustBaseCost\",\"type\":\"uint256\"}],\"name\":\"setBaseCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setLevelUpGemstone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AtlantisLib.Background[]\",\"name\":\"_backgrounds\",\"type\":\"uint8[]\"}],\"name\":\"setPlanetBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AtlantisLib.Element[]\",\"name\":\"_gemstoneTypes\",\"type\":\"uint8[]\"}],\"name\":\"setPlanetElements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AtlantisLib.OrbitName[]\",\"name\":\"_planetOrbitNames\",\"type\":\"uint8[]\"}],\"name\":\"setPlanetOrbitNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AtlantisLib.Orbit[]\",\"name\":\"_planetOrbits\",\"type\":\"uint8[]\"}],\"name\":\"setPlanetOrbits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicMintPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stardustBaseCostScaling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stardustRarityCostScaling\",\"type\":\"uint256\"}],\"name\":\"setScaling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newStage\",\"type\":\"uint8\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newUnrevealedImageURI\",\"type\":\"string\"}],\"name\":\"setUnrevealedImageURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setVipMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vipMintPrice\",\"type\":\"uint256\"}],\"name\":\"setVipMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistMintPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistPhase\",\"type\":\"uint256\"}],\"name\":\"setWhitelistPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setWhitelistSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stardustBaseCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stardustBaseCostScaling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stardustRarityCostScaling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevealedImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_levels\",\"type\":\"uint8\"}],\"name\":\"upgradePlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipMintMaxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintMaxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xArgoBaseCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Max Supply of 6000 planetsFirst 12 planets are EPIC planets\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"availableTokenCount()\":{\"details\":\"Check whether tokens are still available\",\"returns\":{\"_0\":\"the available token count\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPlanetDetails(uint256)\":{\"details\":\"Planet details include: level, element, orbit, onExpedition\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256)\":{\"params\":{\"_mintAmount\":\"Amount that is minted\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAddressRegistry(address)\":{\"params\":{\"_addressRegistry\":\"The address of the Address Registry\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseCosts(uint256,uint256)\":{\"details\":\"Set xArgo And Stardust base costs\",\"params\":{\"_stardustBaseCost\":\"Stardust base cost\",\"_xArgoBaseCost\":\"xArgo base cost\"}},\"setBaseURI(string)\":{\"details\":\"Set Revealed Metadata URI\"},\"setLevelUpGemstone(bytes)\":{\"details\":\"_data is packed as follows:     Cumulative cost for each gemstone tier for each planet type              | Common              | Uncommon            | Rare                | Epic              | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4     Level 1  | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000     ...     Level 50 | 0122 00af 00e1 0113 | 015c 00d2 010e 014a | 0196 00f5 013b 0181 | 01d0 0118 0168 01b8\",\"params\":{\"_data\":\"gemstone cost packed in bytes\"}},\"setPlanetBackgrounds(uint256[],uint8[])\":{\"details\":\"Set planet backgrounds\",\"params\":{\"_backgrounds\":\"Backgrounds of planets\",\"_tokenIds\":\"Token ID of planets\"}},\"setPlanetElements(uint256[],uint8[])\":{\"details\":\"Set planet element\",\"params\":{\"_gemstoneTypes\":\"Element of planets\",\"_tokenIds\":\"Token ID of planets\"}},\"setPlanetOrbitNames(uint256[],uint8[])\":{\"details\":\"Set planet orbit names\",\"params\":{\"_planetOrbitNames\":\"Orbit Names of planets\",\"_tokenIds\":\"Token ID of planets\"}},\"setPlanetOrbits(uint256[],uint8[])\":{\"details\":\"Set planet orbit\",\"params\":{\"_planetOrbits\":\"Orbit of planets\",\"_tokenIds\":\"Token ID of planets\"}},\"setPublicMintPrice(uint256)\":{\"details\":\"Set public mint price\"},\"setScaling(uint256,uint256)\":{\"details\":\"Set stardust scaling costs\",\"params\":{\"_stardustBaseCostScaling\":\"sd base cost scaling\",\"_stardustRarityCostScaling\":\"Stardust rarity cost scaling\"}},\"setStage(uint8)\":{\"details\":\"Set stage of minting\"},\"setUnrevealedImageURI(string)\":{\"details\":\"Set Unrevealed Metadata URI\"},\"setVipMaxMintPerWallet(uint256)\":{\"details\":\"Set vip mint max per wallet\"},\"setVipMintPrice(uint256)\":{\"details\":\"Set vip mint price\"},\"setWhitelistMaxMintPerWallet(uint256)\":{\"details\":\"Set whitelist mint max per wallet\"},\"setWhitelistMintPrice(uint256)\":{\"details\":\"Set whitelist mint price\"},\"setWhitelistPhase(uint256)\":{\"params\":{\"_whitelistPhase\":\"Phase of whitelist\"}},\"setWhitelistSignerAddress(address)\":{\"details\":\"Set signer address for whitelist mint\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"toggleReveal()\":{\"details\":\"Toggle Reveal\"},\"tokenCount()\":{\"details\":\"Get the current token count\",\"returns\":{\"_0\":\"the created token count\"}},\"tokenURI(uint256)\":{\"details\":\"Metadata is stored on-chain\"},\"totalMaxSupply()\":{\"details\":\"Get the max Supply\",\"returns\":{\"_0\":\"the maximum token count\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradePlanet(uint256,uint8)\":{\"details\":\"Upgrade a planet by `_levels` levels\",\"params\":{\"_levels\":\"Number of levels to upgrade planet by\",\"_tokenId\":\"Token ID of planet\"}},\"whitelistMint(uint256,bytes,bytes)\":{\"details\":\"Mint planet (Whitelist only)\",\"params\":{\"_mintAmount\":\"Amount of planets to mint\",\"nonce\":\"Unique Nonce\",\"signature\":\"Signature provided by the signerAddress\"}},\"withdrawERC20(address,uint256)\":{\"details\":\"Withdraw ERC20 Tokens From this contract\",\"params\":{\"_amount\":\"Amount of ERC20 token to withdraw\",\"_tokenAddress\":\"Address of ERC20 token\"}}},\"title\":\"Atlantis Planets Mint Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ExceedMaxMintPerWallet()\":[{\"notice\":\"The user has exceeded allowed mint count\"}],\"ExceededMaxLevel()\":[{\"notice\":\"The planet has exceeded the max level\"}],\"ExceededMaxSupply()\":[{\"notice\":\"The collection has exceeded the max supply\"}],\"InvalidSignature()\":[{\"notice\":\"The signature must be by the correct signer\"}],\"InvalidStage(uint8,uint8)\":[{\"notice\":\"The minting stage must be correct\"}],\"InvalidUpgradeLevel(uint8,uint8)\":[{\"notice\":\"Error thrown when user queries an unknown PlanetId\"}],\"NotOwnerOfPlanet()\":[{\"notice\":\"User is not the owner of planet\"}],\"UnknownElement()\":[{\"notice\":\"Error thrown when user queries an unknown ElementId\"}],\"UnknownOrbit()\":[{\"notice\":\"Error thrown when user queries an unknown OrbitId\"}]},\"kind\":\"user\",\"methods\":{\"exists(uint256)\":{\"notice\":\"Returns if given tokenId exists in AtlantisPlanets\"},\"getImageURI(uint8,uint8,uint8,uint8)\":{\"notice\":\"Get ImageURI\"},\"getPlanetDetails(uint256)\":{\"notice\":\"Get planet details\"},\"getUpgradeCosts(uint256,uint8)\":{\"notice\":\"External function for frontend to retrieve stardust, xArgo, and gemstone costs in 1 multicall\"},\"mint(uint256)\":{\"notice\":\"Public Mint\"},\"setAddressRegistry(address)\":{\"notice\":\"Set the Address Registry\"},\"setLevelUpGemstone(bytes)\":{\"notice\":\"Set level up gemstone costs\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury address\"},\"setWhitelistPhase(uint256)\":{\"notice\":\"Set whitelist phase\"},\"tokenURI(uint256)\":{\"notice\":\"Returns token metadata\"},\"totalSupply()\":{\"notice\":\"Returns total supply of AtlantisPlanets\"},\"withdrawFund()\":{\"notice\":\"Withdraw all CRO from this account to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockAtlantisPlanets.sol\":\"MockAtlantisPlanets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AtlantisAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./common/AddressRegistry.sol\\\";\\r\\n\\r\\ncontract AtlantisAddressRegistry is Ownable, AddressRegistry {\\r\\n    bytes32 private constant ARGONAUTS = \\\"ARGONAUTS\\\";\\r\\n    bytes32 private constant ARGO = \\\"ARGO\\\";\\r\\n    bytes32 private constant XARGO = \\\"XARGO\\\";\\r\\n    bytes32 private constant GOLD = \\\"GOLD\\\";\\r\\n    bytes32 private constant STARDUST = \\\"STARDUST\\\";\\r\\n    bytes32 private constant ATLANTIS = \\\"ATLANTIS\\\";\\r\\n    bytes32 private constant ATLANTIS_PLANETS = \\\"ATLANTIS_PLANETS\\\";\\r\\n    bytes32 private constant STAKING_WITH_LOCK = \\\"STAKING_WITH_LOCK\\\";\\r\\n    bytes32 private constant ATLANTIS_GEMSTONES = \\\"GEMSTONES\\\";\\r\\n    bytes32 private constant ATLANTIS_EQUIPMENTS = \\\"EQUIPMENTS\\\";\\r\\n    bytes32 private constant ATLANTIS_SPACESHIPS = \\\"SPACESHIPS\\\";\\r\\n    bytes32 private constant ATLANTIS_RACING = \\\"RACING\\\";\\r\\n    bytes32 private constant ATLANTIS_MARKETPLACE = \\\"MARKETPLACE\\\";\\r\\n    bytes32 private constant ATLANTIS_AUCTION = \\\"AUCTION\\\";\\r\\n    bytes32 private constant STARDUST_PLEDGING = \\\"PLEDGING\\\";\\r\\n    bytes32 private constant GOLD_STAKING = \\\"GOLD_STAKING\\\";\\r\\n    mapping(address => bool) private _addresses;\\r\\n\\r\\n    function setArgonauts(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGONAUTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setArgo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setXargo(address contractAddress) external onlyOwner {\\r\\n        _setAddress(XARGO, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGold(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStardust(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantis(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAtlantisPlanets(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_PLANETS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setStakingWithLock(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STAKING_WITH_LOCK, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGemstones(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_GEMSTONES, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setEquipments(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_EQUIPMENTS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setSpaceships(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_SPACESHIPS, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setRacing(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_RACING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketplace(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_MARKETPLACE, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAuction(address contractAddress) external onlyOwner {\\r\\n        _setAddress(ATLANTIS_AUCTION, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setPledging(address contractAddress) external onlyOwner {\\r\\n        _setAddress(STARDUST_PLEDGING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function setGoldStaking(address contractAddress) external onlyOwner {\\r\\n        _setAddress(GOLD_STAKING, contractAddress);\\r\\n    }\\r\\n\\r\\n    function getArgonauts() external view returns (address) {\\r\\n        return getAddress(ARGONAUTS);\\r\\n    }\\r\\n\\r\\n    function getArgo() external view returns (address) {\\r\\n        return getAddress(ARGO);\\r\\n    }\\r\\n\\r\\n    function getXargo() external view returns (address) {\\r\\n        return getAddress(XARGO);\\r\\n    }\\r\\n\\r\\n    function getGold() external view returns (address) {\\r\\n        return getAddress(GOLD);\\r\\n    }\\r\\n\\r\\n    function getStardust() external view returns (address) {\\r\\n        return getAddress(STARDUST);\\r\\n    }\\r\\n\\r\\n    function getAtlantis() public view returns (address) {\\r\\n        return getAddress(ATLANTIS);\\r\\n    }\\r\\n\\r\\n    function getAtlantisPlanets() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_PLANETS);\\r\\n    }\\r\\n\\r\\n    function getStakingWithLock() external view returns (address) {\\r\\n        return getAddress(STAKING_WITH_LOCK);\\r\\n    }\\r\\n\\r\\n    function getGemstones() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_GEMSTONES);\\r\\n    }\\r\\n\\r\\n    function getEquipments() public view returns (address) {\\r\\n        return getAddress(ATLANTIS_EQUIPMENTS);\\r\\n    }\\r\\n\\r\\n    function getSpaceships() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_SPACESHIPS);\\r\\n    }\\r\\n\\r\\n    function getRacing() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_RACING);\\r\\n    }\\r\\n\\r\\n    function getMarketplace() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_MARKETPLACE);\\r\\n    }\\r\\n\\r\\n    function getAuction() external view returns (address) {\\r\\n        return getAddress(ATLANTIS_AUCTION);\\r\\n    }\\r\\n\\r\\n    function getPledging() external view returns (address) {\\r\\n        return getAddress(STARDUST_PLEDGING);\\r\\n    }\\r\\n\\r\\n    function getGoldStaking() external view returns (address) {\\r\\n        return getAddress(GOLD_STAKING);\\r\\n    }\\r\\n\\r\\n    function isControllerContract(address _contractAddress) external view returns (bool) {\\r\\n        if (\\r\\n            _contractAddress == getAtlantis() ||\\r\\n            _contractAddress == getGemstones() ||\\r\\n            _contractAddress == getAtlantisPlanets() ||\\r\\n            _contractAddress == getEquipments()\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094953bc9e40a983e9c7b918a01c7dfc735a30f5b4ef41e3fcbc4f65a7915b32\",\"license\":\"MIT\"},\"contracts/MockAtlantisPlanets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interface/IAtlantisPlanets.sol\\\";\\r\\nimport \\\"./interface/IAtlantisGemstones.sol\\\";\\r\\nimport \\\"./interface/IStakingWithLock.sol\\\";\\r\\nimport \\\"./common/WithLimitedSupply.sol\\\";\\r\\nimport \\\"./common/RandomlyAssigned.sol\\\";\\r\\nimport \\\"./common/Base64.sol\\\";\\r\\nimport \\\"./AtlantisAddressRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @title Atlantis Planets Mint Contract\\r\\n/// @dev Max Supply of 6000 planets\\r\\n/// @dev First 12 planets are EPIC planets\\r\\n// Stages\\r\\n// 0: Before all minting commence\\r\\n// 1: WhiteList Sale\\r\\n// 2: Public sale\\r\\n// 3: Post-Mint (Admin Phase)\\r\\n// 4: Game Phase\\r\\n\\r\\ncontract MockAtlantisPlanets is ERC721, Ownable, IAtlantisPlanets, RandomlyAssigned {\\r\\n    using Strings for uint256;\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    AtlantisAddressRegistry public addressRegistry;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    uint8 public stage;\\r\\n    uint256 currentSupply;\\r\\n    uint256 public whitelistPhase;\\r\\n\\r\\n    // VIP Whitelist Mint Settings 750 cro\\r\\n    uint256 public vipMintMaxPerWallet = 10; // VIP Sale Address Mint Cap\\r\\n    uint256 public vipMintPrice = 0 ether; // VIP Sale Mint Price\\r\\n    mapping(address => uint256) public vipMintCount;\\r\\n\\r\\n    // Whitelist Mint Settings 850 cro\\r\\n    uint256 public whitelistMintMaxPerWallet = 20; // Private Sale Address Mint Cap\\r\\n    uint256 public whitelistMintPrice = 1 ether; // Private Sale Mint Price\\r\\n    mapping(address => uint256) public whitelistMintCount;\\r\\n    address private whitelistSignerAddress;\\r\\n\\r\\n    // Public Sale Mint Settings 950 cro\\r\\n    uint256 public publicMintPrice = 0 ether;\\r\\n    uint256 public publicMintMaxPerWallet = type(uint256).max; // Unlimited mint\\r\\n    mapping(address => uint256) public publicMintCount;\\r\\n\\r\\n    // Treasury\\r\\n    address public treasury;\\r\\n\\r\\n    // Levelling\\r\\n    bytes public levelUpGemstone;\\r\\n    // xARGO base cost\\r\\n    uint256 public xArgoBaseCost = 200 ether;\\r\\n    // stardust base cost\\r\\n    uint256 public stardustBaseCost = 200 ether;\\r\\n    // stardust base cost scaling\\r\\n    uint256 public stardustBaseCostScaling = 25;\\r\\n    // stardust rarity cost scaling\\r\\n    uint256 public stardustRarityCostScaling = 20;\\r\\n    // Mapping of planet token id to planet struct\\r\\n    mapping(uint256 => AtlantisLib.Planet) public planets;\\r\\n\\r\\n    // Variable to track Gemstone tiers\\r\\n    uint16 public constant gemstoneTiers = 4;\\r\\n    // Variable to track max planet level\\r\\n    uint16 public constant maxPlanetLevel = 50;\\r\\n\\r\\n    bool public revealed = false;\\r\\n    string public unrevealedImageURI = \\\"ipfs://bafybeicabmv4ccbblnnpfq6q5rg5sr2qqq4mc7y7y3tqyfztiwzrkff5vi\\\";\\r\\n\\r\\n    // gemstone token ids is in the following sequence:\\r\\n    // 1 - Fire 1\\r\\n    // 2 - Lightning 1\\r\\n    // 3 - Steel 1\\r\\n    // 4 - Fire 2\\r\\n    // 5 - Lightning 2\\r\\n    // 6 - Steel 2\\r\\n    // 7 - Fire 3\\r\\n    // 8 - Lightning 3\\r\\n    // 9 - Steel 3\\r\\n    // 10 - Fire 4\\r\\n    // 11 - Lightning 4\\r\\n    // 12 - Steel 4\\r\\n\\r\\n    // Events\\r\\n    event PlanetUpgraded(uint256 indexed tokenId, uint256 indexed level);\\r\\n    event PrivateMint(address indexed to, uint256 amount);\\r\\n    event PublicMint(address indexed to, uint256 amount);\\r\\n\\r\\n    // -------------------- MODIFIERS ----------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Prevent Smart Contracts from calling the functions with this modifier\\r\\n     */\\r\\n    modifier onlyEOA() {\\r\\n        require(msg.sender == tx.origin, \\\"Planets: must use EOA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address _whitelistSignerAddress,\\r\\n        string memory __baseURI,\\r\\n        AtlantisAddressRegistry _addressRegistry\\r\\n    ) ERC721(\\\"Atlantis Planets\\\", \\\"PLANETS\\\") RandomlyAssigned(6000, 13) {\\r\\n        setTreasury(_owner);\\r\\n        setWhitelistSignerAddress(_whitelistSignerAddress);\\r\\n        setBaseURI(__baseURI);\\r\\n        transferOwnership(_owner);\\r\\n        currentSupply = 0;\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set Revealed Metadata URI\\r\\n     */\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set Unrevealed Metadata URI\\r\\n     */\\r\\n    function setUnrevealedImageURI(string memory _newUnrevealedImageURI) public onlyOwner {\\r\\n        unrevealedImageURI = _newUnrevealedImageURI;\\r\\n    }\\r\\n\\r\\n    // -------------------- ATLANTIS PUBLIC FUNCTIONS ----------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Get gemstone upgrade requirements for upgrading a planet\\r\\n     * @param _tokenId The token id of the planet\\r\\n     * @param _levels The number of levels to upgrade\\r\\n     * @return gemstoneRequirements The gemstone requirements for upgrading the planet\\r\\n     */\\r\\n    function getUpgradeRequirements(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _levels\\r\\n    ) internal view returns (uint16[4] memory gemstoneRequirements) {\\r\\n        // Get planet struct\\r\\n        AtlantisLib.Planet memory planet = planets[_tokenId];\\r\\n        uint8 planetLevel = planet.level;\\r\\n        uint8 newLevel = planetLevel + _levels;\\r\\n        uint8 orbit = uint8(planet.orbit);\\r\\n\\r\\n        if (planetLevel + _levels > maxPlanetLevel) revert ExceededMaxLevel();\\r\\n\\r\\n        // Cumulative requirement at target level - Cumulative requirement at current level = requirement for upgrade\\r\\n        gemstoneRequirements[0] =\\r\\n            toUint16(levelUpGemstone, orbit, newLevel, 0) -\\r\\n            toUint16(levelUpGemstone, orbit, planetLevel, 0);\\r\\n\\r\\n        gemstoneRequirements[1] =\\r\\n            toUint16(levelUpGemstone, orbit, newLevel, 1) -\\r\\n            toUint16(levelUpGemstone, orbit, planetLevel, 1);\\r\\n\\r\\n        gemstoneRequirements[2] =\\r\\n            toUint16(levelUpGemstone, orbit, newLevel, 2) -\\r\\n            toUint16(levelUpGemstone, orbit, planetLevel, 2);\\r\\n\\r\\n        gemstoneRequirements[3] =\\r\\n            toUint16(levelUpGemstone, orbit, newLevel, 3) -\\r\\n            toUint16(levelUpGemstone, orbit, planetLevel, 3);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get uint16 value from a byte array\\r\\n     * @param _bytes The byte array\\r\\n     * @param orbit Orbit of the planet\\r\\n     * @param level Level of the planet\\r\\n     * @param tier Tier of the gemstone\\r\\n     * @dev This function was modified to serve retriving the gemstone upgrade requirements\\r\\n     */\\r\\n    function toUint16(\\r\\n        bytes memory _bytes,\\r\\n        uint256 orbit,\\r\\n        uint256 level,\\r\\n        uint256 tier\\r\\n    ) internal pure returns (uint16 tempUint) {\\r\\n        uint256 _start = orbit * 8 + (level - 1) * 32 + tier * 2;\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get evolution stage of planet\\r\\n     * @param level Level of a planet\\r\\n     */\\r\\n    function _getPlanetEvolution(\\r\\n        uint16 level\\r\\n    ) internal pure returns (AtlantisLib.Evolution evo, string memory evoString) {\\r\\n        if (level < 20) {\\r\\n            evo = AtlantisLib.Evolution.ALPHA;\\r\\n            evoString = \\\"Alpha\\\";\\r\\n        } else if (level >= 20 && level < 30) {\\r\\n            evo = AtlantisLib.Evolution.BETA;\\r\\n            evoString = \\\"Beta\\\";\\r\\n        } else if (level >= 30 && level < 40) {\\r\\n            evo = AtlantisLib.Evolution.GAMMA;\\r\\n            evoString = \\\"Gamma\\\";\\r\\n        } else if (level >= 40 && level < 50) {\\r\\n            evo = AtlantisLib.Evolution.DELTA;\\r\\n            evoString = \\\"Delta\\\";\\r\\n        } else if (level == 50) {\\r\\n            evo = AtlantisLib.Evolution.EPSILON;\\r\\n            evoString = \\\"Epsilon\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get planet details\\r\\n     * @dev Planet details include: level, element, orbit, onExpedition\\r\\n     */\\r\\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory) {\\r\\n        AtlantisLib.Planet memory planet = planets[_planetId];\\r\\n        return planet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return xArgo cost for upgrading a planet\\r\\n     */\\r\\n    function getxArgoCost(uint8 currentLevel, uint8 newLevel) internal view returns (uint256 xArgoCost) {\\r\\n        if (currentLevel == 0 || currentLevel >= newLevel) revert InvalidUpgradeLevel(currentLevel, newLevel);\\r\\n\\r\\n        // Loop through all levels and add up xArgo cost\\r\\n        for (uint256 i = currentLevel; i < newLevel; i++) {\\r\\n            xArgoCost += xArgoBaseCost * i;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return stardust cost for upgrading a planet\\r\\n     * @param currentLevel Current Level of Planet\\r\\n     * @param newLevel New planet level\\r\\n     * @param orbit Orbit of planet\\r\\n     */\\r\\n    function getStardustCost(\\r\\n        uint8 currentLevel,\\r\\n        uint8 newLevel,\\r\\n        uint8 orbit\\r\\n    ) internal view returns (uint256 stardustCost) {\\r\\n        if (currentLevel == 0 || currentLevel >= newLevel) revert InvalidUpgradeLevel(currentLevel, newLevel);\\r\\n\\r\\n        // Loop through all levels and add up stardust cost\\r\\n        for (uint256 i = currentLevel; i < newLevel; i++) {\\r\\n            stardustCost +=\\r\\n                (stardustBaseCost *\\r\\n                    (((i - 1) * stardustBaseCostScaling + 100) * ((orbit) * stardustRarityCostScaling + 100))) /\\r\\n                10000;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * External function for frontend to retrieve stardust, xArgo, and gemstone costs in 1 multicall\\r\\n     */\\r\\n    function getUpgradeCosts(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _levels\\r\\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory gemstoneRequirements) {\\r\\n        // Get planet struct\\r\\n        AtlantisLib.Planet memory planet = planets[_tokenId];\\r\\n        uint8 planetLevel = planet.level;\\r\\n        uint8 newLevel = planetLevel + _levels;\\r\\n        uint8 orbit = uint8(planet.orbit);\\r\\n\\r\\n        require(planetLevel + _levels <= maxPlanetLevel, \\\"Planets: Planet cannot be upgraded to this level!\\\");\\r\\n\\r\\n        // Get stardust cost\\r\\n        stardustCost = getStardustCost(planetLevel, newLevel, orbit);\\r\\n\\r\\n        // Get xArgo cost\\r\\n        xArgoCost = getxArgoCost(planetLevel, newLevel);\\r\\n\\r\\n        // Get gemstone requirements\\r\\n        gemstoneRequirements = getUpgradeRequirements(_tokenId, _levels);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns total supply of AtlantisPlanets\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return currentSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade a planet by `_levels` levels\\r\\n     * @param _tokenId Token ID of planet\\r\\n     * @param _levels Number of levels to upgrade planet by\\r\\n     */\\r\\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external {\\r\\n        IERC20 xARGO = IERC20(addressRegistry.getXargo());\\r\\n        IAtlantisGemstones atlantisGemstones = IAtlantisGemstones(addressRegistry.getGemstones());\\r\\n        IStakingWithLock stakingWithLock = IStakingWithLock(addressRegistry.getStakingWithLock());\\r\\n\\r\\n        // Check if upgrader is owner of planet\\r\\n        if (ownerOf(_tokenId) != msg.sender) revert NotOwnerOfPlanet();\\r\\n        // Check if stage 4\\r\\n        if (stage != 4) revert InvalidStage(stage, 4);\\r\\n\\r\\n        AtlantisLib.Planet storage planet = planets[_tokenId];\\r\\n\\r\\n        uint8 orbit = uint8(planet.orbit);\\r\\n\\r\\n        if (planet.level + _levels > maxPlanetLevel) revert ExceededMaxLevel();\\r\\n\\r\\n        // Get xARGO requirements\\r\\n        uint256 xArgoCost = getxArgoCost(planet.level, planet.level + _levels);\\r\\n        // Get Stardust requirements\\r\\n        // Base cost scaling for stardust 0.25 = 25, need math properly\\r\\n        uint256 stardustCost = getStardustCost(planet.level, planet.level + _levels, orbit);\\r\\n\\r\\n        // Get gemstone requirements\\r\\n        uint16[4] memory gemstoneRequirements = getUpgradeRequirements(_tokenId, _levels);\\r\\n\\r\\n        uint16 planetTypeTierStep = 0;\\r\\n        uint16 step = 1;\\r\\n        // Increase planet level\\r\\n        planet.level += _levels;\\r\\n        while (step <= gemstoneTiers) {\\r\\n            uint256 toBurn = gemstoneRequirements[step - 1];\\r\\n            // Burn gemstones\\r\\n            if (toBurn > 0) {\\r\\n                atlantisGemstones.burn(msg.sender, uint256(uint256(planet.element) + 1 + planetTypeTierStep), toBurn);\\r\\n            }\\r\\n            step++;\\r\\n            planetTypeTierStep += 3;\\r\\n        }\\r\\n        // Transfer xARGO and Stardust to this contract\\r\\n        xARGO.transferFrom(msg.sender, address(this), xArgoCost);\\r\\n        if (stardustCost > 0) {\\r\\n            stakingWithLock.unstakeAndBurn(stardustCost);\\r\\n        }\\r\\n\\r\\n        emit PlanetUpgraded(_tokenId, planet.level);\\r\\n    }\\r\\n\\r\\n    // -------------------- MINT FUNCTIONS --------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Mint planet (Whitelist only)\\r\\n     * @param _mintAmount Amount of planets to mint\\r\\n     * @param nonce Unique Nonce\\r\\n     * @param signature Signature provided by the signerAddress\\r\\n     */\\r\\n    function whitelistMint(\\r\\n        uint256 _mintAmount,\\r\\n        bytes memory nonce,\\r\\n        bytes memory signature\\r\\n    ) external payable onlyEOA ensureAvailabilityFor(_mintAmount) {\\r\\n        // Check if user is whitelisted\\r\\n        if (!whitelistSigned(msg.sender, nonce, signature, whitelistPhase)) revert InvalidSignature();\\r\\n\\r\\n        // Check if whitelist sale is open\\r\\n        if (stage != 1) revert InvalidStage(stage, 1);\\r\\n        if (whitelistPhase == 1) {\\r\\n            // Check if enough ETH is sent\\r\\n            if (msg.value != _mintAmount * vipMintPrice) revert InsufficientCRO(msg.value, _mintAmount * vipMintPrice);\\r\\n\\r\\n            // Check if mints does not exceed max wallet allowance for public sale\\r\\n            if (vipMintCount[msg.sender] + _mintAmount > vipMintMaxPerWallet) revert ExceedMaxMintPerWallet();\\r\\n\\r\\n            vipMintCount[msg.sender] += _mintAmount;\\r\\n        }\\r\\n        if (whitelistPhase == 2) {\\r\\n            // Check if enough ETH is sent\\r\\n            if (msg.value != _mintAmount * whitelistMintPrice)\\r\\n                revert InsufficientCRO(msg.value, _mintAmount * whitelistMintPrice);\\r\\n\\r\\n            // Check if mints does not exceed max wallet allowance for public sale\\r\\n            if (whitelistMintCount[msg.sender] + _mintAmount > whitelistMintMaxPerWallet)\\r\\n                revert ExceedMaxMintPerWallet();\\r\\n\\r\\n            whitelistMintCount[msg.sender] += _mintAmount;\\r\\n        }\\r\\n        currentSupply += _mintAmount;\\r\\n\\r\\n        for (uint256 i; i < _mintAmount; i++) {\\r\\n            _mintPlanet();\\r\\n        }\\r\\n        emit PrivateMint(msg.sender, _mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Public Mint\\r\\n     * @param _mintAmount Amount that is minted\\r\\n     */\\r\\n    function mint(uint256 _mintAmount) external payable onlyEOA ensureAvailabilityFor(_mintAmount) {\\r\\n        // Check if public sale is open\\r\\n        if (stage != 2) revert InvalidStage(stage, 2);\\r\\n        publicMintCount[msg.sender] += _mintAmount;\\r\\n        currentSupply += _mintAmount;\\r\\n        // Check if enough ETH is sent\\r\\n        if (msg.value != _mintAmount * publicMintPrice)\\r\\n            revert InsufficientCRO(msg.value, _mintAmount * publicMintPrice);\\r\\n        // Check if mints does not exceed total max supply\\r\\n\\r\\n        for (uint256 i; i < _mintAmount; i++) {\\r\\n            _mintPlanet();\\r\\n        }\\r\\n        emit PublicMint(msg.sender, _mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint planet\\r\\n     * @dev Set initial planet level to 1 and random mint to msg.sender\\r\\n     */\\r\\n    function _mintPlanet() internal {\\r\\n        // Get next token Id\\r\\n        uint256 _tokenId = nextToken();\\r\\n        // Initialize planet\\r\\n        planets[_tokenId].level = 1;\\r\\n        // Mint planet\\r\\n        _safeMint(msg.sender, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set whitelist phase\\r\\n     * @param _whitelistPhase Phase of whitelist\\r\\n     */\\r\\n    function setWhitelistPhase(uint256 _whitelistPhase) external onlyOwner {\\r\\n        whitelistPhase = _whitelistPhase;\\r\\n    }\\r\\n\\r\\n    // -------------------- ATLANTIS ADMIN FUNCTIONS ----------------------\\r\\n    /**\\r\\n     * @dev Set planet backgrounds\\r\\n     * @param _tokenIds Token ID of planets\\r\\n     * @param _backgrounds Backgrounds of planets\\r\\n     */\\r\\n    function setPlanetBackgrounds(\\r\\n        uint256[] calldata _tokenIds,\\r\\n        AtlantisLib.Background[] calldata _backgrounds\\r\\n    ) external onlyOwner {\\r\\n        if (stage != 3) revert InvalidStage(stage, 3);\\r\\n        // Loop through planet types and set planet type\\r\\n        for (uint256 i; i < _backgrounds.length; i++) {\\r\\n            planets[_tokenIds[i]].background = _backgrounds[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set planet orbit names\\r\\n     * @param _tokenIds Token ID of planets\\r\\n     * @param _planetOrbitNames Orbit Names of planets\\r\\n     */\\r\\n\\r\\n    function setPlanetOrbitNames(\\r\\n        uint256[] calldata _tokenIds,\\r\\n        AtlantisLib.OrbitName[] calldata _planetOrbitNames\\r\\n    ) external onlyOwner {\\r\\n        if (stage != 3) revert InvalidStage(stage, 3);\\r\\n        // Loop through planet types and set planet type\\r\\n        for (uint256 i; i < _planetOrbitNames.length; i++) {\\r\\n            planets[_tokenIds[i]].orbitName = _planetOrbitNames[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set planet orbit\\r\\n     * @param _tokenIds Token ID of planets\\r\\n     * @param _planetOrbits Orbit of planets\\r\\n     */\\r\\n    function setPlanetOrbits(\\r\\n        uint256[] calldata _tokenIds,\\r\\n        AtlantisLib.Orbit[] calldata _planetOrbits\\r\\n    ) external onlyOwner {\\r\\n        if (stage != 3) revert InvalidStage(stage, 3);\\r\\n        // Loop through planet types and set planet type\\r\\n        for (uint256 i; i < _planetOrbits.length; i++) {\\r\\n            planets[_tokenIds[i]].orbit = _planetOrbits[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set planet element\\r\\n     * @param _tokenIds Token ID of planets\\r\\n     * @param _gemstoneTypes Element of planets\\r\\n     */\\r\\n    function setPlanetElements(\\r\\n        uint256[] calldata _tokenIds,\\r\\n        AtlantisLib.Element[] calldata _gemstoneTypes\\r\\n    ) external onlyOwner {\\r\\n        // Require stage 3\\r\\n        if (stage != 3) revert InvalidStage(stage, 3);\\r\\n        // Set planet type\\r\\n        for (uint256 i; i < _tokenIds.length; i++) {\\r\\n            planets[_tokenIds[i]].element = _gemstoneTypes[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set level up gemstone costs\\r\\n     * @param _data gemstone cost packed in bytes\\r\\n     * @dev _data is packed as follows:\\r\\n     *     Cumulative cost for each gemstone tier for each planet type\\r\\n     *              | Common              | Uncommon            | Rare                | Epic\\r\\n     *              | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4\\r\\n     *     Level 1  | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000\\r\\n     *     ...\\r\\n     *     Level 50 | 0122 00af 00e1 0113 | 015c 00d2 010e 014a | 0196 00f5 013b 0181 | 01d0 0118 0168 01b8\\r\\n     */\\r\\n    function setLevelUpGemstone(bytes calldata _data) external onlyOwner {\\r\\n        // Require stage 3\\r\\n        if (stage != 3) revert InvalidStage(stage, 3);\\r\\n        levelUpGemstone = _data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw ERC20 Tokens From this contract\\r\\n     * @param _tokenAddress Address of ERC20 token\\r\\n     * @param _amount Amount of ERC20 token to withdraw\\r\\n     */\\r\\n    function withdrawERC20(IERC20 _tokenAddress, uint256 _amount) external onlyOwner {\\r\\n        _tokenAddress.transfer(treasury, _amount);\\r\\n    }\\r\\n\\r\\n    // Setters for base costs\\r\\n    /**\\r\\n     * @dev Set xArgo And Stardust base costs\\r\\n     * @param _xArgoBaseCost xArgo base cost\\r\\n     * @param _stardustBaseCost Stardust base cost\\r\\n     */\\r\\n    function setBaseCosts(uint256 _xArgoBaseCost, uint256 _stardustBaseCost) external onlyOwner {\\r\\n        xArgoBaseCost = _xArgoBaseCost;\\r\\n        stardustBaseCost = _stardustBaseCost;\\r\\n    }\\r\\n\\r\\n    // Setters for scaling\\r\\n    /**\\r\\n     * @dev Set stardust scaling costs\\r\\n     * @param _stardustBaseCostScaling sd base cost scaling\\r\\n     * @param _stardustRarityCostScaling Stardust rarity cost scaling\\r\\n     */\\r\\n    function setScaling(uint256 _stardustBaseCostScaling, uint256 _stardustRarityCostScaling) external onlyOwner {\\r\\n        stardustBaseCostScaling = _stardustBaseCostScaling;\\r\\n        stardustRarityCostScaling = _stardustRarityCostScaling;\\r\\n    }\\r\\n\\r\\n    // -------------------- WHITELIST FUNCTION ----------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if the the signature is signed by a valid signer for whitelist\\r\\n     * @param sender Address of minter\\r\\n     * @param nonce Random bytes32 nonce\\r\\n     * @param signature Signature generated off-chain\\r\\n     */\\r\\n    function whitelistSigned(\\r\\n        address sender,\\r\\n        bytes memory nonce,\\r\\n        bytes memory signature,\\r\\n        uint256 _whitelistPhase\\r\\n    ) private view returns (bool) {\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(sender, nonce, _whitelistPhase));\\r\\n        return whitelistSignerAddress == ECDSA.toEthSignedMessageHash(_hash).recover(signature);\\r\\n    }\\r\\n\\r\\n    // ------------------------- ADMIN FUNCTIONS ----------------------------\\r\\n\\r\\n    /**\\r\\n     * @dev Set stage of minting\\r\\n     */\\r\\n    function setStage(uint8 _newStage) public onlyOwner {\\r\\n        stage = _newStage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Toggle Reveal\\r\\n     */\\r\\n    function toggleReveal() public onlyOwner {\\r\\n        revealed = !revealed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set signer address for whitelist mint\\r\\n     */\\r\\n    function setWhitelistSignerAddress(address signer) public onlyOwner {\\r\\n        whitelistSignerAddress = signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set vip mint max per wallet\\r\\n     */\\r\\n    function setVipMaxMintPerWallet(uint256 amount) public onlyOwner {\\r\\n        vipMintMaxPerWallet = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set vip mint price\\r\\n     */\\r\\n    function setVipMintPrice(uint256 _vipMintPrice) public onlyOwner {\\r\\n        vipMintPrice = _vipMintPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set whitelist mint max per wallet\\r\\n     */\\r\\n    function setWhitelistMaxMintPerWallet(uint256 amount) public onlyOwner {\\r\\n        whitelistMintMaxPerWallet = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set public mint price\\r\\n     */\\r\\n    function setPublicMintPrice(uint256 _publicMintPrice) public onlyOwner {\\r\\n        publicMintPrice = _publicMintPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set whitelist mint price\\r\\n     */\\r\\n    function setWhitelistMintPrice(uint256 _whitelistMintPrice) public onlyOwner {\\r\\n        whitelistMintPrice = _whitelistMintPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw all CRO from this account to the owner\\r\\n     */\\r\\n    function withdrawFund() external onlyOwner {\\r\\n        (bool success, ) = payable(treasury).call{ value: address(this).balance }(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the treasury address\\r\\n     */\\r\\n    function setTreasury(address _treasury) public onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns if given tokenId exists in AtlantisPlanets\\r\\n     */\\r\\n    function exists(uint256 tokenId) external view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    // ------------------------- TOKEN METADATA ----------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Get ImageURI\\r\\n     */\\r\\n    function getImageURI(\\r\\n        AtlantisLib.Background background,\\r\\n        AtlantisLib.Element element,\\r\\n        AtlantisLib.OrbitName orbitName,\\r\\n        AtlantisLib.Evolution evo\\r\\n    ) public view returns (string memory) {\\r\\n        if (!revealed) {\\r\\n            return unrevealedImageURI;\\r\\n        }\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    Strings.toString(uint(background)),\\r\\n                    \\\"/\\\",\\r\\n                    Strings.toString(uint(element)),\\r\\n                    \\\"/\\\",\\r\\n                    Strings.toString(uint(evo)),\\r\\n                    \\\"/\\\",\\r\\n                    Strings.toString(uint(orbitName)),\\r\\n                    \\\".png\\\"\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns token metadata\\r\\n     * @dev Metadata is stored on-chain\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n        // Get Planet\\r\\n        AtlantisLib.Planet memory planet = planets[tokenId];\\r\\n\\r\\n        // Get Tier from Level\\r\\n        (AtlantisLib.Evolution evo, string memory evoString) = _getPlanetEvolution(planet.level);\\r\\n\\r\\n        // Name\\r\\n        string memory json = string(abi.encodePacked('{\\\"name\\\": \\\"', name(), \\\" #\\\", tokenId.toString(), '\\\",'));\\r\\n\\r\\n        // Description\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"description\\\": \\\"Welcome to the captivating realm of Atlantis, the game-verse and home of the legendary Argonauts. Planets are coveted lands that hold the key to your success in the game. Acquire planets, embark on exciting expeditions, and earn rewards that will supercharge your growth in Atlantis.\\\",'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Attributes\\r\\n        if (!revealed) {\\r\\n            json = string(abi.encodePacked(json, '\\\"attributes\\\": [],'));\\r\\n        } else {\\r\\n            json = string(\\r\\n                abi.encodePacked(\\r\\n                    json,\\r\\n                    '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Element\\\", \\\"value\\\": \\\"',\\r\\n                    AtlantisLib._planetElementToString(planet.element),\\r\\n                    '\\\"},',\\r\\n                    '{\\\"trait_type\\\": \\\"Background\\\", \\\"value\\\": \\\"',\\r\\n                    AtlantisLib._planetBackgroundToString(planet.background),\\r\\n                    '\\\"},',\\r\\n                    '{\\\"trait_type\\\": \\\"Orbit Name\\\", \\\"value\\\": \\\"',\\r\\n                    AtlantisLib._planetOrbitTypeToString(planet.orbitName),\\r\\n                    '\\\"},'\\r\\n                )\\r\\n            );\\r\\n            json = string(\\r\\n                abi.encodePacked(\\r\\n                    json,\\r\\n                    '{\\\"trait_type\\\": \\\"Orbit\\\", \\\"value\\\": \\\"',\\r\\n                    AtlantisLib._planetOrbitToString(planet.orbit),\\r\\n                    '\\\"},',\\r\\n                    '{\\\"trait_type\\\": \\\"Evolution\\\", \\\"value\\\": \\\"',\\r\\n                    evoString,\\r\\n                    '\\\"},',\\r\\n                    '{\\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": \\\"',\\r\\n                    Strings.toString(planet.level),\\r\\n                    '\\\"}],'\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        json = Base64.encode(\\r\\n            bytes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        json,\\r\\n                        '\\\"image\\\": \\\"',\\r\\n                        getImageURI(planet.background, planet.element, planet.orbitName, evo),\\r\\n                        '\\\"}'\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the Address Registry\\r\\n     * @param _addressRegistry The address of the Address Registry\\r\\n     */\\r\\n    function setAddressRegistry(AtlantisAddressRegistry _addressRegistry) external onlyOwner {\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    function devMint(address _to, uint256 _mintAmount) public ensureAvailabilityFor(_mintAmount) onlyOwner {\\r\\n        currentSupply += _mintAmount;\\r\\n        for (uint256 i; i < _mintAmount; i++) {\\r\\n            // Get next token Id\\r\\n            uint256 _tokenId = nextToken();\\r\\n            // Initialize planet\\r\\n            planets[_tokenId].level = 1;\\r\\n            // Mint planet\\r\\n            _safeMint(tx.origin, _tokenId);\\r\\n        }\\r\\n\\r\\n        emit PublicMint(_to, _mintAmount);\\r\\n    }\\r\\n\\r\\n    function faucetMint(address _to) public {\\r\\n        currentSupply += 12;\\r\\n        // Mint 3 fire planets, common uncommon rare epic\\r\\n        for (uint256 i = 0; i < 4; i++) {\\r\\n            uint256 _tokenId;\\r\\n\\r\\n            _tokenId = mintAndSetProperties(_to, AtlantisLib.Element.FIRE, AtlantisLib.Orbit(i));\\r\\n            setOrbitAndBackground(_tokenId, i);\\r\\n\\r\\n            _tokenId = mintAndSetProperties(_to, AtlantisLib.Element.LIGHTNING, AtlantisLib.Orbit(i));\\r\\n            setOrbitAndBackground(_tokenId, i);\\r\\n\\r\\n            _tokenId = mintAndSetProperties(_to, AtlantisLib.Element.STEEL, AtlantisLib.Orbit(i));\\r\\n            setOrbitAndBackground(_tokenId, i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mintAndSetProperties(\\r\\n        address _to,\\r\\n        AtlantisLib.Element element,\\r\\n        AtlantisLib.Orbit orbit\\r\\n    ) internal returns (uint256 _tokenId) {\\r\\n        _tokenId = nextToken();\\r\\n        _safeMint(_to, _tokenId);\\r\\n        planets[_tokenId].element = element;\\r\\n        planets[_tokenId].level = 1;\\r\\n        planets[_tokenId].orbit = orbit;\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function setOrbitAndBackground(uint256 _tokenId, uint256 i) internal {\\r\\n        if (i == 0) {\\r\\n            planets[_tokenId].orbitName = AtlantisLib.OrbitName.HALO_RING;\\r\\n            planets[_tokenId].background = AtlantisLib.Background.PURPLE_HUES;\\r\\n        } else if (i == 1) {\\r\\n            planets[_tokenId].orbitName = AtlantisLib.OrbitName.RAINBOW_CLOUDS;\\r\\n            planets[_tokenId].background = AtlantisLib.Background.WAVY;\\r\\n        } else if (i == 2) {\\r\\n            planets[_tokenId].orbitName = AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT;\\r\\n            planets[_tokenId].background = AtlantisLib.Background.SHOOTING_STARS;\\r\\n        } else {\\r\\n            planets[_tokenId].orbitName = AtlantisLib.OrbitName.INTERSTELLAR_GOLD;\\r\\n            planets[_tokenId].background = AtlantisLib.Background.GOLD_SKIES;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function devEpicMint(address[12] calldata _auctionWinners) external onlyOwner {\\r\\n        require(_auctionWinners.length == 12, \\\"AtlantisPlanets: Invalid length\\\");\\r\\n        // Mint token Ids 1-12\\r\\n        for (uint256 i = 1; i < 13; i++) {\\r\\n            planets[i].level = 1;\\r\\n            _safeMint(_auctionWinners[i - 1], i);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x19ebcf0a83ef57de5f8e880045350fe5c8abfdf20b68a65d2be3f1c37a1c9707\",\"license\":\"MIT\"},\"contracts/common/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ncontract AddressRegistry {\\r\\n    mapping(bytes32 => address) public addresses;\\r\\n\\r\\n    function getAddress(bytes32 _identifier) public view returns (address) {\\r\\n        return addresses[_identifier];\\r\\n    }\\r\\n\\r\\n    function _setAddress(bytes32 _identifier, address contractAddress) internal {\\r\\n        addresses[_identifier] = contractAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5a52817268231ba7de9b4856f0ae527d20e3e53347a538769f6a501800d0c760\",\"license\":\"MIT\"},\"contracts/common/AtlantisLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary AtlantisLib {\\r\\n    enum Orbit {\\r\\n        COMMON, // 0\\r\\n        UNCOMMON, // 1\\r\\n        RARE, // 2\\r\\n        EPIC // 3\\r\\n    }\\r\\n\\r\\n    enum OrbitName {\\r\\n        HALO_RING, //0\\r\\n        PANDORA, //1\\r\\n        ATLAS, //2\\r\\n        METIS, //3\\r\\n        ENTWINED, //4\\r\\n        RAINBOW_CLOUDS, //5\\r\\n        GALATICA, //6\\r\\n        ASTEROIDS, //7\\r\\n        INTERSTELLAR_PINK, //8\\r\\n        INTERSTELLAR_GRADIENT, //9\\r\\n        // Epic planets\\r\\n        INTERSTELLAR_GOLD //10\\r\\n    }\\r\\n\\r\\n    enum Background {\\r\\n        PURPLE_HUES, //0\\r\\n        BROWN_HUES, //1\\r\\n        WAVY, //2\\r\\n        SHOOTING_STARS, //3\\r\\n        // Epic planets\\r\\n        GOLD_HUES, //4\\r\\n        GOLD_SHOOTING_STARS, //5\\r\\n        WAVY_GOLD, //6\\r\\n        GOLD_SKIES //7\\r\\n    }\\r\\n\\r\\n    enum Evolution {\\r\\n        ALPHA, // 1-19\\r\\n        BETA, // 20-29\\r\\n        GAMMA, // 30-39\\r\\n        DELTA, // 40-49\\r\\n        EPSILON // 50\\r\\n    }\\r\\n\\r\\n    enum Element {\\r\\n        FIRE, // 0\\r\\n        LIGHTNING, // 1\\r\\n        STEEL // 2\\r\\n    }\\r\\n\\r\\n    struct Planet {\\r\\n        uint8 level; // Max Level: 50\\r\\n        Element element;\\r\\n        Orbit orbit;\\r\\n        OrbitName orbitName;\\r\\n        Background background;\\r\\n        bool onExpedition;\\r\\n    }\\r\\n\\r\\n    enum Rarity {\\r\\n        COMMON,\\r\\n        UNCOMMON,\\r\\n        RARE,\\r\\n        EPIC\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet element as string\\r\\n     */\\r\\n    function _planetElementToString(AtlantisLib.Element element) internal pure returns (string memory) {\\r\\n        if (element == AtlantisLib.Element.FIRE) {\\r\\n            return \\\"Fire\\\";\\r\\n        } else if (element == AtlantisLib.Element.STEEL) {\\r\\n            return \\\"Steel\\\";\\r\\n        } else if (element == AtlantisLib.Element.LIGHTNING) {\\r\\n            return \\\"Lightning\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitToString(AtlantisLib.Orbit orbit) internal pure returns (string memory) {\\r\\n        if (orbit == AtlantisLib.Orbit.COMMON) {\\r\\n            return \\\"Common\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.UNCOMMON) {\\r\\n            return \\\"Uncommon\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.RARE) {\\r\\n            return \\\"Rare\\\";\\r\\n        } else if (orbit == AtlantisLib.Orbit.EPIC) {\\r\\n            return \\\"Epic\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tier of equipment based on level\\r\\n     * @param level Level of an equipment\\r\\n     */\\r\\n    function _getEquipmentTier(uint8 level) internal pure returns (AtlantisLib.Rarity tier) {\\r\\n        if (level < 1) {\\r\\n            tier = AtlantisLib.Rarity.COMMON;\\r\\n        } else if (level >= 1 && level < 5) {\\r\\n            tier = AtlantisLib.Rarity.UNCOMMON;\\r\\n        } else if (level >= 5 && level < 8) {\\r\\n            tier = AtlantisLib.Rarity.RARE;\\r\\n        } else if (level >= 8 && level <= 10) {\\r\\n            tier = AtlantisLib.Rarity.EPIC;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetOrbitTypeToString(AtlantisLib.OrbitName orbitName) internal pure returns (string memory) {\\r\\n        if (orbitName == AtlantisLib.OrbitName.HALO_RING) {\\r\\n            return \\\"Halo Ring\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.PANDORA) {\\r\\n            return \\\"Pandora\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ATLAS) {\\r\\n            return \\\"Atlas\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.METIS) {\\r\\n            return \\\"Metis\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ENTWINED) {\\r\\n            return \\\"Entwined\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.RAINBOW_CLOUDS) {\\r\\n            return \\\"Rainbow Clouds\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.GALATICA) {\\r\\n            return \\\"Galatica\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.ASTEROIDS) {\\r\\n            return \\\"Asteroids\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_PINK) {\\r\\n            return \\\"Interstellar Pink\\\";\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GRADIENT) {\\r\\n            return \\\"Interstellar Gradient\\\";\\r\\n            // Epic planets\\r\\n        } else if (orbitName == AtlantisLib.OrbitName.INTERSTELLAR_GOLD) {\\r\\n            return \\\"Interstellar Gold\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns planet orbit as string\\r\\n     */\\r\\n    function _planetBackgroundToString(AtlantisLib.Background background) internal pure returns (string memory) {\\r\\n        if (background == AtlantisLib.Background.PURPLE_HUES) {\\r\\n            return \\\"Purple Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.BROWN_HUES) {\\r\\n            return \\\"Brown Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.WAVY) {\\r\\n            return \\\"Wavy\\\";\\r\\n        } else if (background == AtlantisLib.Background.SHOOTING_STARS) {\\r\\n            return \\\"Shooting Stars\\\";\\r\\n            // Epic planets\\r\\n        } else if (background == AtlantisLib.Background.WAVY_GOLD) {\\r\\n            return \\\"Wavy Gold\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SHOOTING_STARS) {\\r\\n            return \\\"Gold Shooting Stars\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_HUES) {\\r\\n            return \\\"Gold Hues\\\";\\r\\n        } else if (background == AtlantisLib.Background.GOLD_SKIES) {\\r\\n            return \\\"Gold Skies\\\";\\r\\n        } else {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f94d7d040abad058dbad5d368688e91d19d43bc219df2b2ee1c722950a88b8e\",\"license\":\"MIT\"},\"contracts/common/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a989d8dbb30529182950111aa77902fa22b4472c93588f1240b0524a423fbbd\",\"license\":\"MIT\"},\"contracts/common/RandomlyAssigned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./WithLimitedSupply.sol\\\";\\r\\n\\r\\n/// @author 1001.digital\\r\\n/// @title Randomly assign tokenIDs from a given set of tokens (PSEUDORANDOM).\\r\\nabstract contract RandomlyAssigned is WithLimitedSupply {\\r\\n    // Used for random index assignment\\r\\n    mapping(uint256 => uint256) private tokenMatrix;\\r\\n\\r\\n    // The initial token ID\\r\\n    uint256 private startFrom;\\r\\n\\r\\n    /// Instantiate the contract\\r\\n    /// @param _totalMaxSupply how many tokens this collection should hold\\r\\n    /// @param _startFrom the tokenID with which to start counting\\r\\n    constructor(uint256 _totalMaxSupply, uint256 _startFrom)\\r\\n        WithLimitedSupply(_totalMaxSupply)\\r\\n    {\\r\\n        startFrom = _startFrom;\\r\\n    }\\r\\n\\r\\n    /// Get the next token ID\\r\\n    /// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\\r\\n    /// @return the next token ID\\r\\n    function nextToken()\\r\\n        internal\\r\\n        override\\r\\n        ensureAvailability\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 maxIndex = totalMaxSupply() - tokenCount();\\r\\n        uint256 random = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    msg.sender,\\r\\n                    block.coinbase,\\r\\n                    block.difficulty,\\r\\n                    block.gaslimit,\\r\\n                    block.timestamp\\r\\n                )\\r\\n            )\\r\\n        ) % maxIndex;\\r\\n\\r\\n        uint256 value = 0;\\r\\n        if (tokenMatrix[random] == 0) {\\r\\n            // If this matrix position is empty, set the value to the generated random number.\\r\\n            value = random;\\r\\n        } else {\\r\\n            // Otherwise, use the previously stored number from the matrix.\\r\\n            value = tokenMatrix[random];\\r\\n        }\\r\\n\\r\\n        // If the last available tokenID is still unused...\\r\\n        if (tokenMatrix[maxIndex - 1] == 0) {\\r\\n            // ...store that ID in the current matrix position.\\r\\n            tokenMatrix[random] = maxIndex - 1;\\r\\n        } else {\\r\\n            // ...otherwise copy over the stored number to the current matrix position.\\r\\n            tokenMatrix[random] = tokenMatrix[maxIndex - 1];\\r\\n        }\\r\\n\\r\\n        // Increment counts\\r\\n        super.nextToken();\\r\\n\\r\\n        return value + startFrom;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe4d8921a8727c6003cedb308aa57088ec9e75184d67b610935b0d7bd2edbd72\",\"license\":\"MIT\"},\"contracts/common/WithLimitedSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\\r\\nabstract contract WithLimitedSupply {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    /// @dev Emitted when the supply of this collection changes\\r\\n    event SupplyChanged(uint256 supply);\\r\\n\\r\\n    // Keeps track of how many we have minted\\r\\n    Counters.Counter private _tokenCount;\\r\\n\\r\\n    /// @dev The maximum count of tokens this token tracker will hold.\\r\\n    uint256 private _totalMaxSupply;\\r\\n\\r\\n    /// Instanciate the contract\\r\\n    /// @param totalMaxSupply_ how many tokens this collection should hold\\r\\n    constructor(uint256 totalMaxSupply_) {\\r\\n        _totalMaxSupply = totalMaxSupply_;\\r\\n    }\\r\\n\\r\\n    /// @dev Get the max Supply\\r\\n    /// @return the maximum token count\\r\\n    function totalMaxSupply() public view virtual returns (uint256) {\\r\\n        return _totalMaxSupply;\\r\\n    }\\r\\n\\r\\n    /// @dev Get the current token count\\r\\n    /// @return the created token count\\r\\n    function tokenCount() public view returns (uint256) {\\r\\n        return _tokenCount.current();\\r\\n    }\\r\\n\\r\\n    /// @dev Check whether tokens are still available\\r\\n    /// @return the available token count\\r\\n    function availableTokenCount() public view returns (uint256) {\\r\\n        return totalMaxSupply() - tokenCount();\\r\\n    }\\r\\n\\r\\n    /// @dev Increment the token count and fetch the latest count\\r\\n    /// @return the next token id\\r\\n    function nextToken() internal virtual returns (uint256) {\\r\\n        uint256 token = _tokenCount.current();\\r\\n\\r\\n        _tokenCount.increment();\\r\\n\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /// @dev Check whether another token is still available\\r\\n    modifier ensureAvailability() {\\r\\n        require(availableTokenCount() > 0, \\\"No more tokens available\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @param amount Check whether number of tokens are still available\\r\\n    /// @dev Check whether tokens are still available\\r\\n    modifier ensureAvailabilityFor(uint256 amount) {\\r\\n        require(availableTokenCount() >= amount, \\\"Requested number of tokens not available\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf51b3d4a11279b71596e5af2ec8ba0ff3825c7fd1619ac45eb337aba47d9b471\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisGemstones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IAtlantisGemstones is IERC1155 {\\r\\n    error NonExistentToken();\\r\\n    error OnlyAtlantisOrOwner();\\r\\n    error InvalidInputAmount();\\r\\n    error InvalidElement();\\r\\n    error InvalidUpgrade();\\r\\n\\r\\n    function fuseGemstones(uint8 _id, uint8 _toId, uint256 _amountToCreate) external;\\r\\n\\r\\n    function burn(address _user, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    function mint(address _to, uint256 _id, uint256 _quantity) external;\\r\\n\\r\\n    event FusionCostUpdated(uint256 _newCost);\\r\\n    event BaseMetadataURIUpdated(string _newBaseMetadataURI);\\r\\n    event AddressRegistryUpdated(address _newAddressRegistry);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc7172913c331940714918bcb007f6c96be405e04a88a7706a5cdf39aaaf4a34\",\"license\":\"MIT\"},\"contracts/interface/IAtlantisPlanets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// Import AtlantisLib\\r\\nimport { AtlantisLib } from \\\"../common/AtlantisLib.sol\\\";\\r\\n\\r\\ninterface IAtlantisPlanets is IERC721 {\\r\\n    error AuctionSettled();\\r\\n\\r\\n    /**\\r\\n     * The signature must be by the correct signer\\r\\n     */\\r\\n    error InvalidSignature();\\r\\n\\r\\n    /**\\r\\n     * The minting stage must be correct\\r\\n     */\\r\\n    error InvalidStage(uint8 currentStage, uint8 requiredStage);\\r\\n\\r\\n    /**\\r\\n     * The collection has exceeded the max supply\\r\\n     */\\r\\n    error ExceededMaxSupply();\\r\\n\\r\\n    /**\\r\\n     * The user has exceeded allowed mint count\\r\\n     */\\r\\n    error ExceedMaxMintPerWallet();\\r\\n\\r\\n    /**\\r\\n     * The planet has exceeded the max level\\r\\n     */\\r\\n    error ExceededMaxLevel();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown OrbitId\\r\\n     */\\r\\n    error UnknownOrbit();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown ElementId\\r\\n     */\\r\\n    error UnknownElement();\\r\\n\\r\\n    /**\\r\\n     * Error thrown when user queries an unknown PlanetId\\r\\n     */\\r\\n    error InvalidUpgradeLevel(uint8 currentLevel, uint8 newLevel);\\r\\n    /**\\r\\n     * User is not the owner of planet\\r\\n     */\\r\\n    error NotOwnerOfPlanet();\\r\\n\\r\\n    error InsufficientCRO(uint256 amountPaid, uint256 amountRequired);\\r\\n\\r\\n    error InvalidInput();\\r\\n\\r\\n    function upgradePlanet(uint256 _tokenId, uint8 _levels) external;\\r\\n\\r\\n    function getUpgradeCosts(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _levels\\r\\n    ) external view returns (uint256 stardustCost, uint256 xArgoCost, uint16[4] memory gemstoneRequirements);\\r\\n\\r\\n    function getPlanetDetails(uint256 _planetId) external view returns (AtlantisLib.Planet memory);\\r\\n\\r\\n    function setPlanetElements(uint256[] memory _tokenIds, AtlantisLib.Element[] memory _gemstoneType) external;\\r\\n\\r\\n    function setPlanetOrbits(uint256[] memory _tokenIds, AtlantisLib.Orbit[] memory _planetsOrbit) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x535102a2c03d0a734770e65d90ed6b46569aaae9578ff7bcca693ec1bdd94503\",\"license\":\"MIT\"},\"contracts/interface/IStakingWithLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n\\r\\ninterface IStakingWithLock {\\r\\n     function unstakeAndBurn(uint256 _amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x8e687f098a3f0de38b65232ede9973f0ffe81a0fe6ded9deeb784c1e1389280d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600a6010556000601181905560146013819055670de0b6b3a76400008155601791909155600019601855680ad78ebc5ac6200000601c819055601d556019601e55601f556021805460ff1916905561010060405260426080818152906200656560a039602290620000719082620003e0565b503480156200007f57600080fd5b50604051620065a7380380620065a7833981016040819052620000a291620004d4565b611770600d816040518060400160405280601081526020016f41746c616e74697320506c616e65747360801b81525060405180604001604052806007815260200166504c414e45545360c81b8152508160009081620001029190620003e0565b506001620001118282620003e0565b5050506200012e620001286200019060201b60201c565b62000194565b600855600a55506200014084620001e6565b6200014b8362000212565b62000156826200023e565b62000161846200025a565b6000600e55600b80546001600160a01b0319166001600160a01b039290921691909117905550620005e7915050565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001f0620002dd565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b6200021c620002dd565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b62000248620002dd565b600c620002568282620003e0565b5050565b62000264620002dd565b6001600160a01b038116620002cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620002da8162000194565b50565b6006546001600160a01b03163314620003395760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002c6565b565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200036657607f821691505b6020821081036200038757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003db57600081815260208120601f850160051c81016020861015620003b65750805b601f850160051c820191505b81811015620003d757828155600101620003c2565b5050505b505050565b81516001600160401b03811115620003fc57620003fc6200033b565b62000414816200040d845462000351565b846200038d565b602080601f8311600181146200044c5760008415620004335750858301515b600019600386901b1c1916600185901b178555620003d7565b600085815260208120601f198616915b828110156200047d578886015182559484019460019091019084016200045c565b50858210156200049c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0381168114620002da57600080fd5b8051620004cf81620004ac565b919050565b60008060008060808587031215620004eb57600080fd5b8451620004f881620004ac565b809450506020808601516200050d81620004ac565b60408701519094506001600160401b03808211156200052b57600080fd5b818801915088601f8301126200054057600080fd5b8151818111156200055557620005556200033b565b604051601f8201601f19908116603f011681019083821181831017156200058057620005806200033b565b816040528281528b868487010111156200059957600080fd5b600093505b82841015620005bd57848401860151818501870152928501926200059e565b6000868483010152809750505050505050620005dc60608601620004c2565b905092959194509250565b615f6e80620005f76000396000f3fe6080604052600436106104475760003560e01c8063815d544c11610234578063ce3cd9971161012e578063e07fa3c1116100b6578063f0f442601161007a578063f0f4426014610cff578063f2fde38b14610d1f578063f3ad65f414610d3f578063f504764d14610d5f578063fc8d44b714610d7f57600080fd5b8063e07fa3c114610c7f578063e14ca35314610c94578063e3e6a3ef14610ca9578063e985e9c514610cbf578063ea98eb1d14610cdf57600080fd5b8063dc34c041116100fd578063dc34c04114610bfd578063dc53fd9214610c13578063deecbfa814610c29578063dffc857014610c49578063e025107f14610c6957600080fd5b8063ce3cd99714610b88578063ce7cebf214610ba8578063d600671c14610bc8578063da71ff1214610be857600080fd5b8063a1db9782116101bc578063b7b637db11610180578063b7b637db14610ae6578063b88d4fde14610b06578063c040e6b814610b26578063c833e25814610b52578063c87b56dd14610b6857600080fd5b8063a1db978214610a50578063a22cb46514610a70578063a611708e14610a90578063a8f6891614610ab0578063aa880b4f14610ad057600080fd5b806395d89b411161020357806395d89b41146109d157806396330b5f146109e65780639f181b5e14610a13578063a0617ad014610a28578063a0712d6814610a3d57600080fd5b8063815d544c1461095d578063877850ef146109735780638da5cb5b1461099357806395528bc5146109b157600080fd5b80633bdf4ac6116103455780635d82cf6e116102cd5780636cc29174116102915780636cc29174146108d257806370a08231146108f2578063715018a614610912578063790188ae146109275780637bf185aa1461093d57600080fd5b80635d82cf6e1461083d57806361d027b31461085d578063627804af1461087d5780636352211e1461089d5780636c0360eb146108bd57600080fd5b8063518302271161031457806351830227146107a157806355f804b3146107bb57806358d95010146107db5780635b785034146108085780635b8ad4291461082857600080fd5b80633bdf4ac61461070c57806342842e0e146107395780634860d6da146107595780634f558e791461078157600080fd5b806323b872dd116103d35780632f975f04116103975780632f975f04146106955780633246e467146106ab5780633305048f146106c157806335c6aaf8146106e157806338dc3a20146106f757600080fd5b806323b872dd146105bc57806324436f77146105dc57806326c1e750146105ef57806327c7812c1461066057806328d077681461068057600080fd5b806311dceda71161041a57806311dceda7146104fd57806312f269b91461053857806318160ddd14610558578063199854b21461056d5780631b4663e81461058d57600080fd5b806301ffc9a71461044c57806306fdde0314610481578063081812fc146104a3578063095ea7b3146104db575b600080fd5b34801561045857600080fd5b5061046c610467366004614c83565b610d9f565b60405190151581526020015b60405180910390f35b34801561048d57600080fd5b50610496610df1565b6040516104789190614cf7565b3480156104af57600080fd5b506104c36104be366004614d0a565b610e83565b6040516001600160a01b039091168152602001610478565b3480156104e757600080fd5b506104fb6104f6366004614d38565b610eaa565b005b34801561050957600080fd5b5061052a610518366004614d64565b60126020526000908152604090205481565b604051908152602001610478565b34801561054457600080fd5b506104fb610553366004614d81565b610fc4565b34801561056457600080fd5b50600e5461052a565b34801561057957600080fd5b506104fb610588366004614df1565b611042565b34801561059957600080fd5b506105ad6105a8366004614e6e565b61111f565b60405161047893929190614e9a565b3480156105c857600080fd5b506104fb6105d7366004614edf565b611307565b6104fb6105ea366004614fcc565b611338565b3480156105fb57600080fd5b5061064e61060a366004614d0a565b602080526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b60405161047896959493929190615093565b34801561066c57600080fd5b506104fb61067b366004614d64565b6115bf565b34801561068c57600080fd5b506104966115e9565b3480156106a157600080fd5b5061052a601d5481565b3480156106b757600080fd5b5061052a60185481565b3480156106cd57600080fd5b506104fb6106dc366004614e6e565b611677565b3480156106ed57600080fd5b5061052a60145481565b34801561070357600080fd5b50610496611b53565b34801561071857600080fd5b5061052a610727366004614d64565b60156020526000908152604090205481565b34801561074557600080fd5b506104fb610754366004614edf565b611b60565b34801561076557600080fd5b5061076e600481565b60405161ffff9091168152602001610478565b34801561078d57600080fd5b5061046c61079c366004614d0a565b611b7b565b3480156107ad57600080fd5b5060215461046c9060ff1681565b3480156107c757600080fd5b506104fb6107d63660046150e4565b611b9a565b3480156107e757600080fd5b506107fb6107f6366004614d0a565b611bae565b604051610478919061512d565b34801561081457600080fd5b506104fb610823366004615195565b611cf8565b34801561083457600080fd5b506104fb611d0b565b34801561084957600080fd5b506104fb610858366004614d0a565b611d27565b34801561086957600080fd5b50601a546104c3906001600160a01b031681565b34801561088957600080fd5b506104fb610898366004614d38565b611d34565b3480156108a957600080fd5b506104c36108b8366004614d0a565b611e11565b3480156108c957600080fd5b50610496611e71565b3480156108de57600080fd5b506104fb6108ed3660046151b7565b611e7e565b3480156108fe57600080fd5b5061052a61090d366004614d64565b611ec9565b34801561091e57600080fd5b506104fb611f4f565b34801561093357600080fd5b5061052a60105481565b34801561094957600080fd5b506104fb610958366004614df1565b611f63565b34801561096957600080fd5b5061052a600f5481565b34801561097f57600080fd5b506104fb61098e366004614d0a565b612035565b34801561099f57600080fd5b506006546001600160a01b03166104c3565b3480156109bd57600080fd5b506104fb6109cc366004614d0a565b612042565b3480156109dd57600080fd5b5061049661204f565b3480156109f257600080fd5b5061052a610a01366004614d64565b60196020526000908152604090205481565b348015610a1f57600080fd5b5061052a61205e565b348015610a3457600080fd5b5060085461052a565b6104fb610a4b366004614d0a565b61206e565b348015610a5c57600080fd5b506104fb610a6b366004614d38565b6121d1565b348015610a7c57600080fd5b506104fb610a8b366004615237565b612250565b348015610a9c57600080fd5b506104fb610aab366004614d0a565b61225b565b348015610abc57600080fd5b506104fb610acb366004614d0a565b612268565b348015610adc57600080fd5b5061052a60135481565b348015610af257600080fd5b506104fb610b01366004614df1565b612275565b348015610b1257600080fd5b506104fb610b21366004615270565b612349565b348015610b3257600080fd5b50600d54610b409060ff1681565b60405160ff9091168152602001610478565b348015610b5e57600080fd5b5061052a60115481565b348015610b7457600080fd5b50610496610b83366004614d0a565b612381565b348015610b9457600080fd5b506104fb610ba33660046152dc565b61263a565b348015610bb457600080fd5b506104fb610bc33660046150e4565b612658565b348015610bd457600080fd5b50610496610be3366004615324565b61266c565b348015610bf457600080fd5b5061076e603281565b348015610c0957600080fd5b5061052a601e5481565b348015610c1f57600080fd5b5061052a60175481565b348015610c3557600080fd5b506104fb610c44366004614df1565b61279a565b348015610c5557600080fd5b506104fb610c64366004615195565b612871565b348015610c7557600080fd5b5061052a601f5481565b348015610c8b57600080fd5b506104fb612884565b348015610ca057600080fd5b5061052a612924565b348015610cb557600080fd5b5061052a601c5481565b348015610ccb57600080fd5b5061046c610cda36600461537e565b61293b565b348015610ceb57600080fd5b506104fb610cfa366004614d0a565b612969565b348015610d0b57600080fd5b506104fb610d1a366004614d64565b612976565b348015610d2b57600080fd5b506104fb610d3a366004614d64565b6129a0565b348015610d4b57600080fd5b50600b546104c3906001600160a01b031681565b348015610d6b57600080fd5b506104fb610d7a366004614d64565b612a16565b348015610d8b57600080fd5b506104fb610d9a366004614d64565b612a40565b60006001600160e01b031982166380ac58cd60e01b1480610dd057506001600160e01b03198216635b5e139f60e01b145b80610deb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610e00906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c906153ac565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82612aeb565b506000908152600460205260409020546001600160a01b031690565b6000610eb582611e11565b9050806001600160a01b0316836001600160a01b031603610f275760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610f435750610f43813361293b565b610fb55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610f1e565b610fbf8383612b4a565b505050565b610fcc612bb8565b60015b600d81101561103e5760008181526020805260409020805460ff1916600190811790915561102c90839061100390846153fc565b600c81106110135761101361540f565b6020020160208101906110269190614d64565b82612c12565b8061103681615425565b915050610fcf565b5050565b61104a612bb8565b600d5460ff1660031461108057600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b818110156111185782828281811061109d5761109d61540f565b90506020020160208101906110b2919061543e565b602060008787858181106110c8576110c861540f565b60209081029290920135835250810191909152604001600020805463ff0000001916630100000083600a81111561110157611101615039565b02179055508061111081615425565b915050611083565b5050505050565b60008061112a614c4f565b600085815260208080526040808320815160c08101909252805460ff8082168452929391929184019161010090910416600281111561116b5761116b615039565b600281111561117c5761117c615039565b8152815460209091019062010000900460ff1660038111156111a0576111a0615039565b60038111156111b1576111b1615039565b815281546020909101906301000000900460ff16600a8111156111d6576111d6615039565b600a8111156111e7576111e7615039565b81528154602090910190600160201b900460ff16600781111561120c5761120c615039565b600781111561121d5761121d615039565b81529054600160281b900460ff161515602090910152805190915060006112448783615459565b905060008360400151600381111561125e5761125e615039565b9050603261126c8985615459565b60ff1611156112d75760405162461bcd60e51b815260206004820152603160248201527f506c616e6574733a20506c616e65742063616e6e6f7420626520757067726164604482015270656420746f2074686973206c6576656c2160781b6064820152608401610f1e565b6112e2838383612c2c565b96506112ee8383612d08565b95506112fa8989612d8e565b9450505050509250925092565b611311338261343c565b61132d5760405162461bcd60e51b8152600401610f1e90615472565b610fbf83838361349a565b33321461137f5760405162461bcd60e51b8152602060048201526015602482015274506c616e6574733a206d7573742075736520454f4160581b6044820152606401610f1e565b8280611389612924565b10156113a75760405162461bcd60e51b8152600401610f1e906154bf565b6113b5338484600f5461360b565b6113d257604051638baa579f60e01b815260040160405180910390fd5b600d5460ff1660011461140857600d5460405163353ba46160e11b815260ff909116600482015260016024820152604401610f1e565b600f546001036114b85760115461141f9085615507565b34146114565734601154856114349190615507565b604051631068e6e760e01b815260048101929092526024820152604401610f1e565b6010543360009081526012602052604090205461147490869061551e565b111561149357604051634ecf32dd60e11b815260040160405180910390fd5b33600090815260126020526040812080548692906114b290849061551e565b90915550505b600f54600203611546576014546114cf9085615507565b34146114e45734601454856114349190615507565b6013543360009081526015602052604090205461150290869061551e565b111561152157604051634ecf32dd60e11b815260040160405180910390fd5b336000908152601560205260408120805486929061154090849061551e565b90915550505b83600e6000828254611558919061551e565b90915550600090505b84811015611583576115716136b7565b8061157b81615425565b915050611561565b5060405184815233907f73c70fae6461815259bb17577a08362a747e97f1b952b86e211522d4a24f95379060200160405180910390a250505050565b6115c7612bb8565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b601b80546115f6906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611622906153ac565b801561166f5780601f106116445761010080835404028352916020019161166f565b820191906000526020600020905b81548152906001019060200180831161165257829003601f168201915b505050505081565b600b54604080516329a33d0560e21b815290516000926001600160a01b03169163a68cf4149160048083019260209291908290030181865afa1580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e59190615531565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b031663786d10866040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190615531565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b0316638cc84db76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db9190615531565b9050336117e786611e11565b6001600160a01b03161461180e57604051630a40deb960e31b815260040160405180910390fd5b600d5460ff1660041461184657600d5460405163353ba46160e11b815260ff9091166004808301919091526024820152604401610f1e565b60008581526020805260408120805490919062010000900460ff16600381111561187257611872615039565b825490915060329061188890889060ff16615459565b60ff1611156118aa576040516330531d7360e01b815260040160405180910390fd5b81546000906118c59060ff166118c08982615459565b612d08565b83549091506000906118e49060ff166118de8a82615459565b85612c2c565b905060006118f28a8a612d8e565b85549091506000906001908b908890849061191190849060ff16615459565b92506101000a81548160ff021916908360ff1602179055505b600461ffff821611611a395760008361194460018461554e565b61ffff16600481106119585761195861540f565b602002015161ffff1690508015611a185787546001600160a01b038b169063f5298aca90339061ffff871690610100900460ff16600281111561199d5761199d615039565b6119a890600161551e565b6119b2919061551e565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101849052606401600060405180830381600087803b1580156119ff57600080fd5b505af1158015611a13573d6000803e3d6000fd5b505050505b81611a2281615569565b9250611a31905060038461558a565b92505061192a565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab091906155a5565b508315611b125760405163a7b8b49160e01b8152600481018590526001600160a01b0389169063a7b8b49190602401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b505050505b865460405160ff909116908d907f50b7db618c3ed4d1fe8122fce987e7ea6245b41f8e0c64817c0eacaa225fd4eb90600090a3505050505050505050505050565b602280546115f6906153ac565b610fbf83838360405180602001604052806000815250612349565b6000818152600260205260408120546001600160a01b03161515610deb565b611ba2612bb8565b600c61103e8282615610565b611be86040805160c08101909152600080825260208201908152602001600081526020016000815260200160008152600060209091015290565b600082815260208080526040808320815160c08101909252805460ff80821684529293919291840191610100909104166002811115611c2957611c29615039565b6002811115611c3a57611c3a615039565b8152815460209091019062010000900460ff166003811115611c5e57611c5e615039565b6003811115611c6f57611c6f615039565b815281546020909101906301000000900460ff16600a811115611c9457611c94615039565b600a811115611ca557611ca5615039565b81528154602090910190600160201b900460ff166007811115611cca57611cca615039565b6007811115611cdb57611cdb615039565b81529054600160281b900460ff1615156020909101529392505050565b611d00612bb8565b601c91909155601d55565b611d13612bb8565b6021805460ff19811660ff90911615179055565b611d2f612bb8565b601755565b8080611d3e612924565b1015611d5c5760405162461bcd60e51b8152600401610f1e906154bf565b611d64612bb8565b81600e6000828254611d76919061551e565b90915550600090505b82811015611dc8576000611d916136e5565b60008181526020805260409020805460ff191660011790559050611db53282612c12565b5080611dc081615425565b915050611d7f565b50826001600160a01b03167f748a2986091c2034d6e93b6f44f771a79f0e1d6acd8a60c68c17d4e1e2feaed283604051611e0491815260200190565b60405180910390a2505050565b6000818152600260205260408120546001600160a01b031680610deb5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610f1e565b600c80546115f6906153ac565b611e86612bb8565b600d5460ff16600314611ebc57600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b601b610fbf8284836156d0565b60006001600160a01b038216611f335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610f1e565b506001600160a01b031660009081526003602052604090205490565b611f57612bb8565b611f61600061387e565b565b611f6b612bb8565b600d5460ff16600314611fa157600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b8381101561111857828282818110611fbe57611fbe61540f565b9050602002016020810190611fd39190615790565b60206000878785818110611fe957611fe961540f565b60209081029290920135835250810191909152604001600020805461ff00191661010083600281111561201e5761201e615039565b02179055508061202d81615425565b915050611fa4565b61203d612bb8565b600f55565b61204a612bb8565b601055565b606060018054610e00906153ac565b600061206960075490565b905090565b3332146120b55760405162461bcd60e51b8152602060048201526015602482015274506c616e6574733a206d7573742075736520454f4160581b6044820152606401610f1e565b80806120bf612924565b10156120dd5760405162461bcd60e51b8152600401610f1e906154bf565b600d5460ff1660021461211357600d5460405163353ba46160e11b815260ff909116600482015260026024820152604401610f1e565b336000908152601960205260408120805484929061213290849061551e565b9250508190555081600e600082825461214b919061551e565b909155505060175461215d9083615507565b34146121725734601754836114349190615507565b60005b82811015612197576121856136b7565b8061218f81615425565b915050612175565b5060405182815233907f748a2986091c2034d6e93b6f44f771a79f0e1d6acd8a60c68c17d4e1e2feaed29060200160405180910390a25050565b6121d9612bb8565b601a5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af115801561222c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906155a5565b61103e3383836138d0565b612263612bb8565b601455565b612270612bb8565b601155565b61227d612bb8565b600d5460ff166003146122b357600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b81811015611118578282828181106122d0576122d061540f565b90506020020160208101906122e591906157ab565b602060008787858181106122fb576122fb61540f565b60209081029290920135835250810191909152604001600020805462ff000019166201000083600381111561233257612332615039565b02179055508061234181615425565b9150506122b6565b612353338361343c565b61236f5760405162461bcd60e51b8152600401610f1e90615472565b61237b8484848461399e565b50505050565b606061238c82612aeb565b600082815260208080526040808320815160c08101909252805460ff808216845292939192918401916101009091041660028111156123cd576123cd615039565b60028111156123de576123de615039565b8152815460209091019062010000900460ff16600381111561240257612402615039565b600381111561241357612413615039565b815281546020909101906301000000900460ff16600a81111561243857612438615039565b600a81111561244957612449615039565b81528154602090910190600160201b900460ff16600781111561246e5761246e615039565b600781111561247f5761247f615039565b8152905460ff600160281b90910481161515602090920191909152815191925060009182916124ae91166139d1565b9150915060006124bc610df1565b6124c587613b08565b6040516020016124d69291906157e8565b6040516020818303038152906040529050806040516020016124f8919061584b565b60408051601f1981840301815291905260215490915060ff1661253c578060405160200161252691906159d5565b60405160208183030381529060405290506125cc565b8061254a8560200151613b9b565b6125578660800151613c67565b6125648760600151613e67565b6040516020016125779493929190615a0a565b6040516020818303038152906040529050806125968560400151614128565b836125a7876000015160ff16613b08565b6040516020016125ba9493929190615b31565b60405160208183030381529060405290505b61260d816125e88660800151876020015188606001518861266c565b6040516020016125f9929190615c38565b604051602081830303815290604052614214565b9050806040516020016126209190615c8c565b604051602081830303815290604052945050505050919050565b612642612bb8565b600d805460ff191660ff92909216919091179055565b612660612bb8565b602261103e8282615610565b60215460609060ff1661270b5760228054612686906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546126b2906153ac565b80156126ff5780601f106126d4576101008083540402835291602001916126ff565b820191906000526020600020905b8154815290600101906020018083116126e257829003601f168201915b50505050509050612792565b61271361437b565b61272d86600781111561272857612728615039565b613b08565b61274286600281111561272857612728615039565b61275785600481111561272857612728615039565b61276c87600a81111561272857612728615039565b604051602001612780959493929190615cd1565b60405160208183030381529060405290505b949350505050565b6127a2612bb8565b600d5460ff166003146127d857600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b81811015611118578282828181106127f5576127f561540f565b905060200201602081019061280a9190615d6f565b602060008787858181106128205761282061540f565b60209081029290920135835250810191909152604001600020805464ff000000001916600160201b83600781111561285a5761285a615039565b02179055508061286981615425565b9150506127db565b612879612bb8565b601e91909155601f55565b61288c612bb8565b601a546040516000916001600160a01b03169047908381818185875af1925050503d80600081146128d9576040519150601f19603f3d011682016040523d82523d6000602084013e6128de565b606091505b50509050806129215760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610f1e565b50565b600061292e61205e565b60085461206991906153fc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b612971612bb8565b601355565b61297e612bb8565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b6129a8612bb8565b6001600160a01b038116612a0d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f1e565b6129218161387e565b612a1e612bb8565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b600c600e6000828254612a53919061551e565b90915550600090505b600481101561103e576000612a84836000846003811115612a7f57612a7f615039565b61438a565b9050612a908183614417565b612aa8836001846003811115612a7f57612a7f615039565b9050612ab48183614417565b612acc836002846003811115612a7f57612a7f615039565b9050612ad88183614417565b5080612ae381615425565b915050612a5c565b6000818152600260205260409020546001600160a01b03166129215760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610f1e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b7f82611e11565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314611f615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f1e565b61103e8282604051806020016040528060008152506144f3565b600060ff84161580612c4457508260ff168460ff1610155b15612c6f57604051635cc08ee560e01b815260ff808616600483015284166024820152604401610f1e565b60ff84165b8360ff16811015612d0057612710601f548460ff16612c939190615507565b612c9e90606461551e565b601e54612cac6001856153fc565b612cb69190615507565b612cc190606461551e565b612ccb9190615507565b601d54612cd89190615507565b612ce29190615da0565b612cec908361551e565b915080612cf881615425565b915050612c74565b509392505050565b600060ff83161580612d2057508160ff168360ff1610155b15612d4b57604051635cc08ee560e01b815260ff808516600483015283166024820152604401610f1e565b60ff83165b8260ff16811015612d875780601c54612d699190615507565b612d73908361551e565b915080612d7f81615425565b915050612d50565b5092915050565b612d96614c4f565b600083815260208080526040808320815160c08101909252805460ff80821684529293919291840191610100909104166002811115612dd757612dd7615039565b6002811115612de857612de8615039565b8152815460209091019062010000900460ff166003811115612e0c57612e0c615039565b6003811115612e1d57612e1d615039565b815281546020909101906301000000900460ff16600a811115612e4257612e42615039565b600a811115612e5357612e53615039565b81528154602090910190600160201b900460ff166007811115612e7857612e78615039565b6007811115612e8957612e89615039565b81529054600160281b900460ff16151560209091015280519091506000612eb08583615459565b9050600083604001516003811115612eca57612eca615039565b90506032612ed88785615459565b60ff161115612efa576040516330531d7360e01b815260040160405180910390fd5b612f97601b8054612f0a906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054612f36906153ac565b8015612f835780601f10612f5857610100808354040283529160200191612f83565b820191906000526020600020905b815481529060010190602001808311612f6657829003601f168201915b50505050508260ff168560ff166000614526565b613034601b8054612fa7906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054612fd3906153ac565b80156130205780601f10612ff557610100808354040283529160200191613020565b820191906000526020600020905b81548152906001019060200180831161300357829003601f168201915b50505050508360ff168560ff166000614526565b61303e919061554e565b61ffff168552601b80546130e39190613056906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054613082906153ac565b80156130cf5780601f106130a4576101008083540402835291602001916130cf565b820191906000526020600020905b8154815290600101906020018083116130b257829003601f168201915b50505050508260ff168560ff166001614526565b613180601b80546130f3906153ac565b80601f016020809104026020016040519081016040528092919081815260200182805461311f906153ac565b801561316c5780601f106131415761010080835404028352916020019161316c565b820191906000526020600020905b81548152906001019060200180831161314f57829003601f168201915b50505050508360ff168560ff166001614526565b61318a919061554e565b61ffff166020860152601b805461323291906131a5906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546131d1906153ac565b801561321e5780601f106131f35761010080835404028352916020019161321e565b820191906000526020600020905b81548152906001019060200180831161320157829003601f168201915b50505050508260ff168560ff166002614526565b6132cf601b8054613242906153ac565b80601f016020809104026020016040519081016040528092919081815260200182805461326e906153ac565b80156132bb5780601f10613290576101008083540402835291602001916132bb565b820191906000526020600020905b81548152906001019060200180831161329e57829003601f168201915b50505050508360ff168560ff166002614526565b6132d9919061554e565b61ffff166040860152601b805461338191906132f4906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054613320906153ac565b801561336d5780601f106133425761010080835404028352916020019161336d565b820191906000526020600020905b81548152906001019060200180831161335057829003601f168201915b50505050508260ff168560ff166003614526565b61341e601b8054613391906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546133bd906153ac565b801561340a5780601f106133df5761010080835404028352916020019161340a565b820191906000526020600020905b8154815290600101906020018083116133ed57829003601f168201915b50505050508360ff168560ff166003614526565b613428919061554e565b61ffff166060860152509295945050505050565b60008061344883611e11565b9050806001600160a01b0316846001600160a01b0316148061346f575061346f818561293b565b806127925750836001600160a01b031661348884610e83565b6001600160a01b031614949350505050565b826001600160a01b03166134ad82611e11565b6001600160a01b0316146134d35760405162461bcd60e51b8152600401610f1e90615db4565b6001600160a01b0382166135355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610f1e565b61354283838360016145cd565b826001600160a01b031661355582611e11565b6001600160a01b03161461357b5760405162461bcd60e51b8152600401610f1e90615db4565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008085858460405160200161362393929190615df9565b60405160208183030381529060405280519060200120905061369c84613696836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90614655565b6016546001600160a01b039182169116149695505050505050565b60006136c16136e5565b60008181526020805260409020805460ff1916600117905590506129213382612c12565b6000806136f0612924565b1161373d5760405162461bcd60e51b815260206004820152601860248201527f4e6f206d6f726520746f6b656e7320617661696c61626c6500000000000000006044820152606401610f1e565b600061374761205e565b60085461375491906153fc565b6040516bffffffffffffffffffffffff1933606090811b8216602084015241901b166034820152446048820152456068820152426088820152909150600090829060a8016040516020818303038152906040528051906020012060001c6137bb9190615e38565b6000818152600960205260408120549192509081036137db5750806137ec565b506000818152600960205260409020545b600960006137fb6001866153fc565b8152602001908152602001600020546000036138305761381c6001846153fc565b600083815260096020526040902055613860565b6009600061383f6001866153fc565b81526020808201929092526040908101600090812054858252600990935220555b613868614671565b50600a54613876908261551e565b935050505090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036139315760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610f1e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6139a984848461349a565b6139b58484848461468d565b61237b5760405162461bcd60e51b8152600401610f1e90615e4c565b6000606060148361ffff161015613a08575050604080518082019091526005815264416c70686160d81b6020820152600090915091565b60148361ffff1610158015613a215750601e8361ffff16105b15613a4b5750506040805180820190915260048152634265746160e01b6020820152600190915091565b601e8361ffff1610158015613a64575060288361ffff16105b15613a8f57505060408051808201909152600581526447616d6d6160d81b6020820152600290915091565b60288361ffff1610158015613aa8575060328361ffff16105b15613ad357505060408051808201909152600581526444656c746160d81b6020820152600390915091565b8261ffff16603203613b0357505060408051808201909152600781526622b839b4b637b760c91b60208201526004905b915091565b60606000613b158361478b565b600101905060008167ffffffffffffffff811115613b3557613b35614f20565b6040519080825280601f01601f191660200182016040528015613b5f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613b6957509392505050565b60606000826002811115613bb157613bb1615039565b03613bd65750506040805180820190915260048152634669726560e01b602082015290565b6002826002811115613bea57613bea615039565b03613c1057505060408051808201909152600581526414dd19595b60da1b602082015290565b6001826002811115613c2457613c24615039565b03613c4e5750506040805180820190915260098152684c696768746e696e6760b81b602082015290565b505060408051602081019091526000815290565b919050565b60606000826007811115613c7d57613c7d615039565b03613ca957505060408051808201909152600b81526a507572706c65204875657360a81b602082015290565b6001826007811115613cbd57613cbd615039565b03613ce857505060408051808201909152600a81526942726f776e204875657360b01b602082015290565b6002826007811115613cfc57613cfc615039565b03613d215750506040805180820190915260048152635761767960e01b602082015290565b6003826007811115613d3557613d35615039565b03613d6457505060408051808201909152600e81526d53686f6f74696e6720537461727360901b602082015290565b6006826007811115613d7857613d78615039565b03613da257505060408051808201909152600981526815d85d9e4811dbdb1960ba1b602082015290565b6005826007811115613db657613db6615039565b03613dea575050604080518082019091526013815272476f6c642053686f6f74696e6720537461727360681b602082015290565b6004826007811115613dfe57613dfe615039565b03613e28575050604080518082019091526009815268476f6c64204875657360b81b602082015290565b6007826007811115613e3c57613e3c615039565b03613c4e57505060408051808201909152600a815269476f6c6420536b69657360b01b602082015290565b6060600082600a811115613e7d57613e7d615039565b03613ea757505060408051808201909152600981526848616c6f2052696e6760b81b602082015290565b600182600a811115613ebb57613ebb615039565b03613ee357505060408051808201909152600781526650616e646f726160c81b602082015290565b600282600a811115613ef757613ef7615039565b03613f1d57505060408051808201909152600581526441746c617360d81b602082015290565b600382600a811115613f3157613f31615039565b03613f575750506040805180820190915260058152644d6574697360d81b602082015290565b600482600a811115613f6b57613f6b615039565b03613f94575050604080518082019091526008815267115b9d1dda5b995960c21b602082015290565b600582600a811115613fa857613fa8615039565b03613fd757505060408051808201909152600e81526d5261696e626f7720436c6f75647360901b602082015290565b600682600a811115613feb57613feb615039565b0361401457505060408051808201909152600881526747616c617469636160c01b602082015290565b600782600a81111561402857614028615039565b0361405257505060408051808201909152600981526841737465726f69647360b81b602082015290565b600882600a81111561406657614066615039565b03614098575050604080518082019091526011815270496e7465727374656c6c61722050696e6b60781b602082015290565b600982600a8111156140ac576140ac615039565b036140e2575050604080518082019091526015815274125b9d195c9cdd195b1b185c8811dc98591a595b9d605a1b602082015290565b600a82600a8111156140f6576140f6615039565b03613c4e575050604080518082019091526011815270125b9d195c9cdd195b1b185c8811dbdb19607a1b602082015290565b6060600082600381111561413e5761413e615039565b0361416557505060408051808201909152600681526521b7b6b6b7b760d11b602082015290565b600182600381111561417957614179615039565b036141a25750506040805180820190915260088152672ab731b7b6b6b7b760c11b602082015290565b60028260038111156141b6576141b6615039565b036141db5750506040805180820190915260048152635261726560e01b602082015290565b60038260038111156141ef576141ef615039565b03613c4e5750506040805180820190915260048152634570696360e01b602082015290565b6060815160000361423357505060408051602081019091526000815290565b6000604051806060016040528060408152602001615ef96040913990506000600384516002614262919061551e565b61426c9190615da0565b614277906004615507565b9050600061428682602061551e565b67ffffffffffffffff81111561429e5761429e614f20565b6040519080825280601f01601f1916602001820160405280156142c8576020820181803683370190505b509050818152600183018586518101602084015b818310156143365760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016142dc565b60038951066001811461435057600281146143615761436d565b613d3d60f01b60011983015261436d565b603d60f81b6000198301525b509398975050505050505050565b6060600c8054610e00906153ac565b60006143946136e5565b90506143a08482612c12565b60008181526020805260409020805484919061ff0019166101008360028111156143cc576143cc615039565b0217905550600081815260208052604090208054600160ff1982168117835584929162ff00ff1916176201000083600381111561440b5761440b615039565b02179055509392505050565b806000036144505760008281526020805260408120805463ff000000198116825564ffff0000001916600160201b835b02179055505050565b8060010361449057600082815260208052604090208054630500000063ff000000198216811783556002929164ffff000000191617600160201b83614447565b806002036144d057600082815260208052604090208054630900000063ff000000198216811783556003929164ffff000000191617600160201b83614447565b5060009081526020805260409020805464ffff000000191664070a000000179055565b6144fd8383614863565b61450a600084848461468d565b610fbf5760405162461bcd60e51b8152600401610f1e90615e4c565b600080614534836002615507565b61453f6001866153fc565b61454a906020615507565b614555876008615507565b61455f919061551e565b614569919061551e565b905061457681600261551e565b865110156145bd5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610f1e565b9490940160020151949350505050565b600181111561237b576001600160a01b03841615614613576001600160a01b0384166000908152600360205260408120805483929061460d9084906153fc565b90915550505b6001600160a01b0383161561237b576001600160a01b0383166000908152600360205260408120805483929061464a90849061551e565b909155505050505050565b600080600061466485856149fc565b91509150612d0081614a41565b60008061467d60075490565b9050613c62600780546001019055565b60006001600160a01b0384163b1561478357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906146d1903390899088908890600401615e9e565b6020604051808303816000875af192505050801561470c575060408051601f3d908101601f1916820190925261470991810190615edb565b60015b614769573d80801561473a576040519150601f19603f3d011682016040523d82523d6000602084013e61473f565b606091505b5080516000036147615760405162461bcd60e51b8152600401610f1e90615e4c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612792565b506001612792565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106147ca5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106147f6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061481457662386f26fc10000830492506010015b6305f5e100831061482c576305f5e100830492506008015b612710831061484057612710830492506004015b60648310614852576064830492506002015b600a8310610deb5760010192915050565b6001600160a01b0382166148b95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610f1e565b6000818152600260205260409020546001600160a01b03161561491e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f1e565b61492c6000838360016145cd565b6000818152600260205260409020546001600160a01b0316156149915760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f1e565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000808251604103614a325760208301516040840151606085015160001a614a2687828585614b8b565b94509450505050614a3a565b506000905060025b9250929050565b6000816004811115614a5557614a55615039565b03614a5d5750565b6001816004811115614a7157614a71615039565b03614abe5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610f1e565b6002816004811115614ad257614ad2615039565b03614b1f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610f1e565b6003816004811115614b3357614b33615039565b036129215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610f1e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614bc25750600090506003614c46565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614c16573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614c3f57600060019250925050614c46565b9150600090505b94509492505050565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b03198116811461292157600080fd5b600060208284031215614c9557600080fd5b8135614ca081614c6d565b9392505050565b60005b83811015614cc2578181015183820152602001614caa565b50506000910152565b60008151808452614ce3816020860160208601614ca7565b601f01601f19169290920160200192915050565b602081526000614ca06020830184614ccb565b600060208284031215614d1c57600080fd5b5035919050565b6001600160a01b038116811461292157600080fd5b60008060408385031215614d4b57600080fd5b8235614d5681614d23565b946020939093013593505050565b600060208284031215614d7657600080fd5b8135614ca081614d23565b6000610180808385031215614d9557600080fd5b838184011115614da457600080fd5b509092915050565b60008083601f840112614dbe57600080fd5b50813567ffffffffffffffff811115614dd657600080fd5b6020830191508360208260051b8501011115614a3a57600080fd5b60008060008060408587031215614e0757600080fd5b843567ffffffffffffffff80821115614e1f57600080fd5b614e2b88838901614dac565b90965094506020870135915080821115614e4457600080fd5b50614e5187828801614dac565b95989497509550505050565b803560ff81168114613c6257600080fd5b60008060408385031215614e8157600080fd5b82359150614e9160208401614e5d565b90509250929050565b838152602080820184905260c0820190604083018460005b6004811015614ed357815161ffff1683529183019190830190600101614eb2565b50505050949350505050565b600080600060608486031215614ef457600080fd5b8335614eff81614d23565b92506020840135614f0f81614d23565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115614f5157614f51614f20565b604051601f8501601f19908116603f01168101908282118183101715614f7957614f79614f20565b81604052809350858152868686011115614f9257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614fbd57600080fd5b614ca083833560208501614f36565b600080600060608486031215614fe157600080fd5b83359250602084013567ffffffffffffffff8082111561500057600080fd5b61500c87838801614fac565b9350604086013591508082111561502257600080fd5b5061502f86828701614fac565b9150509250925092565b634e487b7160e01b600052602160045260246000fd5b6003811061505f5761505f615039565b9052565b6004811061505f5761505f615039565b600b811061505f5761505f615039565b6008811061505f5761505f615039565b60ff8716815260c081016150aa602083018861504f565b6150b76040830187615063565b6150c46060830186615073565b6150d16080830185615083565b82151560a0830152979650505050505050565b6000602082840312156150f657600080fd5b813567ffffffffffffffff81111561510d57600080fd5b8201601f8101841361511e57600080fd5b61279284823560208401614f36565b815160ff16815260208083015160c083019161514b9084018261504f565b50604083015161515e6040840182615063565b5060608301516151716060840182615073565b5060808301516151846080840182615083565b5060a0928301511515919092015290565b600080604083850312156151a857600080fd5b50508035926020909101359150565b600080602083850312156151ca57600080fd5b823567ffffffffffffffff808211156151e257600080fd5b818501915085601f8301126151f657600080fd5b81358181111561520557600080fd5b86602082850101111561521757600080fd5b60209290920196919550909350505050565b801515811461292157600080fd5b6000806040838503121561524a57600080fd5b823561525581614d23565b9150602083013561526581615229565b809150509250929050565b6000806000806080858703121561528657600080fd5b843561529181614d23565b935060208501356152a181614d23565b925060408501359150606085013567ffffffffffffffff8111156152c457600080fd5b6152d087828801614fac565b91505092959194509250565b6000602082840312156152ee57600080fd5b614ca082614e5d565b803560088110613c6257600080fd5b803560038110613c6257600080fd5b8035600b8110613c6257600080fd5b6000806000806080858703121561533a57600080fd5b615343856152f7565b935061535160208601615306565b925061535f60408601615315565b915060608501356005811061537357600080fd5b939692955090935050565b6000806040838503121561539157600080fd5b823561539c81614d23565b9150602083013561526581614d23565b600181811c908216806153c057607f821691505b6020821081036153e057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610deb57610deb6153e6565b634e487b7160e01b600052603260045260246000fd5b600060018201615437576154376153e6565b5060010190565b60006020828403121561545057600080fd5b614ca082615315565b60ff8181168382160190811115610deb57610deb6153e6565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526028908201527f526571756573746564206e756d626572206f6620746f6b656e73206e6f7420616040820152677661696c61626c6560c01b606082015260800190565b8082028115828204841417610deb57610deb6153e6565b80820180821115610deb57610deb6153e6565b60006020828403121561554357600080fd5b8151614ca081614d23565b61ffff828116828216039080821115612d8757612d876153e6565b600061ffff808316818103615580576155806153e6565b6001019392505050565b61ffff818116838216019080821115612d8757612d876153e6565b6000602082840312156155b757600080fd5b8151614ca081615229565b601f821115610fbf57600081815260208120601f850160051c810160208610156155e95750805b601f850160051c820191505b81811015615608578281556001016155f5565b505050505050565b815167ffffffffffffffff81111561562a5761562a614f20565b61563e8161563884546153ac565b846155c2565b602080601f831160018114615673576000841561565b5750858301515b600019600386901b1c1916600185901b178555615608565b600085815260208120601f198616915b828110156156a257888601518255948401946001909101908401615683565b50858210156156c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff8311156156e8576156e8614f20565b6156fc836156f683546153ac565b836155c2565b6000601f84116001811461573057600085156157185750838201355b600019600387901b1c1916600186901b178355611118565b600083815260209020601f19861690835b828110156157615786850135825560209485019460019092019101615741565b508682101561577e5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156157a257600080fd5b614ca082615306565b6000602082840312156157bd57600080fd5b813560048110614ca057600080fd5b600081516157de818560208601614ca7565b9290920192915050565b693d913730b6b2911d101160b11b8152825160009061580e81600a850160208801614ca7565b61202360f01b600a91840191820152835161583081600c840160208801614ca7565b61088b60f21b600c9290910191820152600e01949350505050565b6000825161585d818460208701614ca7565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e20506c616e6574732061726520636f60608201527f7665746564206c616e6473207468617420686f6c6420746865206b657920746f60808201527f20796f7572207375636365737320696e207468652067616d652e20416371756960a08201527f726520706c616e6574732c20656d6261726b206f6e206578636974696e67206560c08201527f787065646974696f6e732c20616e64206561726e20726577617264732074686160e08201527f742077696c6c20737570657263686172676520796f75722067726f77746820696101008201526c1b88105d1b185b9d1a5ccb888b609a1b61012082015261012d01919050565b600082516159e7818460208701614ca7565b7008985d1d1c9a589d5d195cc88e8816d74b607a1b920191825250601101919050565b60008551615a1c818460208a01614ca7565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a2022458152723632b6b2b73a111610113b30b63ab2911d101160691b60208201528551615a73816033840160208a01614ca7565b62089f4b60ea1b6033929091019182018190527f7b2274726169745f74797065223a20224261636b67726f756e64222c20227661603683015266363ab2911d101160c91b605683018190528651615ad181605d860160208b01614ca7565b605d9301928301919091527f7b2274726169745f74797065223a20224f72626974204e616d65222c2022766160608301526080820152615b26615b1760878301866157cc565b62089f4b60ea1b815260030190565b979650505050505050565b60008551615b43818460208a01614ca7565b80830190507f7b2274726169745f74797065223a20224f72626974222c202276616c7565223a815261101160f11b8060208301528651615b8a816022850160208b01614ca7565b62089f4b60ea1b6022939091019283018190527f7b2274726169745f74797065223a202245766f6c7574696f6e222c202276616c6025840152653ab2911d101160d11b60458401528651615be581604b860160208b01614ca7565b604b9301928301527f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a604e830152606e820152615b26615c2860708301866157cc565b63089f574b60e21b815260040190565b60008351615c4a818460208801614ca7565b691134b6b0b3b2911d101160b11b9083019081528351615c7181600a840160208801614ca7565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251615cc481601d850160208701614ca7565b91909101601d0192915050565b60008651615ce3818460208b01614ca7565b865190830190615cf7818360208b01614ca7565b602f60f81b91018181528651909190615d17816001850160208b01614ca7565b600192019182018190528551615d34816002850160208a01614ca7565b60029201918201528351615d4f816003840160208801614ca7565b632e706e6760e01b60039290910191820152600701979650505050505050565b600060208284031215615d8157600080fd5b614ca0826152f7565b634e487b7160e01b600052601260045260246000fd5b600082615daf57615daf615d8a565b500490565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6bffffffffffffffffffffffff198460601b16815260008351615e23816014850160208801614ca7565b60149201918201929092526034019392505050565b600082615e4757615e47615d8a565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ed190830184614ccb565b9695505050505050565b600060208284031215615eed57600080fd5b8151614ca081614c6d56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220114111fd45f4b500a0e3e221fa19614bcb49aa4483aeeab168dbde9e27ffb9d564736f6c63430008110033697066733a2f2f626166796265696361626d7634636362626c6e6e706671367135726735737232717171346d633779377933747179667a7469777a726b6666357669",
  "deployedBytecode": "0x6080604052600436106104475760003560e01c8063815d544c11610234578063ce3cd9971161012e578063e07fa3c1116100b6578063f0f442601161007a578063f0f4426014610cff578063f2fde38b14610d1f578063f3ad65f414610d3f578063f504764d14610d5f578063fc8d44b714610d7f57600080fd5b8063e07fa3c114610c7f578063e14ca35314610c94578063e3e6a3ef14610ca9578063e985e9c514610cbf578063ea98eb1d14610cdf57600080fd5b8063dc34c041116100fd578063dc34c04114610bfd578063dc53fd9214610c13578063deecbfa814610c29578063dffc857014610c49578063e025107f14610c6957600080fd5b8063ce3cd99714610b88578063ce7cebf214610ba8578063d600671c14610bc8578063da71ff1214610be857600080fd5b8063a1db9782116101bc578063b7b637db11610180578063b7b637db14610ae6578063b88d4fde14610b06578063c040e6b814610b26578063c833e25814610b52578063c87b56dd14610b6857600080fd5b8063a1db978214610a50578063a22cb46514610a70578063a611708e14610a90578063a8f6891614610ab0578063aa880b4f14610ad057600080fd5b806395d89b411161020357806395d89b41146109d157806396330b5f146109e65780639f181b5e14610a13578063a0617ad014610a28578063a0712d6814610a3d57600080fd5b8063815d544c1461095d578063877850ef146109735780638da5cb5b1461099357806395528bc5146109b157600080fd5b80633bdf4ac6116103455780635d82cf6e116102cd5780636cc29174116102915780636cc29174146108d257806370a08231146108f2578063715018a614610912578063790188ae146109275780637bf185aa1461093d57600080fd5b80635d82cf6e1461083d57806361d027b31461085d578063627804af1461087d5780636352211e1461089d5780636c0360eb146108bd57600080fd5b8063518302271161031457806351830227146107a157806355f804b3146107bb57806358d95010146107db5780635b785034146108085780635b8ad4291461082857600080fd5b80633bdf4ac61461070c57806342842e0e146107395780634860d6da146107595780634f558e791461078157600080fd5b806323b872dd116103d35780632f975f04116103975780632f975f04146106955780633246e467146106ab5780633305048f146106c157806335c6aaf8146106e157806338dc3a20146106f757600080fd5b806323b872dd146105bc57806324436f77146105dc57806326c1e750146105ef57806327c7812c1461066057806328d077681461068057600080fd5b806311dceda71161041a57806311dceda7146104fd57806312f269b91461053857806318160ddd14610558578063199854b21461056d5780631b4663e81461058d57600080fd5b806301ffc9a71461044c57806306fdde0314610481578063081812fc146104a3578063095ea7b3146104db575b600080fd5b34801561045857600080fd5b5061046c610467366004614c83565b610d9f565b60405190151581526020015b60405180910390f35b34801561048d57600080fd5b50610496610df1565b6040516104789190614cf7565b3480156104af57600080fd5b506104c36104be366004614d0a565b610e83565b6040516001600160a01b039091168152602001610478565b3480156104e757600080fd5b506104fb6104f6366004614d38565b610eaa565b005b34801561050957600080fd5b5061052a610518366004614d64565b60126020526000908152604090205481565b604051908152602001610478565b34801561054457600080fd5b506104fb610553366004614d81565b610fc4565b34801561056457600080fd5b50600e5461052a565b34801561057957600080fd5b506104fb610588366004614df1565b611042565b34801561059957600080fd5b506105ad6105a8366004614e6e565b61111f565b60405161047893929190614e9a565b3480156105c857600080fd5b506104fb6105d7366004614edf565b611307565b6104fb6105ea366004614fcc565b611338565b3480156105fb57600080fd5b5061064e61060a366004614d0a565b602080526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b60405161047896959493929190615093565b34801561066c57600080fd5b506104fb61067b366004614d64565b6115bf565b34801561068c57600080fd5b506104966115e9565b3480156106a157600080fd5b5061052a601d5481565b3480156106b757600080fd5b5061052a60185481565b3480156106cd57600080fd5b506104fb6106dc366004614e6e565b611677565b3480156106ed57600080fd5b5061052a60145481565b34801561070357600080fd5b50610496611b53565b34801561071857600080fd5b5061052a610727366004614d64565b60156020526000908152604090205481565b34801561074557600080fd5b506104fb610754366004614edf565b611b60565b34801561076557600080fd5b5061076e600481565b60405161ffff9091168152602001610478565b34801561078d57600080fd5b5061046c61079c366004614d0a565b611b7b565b3480156107ad57600080fd5b5060215461046c9060ff1681565b3480156107c757600080fd5b506104fb6107d63660046150e4565b611b9a565b3480156107e757600080fd5b506107fb6107f6366004614d0a565b611bae565b604051610478919061512d565b34801561081457600080fd5b506104fb610823366004615195565b611cf8565b34801561083457600080fd5b506104fb611d0b565b34801561084957600080fd5b506104fb610858366004614d0a565b611d27565b34801561086957600080fd5b50601a546104c3906001600160a01b031681565b34801561088957600080fd5b506104fb610898366004614d38565b611d34565b3480156108a957600080fd5b506104c36108b8366004614d0a565b611e11565b3480156108c957600080fd5b50610496611e71565b3480156108de57600080fd5b506104fb6108ed3660046151b7565b611e7e565b3480156108fe57600080fd5b5061052a61090d366004614d64565b611ec9565b34801561091e57600080fd5b506104fb611f4f565b34801561093357600080fd5b5061052a60105481565b34801561094957600080fd5b506104fb610958366004614df1565b611f63565b34801561096957600080fd5b5061052a600f5481565b34801561097f57600080fd5b506104fb61098e366004614d0a565b612035565b34801561099f57600080fd5b506006546001600160a01b03166104c3565b3480156109bd57600080fd5b506104fb6109cc366004614d0a565b612042565b3480156109dd57600080fd5b5061049661204f565b3480156109f257600080fd5b5061052a610a01366004614d64565b60196020526000908152604090205481565b348015610a1f57600080fd5b5061052a61205e565b348015610a3457600080fd5b5060085461052a565b6104fb610a4b366004614d0a565b61206e565b348015610a5c57600080fd5b506104fb610a6b366004614d38565b6121d1565b348015610a7c57600080fd5b506104fb610a8b366004615237565b612250565b348015610a9c57600080fd5b506104fb610aab366004614d0a565b61225b565b348015610abc57600080fd5b506104fb610acb366004614d0a565b612268565b348015610adc57600080fd5b5061052a60135481565b348015610af257600080fd5b506104fb610b01366004614df1565b612275565b348015610b1257600080fd5b506104fb610b21366004615270565b612349565b348015610b3257600080fd5b50600d54610b409060ff1681565b60405160ff9091168152602001610478565b348015610b5e57600080fd5b5061052a60115481565b348015610b7457600080fd5b50610496610b83366004614d0a565b612381565b348015610b9457600080fd5b506104fb610ba33660046152dc565b61263a565b348015610bb457600080fd5b506104fb610bc33660046150e4565b612658565b348015610bd457600080fd5b50610496610be3366004615324565b61266c565b348015610bf457600080fd5b5061076e603281565b348015610c0957600080fd5b5061052a601e5481565b348015610c1f57600080fd5b5061052a60175481565b348015610c3557600080fd5b506104fb610c44366004614df1565b61279a565b348015610c5557600080fd5b506104fb610c64366004615195565b612871565b348015610c7557600080fd5b5061052a601f5481565b348015610c8b57600080fd5b506104fb612884565b348015610ca057600080fd5b5061052a612924565b348015610cb557600080fd5b5061052a601c5481565b348015610ccb57600080fd5b5061046c610cda36600461537e565b61293b565b348015610ceb57600080fd5b506104fb610cfa366004614d0a565b612969565b348015610d0b57600080fd5b506104fb610d1a366004614d64565b612976565b348015610d2b57600080fd5b506104fb610d3a366004614d64565b6129a0565b348015610d4b57600080fd5b50600b546104c3906001600160a01b031681565b348015610d6b57600080fd5b506104fb610d7a366004614d64565b612a16565b348015610d8b57600080fd5b506104fb610d9a366004614d64565b612a40565b60006001600160e01b031982166380ac58cd60e01b1480610dd057506001600160e01b03198216635b5e139f60e01b145b80610deb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610e00906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c906153ac565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82612aeb565b506000908152600460205260409020546001600160a01b031690565b6000610eb582611e11565b9050806001600160a01b0316836001600160a01b031603610f275760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610f435750610f43813361293b565b610fb55760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610f1e565b610fbf8383612b4a565b505050565b610fcc612bb8565b60015b600d81101561103e5760008181526020805260409020805460ff1916600190811790915561102c90839061100390846153fc565b600c81106110135761101361540f565b6020020160208101906110269190614d64565b82612c12565b8061103681615425565b915050610fcf565b5050565b61104a612bb8565b600d5460ff1660031461108057600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b818110156111185782828281811061109d5761109d61540f565b90506020020160208101906110b2919061543e565b602060008787858181106110c8576110c861540f565b60209081029290920135835250810191909152604001600020805463ff0000001916630100000083600a81111561110157611101615039565b02179055508061111081615425565b915050611083565b5050505050565b60008061112a614c4f565b600085815260208080526040808320815160c08101909252805460ff8082168452929391929184019161010090910416600281111561116b5761116b615039565b600281111561117c5761117c615039565b8152815460209091019062010000900460ff1660038111156111a0576111a0615039565b60038111156111b1576111b1615039565b815281546020909101906301000000900460ff16600a8111156111d6576111d6615039565b600a8111156111e7576111e7615039565b81528154602090910190600160201b900460ff16600781111561120c5761120c615039565b600781111561121d5761121d615039565b81529054600160281b900460ff161515602090910152805190915060006112448783615459565b905060008360400151600381111561125e5761125e615039565b9050603261126c8985615459565b60ff1611156112d75760405162461bcd60e51b815260206004820152603160248201527f506c616e6574733a20506c616e65742063616e6e6f7420626520757067726164604482015270656420746f2074686973206c6576656c2160781b6064820152608401610f1e565b6112e2838383612c2c565b96506112ee8383612d08565b95506112fa8989612d8e565b9450505050509250925092565b611311338261343c565b61132d5760405162461bcd60e51b8152600401610f1e90615472565b610fbf83838361349a565b33321461137f5760405162461bcd60e51b8152602060048201526015602482015274506c616e6574733a206d7573742075736520454f4160581b6044820152606401610f1e565b8280611389612924565b10156113a75760405162461bcd60e51b8152600401610f1e906154bf565b6113b5338484600f5461360b565b6113d257604051638baa579f60e01b815260040160405180910390fd5b600d5460ff1660011461140857600d5460405163353ba46160e11b815260ff909116600482015260016024820152604401610f1e565b600f546001036114b85760115461141f9085615507565b34146114565734601154856114349190615507565b604051631068e6e760e01b815260048101929092526024820152604401610f1e565b6010543360009081526012602052604090205461147490869061551e565b111561149357604051634ecf32dd60e11b815260040160405180910390fd5b33600090815260126020526040812080548692906114b290849061551e565b90915550505b600f54600203611546576014546114cf9085615507565b34146114e45734601454856114349190615507565b6013543360009081526015602052604090205461150290869061551e565b111561152157604051634ecf32dd60e11b815260040160405180910390fd5b336000908152601560205260408120805486929061154090849061551e565b90915550505b83600e6000828254611558919061551e565b90915550600090505b84811015611583576115716136b7565b8061157b81615425565b915050611561565b5060405184815233907f73c70fae6461815259bb17577a08362a747e97f1b952b86e211522d4a24f95379060200160405180910390a250505050565b6115c7612bb8565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b601b80546115f6906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054611622906153ac565b801561166f5780601f106116445761010080835404028352916020019161166f565b820191906000526020600020905b81548152906001019060200180831161165257829003601f168201915b505050505081565b600b54604080516329a33d0560e21b815290516000926001600160a01b03169163a68cf4149160048083019260209291908290030181865afa1580156116c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e59190615531565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b031663786d10866040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117609190615531565b90506000600b60009054906101000a90046001600160a01b03166001600160a01b0316638cc84db76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db9190615531565b9050336117e786611e11565b6001600160a01b03161461180e57604051630a40deb960e31b815260040160405180910390fd5b600d5460ff1660041461184657600d5460405163353ba46160e11b815260ff9091166004808301919091526024820152604401610f1e565b60008581526020805260408120805490919062010000900460ff16600381111561187257611872615039565b825490915060329061188890889060ff16615459565b60ff1611156118aa576040516330531d7360e01b815260040160405180910390fd5b81546000906118c59060ff166118c08982615459565b612d08565b83549091506000906118e49060ff166118de8a82615459565b85612c2c565b905060006118f28a8a612d8e565b85549091506000906001908b908890849061191190849060ff16615459565b92506101000a81548160ff021916908360ff1602179055505b600461ffff821611611a395760008361194460018461554e565b61ffff16600481106119585761195861540f565b602002015161ffff1690508015611a185787546001600160a01b038b169063f5298aca90339061ffff871690610100900460ff16600281111561199d5761199d615039565b6119a890600161551e565b6119b2919061551e565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101849052606401600060405180830381600087803b1580156119ff57600080fd5b505af1158015611a13573d6000803e3d6000fd5b505050505b81611a2281615569565b9250611a31905060038461558a565b92505061192a565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab091906155a5565b508315611b125760405163a7b8b49160e01b8152600481018590526001600160a01b0389169063a7b8b49190602401600060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b505050505b865460405160ff909116908d907f50b7db618c3ed4d1fe8122fce987e7ea6245b41f8e0c64817c0eacaa225fd4eb90600090a3505050505050505050505050565b602280546115f6906153ac565b610fbf83838360405180602001604052806000815250612349565b6000818152600260205260408120546001600160a01b03161515610deb565b611ba2612bb8565b600c61103e8282615610565b611be86040805160c08101909152600080825260208201908152602001600081526020016000815260200160008152600060209091015290565b600082815260208080526040808320815160c08101909252805460ff80821684529293919291840191610100909104166002811115611c2957611c29615039565b6002811115611c3a57611c3a615039565b8152815460209091019062010000900460ff166003811115611c5e57611c5e615039565b6003811115611c6f57611c6f615039565b815281546020909101906301000000900460ff16600a811115611c9457611c94615039565b600a811115611ca557611ca5615039565b81528154602090910190600160201b900460ff166007811115611cca57611cca615039565b6007811115611cdb57611cdb615039565b81529054600160281b900460ff1615156020909101529392505050565b611d00612bb8565b601c91909155601d55565b611d13612bb8565b6021805460ff19811660ff90911615179055565b611d2f612bb8565b601755565b8080611d3e612924565b1015611d5c5760405162461bcd60e51b8152600401610f1e906154bf565b611d64612bb8565b81600e6000828254611d76919061551e565b90915550600090505b82811015611dc8576000611d916136e5565b60008181526020805260409020805460ff191660011790559050611db53282612c12565b5080611dc081615425565b915050611d7f565b50826001600160a01b03167f748a2986091c2034d6e93b6f44f771a79f0e1d6acd8a60c68c17d4e1e2feaed283604051611e0491815260200190565b60405180910390a2505050565b6000818152600260205260408120546001600160a01b031680610deb5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610f1e565b600c80546115f6906153ac565b611e86612bb8565b600d5460ff16600314611ebc57600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b601b610fbf8284836156d0565b60006001600160a01b038216611f335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610f1e565b506001600160a01b031660009081526003602052604090205490565b611f57612bb8565b611f61600061387e565b565b611f6b612bb8565b600d5460ff16600314611fa157600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b8381101561111857828282818110611fbe57611fbe61540f565b9050602002016020810190611fd39190615790565b60206000878785818110611fe957611fe961540f565b60209081029290920135835250810191909152604001600020805461ff00191661010083600281111561201e5761201e615039565b02179055508061202d81615425565b915050611fa4565b61203d612bb8565b600f55565b61204a612bb8565b601055565b606060018054610e00906153ac565b600061206960075490565b905090565b3332146120b55760405162461bcd60e51b8152602060048201526015602482015274506c616e6574733a206d7573742075736520454f4160581b6044820152606401610f1e565b80806120bf612924565b10156120dd5760405162461bcd60e51b8152600401610f1e906154bf565b600d5460ff1660021461211357600d5460405163353ba46160e11b815260ff909116600482015260026024820152604401610f1e565b336000908152601960205260408120805484929061213290849061551e565b9250508190555081600e600082825461214b919061551e565b909155505060175461215d9083615507565b34146121725734601754836114349190615507565b60005b82811015612197576121856136b7565b8061218f81615425565b915050612175565b5060405182815233907f748a2986091c2034d6e93b6f44f771a79f0e1d6acd8a60c68c17d4e1e2feaed29060200160405180910390a25050565b6121d9612bb8565b601a5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af115801561222c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906155a5565b61103e3383836138d0565b612263612bb8565b601455565b612270612bb8565b601155565b61227d612bb8565b600d5460ff166003146122b357600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b81811015611118578282828181106122d0576122d061540f565b90506020020160208101906122e591906157ab565b602060008787858181106122fb576122fb61540f565b60209081029290920135835250810191909152604001600020805462ff000019166201000083600381111561233257612332615039565b02179055508061234181615425565b9150506122b6565b612353338361343c565b61236f5760405162461bcd60e51b8152600401610f1e90615472565b61237b8484848461399e565b50505050565b606061238c82612aeb565b600082815260208080526040808320815160c08101909252805460ff808216845292939192918401916101009091041660028111156123cd576123cd615039565b60028111156123de576123de615039565b8152815460209091019062010000900460ff16600381111561240257612402615039565b600381111561241357612413615039565b815281546020909101906301000000900460ff16600a81111561243857612438615039565b600a81111561244957612449615039565b81528154602090910190600160201b900460ff16600781111561246e5761246e615039565b600781111561247f5761247f615039565b8152905460ff600160281b90910481161515602090920191909152815191925060009182916124ae91166139d1565b9150915060006124bc610df1565b6124c587613b08565b6040516020016124d69291906157e8565b6040516020818303038152906040529050806040516020016124f8919061584b565b60408051601f1981840301815291905260215490915060ff1661253c578060405160200161252691906159d5565b60405160208183030381529060405290506125cc565b8061254a8560200151613b9b565b6125578660800151613c67565b6125648760600151613e67565b6040516020016125779493929190615a0a565b6040516020818303038152906040529050806125968560400151614128565b836125a7876000015160ff16613b08565b6040516020016125ba9493929190615b31565b60405160208183030381529060405290505b61260d816125e88660800151876020015188606001518861266c565b6040516020016125f9929190615c38565b604051602081830303815290604052614214565b9050806040516020016126209190615c8c565b604051602081830303815290604052945050505050919050565b612642612bb8565b600d805460ff191660ff92909216919091179055565b612660612bb8565b602261103e8282615610565b60215460609060ff1661270b5760228054612686906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546126b2906153ac565b80156126ff5780601f106126d4576101008083540402835291602001916126ff565b820191906000526020600020905b8154815290600101906020018083116126e257829003601f168201915b50505050509050612792565b61271361437b565b61272d86600781111561272857612728615039565b613b08565b61274286600281111561272857612728615039565b61275785600481111561272857612728615039565b61276c87600a81111561272857612728615039565b604051602001612780959493929190615cd1565b60405160208183030381529060405290505b949350505050565b6127a2612bb8565b600d5460ff166003146127d857600d5460405163353ba46160e11b815260ff909116600482015260036024820152604401610f1e565b60005b81811015611118578282828181106127f5576127f561540f565b905060200201602081019061280a9190615d6f565b602060008787858181106128205761282061540f565b60209081029290920135835250810191909152604001600020805464ff000000001916600160201b83600781111561285a5761285a615039565b02179055508061286981615425565b9150506127db565b612879612bb8565b601e91909155601f55565b61288c612bb8565b601a546040516000916001600160a01b03169047908381818185875af1925050503d80600081146128d9576040519150601f19603f3d011682016040523d82523d6000602084013e6128de565b606091505b50509050806129215760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610f1e565b50565b600061292e61205e565b60085461206991906153fc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b612971612bb8565b601355565b61297e612bb8565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b6129a8612bb8565b6001600160a01b038116612a0d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610f1e565b6129218161387e565b612a1e612bb8565b601680546001600160a01b0319166001600160a01b0392909216919091179055565b600c600e6000828254612a53919061551e565b90915550600090505b600481101561103e576000612a84836000846003811115612a7f57612a7f615039565b61438a565b9050612a908183614417565b612aa8836001846003811115612a7f57612a7f615039565b9050612ab48183614417565b612acc836002846003811115612a7f57612a7f615039565b9050612ad88183614417565b5080612ae381615425565b915050612a5c565b6000818152600260205260409020546001600160a01b03166129215760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610f1e565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b7f82611e11565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314611f615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f1e565b61103e8282604051806020016040528060008152506144f3565b600060ff84161580612c4457508260ff168460ff1610155b15612c6f57604051635cc08ee560e01b815260ff808616600483015284166024820152604401610f1e565b60ff84165b8360ff16811015612d0057612710601f548460ff16612c939190615507565b612c9e90606461551e565b601e54612cac6001856153fc565b612cb69190615507565b612cc190606461551e565b612ccb9190615507565b601d54612cd89190615507565b612ce29190615da0565b612cec908361551e565b915080612cf881615425565b915050612c74565b509392505050565b600060ff83161580612d2057508160ff168360ff1610155b15612d4b57604051635cc08ee560e01b815260ff808516600483015283166024820152604401610f1e565b60ff83165b8260ff16811015612d875780601c54612d699190615507565b612d73908361551e565b915080612d7f81615425565b915050612d50565b5092915050565b612d96614c4f565b600083815260208080526040808320815160c08101909252805460ff80821684529293919291840191610100909104166002811115612dd757612dd7615039565b6002811115612de857612de8615039565b8152815460209091019062010000900460ff166003811115612e0c57612e0c615039565b6003811115612e1d57612e1d615039565b815281546020909101906301000000900460ff16600a811115612e4257612e42615039565b600a811115612e5357612e53615039565b81528154602090910190600160201b900460ff166007811115612e7857612e78615039565b6007811115612e8957612e89615039565b81529054600160281b900460ff16151560209091015280519091506000612eb08583615459565b9050600083604001516003811115612eca57612eca615039565b90506032612ed88785615459565b60ff161115612efa576040516330531d7360e01b815260040160405180910390fd5b612f97601b8054612f0a906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054612f36906153ac565b8015612f835780601f10612f5857610100808354040283529160200191612f83565b820191906000526020600020905b815481529060010190602001808311612f6657829003601f168201915b50505050508260ff168560ff166000614526565b613034601b8054612fa7906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054612fd3906153ac565b80156130205780601f10612ff557610100808354040283529160200191613020565b820191906000526020600020905b81548152906001019060200180831161300357829003601f168201915b50505050508360ff168560ff166000614526565b61303e919061554e565b61ffff168552601b80546130e39190613056906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054613082906153ac565b80156130cf5780601f106130a4576101008083540402835291602001916130cf565b820191906000526020600020905b8154815290600101906020018083116130b257829003601f168201915b50505050508260ff168560ff166001614526565b613180601b80546130f3906153ac565b80601f016020809104026020016040519081016040528092919081815260200182805461311f906153ac565b801561316c5780601f106131415761010080835404028352916020019161316c565b820191906000526020600020905b81548152906001019060200180831161314f57829003601f168201915b50505050508360ff168560ff166001614526565b61318a919061554e565b61ffff166020860152601b805461323291906131a5906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546131d1906153ac565b801561321e5780601f106131f35761010080835404028352916020019161321e565b820191906000526020600020905b81548152906001019060200180831161320157829003601f168201915b50505050508260ff168560ff166002614526565b6132cf601b8054613242906153ac565b80601f016020809104026020016040519081016040528092919081815260200182805461326e906153ac565b80156132bb5780601f10613290576101008083540402835291602001916132bb565b820191906000526020600020905b81548152906001019060200180831161329e57829003601f168201915b50505050508360ff168560ff166002614526565b6132d9919061554e565b61ffff166040860152601b805461338191906132f4906153ac565b80601f0160208091040260200160405190810160405280929190818152602001828054613320906153ac565b801561336d5780601f106133425761010080835404028352916020019161336d565b820191906000526020600020905b81548152906001019060200180831161335057829003601f168201915b50505050508260ff168560ff166003614526565b61341e601b8054613391906153ac565b80601f01602080910402602001604051908101604052809291908181526020018280546133bd906153ac565b801561340a5780601f106133df5761010080835404028352916020019161340a565b820191906000526020600020905b8154815290600101906020018083116133ed57829003601f168201915b50505050508360ff168560ff166003614526565b613428919061554e565b61ffff166060860152509295945050505050565b60008061344883611e11565b9050806001600160a01b0316846001600160a01b0316148061346f575061346f818561293b565b806127925750836001600160a01b031661348884610e83565b6001600160a01b031614949350505050565b826001600160a01b03166134ad82611e11565b6001600160a01b0316146134d35760405162461bcd60e51b8152600401610f1e90615db4565b6001600160a01b0382166135355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610f1e565b61354283838360016145cd565b826001600160a01b031661355582611e11565b6001600160a01b03161461357b5760405162461bcd60e51b8152600401610f1e90615db4565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008085858460405160200161362393929190615df9565b60405160208183030381529060405280519060200120905061369c84613696836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90614655565b6016546001600160a01b039182169116149695505050505050565b60006136c16136e5565b60008181526020805260409020805460ff1916600117905590506129213382612c12565b6000806136f0612924565b1161373d5760405162461bcd60e51b815260206004820152601860248201527f4e6f206d6f726520746f6b656e7320617661696c61626c6500000000000000006044820152606401610f1e565b600061374761205e565b60085461375491906153fc565b6040516bffffffffffffffffffffffff1933606090811b8216602084015241901b166034820152446048820152456068820152426088820152909150600090829060a8016040516020818303038152906040528051906020012060001c6137bb9190615e38565b6000818152600960205260408120549192509081036137db5750806137ec565b506000818152600960205260409020545b600960006137fb6001866153fc565b8152602001908152602001600020546000036138305761381c6001846153fc565b600083815260096020526040902055613860565b6009600061383f6001866153fc565b81526020808201929092526040908101600090812054858252600990935220555b613868614671565b50600a54613876908261551e565b935050505090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036139315760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610f1e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6139a984848461349a565b6139b58484848461468d565b61237b5760405162461bcd60e51b8152600401610f1e90615e4c565b6000606060148361ffff161015613a08575050604080518082019091526005815264416c70686160d81b6020820152600090915091565b60148361ffff1610158015613a215750601e8361ffff16105b15613a4b5750506040805180820190915260048152634265746160e01b6020820152600190915091565b601e8361ffff1610158015613a64575060288361ffff16105b15613a8f57505060408051808201909152600581526447616d6d6160d81b6020820152600290915091565b60288361ffff1610158015613aa8575060328361ffff16105b15613ad357505060408051808201909152600581526444656c746160d81b6020820152600390915091565b8261ffff16603203613b0357505060408051808201909152600781526622b839b4b637b760c91b60208201526004905b915091565b60606000613b158361478b565b600101905060008167ffffffffffffffff811115613b3557613b35614f20565b6040519080825280601f01601f191660200182016040528015613b5f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084613b6957509392505050565b60606000826002811115613bb157613bb1615039565b03613bd65750506040805180820190915260048152634669726560e01b602082015290565b6002826002811115613bea57613bea615039565b03613c1057505060408051808201909152600581526414dd19595b60da1b602082015290565b6001826002811115613c2457613c24615039565b03613c4e5750506040805180820190915260098152684c696768746e696e6760b81b602082015290565b505060408051602081019091526000815290565b919050565b60606000826007811115613c7d57613c7d615039565b03613ca957505060408051808201909152600b81526a507572706c65204875657360a81b602082015290565b6001826007811115613cbd57613cbd615039565b03613ce857505060408051808201909152600a81526942726f776e204875657360b01b602082015290565b6002826007811115613cfc57613cfc615039565b03613d215750506040805180820190915260048152635761767960e01b602082015290565b6003826007811115613d3557613d35615039565b03613d6457505060408051808201909152600e81526d53686f6f74696e6720537461727360901b602082015290565b6006826007811115613d7857613d78615039565b03613da257505060408051808201909152600981526815d85d9e4811dbdb1960ba1b602082015290565b6005826007811115613db657613db6615039565b03613dea575050604080518082019091526013815272476f6c642053686f6f74696e6720537461727360681b602082015290565b6004826007811115613dfe57613dfe615039565b03613e28575050604080518082019091526009815268476f6c64204875657360b81b602082015290565b6007826007811115613e3c57613e3c615039565b03613c4e57505060408051808201909152600a815269476f6c6420536b69657360b01b602082015290565b6060600082600a811115613e7d57613e7d615039565b03613ea757505060408051808201909152600981526848616c6f2052696e6760b81b602082015290565b600182600a811115613ebb57613ebb615039565b03613ee357505060408051808201909152600781526650616e646f726160c81b602082015290565b600282600a811115613ef757613ef7615039565b03613f1d57505060408051808201909152600581526441746c617360d81b602082015290565b600382600a811115613f3157613f31615039565b03613f575750506040805180820190915260058152644d6574697360d81b602082015290565b600482600a811115613f6b57613f6b615039565b03613f94575050604080518082019091526008815267115b9d1dda5b995960c21b602082015290565b600582600a811115613fa857613fa8615039565b03613fd757505060408051808201909152600e81526d5261696e626f7720436c6f75647360901b602082015290565b600682600a811115613feb57613feb615039565b0361401457505060408051808201909152600881526747616c617469636160c01b602082015290565b600782600a81111561402857614028615039565b0361405257505060408051808201909152600981526841737465726f69647360b81b602082015290565b600882600a81111561406657614066615039565b03614098575050604080518082019091526011815270496e7465727374656c6c61722050696e6b60781b602082015290565b600982600a8111156140ac576140ac615039565b036140e2575050604080518082019091526015815274125b9d195c9cdd195b1b185c8811dc98591a595b9d605a1b602082015290565b600a82600a8111156140f6576140f6615039565b03613c4e575050604080518082019091526011815270125b9d195c9cdd195b1b185c8811dbdb19607a1b602082015290565b6060600082600381111561413e5761413e615039565b0361416557505060408051808201909152600681526521b7b6b6b7b760d11b602082015290565b600182600381111561417957614179615039565b036141a25750506040805180820190915260088152672ab731b7b6b6b7b760c11b602082015290565b60028260038111156141b6576141b6615039565b036141db5750506040805180820190915260048152635261726560e01b602082015290565b60038260038111156141ef576141ef615039565b03613c4e5750506040805180820190915260048152634570696360e01b602082015290565b6060815160000361423357505060408051602081019091526000815290565b6000604051806060016040528060408152602001615ef96040913990506000600384516002614262919061551e565b61426c9190615da0565b614277906004615507565b9050600061428682602061551e565b67ffffffffffffffff81111561429e5761429e614f20565b6040519080825280601f01601f1916602001820160405280156142c8576020820181803683370190505b509050818152600183018586518101602084015b818310156143365760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016142dc565b60038951066001811461435057600281146143615761436d565b613d3d60f01b60011983015261436d565b603d60f81b6000198301525b509398975050505050505050565b6060600c8054610e00906153ac565b60006143946136e5565b90506143a08482612c12565b60008181526020805260409020805484919061ff0019166101008360028111156143cc576143cc615039565b0217905550600081815260208052604090208054600160ff1982168117835584929162ff00ff1916176201000083600381111561440b5761440b615039565b02179055509392505050565b806000036144505760008281526020805260408120805463ff000000198116825564ffff0000001916600160201b835b02179055505050565b8060010361449057600082815260208052604090208054630500000063ff000000198216811783556002929164ffff000000191617600160201b83614447565b806002036144d057600082815260208052604090208054630900000063ff000000198216811783556003929164ffff000000191617600160201b83614447565b5060009081526020805260409020805464ffff000000191664070a000000179055565b6144fd8383614863565b61450a600084848461468d565b610fbf5760405162461bcd60e51b8152600401610f1e90615e4c565b600080614534836002615507565b61453f6001866153fc565b61454a906020615507565b614555876008615507565b61455f919061551e565b614569919061551e565b905061457681600261551e565b865110156145bd5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610f1e565b9490940160020151949350505050565b600181111561237b576001600160a01b03841615614613576001600160a01b0384166000908152600360205260408120805483929061460d9084906153fc565b90915550505b6001600160a01b0383161561237b576001600160a01b0383166000908152600360205260408120805483929061464a90849061551e565b909155505050505050565b600080600061466485856149fc565b91509150612d0081614a41565b60008061467d60075490565b9050613c62600780546001019055565b60006001600160a01b0384163b1561478357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906146d1903390899088908890600401615e9e565b6020604051808303816000875af192505050801561470c575060408051601f3d908101601f1916820190925261470991810190615edb565b60015b614769573d80801561473a576040519150601f19603f3d011682016040523d82523d6000602084013e61473f565b606091505b5080516000036147615760405162461bcd60e51b8152600401610f1e90615e4c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612792565b506001612792565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106147ca5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106147f6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061481457662386f26fc10000830492506010015b6305f5e100831061482c576305f5e100830492506008015b612710831061484057612710830492506004015b60648310614852576064830492506002015b600a8310610deb5760010192915050565b6001600160a01b0382166148b95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610f1e565b6000818152600260205260409020546001600160a01b03161561491e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f1e565b61492c6000838360016145cd565b6000818152600260205260409020546001600160a01b0316156149915760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610f1e565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000808251604103614a325760208301516040840151606085015160001a614a2687828585614b8b565b94509450505050614a3a565b506000905060025b9250929050565b6000816004811115614a5557614a55615039565b03614a5d5750565b6001816004811115614a7157614a71615039565b03614abe5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610f1e565b6002816004811115614ad257614ad2615039565b03614b1f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610f1e565b6003816004811115614b3357614b33615039565b036129215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610f1e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614bc25750600090506003614c46565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614c16573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614c3f57600060019250925050614c46565b9150600090505b94509492505050565b60405180608001604052806004906020820280368337509192915050565b6001600160e01b03198116811461292157600080fd5b600060208284031215614c9557600080fd5b8135614ca081614c6d565b9392505050565b60005b83811015614cc2578181015183820152602001614caa565b50506000910152565b60008151808452614ce3816020860160208601614ca7565b601f01601f19169290920160200192915050565b602081526000614ca06020830184614ccb565b600060208284031215614d1c57600080fd5b5035919050565b6001600160a01b038116811461292157600080fd5b60008060408385031215614d4b57600080fd5b8235614d5681614d23565b946020939093013593505050565b600060208284031215614d7657600080fd5b8135614ca081614d23565b6000610180808385031215614d9557600080fd5b838184011115614da457600080fd5b509092915050565b60008083601f840112614dbe57600080fd5b50813567ffffffffffffffff811115614dd657600080fd5b6020830191508360208260051b8501011115614a3a57600080fd5b60008060008060408587031215614e0757600080fd5b843567ffffffffffffffff80821115614e1f57600080fd5b614e2b88838901614dac565b90965094506020870135915080821115614e4457600080fd5b50614e5187828801614dac565b95989497509550505050565b803560ff81168114613c6257600080fd5b60008060408385031215614e8157600080fd5b82359150614e9160208401614e5d565b90509250929050565b838152602080820184905260c0820190604083018460005b6004811015614ed357815161ffff1683529183019190830190600101614eb2565b50505050949350505050565b600080600060608486031215614ef457600080fd5b8335614eff81614d23565b92506020840135614f0f81614d23565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115614f5157614f51614f20565b604051601f8501601f19908116603f01168101908282118183101715614f7957614f79614f20565b81604052809350858152868686011115614f9257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112614fbd57600080fd5b614ca083833560208501614f36565b600080600060608486031215614fe157600080fd5b83359250602084013567ffffffffffffffff8082111561500057600080fd5b61500c87838801614fac565b9350604086013591508082111561502257600080fd5b5061502f86828701614fac565b9150509250925092565b634e487b7160e01b600052602160045260246000fd5b6003811061505f5761505f615039565b9052565b6004811061505f5761505f615039565b600b811061505f5761505f615039565b6008811061505f5761505f615039565b60ff8716815260c081016150aa602083018861504f565b6150b76040830187615063565b6150c46060830186615073565b6150d16080830185615083565b82151560a0830152979650505050505050565b6000602082840312156150f657600080fd5b813567ffffffffffffffff81111561510d57600080fd5b8201601f8101841361511e57600080fd5b61279284823560208401614f36565b815160ff16815260208083015160c083019161514b9084018261504f565b50604083015161515e6040840182615063565b5060608301516151716060840182615073565b5060808301516151846080840182615083565b5060a0928301511515919092015290565b600080604083850312156151a857600080fd5b50508035926020909101359150565b600080602083850312156151ca57600080fd5b823567ffffffffffffffff808211156151e257600080fd5b818501915085601f8301126151f657600080fd5b81358181111561520557600080fd5b86602082850101111561521757600080fd5b60209290920196919550909350505050565b801515811461292157600080fd5b6000806040838503121561524a57600080fd5b823561525581614d23565b9150602083013561526581615229565b809150509250929050565b6000806000806080858703121561528657600080fd5b843561529181614d23565b935060208501356152a181614d23565b925060408501359150606085013567ffffffffffffffff8111156152c457600080fd5b6152d087828801614fac565b91505092959194509250565b6000602082840312156152ee57600080fd5b614ca082614e5d565b803560088110613c6257600080fd5b803560038110613c6257600080fd5b8035600b8110613c6257600080fd5b6000806000806080858703121561533a57600080fd5b615343856152f7565b935061535160208601615306565b925061535f60408601615315565b915060608501356005811061537357600080fd5b939692955090935050565b6000806040838503121561539157600080fd5b823561539c81614d23565b9150602083013561526581614d23565b600181811c908216806153c057607f821691505b6020821081036153e057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610deb57610deb6153e6565b634e487b7160e01b600052603260045260246000fd5b600060018201615437576154376153e6565b5060010190565b60006020828403121561545057600080fd5b614ca082615315565b60ff8181168382160190811115610deb57610deb6153e6565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526028908201527f526571756573746564206e756d626572206f6620746f6b656e73206e6f7420616040820152677661696c61626c6560c01b606082015260800190565b8082028115828204841417610deb57610deb6153e6565b80820180821115610deb57610deb6153e6565b60006020828403121561554357600080fd5b8151614ca081614d23565b61ffff828116828216039080821115612d8757612d876153e6565b600061ffff808316818103615580576155806153e6565b6001019392505050565b61ffff818116838216019080821115612d8757612d876153e6565b6000602082840312156155b757600080fd5b8151614ca081615229565b601f821115610fbf57600081815260208120601f850160051c810160208610156155e95750805b601f850160051c820191505b81811015615608578281556001016155f5565b505050505050565b815167ffffffffffffffff81111561562a5761562a614f20565b61563e8161563884546153ac565b846155c2565b602080601f831160018114615673576000841561565b5750858301515b600019600386901b1c1916600185901b178555615608565b600085815260208120601f198616915b828110156156a257888601518255948401946001909101908401615683565b50858210156156c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff8311156156e8576156e8614f20565b6156fc836156f683546153ac565b836155c2565b6000601f84116001811461573057600085156157185750838201355b600019600387901b1c1916600186901b178355611118565b600083815260209020601f19861690835b828110156157615786850135825560209485019460019092019101615741565b508682101561577e5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6000602082840312156157a257600080fd5b614ca082615306565b6000602082840312156157bd57600080fd5b813560048110614ca057600080fd5b600081516157de818560208601614ca7565b9290920192915050565b693d913730b6b2911d101160b11b8152825160009061580e81600a850160208801614ca7565b61202360f01b600a91840191820152835161583081600c840160208801614ca7565b61088b60f21b600c9290910191820152600e01949350505050565b6000825161585d818460208701614ca7565b7f226465736372697074696f6e223a202257656c636f6d6520746f2074686520639201918252507f61707469766174696e67207265616c6d206f662041746c616e7469732c20746860208201527f652067616d652d766572736520616e6420686f6d65206f6620746865206c656760408201527f656e64617279204172676f6e617574732e20506c616e6574732061726520636f60608201527f7665746564206c616e6473207468617420686f6c6420746865206b657920746f60808201527f20796f7572207375636365737320696e207468652067616d652e20416371756960a08201527f726520706c616e6574732c20656d6261726b206f6e206578636974696e67206560c08201527f787065646974696f6e732c20616e64206561726e20726577617264732074686160e08201527f742077696c6c20737570657263686172676520796f75722067726f77746820696101008201526c1b88105d1b185b9d1a5ccb888b609a1b61012082015261012d01919050565b600082516159e7818460208701614ca7565b7008985d1d1c9a589d5d195cc88e8816d74b607a1b920191825250601101919050565b60008551615a1c818460208a01614ca7565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a2022458152723632b6b2b73a111610113b30b63ab2911d101160691b60208201528551615a73816033840160208a01614ca7565b62089f4b60ea1b6033929091019182018190527f7b2274726169745f74797065223a20224261636b67726f756e64222c20227661603683015266363ab2911d101160c91b605683018190528651615ad181605d860160208b01614ca7565b605d9301928301919091527f7b2274726169745f74797065223a20224f72626974204e616d65222c2022766160608301526080820152615b26615b1760878301866157cc565b62089f4b60ea1b815260030190565b979650505050505050565b60008551615b43818460208a01614ca7565b80830190507f7b2274726169745f74797065223a20224f72626974222c202276616c7565223a815261101160f11b8060208301528651615b8a816022850160208b01614ca7565b62089f4b60ea1b6022939091019283018190527f7b2274726169745f74797065223a202245766f6c7574696f6e222c202276616c6025840152653ab2911d101160d11b60458401528651615be581604b860160208b01614ca7565b604b9301928301527f7b2274726169745f74797065223a20224c6576656c222c202276616c7565223a604e830152606e820152615b26615c2860708301866157cc565b63089f574b60e21b815260040190565b60008351615c4a818460208801614ca7565b691134b6b0b3b2911d101160b11b9083019081528351615c7181600a840160208801614ca7565b61227d60f01b600a9290910191820152600c01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251615cc481601d850160208701614ca7565b91909101601d0192915050565b60008651615ce3818460208b01614ca7565b865190830190615cf7818360208b01614ca7565b602f60f81b91018181528651909190615d17816001850160208b01614ca7565b600192019182018190528551615d34816002850160208a01614ca7565b60029201918201528351615d4f816003840160208801614ca7565b632e706e6760e01b60039290910191820152600701979650505050505050565b600060208284031215615d8157600080fd5b614ca0826152f7565b634e487b7160e01b600052601260045260246000fd5b600082615daf57615daf615d8a565b500490565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6bffffffffffffffffffffffff198460601b16815260008351615e23816014850160208801614ca7565b60149201918201929092526034019392505050565b600082615e4757615e47615d8a565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ed190830184614ccb565b9695505050505050565b600060208284031215615eed57600080fd5b8151614ca081614c6d56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220114111fd45f4b500a0e3e221fa19614bcb49aa4483aeeab168dbde9e27ffb9d564736f6c63430008110033",
  "devdoc": {
    "details": "Max Supply of 6000 planetsFirst 12 planets are EPIC planets",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "availableTokenCount()": {
        "details": "Check whether tokens are still available",
        "returns": {
          "_0": "the available token count"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPlanetDetails(uint256)": {
        "details": "Planet details include: level, element, orbit, onExpedition"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(uint256)": {
        "params": {
          "_mintAmount": "Amount that is minted"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAddressRegistry(address)": {
        "params": {
          "_addressRegistry": "The address of the Address Registry"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseCosts(uint256,uint256)": {
        "details": "Set xArgo And Stardust base costs",
        "params": {
          "_stardustBaseCost": "Stardust base cost",
          "_xArgoBaseCost": "xArgo base cost"
        }
      },
      "setBaseURI(string)": {
        "details": "Set Revealed Metadata URI"
      },
      "setLevelUpGemstone(bytes)": {
        "details": "_data is packed as follows:     Cumulative cost for each gemstone tier for each planet type              | Common              | Uncommon            | Rare                | Epic              | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4   | T1   T2   T3   T4     Level 1  | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000     ...     Level 50 | 0122 00af 00e1 0113 | 015c 00d2 010e 014a | 0196 00f5 013b 0181 | 01d0 0118 0168 01b8",
        "params": {
          "_data": "gemstone cost packed in bytes"
        }
      },
      "setPlanetBackgrounds(uint256[],uint8[])": {
        "details": "Set planet backgrounds",
        "params": {
          "_backgrounds": "Backgrounds of planets",
          "_tokenIds": "Token ID of planets"
        }
      },
      "setPlanetElements(uint256[],uint8[])": {
        "details": "Set planet element",
        "params": {
          "_gemstoneTypes": "Element of planets",
          "_tokenIds": "Token ID of planets"
        }
      },
      "setPlanetOrbitNames(uint256[],uint8[])": {
        "details": "Set planet orbit names",
        "params": {
          "_planetOrbitNames": "Orbit Names of planets",
          "_tokenIds": "Token ID of planets"
        }
      },
      "setPlanetOrbits(uint256[],uint8[])": {
        "details": "Set planet orbit",
        "params": {
          "_planetOrbits": "Orbit of planets",
          "_tokenIds": "Token ID of planets"
        }
      },
      "setPublicMintPrice(uint256)": {
        "details": "Set public mint price"
      },
      "setScaling(uint256,uint256)": {
        "details": "Set stardust scaling costs",
        "params": {
          "_stardustBaseCostScaling": "sd base cost scaling",
          "_stardustRarityCostScaling": "Stardust rarity cost scaling"
        }
      },
      "setStage(uint8)": {
        "details": "Set stage of minting"
      },
      "setUnrevealedImageURI(string)": {
        "details": "Set Unrevealed Metadata URI"
      },
      "setVipMaxMintPerWallet(uint256)": {
        "details": "Set vip mint max per wallet"
      },
      "setVipMintPrice(uint256)": {
        "details": "Set vip mint price"
      },
      "setWhitelistMaxMintPerWallet(uint256)": {
        "details": "Set whitelist mint max per wallet"
      },
      "setWhitelistMintPrice(uint256)": {
        "details": "Set whitelist mint price"
      },
      "setWhitelistPhase(uint256)": {
        "params": {
          "_whitelistPhase": "Phase of whitelist"
        }
      },
      "setWhitelistSignerAddress(address)": {
        "details": "Set signer address for whitelist mint"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "toggleReveal()": {
        "details": "Toggle Reveal"
      },
      "tokenCount()": {
        "details": "Get the current token count",
        "returns": {
          "_0": "the created token count"
        }
      },
      "tokenURI(uint256)": {
        "details": "Metadata is stored on-chain"
      },
      "totalMaxSupply()": {
        "details": "Get the max Supply",
        "returns": {
          "_0": "the maximum token count"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradePlanet(uint256,uint8)": {
        "details": "Upgrade a planet by `_levels` levels",
        "params": {
          "_levels": "Number of levels to upgrade planet by",
          "_tokenId": "Token ID of planet"
        }
      },
      "whitelistMint(uint256,bytes,bytes)": {
        "details": "Mint planet (Whitelist only)",
        "params": {
          "_mintAmount": "Amount of planets to mint",
          "nonce": "Unique Nonce",
          "signature": "Signature provided by the signerAddress"
        }
      },
      "withdrawERC20(address,uint256)": {
        "details": "Withdraw ERC20 Tokens From this contract",
        "params": {
          "_amount": "Amount of ERC20 token to withdraw",
          "_tokenAddress": "Address of ERC20 token"
        }
      }
    },
    "title": "Atlantis Planets Mint Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ExceedMaxMintPerWallet()": [
        {
          "notice": "The user has exceeded allowed mint count"
        }
      ],
      "ExceededMaxLevel()": [
        {
          "notice": "The planet has exceeded the max level"
        }
      ],
      "ExceededMaxSupply()": [
        {
          "notice": "The collection has exceeded the max supply"
        }
      ],
      "InvalidSignature()": [
        {
          "notice": "The signature must be by the correct signer"
        }
      ],
      "InvalidStage(uint8,uint8)": [
        {
          "notice": "The minting stage must be correct"
        }
      ],
      "InvalidUpgradeLevel(uint8,uint8)": [
        {
          "notice": "Error thrown when user queries an unknown PlanetId"
        }
      ],
      "NotOwnerOfPlanet()": [
        {
          "notice": "User is not the owner of planet"
        }
      ],
      "UnknownElement()": [
        {
          "notice": "Error thrown when user queries an unknown ElementId"
        }
      ],
      "UnknownOrbit()": [
        {
          "notice": "Error thrown when user queries an unknown OrbitId"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "exists(uint256)": {
        "notice": "Returns if given tokenId exists in AtlantisPlanets"
      },
      "getImageURI(uint8,uint8,uint8,uint8)": {
        "notice": "Get ImageURI"
      },
      "getPlanetDetails(uint256)": {
        "notice": "Get planet details"
      },
      "getUpgradeCosts(uint256,uint8)": {
        "notice": "External function for frontend to retrieve stardust, xArgo, and gemstone costs in 1 multicall"
      },
      "mint(uint256)": {
        "notice": "Public Mint"
      },
      "setAddressRegistry(address)": {
        "notice": "Set the Address Registry"
      },
      "setLevelUpGemstone(bytes)": {
        "notice": "Set level up gemstone costs"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury address"
      },
      "setWhitelistPhase(uint256)": {
        "notice": "Set whitelist phase"
      },
      "tokenURI(uint256)": {
        "notice": "Returns token metadata"
      },
      "totalSupply()": {
        "notice": "Returns total supply of AtlantisPlanets"
      },
      "withdrawFund()": {
        "notice": "Withdraw all CRO from this account to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 392,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 394,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 398,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 402,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 406,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 412,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6943,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_tokenCount",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1830_storage"
      },
      {
        "astId": 6946,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "_totalMaxSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6808,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "tokenMatrix",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6810,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "startFrom",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4160,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(AtlantisAddressRegistry)3797"
      },
      {
        "astId": 4162,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "baseURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 4164,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "stage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint8"
      },
      {
        "astId": 4166,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "currentSupply",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4168,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "whitelistPhase",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4171,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "vipMintMaxPerWallet",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4174,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "vipMintPrice",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4178,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "vipMintCount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4181,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "whitelistMintMaxPerWallet",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4184,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "whitelistMintPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4188,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "whitelistMintCount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4190,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "whitelistSignerAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 4193,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "publicMintPrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 4200,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "publicMintMaxPerWallet",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 4204,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "publicMintCount",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4206,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "treasury",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 4208,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "levelUpGemstone",
        "offset": 0,
        "slot": "27",
        "type": "t_bytes_storage"
      },
      {
        "astId": 4211,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "xArgoBaseCost",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 4214,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "stardustBaseCost",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 4217,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "stardustBaseCostScaling",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 4220,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "stardustRarityCostScaling",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 4225,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "planets",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_struct(Planet)6389_storage)"
      },
      {
        "astId": 4234,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "revealed",
        "offset": 0,
        "slot": "33",
        "type": "t_bool"
      },
      {
        "astId": 4237,
        "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
        "label": "unrevealedImageURI",
        "offset": 0,
        "slot": "34",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AtlantisAddressRegistry)3797": {
        "encoding": "inplace",
        "label": "contract AtlantisAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(Background)6362": {
        "encoding": "inplace",
        "label": "enum AtlantisLib.Background",
        "numberOfBytes": "1"
      },
      "t_enum(Element)6372": {
        "encoding": "inplace",
        "label": "enum AtlantisLib.Element",
        "numberOfBytes": "1"
      },
      "t_enum(Orbit)6341": {
        "encoding": "inplace",
        "label": "enum AtlantisLib.Orbit",
        "numberOfBytes": "1"
      },
      "t_enum(OrbitName)6353": {
        "encoding": "inplace",
        "label": "enum AtlantisLib.OrbitName",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Planet)6389_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AtlantisLib.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)6389_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1830_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)6389_storage": {
        "encoding": "inplace",
        "label": "struct AtlantisLib.Planet",
        "members": [
          {
            "astId": 6374,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6377,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "element",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Element)6372"
          },
          {
            "astId": 6380,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "orbit",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(Orbit)6341"
          },
          {
            "astId": 6383,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "orbitName",
            "offset": 3,
            "slot": "0",
            "type": "t_enum(OrbitName)6353"
          },
          {
            "astId": 6386,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "background",
            "offset": 4,
            "slot": "0",
            "type": "t_enum(Background)6362"
          },
          {
            "astId": 6388,
            "contract": "contracts/MockAtlantisPlanets.sol:MockAtlantisPlanets",
            "label": "onExpedition",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}