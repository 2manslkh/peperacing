{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IResources.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IResources {\r\n    struct MintRequest {\r\n        address to;\r\n        uint256[] ids;\r\n        uint256[] amounts;\r\n        uint256 expire;\r\n        uint256 nonce;\r\n    }\r\n\r\n    function mintWithSig(MintRequest calldata request, bytes calldata signature) external;\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/Sybil.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\nimport \"./interfaces/IResources.sol\";\r\ncontract Sybil {\r\n    \r\n    IResources constant resources = IResources(0xce3f4e59834b5B52B301E075C5B3D427B6884b3d);\r\n\r\n    address public masterWallet;\r\n\r\n    struct BulkTransfer {\r\n    address from;\r\n    address to;\r\n    uint256 id;\r\n    uint256 amount;\r\n    bytes data;\r\n}\r\n\r\n\r\n    constructor(address _masterWallet) {\r\n        masterWallet = _masterWallet;\r\n    }\r\n\r\n\r\n    function bulkMintWithSig(IResources.MintRequest[] calldata requests, bytes[] calldata signatures) external payable {\r\n        uint256 length = requests.length;\r\n        for (uint256 i; i < length; i++) {\r\n            IResources.MintRequest memory request = requests[i];\r\n            bytes memory signature = signatures[i];\r\n            resources.mintWithSig(request, signature);\r\n        }\r\n    }\r\n\r\nfunction bulkSafeTransferFrom(BulkTransfer[] calldata transfers) external {\r\n    require(msg.sender == masterWallet, \"Only the master wallet can trigger this\");\r\n    uint256 length = transfers.length;\r\n    for (uint256 i = 0; i < length; i++) {\r\n        BulkTransfer memory transfer = transfers[i];\r\n\r\n        // Execute the safeTransferFrom for each transfer in the list\r\n        resources.safeTransferFrom(transfer.from, transfer.to, transfer.id, transfer.amount, transfer.data);\r\n    }\r\n}\r\n\r\n function airdropETH(address[] calldata _addresses, uint256[] calldata _amounts) external payable {\r\n        for (uint256 i; i < _addresses.length; i++) {\r\n            payable(_addresses[i]).transfer(_amounts[i]);\r\n        }\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}